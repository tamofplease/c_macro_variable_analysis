<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tableam/index_scan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * index_scan.c
 *		Routines for index scan of orioledb table
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tableam/index_scan.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/index_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeIndexscan.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>init_index_scan_state</name><parameter_list>(<parameter><decl><type><name>OScanState</name> <modifier>*</modifier></type><name>ostate</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>,
					  <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKey</name></type>		<name>scanKeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numScanKeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexRuntimeKeyInfo</name> <modifier>*</modifier></type><name>runtimeKeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numRuntimeKeys</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTScanOpaque</name></type> <name>so</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExecIndexBuildScanKeys</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>indexQuals</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scanKeys</name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>numScanKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>runtimeKeys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numRuntimeKeys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
						   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name></name> <operator>=</operator> <call><name>btbeginscan</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>numScanKeys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>so</name> <operator>=</operator> <operator>(</operator><name>BTScanOpaque</name><operator>)</operator> <name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name><operator>-&gt;</operator><name>opaque</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name><operator>-&gt;</operator><name>parallel_scan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name><operator>-&gt;</operator><name>xs_temp_snap</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>numRuntimeKeys</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecIndexEvalRuntimeKeys</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>, <argument><expr><name>runtimeKeys</name></expr></argument>, <argument><expr><name>numRuntimeKeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>btrescan</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name></name></expr></argument>, <argument><expr><name>scanKeys</name></expr></argument>, <argument><expr><name>numScanKeys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>numArrayKeys</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>BTScanPosIsValid</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>currPos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* punt if we have any unsatisfiable array keys */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>numArrayKeys</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>_bt_start_array_keys</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name></name></expr></argument>,
								 <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>_bt_preprocess_keys</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_tuple_valid</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>scanDir</name></decl></parameter>,
			   <parameter><decl><type><name>OBTreeKeyRange</name> <modifier>*</modifier></type><name>range</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeKeyBound</name> <modifier>*</modifier></type><name>low</name> <init>= <expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>low</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeKeyBound</name> <modifier>*</modifier></type><name>high</name> <init>= <expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>high</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>low</name><operator>-&gt;</operator><name>nkeys</name></name> <operator>==</operator> <name><name>high</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>low</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><call><name>OIndexKeyAttnumToTupleAttnum</name><argument_list>(<argument><expr><name>BTreeKeyLeafTuple</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name> <init>= <expr><call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>low</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>O_VALUE_BOUND_UNBOUNDED</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>o_idx_cmp_range_key_to_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>low</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
											 <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>high</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>O_VALUE_BOUND_UNBOUNDED</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>o_idx_cmp_range_key_to_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>high</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
											 <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>switch_to_next_range</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name></decl></parameter>, <parameter><decl><type><name>OScanState</name> <modifier>*</modifier></type><name>ostate</name></decl></parameter>,
					 <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>tupleCxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBTreeKeyBound</name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTScanOpaque</name></type> <name>so</name> <init>= <expr><operator>(</operator><name>BTScanOpaque</name><operator>)</operator> <name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRangeIsLoaded</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>_bt_advance_array_keys</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>scandesc</name></name></expr></argument>,
										<argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRangeIsLoaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>exact</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>exact</name></name> <operator>=</operator> <call><name>o_key_data_to_key_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name></name></expr></argument>,
											<argument><expr><name><name>so</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>,
											<argument><expr><name><name>so</name><operator>-&gt;</operator><name>numberOfKeys</name></name></expr></argument>,
											<argument><expr><name><name>so</name><operator>-&gt;</operator><name>arrayKeys</name></name></expr></argument>,
											<argument><expr><name><name>indexDescr</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>,
											<argument><expr><name><name>indexDescr</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ostate</name><operator>-&gt;</operator><name>exact</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>bound</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ostate</name><operator>-&gt;</operator><name>scanDir</name></name> <operator>==</operator> <name>ForwardScanDirection</name></expr>
				 ?</condition><then> <expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>low</name></name></expr>
				 </then><else>: <expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>high</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indexDescr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>bound</name></expr></argument>,
												   <argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>,
												   <argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>scanDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_btree_iterator_set_tuple_ctx</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>o_iterate_index</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>indexDescr</name></decl></parameter>, <parameter><decl><type><name>OScanState</name> <modifier>*</modifier></type><name>ostate</name></decl></parameter>,
				<parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name> <modifier>*</modifier></type><name>tupleCsn</name></decl></parameter>,
				<parameter><decl><type><name>MemoryContext</name></type> <name>tupleCxt</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>tup_fetched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ostate</name><operator>-&gt;</operator><name>exact</name></name> <operator>||</operator> <name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>empty</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>switch_to_next_range</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>tup</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBTreeKeyBound</name> <modifier>*</modifier></type><name>bound</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>tup_is_valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ostate</name><operator>-&gt;</operator><name>exact</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>blkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>o_btree_find_tuple_by_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>indexDescr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>low</name></name></expr></argument>,
											<argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>tupleCsn</name></expr></argument>,
											<argument><expr><name>tupleCxt</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>tup_fetched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>bound</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ostate</name><operator>-&gt;</operator><name>scanDir</name></name> <operator>==</operator> <name>ForwardScanDirection</name></expr>
					 ?</condition><then> <expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>high</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>low</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

			<do>do
			<block>{<block_content>
				<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>iterator</name></name></expr></argument>, <argument><expr><name>tupleCsn</name></expr></argument>,
											 <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
											 <argument><expr><name>true</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>tup_is_valid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>tup_is_valid</name> <operator>=</operator> <call><name>is_tuple_valid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>indexDescr</name></expr></argument>,
												  <argument><expr><name><name>ostate</name><operator>-&gt;</operator><name>scanDir</name></name></expr></argument>,
												  <argument><expr><operator>&amp;</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>tup_is_valid</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>tup_fetched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block> while <condition>(<expr><operator>!</operator><name>tup_is_valid</name></expr>)</condition>;</do>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tup_fetched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tup_fetched</name> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>switch_to_next_range</name><argument_list>(<argument><expr><name>indexDescr</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tup_fetched</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>!</operator><name>tup_fetched</name></expr>)</condition>;</do>
	<return>return <expr><name>tup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>o_index_scan_getnext</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OScanState</name> <modifier>*</modifier></type><name>ostate</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
					 <parameter><decl><type><name>CommitSeqNo</name> <modifier>*</modifier></type><name>tupleCsn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scan_primary</name></decl></parameter>,
					 <parameter><decl><type><name>MemoryContext</name></type> <name>tupleCxt</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name><name>ostate</name><operator>-&gt;</operator><name>ixNum</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>o_iterate_index</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>tupleCsn</name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>,
							  <argument><expr><ternary><condition><expr><name><name>ostate</name><operator>-&gt;</operator><name>ixNum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr> ?</condition><then> <expr><name>hint</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scan_primary</name> <operator>||</operator> <call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * if we should fetch tuple from primary and the current index is
		 * secondary
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ostate</name><operator>-&gt;</operator><name>ixNum</name></name> <operator>!=</operator> <name>PrimaryIndexNumber</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OBTreeKeyBound</name></type> <name>bound</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTuple</name></type>		<name>ptup</name></decl>;</decl_stmt>

			<comment type="block">/* fetch primary index key from tuple and search raw tuple */</comment>
			<expr_stmt><expr><call><name>o_fill_pindex_tuple_key_bound</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>blkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>hint</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>ptup</name> <operator>=</operator> <call><name>o_btree_find_tuple_by_key</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>desc</name></expr></argument>,
											 <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>bound</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
											 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>tupleCsn</name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tup</name> <operator>=</operator> <name>ptup</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * in concurrent DELETE/UPDATE it might happen, we should to try
			 * fetch next tuple
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	</block_content>}</block></while>
	<return>return <expr><name>tup</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* fetches next tuple for oIterateDirectModify */</comment>
<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>o_exec_fetch</name><parameter_list>(<parameter><decl><type><name>OScanState</name> <modifier>*</modifier></type><name>ostate</name></decl></parameter>, <parameter><decl><type><name>ScanState</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><call><name>relation_get_descr</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_currentRelation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>scan_primary</name> <init>= <expr><name><name>ostate</name><operator>-&gt;</operator><name>ixNum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name> <operator>||</operator>
	<operator>!</operator><name><name>ostate</name><operator>-&gt;</operator><name>onlyCurIx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tupleCxt</name> <init>= <expr><name><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></init></decl>;</decl_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>BTreeLocationHint</name></type> <name>hint</name> <init>= <expr><block>{<expr><name>OInvalidInMemoryBlkno</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>tupleCsn</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRangeIsLoaded</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ostate</name><operator>-&gt;</operator><name>curKeyRange</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>o_index_scan_getnext</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>ostate</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupleCsn</name></expr></argument>,
									 <argument><expr><name>scan_primary</name></expr></argument>, <argument><expr><name>tupleCxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>tts_orioledb_store_tuple</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
									 <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>tupleCsn</name></expr></argument>,
									 <argument><expr><ternary><condition><expr><name>scan_primary</name></expr> ?</condition><then> <expr><name>PrimaryIndexNumber</name></expr> </then><else>: <expr><name><name>ostate</name><operator>-&gt;</operator><name>ixNum</name></name></expr></else></ternary></expr></argument>,
									 <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>ss</name><operator>-&gt;</operator><name>ss_ScanTupleSlot</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>o_exec_qual</name><argument_list>(<argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></argument>,
						  <argument><expr><name><name>ss</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

	<return>return <expr><name>slot</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* checks quals for a tuple slot */</comment>
<function><type><name>bool</name></type>
<name>o_exec_qual</name><parameter_list>(<parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>, <parameter><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>qual</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>qual</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
	<return>return <expr><call><name>ExecQual</name><argument_list>(<argument><expr><name>qual</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * executes a project for a slot fetched by o_exec_fetch function if it
 * needed.
 */</comment>
<function><type><name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>o_exec_project</name><parameter_list>(<parameter><decl><type><name>ProjectionInfo</name> <modifier>*</modifier></type><name>projInfo</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>,
			   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scanTuple</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>innerTuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>projInfo</name> <operator>||</operator> <call><name>TupIsNull</name><argument_list>(<argument><expr><name>scanTuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>scanTuple</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name>scanTuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name> <operator>=</operator> <name>innerTuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name>projInfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* explain analyze */</comment>

<comment type="block">/* initialize explain analyze counters */</comment>
<function><type><name>void</name></type>
<name>eanalyze_counters_init</name><parameter_list>(<parameter><decl><type><name>OEACallsCounters</name> <modifier>*</modifier></type><name>eacc</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>eacc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>eacc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eacc</name><operator>-&gt;</operator><name>oids</name></name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eacc</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eacc</name><operator>-&gt;</operator><name>nindices</name></name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eacc</name><operator>-&gt;</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>OEACallsCounter</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OEACallsCounter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
												<name><name>eacc</name><operator>-&gt;</operator><name>nindices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* adds explain analyze info for particular index */</comment>
<function><type><name>void</name></type>
<name>eanalyze_counter_explain</name><parameter_list>(<parameter><decl><type><name>OEACallsCounter</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
						 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ix_name</name></decl></parameter>, <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>explain</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>fnames</name><index>[<expr><name>EA_COUNTERS_NUM</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"read"</literal></expr>, <expr><literal type="string">"lock"</literal></expr>, <expr><literal type="string">"evict"</literal></expr>,
	<expr><literal type="string">"write"</literal></expr>, <expr><literal type="string">"load"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name><name>counts</name><index>[<expr><name>EA_COUNTERS_NUM</name></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_first</name></decl>,
				<decl><type ref="prev"/><name>is_null</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>label_upcase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>counter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>counts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>counter</name><operator>-&gt;</operator><name>read</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>counts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>counter</name><operator>-&gt;</operator><name>lock</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>counts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>counter</name><operator>-&gt;</operator><name>evict</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>counts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>counter</name><operator>-&gt;</operator><name>write</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>counts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>counter</name><operator>-&gt;</operator><name>load</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>is_null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EA_COUNTERS_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<comment type="block">/* do not print empty counters */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_null</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
		<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
		<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>after_space</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>label_upcase</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>after_space</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>label_upcase</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>label_upcase</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>after_space</name> <operator>=</operator> <name><name>label_upcase</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
				</block_content>}</block></for>

				<expr_stmt><expr><call><name>ExplainOpenGroup</name><argument_list>(<argument><expr><name>label_upcase</name></expr></argument>, <argument><expr><name>label_upcase</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ix_name</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><literal type="string">"Index Name"</literal></expr></argument>, <argument><expr><name>ix_name</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>is_first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>EA_COUNTERS_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_first</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>explain</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>explain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>explain</name></expr></argument>, <argument><expr><literal type="string">"%s=%d"</literal></expr></argument>, <argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
				<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
				<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>fnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>ExplainPropertyUInteger</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><name>is_first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<switch>switch <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_first</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ExplainPropertyText</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name><name>explain</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>EXPLAIN_FORMAT_JSON</name></expr>:</case>
		<case>case <expr><name>EXPLAIN_FORMAT_XML</name></expr>:</case>
		<case>case <expr><name>EXPLAIN_FORMAT_YAML</name></expr>:</case>
			<expr_stmt><expr><call><name>ExplainCloseGroup</name><argument_list>(<argument><expr><name>label_upcase</name></expr></argument>, <argument><expr><name>label_upcase</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>label_upcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* adds explain analyze info for particular index */</comment>
<function><type><name>void</name></type>
<name>eanalyze_counters_explain</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OEACallsCounters</name> <modifier>*</modifier></type><name>counters</name></decl></parameter>,
						  <parameter><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>eanalyze_counter_explain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counters</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name></expr></argument>,
							 <argument><expr><literal type="string">"Primary pages"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>PrimaryIndexNumber</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>counters</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label</name></expr></argument>, <argument><expr><literal type="string">"Secondary index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>EXPLAIN_FORMAT_TEXT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>label</name></expr></argument>, <argument><expr><literal type="string">" pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>eanalyze_counter_explain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counters</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>label</name><operator>.</operator><name>data</name></name></expr></argument>,
								 <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>eanalyze_counter_explain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counters</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>, <argument><expr><literal type="string">"TOAST pages"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>eanalyze_counter_explain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>counters</name><operator>-&gt;</operator><name>others</name></name></expr></argument>, <argument><expr><literal type="string">"Other pages"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
