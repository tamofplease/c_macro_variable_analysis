<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tuple/format.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * format.c
 * 		Routines for accessing tuples in orioledb format.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tuple/format.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/format.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>

<comment type="block">/* Does att's datatype allow packing into the 1-byte-header varlena format? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATT_IS_PACKABLE</name><parameter_list>(<parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((att)-&gt;attlen == -1 &amp;&amp; (att)-&gt;attstorage != 'p')</cpp:value></cpp:define>

<comment type="block">/* Use this if it's already known varlena */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARLENA_ATT_IS_PACKABLE</name><parameter_list>(<parameter><type><name>att</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((att)-&gt;attstorage != 'p')</cpp:value></cpp:define>

<function><type><name>void</name></type>
<name>o_tuple_init_reader</name><parameter_list>(<parameter><decl><type><name>OTupleReaderState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>,
					<parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>ExprState</name> <modifier>*</modifier><modifier>*</modifier></type><name>defvals_exprstate</name></decl></parameter>,
					<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name> <init>= <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>header</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hasnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <operator>(</operator><name>bits8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>SizeOfOTupleHeader</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>desc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>slow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>defvals_exprstate</name></name> <operator>=</operator> <name>defvals_exprstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>estate</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>o_tuple_next_field_offset</name><parameter_list>(<parameter><decl><type><name>OTupleReaderState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>off</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>slow</name></name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>slow</name></name> <operator>&amp;&amp;</operator>
			<name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>att_align_pointer</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
										   <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>slow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>slow</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>att</name><operator>-&gt;</operator><name>attbyval</name></name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>IS_TOAST_POINTER</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OToastValue</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <call><name>att_addlength_pointer</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>,
										   <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
										   <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>slow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>o_tuple_read_next_field</name><parameter_list>(<parameter><decl><type><name>OTupleReaderState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>off</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>desc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>atthasmissing</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>getmissingattr</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>,
									<argument><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
									<argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>result</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>atthasdef</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ExprState</name>  <modifier>*</modifier></type><name>attrdef_state</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>defvals_exprstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>econtext</name> <operator>=</operator> <call><name>GetPerTupleExprContext</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>attrdef_state</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>defvals_exprstate</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name>attrdef_state</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>&amp;&amp;</operator> <call><name>att_isnull</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>slow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>o_tuple_next_field_offset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>fetchatt</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Pointer</name></type>
<name>o_tuple_read_next_field_ptr</name><parameter_list>(<parameter><decl><type><name>OTupleReaderState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>off</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name> <operator>&gt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>&amp;&amp;</operator> <call><name>att_isnull</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>o_tuple_next_field_offset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>state</name><operator>-&gt;</operator><name>tp</name></name> <operator>+</operator> <name>off</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ItemPointer</name></type>
<name>o_tuple_get_last_iptr</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
					  <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>header</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>header</name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hasnulls</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>att_isnull</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>header</name> <operator>+</operator> <name><name>header</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>spec</name><operator>-&gt;</operator><name>natts</name></name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * nocachegetattr analog for tuples that can consist
 * orioledb toast values (OToastValue). But return just pointer to field
 * in the tuple.
 */</comment>
<function><type><name>Pointer</name></type>
<name>o_toast_nocachegetattr_ptr</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>,
						   <parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>,
						   <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>tup</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>				<comment type="block">/* ptr to data part of tuple */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>slow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* do we have to walk attrs? */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleReaderState</name></type> <name>reader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ----------------
	 *	 Three cases:
	 *
	 *	 1: No nulls and no variable-width attributes.
	 *	 2: Has a null or a var-width AFTER att.
	 *	 3: Has nulls or var-widths BEFORE att.
	 * ----------------
	 */</comment>

	<expr_stmt><expr><name>attnum</name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>tup</name><operator>-&gt;</operator><name>hasnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * there's a null somewhere in the tuple
		 *
		 * check to see if any preceding bits are null...
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>byte</name> <init>= <expr><name>attnum</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>finalbit</name> <init>= <expr><name>attnum</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bits8</name>	   <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>(</operator><name>bits8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<comment type="block">/* check for nulls "before" final bit of last byte */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>~</operator><name><name>bp</name><index>[<expr><name>byte</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>finalbit</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>slow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* check for nulls in any "earlier" bytes */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>byte</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>slow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name><name>tup</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slow</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If we get here, there are no nulls up to and including the target
		 * attribute.  If we have a cached offset, we can use it.
		 */</comment>
		<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>tp</name> <operator>+</operator> <name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>o_tuple_init_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>attnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_tuple_read_next_field_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * nocachegetattr analog for tuples that can consist
 * orioledb toast values (OToastValue).
 */</comment>
<function><type><name>Datum</name></type>
<name>o_toast_nocachegetattr</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>,
					   <parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>,
					   <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>tup</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>				<comment type="block">/* ptr to data part of tuple */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>slow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* do we have to walk attrs? */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleReaderState</name></type> <name>reader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name> <init>= <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_null</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ----------------
	 *	 Three cases:
	 *
	 *	 1: No nulls and no variable-width attributes.
	 *	 2: Has a null or a var-width AFTER att.
	 *	 3: Has nulls or var-widths BEFORE att.
	 * ----------------
	 */</comment>

	<expr_stmt><expr><name>attnum</name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>tup</name><operator>-&gt;</operator><name>hasnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * there's a null somewhere in the tuple
		 *
		 * check to see if any preceding bits are null...
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>byte</name> <init>= <expr><name>attnum</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>finalbit</name> <init>= <expr><name>attnum</name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bits8</name>	   <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>(</operator><name>bits8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<comment type="block">/* check for nulls "before" final bit of last byte */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>~</operator><name><name>bp</name><index>[<expr><name>byte</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>finalbit</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>slow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* check for nulls in any "earlier" bytes */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>byte</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>bp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>slow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name><name>tup</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slow</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If we get here, there are no nulls up to and including the target
		 * attribute.  If we have a cached offset, we can use it.
		 */</comment>
		<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>fetchatt</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>tp</name> <operator>+</operator> <name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>o_tuple_init_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>attnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_tuple_read_next_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_tuple_get_data</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>header</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>hoff</name> <init>= <expr><ternary><condition><expr><name>SizeOfOTupleHeader</name> <operator>+</operator> <name><name>header</name><operator>-&gt;</operator><name>hasnulls</name></name></expr> ?</condition><then> <expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>hoff</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>hoff</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * toast_compute_data_size
 *		Determine size of the data area of a tuple to be constructed
 */</comment>
<function><type><specifier>static</specifier> <name>Size</name></type>
<name>o_tuple_compute_data_size</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl></parameter>,
						  <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>to_toast</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>natts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>data_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>off</name> <init>= <expr><ternary><condition><expr><name>iptr</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>val</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>atti</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iptr</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>to_toast</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>to_toast</name><index>[<expr><name>i</name> <operator>-</operator> <name>off</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>data_length</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OToastValue</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>isnull</name><index>[<expr><name>i</name> <operator>-</operator> <name>off</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name> <operator>-</operator> <name>off</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>atti</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ATT_IS_PACKABLE</name><argument_list>(<argument><expr><name>atti</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>VARATT_CAN_MAKE_SHORT</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * we're anticipating converting to a short varlena header, so
			 * adjust length and don't count any alignment
			 */</comment>
			<expr_stmt><expr><name>data_length</name> <operator>+=</operator> <call><name>VARATT_CONVERTED_SHORT_SIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>atti</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
				 <call><name>VARATT_IS_EXTERNAL_EXPANDED</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * we want to flatten the expanded value so that the constructed
			 * tuple doesn't depend on it
			 */</comment>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name><name>atti</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>+=</operator> <call><name>EOH_get_flat_size</name><argument_list>(<argument><expr><call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>att_align_datum</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name><name>atti</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>,
										  <argument><expr><name><name>atti</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>att_addlength_datum</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name><name>atti</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>,
											  <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>data_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>o_new_tuple_size</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
				 <parameter><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>version</name></decl></parameter>,
				 <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>to_toast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>fixedFormat</name> <init>= <expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>natts</name></decl>,
				<decl><type ref="prev"/><name>off</name> <init>= <expr><ternary><condition><expr><name>iptr</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for nulls
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>isnull</name><index>[<expr><name>i</name> <operator>-</operator> <name>off</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fixedFormat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>hasnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fixedFormat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Determine total space needed
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fixedFormat</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>SizeOfOTupleHeader</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hasnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name>natts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>o_tuple_compute_data_size</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>, <argument><expr><name>values</name></expr></argument>,
										<argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>to_toast</name></expr></argument>, <argument><expr><name>natts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Memory is expected to be already zeroed!
 */</comment>
<function><type><name>void</name></type>
<name>o_tuple_fill</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
			 <parameter><decl><type><name>OTuple</name> <modifier>*</modifier></type><name>tuple</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>tuple_size</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>version</name></decl></parameter>,
			 <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>to_toast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>tup</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bits8</name>	   <modifier>*</modifier></type><name>bitP</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bits8</name></type>		<name>bitmask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>attOff</name> <init>= <expr><ternary><condition><expr><name>iptr</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>fixedFormat</name> <init>= <expr><operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Check for nulls
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>attOff</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>isnull</name><index>[<expr><name>i</name> <operator>-</operator> <name>attOff</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fixedFormat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>hasnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fixedFormat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fixedFormat</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tup</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>=</operator> <name>hasnull</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>tuple_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name>natts</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>SizeOfOTupleHeader</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hasnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name>natts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>hoff</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hasnull</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>bitP</name> <operator>=</operator> <operator>(</operator><name>bits8</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>SizeOfOTupleHeader</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <name>HIGHBIT</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* just to keep compiler quiet */</comment>
			<expr_stmt><expr><name>bitP</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>bitP</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>hoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hasnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>formatFlags</name></name> <operator>=</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>tuple</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>hoff</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Size</name></type>		<name>data_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>null</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>cur_to_toast</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iptr</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cur_to_toast</name> <operator>=</operator> <operator>(</operator><name>to_toast</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>to_toast</name><index>[<expr><name>i</name> <operator>-</operator> <name>attOff</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name> <operator>-</operator> <name>attOff</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>null</name> <operator>=</operator> <name><name>isnull</name><index>[<expr><name>i</name> <operator>-</operator> <name>attOff</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>cur_to_toast</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>iptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cur_to_toast</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OToastValue</name></type> <name>toastValue</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>toastValue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>toastValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_TOAST_POINTER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>toastValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>toastValue</name><operator>.</operator><name>raw_size</name></name> <operator>=</operator> <call><name>o_get_raw_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>toastValue</name><operator>.</operator><name>toasted_size</name></name> <operator>=</operator> <call><name>o_get_src_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attcompression</name></name> <operator>==</operator> <name>InvalidCompressionMethod</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attcompression</name></name> <operator>=</operator> <name>default_toast_compression</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<switch>switch <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attcompression</name></name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>TOAST_PGLZ_COMPRESSION</name></expr>:</case>
							<expr_stmt><expr><name><name>toastValue</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name>TOAST_PGLZ_COMPRESSION_ID</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>TOAST_LZ4_COMPRESSION</name></expr>:</case>
							<expr_stmt><expr><name><name>toastValue</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name>TOAST_LZ4_COMPRESSION_ID</name></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<expr_stmt><expr><name><name>toastValue</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name>TOAST_INVALID_COMPRESSION_ID</name></expr>;</expr_stmt>
					</block_content>}</block></switch>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>toastValue</name><operator>.</operator><name>compression</name></name> <operator>=</operator> <name>TOAST_INVALID_COMPRESSION_ID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OToastValue</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toastValue</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>hasnull</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>bitmask</name> <operator>!=</operator> <name>HIGHBIT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>bitmask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>bitP</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>bitP</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>null</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><operator>*</operator><name>bitP</name> <operator>|=</operator> <name>bitmask</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cur_to_toast</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>data_length</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>


		<comment type="block">/*
		 * XXX we use the att_align macros on the pointer value itself, not on
		 * an offset.  This is a bit of a hack.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* pass-by-value */</comment>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>store_att_byval</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* varlena */</comment>
			<decl_stmt><decl><type><name>Pointer</name></type>		<name>val</name> <init>= <expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_EXPANDED</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * we want to flatten the expanded value so that the
					 * constructed tuple doesn't depend on it
					 */</comment>
					<decl_stmt><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eoh</name> <init>= <expr><call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
													  <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>EOH_get_flat_size</name><argument_list>(<argument><expr><name>eoh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>EOH_flatten_into</name><argument_list>(<argument><expr><name>eoh</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* no alignment, since it's short by definition */</comment>
					<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARSIZE_EXTERNAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_SHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* no alignment for short varlenas */</comment>
				<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARSIZE_SHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>VARLENA_ATT_IS_PACKABLE</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>VARATT_CAN_MAKE_SHORT</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* convert to short varlena -- no alignment */</comment>
				<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARATT_CONVERTED_SHORT_SIZE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SET_VARSIZE_SHORT</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* full 4-byte header varlena */</comment>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
												  <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* cstring ... never needs alignment */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* fixed-length pass-by-reference */</comment>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>data_length</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>data</name> <operator>-</operator> <name><name>tuple</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>==</operator> <name>tuple_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>o_form_tuple</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
			 <parameter><decl><type><name>uint32</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>o_new_tuple_size</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tuple_fill</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint32</name></type>
<name>o_tuple_get_version</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tuple_set_version</name><parameter_list>(<parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>OTuple</name> <modifier>*</modifier></type><name>tuple</name></decl></parameter>,
					<parameter><decl><type><name>uint32</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>header</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name><name>tuple</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tuple</name><operator>-&gt;</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTupleHeaderData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>formatFlags</name></name> <operator>|=</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTupleHeaderData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTupleHeaderData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTupleHeaderData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
			<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>formatFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>OTupleHeaderData</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name><name>spec</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTupleHeaderData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>spec</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hasnulls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tuple_set_ctid</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name> <init>= <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleHeader</name></type> <name>header</name> <init>= <expr><operator>(</operator><name>OTupleHeader</name><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>&amp;</operator> <name>O_TUPLE_FLAGS_FIXED_FORMAT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>data</name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>header</name><operator>-&gt;</operator><name>hasnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ItemPointer</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>SizeOfOTupleHeader</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>BITMAPLEN</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ItemPointer</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>+</operator> <name>SizeOfOTupleHeader</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
