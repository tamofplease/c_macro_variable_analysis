<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tuple/slot.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * slot.c
 * 		Routines for orioledb tuple slot implementation
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tuple/slot.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/detoast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/toast_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/itemptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/expandeddatum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tts_orioledb_init_reader</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tts_orioledb_get_index_values</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
										  <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
										  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leaf</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_init</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>pageChangeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>estate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_release</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_clear</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>TTS_SHOULDFREE</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TTS_FLAG_SHOULDFREE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
					<decl><type ref="prev"/><name>natts</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>detoasted</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>detoasted</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>detoasted</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>blkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>hint</name><operator>.</operator><name>pageChangeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>|=</operator> <name>TTS_FLAG_EMPTY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>tts_orioledb_make_key</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>key</name><index>[<expr><name>INDEX_MAX_KEYS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><name>INDEX_MAX_KEYS</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>id</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ctid_off</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>attindex</name> <init>= <expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ctid_off</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
			<comment type="block">/* PK attributes shouldn't be external or compressed */</comment>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>,
								<argument><expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>ctid_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>attindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>attindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>attindex</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>attindex</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_form_tuple</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
						  <argument><expr><operator>(</operator><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name><operator>)</operator><operator>-&gt;</operator><name>version</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>alloc_to_toast_vfree_detoasted</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>totalNatts</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>=</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>,
											 <argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>totalNatts</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator>
											 <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>totalNatts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>totalNatts</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>detoasted</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>totalNatts</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Attribute values are readily available in tts_values and tts_isnull array
 * in a OTableSlot. So there should be no need to call either of the
 * following two functions.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_getsomeattrs</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__natts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name></decl>,
				<decl><type ref="prev"/><name>attnum</name></decl>,
				<decl><type ref="prev"/><name>ctid_off</name></decl>,
				<decl><type ref="prev"/><name>res_ctidoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>isnull</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hastoast</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__natts</name> <operator>&lt;=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>||</operator> <call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaryIsCtid</name> <operator>&amp;&amp;</operator> <name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ctid_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ctid_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>res_ctidoff</name> <operator>=</operator> <ternary><condition><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaryIsCtid</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>tdtypeid</name></name> <operator>==</operator> <name>RECORDOID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>,
					<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>__natts</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init><expr><name>attnum</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name></expr>;</init> <condition><expr><name>attnum</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>thisatt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>res_attnum</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>table_order</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res_attnum</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>attnum</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>res_attnum</name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>tdtypeid</name></name> <operator>==</operator> <name>RECORDOID</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res_attnum</name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>res_attnum</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>attnum</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>res_attnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>res_attnum</name></expr>]</index></name> <operator>=</operator> <call><name>o_tuple_read_next_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oslot</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
														 <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>res_attnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name> <operator>&amp;&amp;</operator> <name><name>oslot</name><operator>-&gt;</operator><name>table_order</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>thisatt</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>thisatt</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isnull</name><index>[<expr><name>res_attnum</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>thisatt</name><operator>-&gt;</operator><name>attbyval</name></name> <operator>&amp;&amp;</operator> <name><name>thisatt</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name> <init>= <expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>res_attnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>IS_TOAST_POINTER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>hastoast</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>natts</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>natts</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>maxTableAttnum</name></name> <operator>-</operator> <name>ctid_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name>		<name>iptr_value</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>iptr_null</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>iptr_value</name> <operator>=</operator> <call><name>o_tuple_read_next_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oslot</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>iptr_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>iptr_null</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>,
						  <argument><expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>iptr_value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>hastoast</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>pkey</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>alloc_to_toast_vfree_detoasted</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>tts_orioledb_make_key</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>attnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>attnum</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>thisatt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>thisatt</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isnull</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>thisatt</name><operator>-&gt;</operator><name>attbyval</name></name> <operator>&amp;&amp;</operator> <name><name>thisatt</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name> <init>= <expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>attnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>IS_TOAST_POINTER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OToastValue</name></type> <name>toastValue</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>toastValue</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>toastValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>values</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>=</operator> <call><name>create_o_toast_external</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>,
															 <argument><expr><name>attnum</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>res_ctidoff</name></expr></argument>,
															 <argument><expr><operator>&amp;</operator><name>toastValue</name></expr></argument>,
															 <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>attnum</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>pkey</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>attnum</name> <operator>==</operator> <name>natts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>=</operator> <name>natts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>tts_orioledb_getsysattr</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <name>RowIdAttributeNumber</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>INDEX_MAX_KEYS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnulls</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>INDEX_MAX_KEYS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>result_size</name></decl>,
					<decl><type ref="prev"/><name>tuple_size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ORowIdAddendumNonCtid</name></type> <name>addNonCtid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>descr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctid_off</name> <operator>=</operator> <ternary><condition><expr><name><name>id</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ORowIdAddendumCtid</name></type> <name>addCtid</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>addCtid</name><operator>.</operator><name>hint</name></name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>hint</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>addCtid</name><operator>.</operator><name>csn</name></name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>csn</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>addCtid</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

			<comment type="block">/* Ctid primary key: give hint + tid as rowid */</comment>
			<expr_stmt><expr><name>result_size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>VARHDRSZ</name></expr></argument>)</argument_list></call> <operator>+</operator>
				<call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORowIdAddendumCtid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator>
				<sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>result</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addCtid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORowIdAddendumCtid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORowIdAddendumCtid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * General-case primary key: prepend tuple with maxaligned hint.
		 */</comment>
		<expr_stmt><expr><call><name>tts_orioledb_getsomeattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>maxTableAttnum</name></name> <operator>-</operator> <name>ctid_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tts_orioledb_get_index_values</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple_size</name> <operator>=</operator> <call><name>o_new_tuple_size</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
									  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
									  <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnulls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result_size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>VARHDRSZ</name></expr></argument>)</argument_list></call> <operator>+</operator>
			<call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORowIdAddendumNonCtid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result_size</name> <operator>+=</operator> <name>tuple_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>result</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORowIdAddendumNonCtid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_tuple_fill</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
					 <argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><name>tuple_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnulls</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>addNonCtid</name><operator>.</operator><name>csn</name></name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>csn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>addNonCtid</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>tuple</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>addNonCtid</name><operator>.</operator><name>hint</name></name> <operator>=</operator> <name><name>oslot</name><operator>-&gt;</operator><name>hint</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addNonCtid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORowIdAddendumNonCtid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>rowid</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
		<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"virtual tuple table slot does not have system attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* silence compiler warnings */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * To materialize a virtual slot all the datums that aren't passed by value
 * have to be copied into the slot's memory context.  To do so, compute the
 * required size, and allocate enough memory to store all attributes.  That's
 * good for cache hit ratio, but more importantly requires only memory
 * allocation/deallocation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_materialize</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>desc</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<comment type="block">/* already materialized */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TTS_SHOULDFREE</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* compute size of memory required */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>natt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>natt</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>natt</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>natt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>val</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attbyval</name></name> <operator>||</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>natt</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>natt</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
			<call><name>VARATT_IS_EXTERNAL_EXPANDED</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We want to flatten the expanded value so that the materialized
			 * slot doesn't depend on it.
			 */</comment>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>EOH_get_flat_size</name><argument_list>(<argument><expr><call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>att_addlength_datum</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* all data is byval */</comment>
	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* allocate memory */</comment>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>|=</operator> <name>TTS_FLAG_SHOULDFREE</name></expr>;</expr_stmt>

	<comment type="block">/* and copy all attributes into the pre-allocated space */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>natt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>natt</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>natt</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>natt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>val</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attbyval</name></name> <operator>||</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>natt</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>natt</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
			<call><name>VARATT_IS_EXTERNAL_EXPANDED</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Size</name></type>		<name>data_length</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * We want to flatten the expanded value so that the materialized
			 * slot doesn't depend on it.
			 */</comment>
			<decl_stmt><decl><type><name>ExpandedObjectHeader</name> <modifier>*</modifier></type><name>eoh</name> <init>= <expr><call><name>DatumGetEOHP</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
											  <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>EOH_get_flat_size</name><argument_list>(<argument><expr><name>eoh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>EOH_flatten_into</name><argument_list>(<argument><expr><name>eoh</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>natt</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>data_length</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>Size</name></type>		<name>data_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data_length</name> <operator>=</operator> <call><name>att_addlength_datum</name><argument_list>(<argument><expr><name>data_length</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>natt</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>data_length</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tts_orioledb_detoast</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>tmp</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
			<call><name>VARATT_IS_EXTENDED</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>alloc_to_toast_vfree_detoasted</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>mctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_copyslot</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>dstslot</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>srcslot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>srcdesc</name> <init>= <expr><name><name>srcslot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>dstoslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>dstslot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>srcdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&lt;=</operator> <name><name>dstslot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tts_orioledb_clear</name><argument_list>(<argument><expr><name>dstslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>srcslot</name><operator>-&gt;</operator><name>tts_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>srcoslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>srcslot</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>srcoslot</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>srcoslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mctx</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><name><name>srcoslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>tupLen</name> <init>= <expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name><name>srcoslot</name><operator>-&gt;</operator><name>descr</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>leafSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>tupLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>srcoslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>tupLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>srcoslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name><name>srcoslot</name><operator>-&gt;</operator><name>descr</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>srcoslot</name><operator>-&gt;</operator><name>rowid</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>rowid</name></name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name><name>srcoslot</name><operator>-&gt;</operator><name>rowid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>rowid</name></name></expr></argument>, <argument><expr><name><name>srcoslot</name><operator>-&gt;</operator><name>rowid</name></name></expr></argument>,
					   <argument><expr><call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name><name>srcoslot</name><operator>-&gt;</operator><name>rowid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TTS_FLAG_EMPTY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>|=</operator> <name>TTS_FLAG_SHOULDFREE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name><name>srcoslot</name><operator>-&gt;</operator><name>csn</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dstoslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>=</operator> <name><name>srcoslot</name><operator>-&gt;</operator><name>ixnum</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tts_orioledb_init_reader</name><argument_list>(<argument><expr><name>dstslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>srcslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>natt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>natt</name> <operator>&lt;</operator> <name><name>srcdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>natt</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>natt</name></expr>]</index></name> <operator>=</operator> <name><name>srcslot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>natt</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>natt</name></expr>]</index></name> <operator>=</operator> <name><name>srcslot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>natt</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>=</operator> <name><name>srcdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dstslot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TTS_FLAG_EMPTY</name></expr>;</expr_stmt>

	<comment type="block">/* make sure storage doesn't depend on external memory */</comment>
	<expr_stmt><expr><call><name>tts_orioledb_materialize</name><argument_list>(<argument><expr><name>dstslot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>tts_orioledb_copy_heap_tuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TTS_EMPTY</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>,
							 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>,
							 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ItemPointerCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MinimalTuple</name></type>
<name>tts_orioledb_copy_minimal_tuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TTS_EMPTY</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>heap_form_minimal_tuple</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>,
								   <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>,
								   <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_init_reader</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_tuple_init_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oslot</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>,
						<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>,
						<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>defvals_exprstate</name></name></expr></argument>,
						<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>o_tuple_read_next_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oslot</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>value</name><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>iptr</name> <operator>=</operator> <call><name>o_tuple_get_last_iptr</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>,
										 <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name> <operator>&amp;&amp;</operator> <name>iptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>o_tdesc</name> <init>= <expr><name><name>oslot</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tdesc</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>table_order</name> <init>= <expr><name><name>o_tdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name><name>tdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>table_order</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>o_tdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>o_attr</name> <init>= <expr><operator>&amp;</operator><name><name>o_tdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>tdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>table_order</name> <operator>=</operator> <name>table_order</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><name><name>o_attr</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>o_attr</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>,
						<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>table_order</name></name> <operator>=</operator> <operator>(</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>tdtypeid</name></name> <operator>!=</operator>
							  <name>RECORDOID</name><operator>)</operator> <operator>||</operator>
			<name>table_order</name> <operator>||</operator> <name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tts_orioledb_store_tuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>,
						 <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
						 <parameter><decl><type><name>int</name></type> <name>ixnum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shouldfree</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>COMMITSEQNO_IS_NORMAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>COMMITSEQNO_IS_INPROGRESS</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_ops</name></name> <operator>==</operator> <operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tts_orioledb_clear</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TTS_SHOULDFREE</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>TTS_EMPTY</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>TTS_FLAG_EMPTY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>=</operator> <name>ixnum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hint</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <operator>*</operator><name>hint</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>tts_orioledb_init_reader</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>shouldfree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>|=</operator> <name>TTS_FLAG_SHOULDFREE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>get_tbl_att</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primaryIsCtid</name></decl></parameter>,
			<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>typid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oSlot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>primaryIsCtid</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>typid</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>typid</name> <operator>=</operator> <name>TIDOID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <name>attnum</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>typid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>typid</name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>isnull</name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>VARATT_IS_EXTENDED</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oSlot</name><operator>-&gt;</operator><name>to_toast</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>alloc_to_toast_vfree_detoasted</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oSlot</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oSlot</name><operator>-&gt;</operator><name>detoasted</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>oSlot</name><operator>-&gt;</operator><name>detoasted</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>oSlot</name><operator>-&gt;</operator><name>detoasted</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>get_idx_expr_att</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
				 <parameter><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>exp_state</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecEvalExprSwitchContext</name><argument_list>(<argument><expr><name>exp_state</name></expr></argument>,
									   <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>econtext</name></name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepares values for index tuple.  Works for leaf and non-leaf tuples of
 * secondary index and non-leaf tuple of primary index.
 *
 * Detoasts all the values and marks detoasted values in 'detoasted' array.
 * If 'detoasted' array isn't given, asserts not values are toasted.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tts_orioledb_get_index_values</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
							  <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leaf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><ternary><condition><expr><name>leaf</name></expr> ?</condition><then> <expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr> </then><else>: <expr><name><name>idx</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>indexpr_item</name> <init>= <expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>expressions_state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>natts</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>INDEX_MAX_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>!=</operator> <name>EXPR_ATTNUM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_tbl_att</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_idx_expr_att</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
										 <argument><expr><operator>(</operator><name>ExprState</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>indexpr_item</name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>indexpr_item</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>expressions_state</name></name></expr></argument>, <argument><expr><name>indexpr_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>tts_orioledb_make_secondary_tuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>leaf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>INDEX_MAX_KEYS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>INDEX_MAX_KEYS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getsomeattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>maxTableAttnum</name></name> <operator>-</operator> <name>ctid_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tts_orioledb_get_index_values</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>leaf</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tupleDesc</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>spec</name> <operator>=</operator> <operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tupleDesc</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>spec</name> <operator>=</operator> <operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>o_form_tuple</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* fills key bound from tuple or index tuple that belongs to current BTree */</comment>
<function><type><name>void</name></type>
<name>tts_orioledb_fill_key_bound</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
							<parameter><decl><type><name>OBTreeKeyBound</name> <modifier>*</modifier></type><name>bound</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>indexpr_item</name> <init>= <expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>expressions_state</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getsomeattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>maxTableAttnum</name></name> <operator>-</operator> <name>ctid_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>nkeys</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bound</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>typid</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>!=</operator> <name>EXPR_ATTNUM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_tbl_att</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_idx_expr_att</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
									 <argument><expr><operator>(</operator><name>ExprState</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>indexpr_item</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>typid</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>indexpr_item</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>expressions_state</name></name></expr></argument>, <argument><expr><name>indexpr_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>typid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>O_VALUE_BOUND_PLAIN_VALUE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>O_VALUE_BOUND_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comparator</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comparator</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>tss_orioledb_print_idx_key</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>id</name><operator>-&gt;</operator><name>nUniqueFields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name><name>id</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableAttnum</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_tbl_att</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>typoutput</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>typisvarlena</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>getTypeOutputInfo</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>typoutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typisvarlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>OidOutputFunctionCall</name><argument_list>(<argument><expr><name>typoutput</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>expected_tuple_len</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tup_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tup_size</name> <operator>=</operator> <call><name>o_new_tuple_size</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>,
								<argument><expr><ternary><condition><expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
								<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
								<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>,
								<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>,
								<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tup_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>can_be_stored_in_index</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tup_size</name> <init>= <expr><call><name>expected_tuple_len</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tup_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tup_size</name> <operator>&lt;=</operator> <name>O_BTREE_MAX_TUPLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tts_orioledb_toast</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>full_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>to_toastn</name></decl>,
				<decl><type ref="prev"/><name>natts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>toast_attn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>has_toasted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>primaryIsCtid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>primaryIsCtid</name> <operator>=</operator> <call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaryIsCtid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctid_off</name> <operator>=</operator> <ternary><condition><expr><name>primaryIsCtid</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* temporary, pointers to TupleDesc attributes */</comment>
	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name>
			<operator>&amp;&amp;</operator> <call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>has_toasted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_toasted</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>full_size</name> <operator>=</operator> <call><name>expected_tuple_len</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* we do not need use TOAST, get minimal tuple from slot and exit */</comment>
	<if_stmt><if>if <condition>(<expr><name>full_size</name> <operator>&lt;=</operator> <name>O_BTREE_MAX_TUPLE_SIZE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_toasted</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if we there than tuple's values should be TOASTed or compressed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>alloc_to_toast_vfree_detoasted</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>full_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>ntoastable</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name><name>descr</name><operator>-&gt;</operator><name>toastable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>ctid_off</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>full_size</name> <operator>=</operator> <call><name>expected_tuple_len</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>natts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if we can not compress tuple, we do not try do it */</comment>
	<if_stmt><if>if <condition>(<expr><name>full_size</name> <operator>&gt;</operator> <name>O_BTREE_MAX_TUPLE_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we there than we must calculate which values should be compressed or
	 * TOASTed.
	 */</comment>
	<expr_stmt><expr><name>to_toastn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* to make it easy now all values must be reTOASTed */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>ntoastable</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>toast_attn</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>toastable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>ctid_off</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>toast_attn</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>to_toastn</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><name>to_toastn</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>ntoastable</name></name> <operator>&amp;&amp;</operator>
		   <operator>!</operator><call><name>can_be_stored_in_index</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>tmp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
					<decl><type ref="prev"/><name>max_attn</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
					<decl><type ref="prev"/><name>var_size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldMctx</name></decl>;</decl_stmt>

		<comment type="block">/* search max unprocessed value */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>ntoastable</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>toast_attn</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>toastable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>ctid_off</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>toast_attn</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>toast_attn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator>
					<call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>var_size</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>var_size</name> <operator>&gt;</operator> <name>max</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>max</name> <operator>=</operator> <name>var_size</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>max_attn</name> <operator>=</operator> <name>toast_attn</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* else we already process it or it is NULL */</comment>
		</block_content>}</block></for>

		<comment type="block">/* we have no values which can be toasted */</comment>
		<if_stmt><if>if <condition>(<expr><name>max_attn</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>max_attn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * if value already compressed or can not be compressed - it must be
		 * toasted
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>max_attn</name></expr>]</index></name></expr></argument>)</argument_list></call>
			<operator>||</operator> <name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>==</operator> <literal type="char">'e'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>max_attn</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>to_toastn</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>oldMctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>toast_compress_datum</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>max_attn</name></expr>]</index></name></expr></argument>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
								   ,<argument><expr><name>TOAST_PGLZ_COMPRESSION</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldMctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* value can not be compressed */</comment>
			<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>max_attn</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>to_toastn</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* we should free it later */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>max_attn</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>max_attn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>max_attn</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>max_attn</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* if tuple with compressed value can be stored without TOAST */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>can_be_stored_in_index</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* else it must be toasted */</comment>
		<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>max_attn</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>to_toastn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>tts_orioledb_form_tuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
						<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>			<comment type="block">/* return tuple */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDescriptor</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>primaryIsCtid</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name> <operator>==</operator> <name>descr</name> <operator>&amp;&amp;</operator> <name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&gt;</operator> <name>MaxTupleAttributeNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TOO_MANY_COLUMNS</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of columns (%d) exceeds limit (%d)"</literal></expr></argument>,
						<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>, <argument><expr><name>MaxTupleAttributeNumber</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>primaryIsCtid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>iptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>iptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>o_new_tuple_size</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>,
						   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>,
						   <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_mcxt</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tuple_fill</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
				 <argument><expr><name>iptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TTS_SHOULDFREE</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_nvalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>vfree</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>descr</name></name> <operator>=</operator> <name>descr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>=</operator> <name>PrimaryIndexNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_flags</name></name> <operator>|=</operator> <name>TTS_FLAG_SHOULDFREE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tts_orioledb_init_reader</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tuple</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>tts_orioledb_form_orphan_tuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
							   <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDescriptor</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>primaryIsCtid</name> <init>= <expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&gt;</operator> <name>MaxTupleAttributeNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TOO_MANY_COLUMNS</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of columns (%d) exceeds limit (%d)"</literal></expr></argument>,
						<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>, <argument><expr><name>MaxTupleAttributeNumber</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>primaryIsCtid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>iptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>iptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>o_new_tuple_size</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
						   <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tuple_fill</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
				 <argument><expr><name>iptr</name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
				 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>, <argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tuple</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tts_orioledb_insert_toast_values</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
								 <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
								 <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>idx_tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaryIsCtid</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx_tup</name> <operator>=</operator> <call><name>tts_orioledb_make_key</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>free</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>o_get_src_value</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_toast_insert</name><argument_list>(<argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
									<argument><expr><name>idx_tup</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ctid_off</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
									<argument><expr><call><name>toast_datum_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>free</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tts_orioledb_toast_sort_add</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
							<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
							<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>sortstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>idx_tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaryIsCtid</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx_tup</name> <operator>=</operator> <call><name>tts_orioledb_make_key</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>oslot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>free</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>o_get_src_value</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>o_toast_sort_add</name><argument_list>(<argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
							 <argument><expr><name>idx_tup</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ctid_off</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
							 <argument><expr><call><name>toast_datum_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sortstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>free</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tts_orioledb_remove_toast_values</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
								 <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
								 <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaryIsCtid</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>ntoastable</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>toast_attn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>toast_attn</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>toastable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>ctid_off</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OToastExternal</name></type> <name>ote</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OFixedKey</name></type>	<name>key</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ote</name></expr></argument>, <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_TOAST_EXTERNAL_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>ote</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>fixedData</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>fixedData</name></name></expr></argument>,
				   <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name></expr></argument>,
				   <argument><expr><name><name>ote</name><operator>.</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_toast_delete</name><argument_list>(<argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
									<argument><expr><name><name>key</name><operator>.</operator><name>tuple</name></name></expr></argument>,
									<argument><expr><name>toast_attn</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ctid_off</name></expr></argument>,
									<argument><expr><name>oxid</name></expr></argument>,
									<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>tts_orioledb_update_toast_values</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>oldSlot</name></decl></parameter>,
								 <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>newSlot</name></decl></parameter>,
								 <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
								 <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>newOSlot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>newSlot</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>idx_tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name>		<name>old_idx_tup</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>primary</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>oldSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>idx_tup</name> <operator>=</operator> <call><name>tts_orioledb_make_key</name><argument_list>(<argument><expr><name>newSlot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>old_idx_tup</name> <operator>=</operator> <call><name>tts_orioledb_make_key</name><argument_list>(<argument><expr><name>oldSlot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tuple_set_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_idx_tup</name></expr></argument>, <argument><expr><call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>idx_tup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* old_idx_tup and new_idx_tup are equals */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>old_idx_tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>o_tuple_size</name><argument_list>(<argument><expr><name>idx_tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>old_idx_tup</name><operator>.</operator><name>formatFlags</name></name> <operator>==</operator> <name><name>idx_tup</name><operator>.</operator><name>formatFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>old_idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>old_idx_tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>old_idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>ntoastable</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>toast_attn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>oldValue</name></decl>,
					<decl><type ref="prev"/><name>newValue</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>newToast</name> <init>= <expr><name>false</name></expr></init></decl>,
					<decl><type ref="prev"/><name>oldToast</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>insertNew</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>deleteOld</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>toast_attn</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>toastable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>ctid_off</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oldSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>oldValue</name> <operator>=</operator> <name><name>oldSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>oldToast</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>newOSlot</name><operator>-&gt;</operator><name>to_toast</name></name> <operator>&amp;&amp;</operator> <name><name>newOSlot</name><operator>-&gt;</operator><name>to_toast</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>newToast</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>newValue</name> <operator>=</operator> <name><name>newSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>toast_attn</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newToast</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>oldToast</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>newToast</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>oldToast</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>insertNew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>newToast</name> <operator>&amp;&amp;</operator> <name>oldToast</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>deleteOld</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>o_toast_equal</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>desc</name></expr></argument>,
							   <argument><expr><name>newValue</name></expr></argument>,
							   <argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* if it is the same toast value than nothing to do */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* update value if it does not equal */</comment>
			<decl_stmt><decl><type><name>bool</name></type>		<name>equal</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>rawSize</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>rawSize</name> <operator>=</operator> <call><name>o_get_raw_size</name><argument_list>(<argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>equal</name> <operator>=</operator> <operator>(</operator><name>rawSize</name> <operator>==</operator> <call><name>o_get_raw_size</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Datum</name></type>		<name>newRawValue</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Datum</name></type>		<name>oldRawValue</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Pointer</name></type>		<name>newPtr</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Pointer</name></type>		<name>oldPtr</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>freeNew</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>freeOld</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>newRawValue</name> <operator>=</operator> <call><name>o_get_raw_value</name><argument_list>(<argument><expr><name>newValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freeNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>oldRawValue</name> <operator>=</operator> <call><name>o_get_raw_value</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freeOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>newPtr</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>newRawValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>oldPtr</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>oldRawValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>newPtr</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>oldPtr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>newPtr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rawSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>equal</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>oldPtr</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>newPtr</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>rawSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>freeNew</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>freeOld</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>oldPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>insertNew</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>deleteOld</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>deleteOld</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OToastExternal</name></type> <name>ote</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OFixedKey</name></type>	<name>key</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ote</name></expr></argument>, <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_TOAST_EXTERNAL_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>ote</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>fixedData</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>fixedData</name></name></expr></argument>,
				   <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name></expr></argument>,
				   <argument><expr><name><name>ote</name><operator>.</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_toast_delete</name><argument_list>(<argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
									<argument><expr><name><name>key</name><operator>.</operator><name>tuple</name></name></expr></argument>,
									<argument><expr><name>toast_attn</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ctid_off</name></expr></argument>,
									<argument><expr><name>oxid</name></expr></argument>,
									<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>insertNew</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Pointer</name></type>		<name>p</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>free</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>o_get_src_value</name><argument_list>(<argument><expr><name>newValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_toast_insert</name><argument_list>(<argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
									<argument><expr><name>idx_tup</name></expr></argument>,
									<argument><expr><name>toast_attn</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>ctid_off</name></expr></argument>,
									<argument><expr><name>p</name></expr></argument>,
									<argument><expr><call><name>toast_datum_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>oxid</name></expr></argument>,
									<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>free</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tts_orioledb_set_ctid</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>iptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableSlot</name> <modifier>*</modifier></type><name>oslot</name> <init>= <expr><operator>(</operator><name>OTableSlot</name> <operator>*</operator><operator>)</operator> <name>slot</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name> <operator>=</operator> <operator>*</operator><name>iptr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>oslot</name><operator>-&gt;</operator><name>ixnum</name></name> <operator>==</operator> <name>PrimaryIndexNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_tuple_set_ctid</name><argument_list>(<argument><expr><name><name>oslot</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>iptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>TupleTableSlotOps</name></type> <name>TTSOpsOrioleDB</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>base_slot_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableSlot</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>tts_orioledb_init</name></expr>,
	<expr><operator>.</operator><name>release</name> <operator>=</operator> <name>tts_orioledb_release</name></expr>,
	<expr><operator>.</operator><name>clear</name> <operator>=</operator> <name>tts_orioledb_clear</name></expr>,
	<expr><operator>.</operator><name>getsomeattrs</name> <operator>=</operator> <name>tts_orioledb_getsomeattrs</name></expr>,
	<expr><operator>.</operator><name>getsysattr</name> <operator>=</operator> <name>tts_orioledb_getsysattr</name></expr>,
	<expr><operator>.</operator><name>materialize</name> <operator>=</operator> <name>tts_orioledb_materialize</name></expr>,
	<expr><operator>.</operator><name>copyslot</name> <operator>=</operator> <name>tts_orioledb_copyslot</name></expr>,

	<comment type="block">/*
	 * A virtual tuple table slot can not "own" a heap tuple or a minimal
	 * tuple.
	 */</comment>
	<expr><operator>.</operator><name>get_heap_tuple</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>get_minimal_tuple</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>copy_heap_tuple</name> <operator>=</operator> <name>tts_orioledb_copy_heap_tuple</name></expr>,
	<expr><operator>.</operator><name>copy_minimal_tuple</name> <operator>=</operator> <name>tts_orioledb_copy_minimal_tuple</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
