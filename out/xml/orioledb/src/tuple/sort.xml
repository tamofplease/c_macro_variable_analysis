<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tuple/sort.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * slot.c
 * 		Implementation of orioledb tuple sorting
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tuple/sort.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/sort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tuplesort.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
}</block></struct></type> <name>OIndexBuildSortArg</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYTUP</name><parameter_list>(<parameter><type><name>state</name></type></parameter>,<parameter><type><name>stup</name></type></parameter>,<parameter><type><name>tup</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(state)-&gt;copytup) (state, stup, tup))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">150000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SortHaveRandomAccess</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;randomAccess)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SortHaveRandomAccess</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((state)-&gt;sortopt &amp; TUPLESORT_RANDOMACCESS)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>comparetup_orioledb_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SortTuple</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SortTuple</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortSupport</name></type> <name>sortKey</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>ltup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>rtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>equal_hasnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>compare</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>datum1</name></decl>,
				<decl><type ref="prev"/><name>datum2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull1</name></decl>,
				<decl><type ref="prev"/><name>isnull2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexBuildSortArg</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>OIndexBuildSortArg</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></init></decl>;</decl_stmt>


	<comment type="block">/* Compare the leading sort key */</comment>
	<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>ApplySortComparator</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>datum1</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>isnull1</name></name></expr></argument>,
								  <argument><expr><name><name>b</name><operator>-&gt;</operator><name>datum1</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>isnull1</name></name></expr></argument>,
								  <argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>compare</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>compare</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Compare additional sort keys */</comment>
	<expr_stmt><expr><name><name>ltup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>a</name><operator>-&gt;</operator><name>tuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ltup</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rtup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>tuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rtup</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupDesc</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>tupDesc</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sortKey</name><operator>-&gt;</operator><name>abbrev_converter</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>sortKey</name><operator>-&gt;</operator><name>ssup_attno</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>datum1</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>ltup</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>datum2</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>rtup</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>ApplySortAbbrevFullComparator</name><argument_list>(<argument><expr><name>datum1</name></expr></argument>, <argument><expr><name>isnull1</name></expr></argument>,
												<argument><expr><name>datum2</name></expr></argument>, <argument><expr><name>isnull2</name></expr></argument>,
												<argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>compare</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>compare</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* they are equal, so we only need to examine one null flag */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>isnull1</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>equal_hasnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>sortKey</name><operator>++</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>nkey</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>nkey</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>nKeys</name></name></expr>;</condition> <incr><expr><name>nkey</name><operator>++</operator></expr><operator>,</operator> <expr><name>sortKey</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>sortKey</name><operator>-&gt;</operator><name>ssup_attno</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>datum1</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>ltup</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>datum2</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>rtup</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>ApplySortComparator</name><argument_list>(<argument><expr><name>datum1</name></expr></argument>, <argument><expr><name>isnull1</name></expr></argument>,
									  <argument><expr><name>datum2</name></expr></argument>, <argument><expr><name>isnull2</name></expr></argument>,
									  <argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>compare</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>compare</name></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* done when we find unequal attributes */</comment>

		<comment type="block">/* they are equal, so we only need to examine one null flag */</comment>
		<if_stmt><if>if <condition>(<expr><name>isnull1</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>equal_hasnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* FIXME: all orioledb indexes should be unique */</comment>

	<comment type="block">/*
	 * If btree has asked us to enforce uniqueness, complain if two equal
	 * tuples are detected (unless there was at least one NULL field).
	 *
	 * It is sufficient to make the test here, because if two tuples are equal
	 * they *must* get compared at some stage of the sort --- otherwise the
	 * sort algorithm wouldn't have checked whether one must appear before the
	 * other.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>enforceUnique</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>equal_hasnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNIQUE_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create unique index \"%s\""</literal></expr></argument>,
						<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Duplicate keys exist."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copytup_orioledb_index</name><parameter_list>(<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>SortTuple</name> <modifier>*</modifier></type><name>stup</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexBuildSortArg</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>OIndexBuildSortArg</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We expect the passed "tup" to be a TupleTableSlot, and form a tuple
	 * using the exported interface for that.
	 */</comment>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>original</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>tup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>stup</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetMemoryChunkContext</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>tuplecontext</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <name>tup</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>tupsize</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tupsize</name> <operator>=</operator> <call><name>o_tuple_size</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>tuplecontext</name></name></expr></argument>, <argument><expr><name>tupsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>tupsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>availMem</name></name> <operator>-=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>original</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
							 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ssup_attno</name></expr></argument>,
							 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tupDesc</name></name></expr></argument>,
							 <argument><expr><name>spec</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>stup</name><operator>-&gt;</operator><name>isnull1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name><operator>-&gt;</operator><name>abbrev_converter</name></name> <operator>||</operator> <name><name>stup</name><operator>-&gt;</operator><name>isnull1</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Store ordinary Datum representation, or NULL value.  If there is a
		 * converter it won't expect NULL values, and cost model is not
		 * required to account for NULL, so in that case we avoid calling
		 * converter and just set datum1 to zeroed representation (to be
		 * consistent, and to support cheap inequality tests for NULL
		 * abbreviated keys).
		 */</comment>
		<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>datum1</name></name> <operator>=</operator> <name>original</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>consider_abort_common</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Store abbreviated key representation */</comment>
		<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>datum1</name></name> <operator>=</operator> <call><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name><operator>-&gt;</operator><name>abbrev_converter</name></name><argument_list>(<argument><expr><name>original</name></expr></argument>,
														 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Abort abbreviation */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>datum1</name></name> <operator>=</operator> <name>original</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Set state to be consistent with never trying abbreviation.
		 *
		 * Alter datum1 representation in already-copied tuples, so as to
		 * ensure a consistent representation (current tuple was just
		 * handled).  It does not matter if some dumped tuples are already
		 * sorted on tape, since serialized tuples lack abbreviated keys
		 * (TSS_BUILDRUNS state prevents control reaching here in any case).
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>memtupcount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SortTuple</name>  <modifier>*</modifier></type><name>mtup</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>memtuples</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>mtup</name><operator>-&gt;</operator><name>tuple</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>mtup</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>original</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
									 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ssup_attno</name></expr></argument>,
									 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tupDesc</name></name></expr></argument>,
									 <argument><expr><name>spec</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name><name>stup</name><operator>-&gt;</operator><name>isnull1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">150000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAPEDECL</name></cpp:macro> <cpp:value>LogicalTape *tape</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAPEREAD</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>LogicalTapeReadExact(tape, (ptr), (len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAPEWRITE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>LogicalTapeWrite(tape, (ptr), (len))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAPEDECL</name></cpp:macro> <cpp:value>int tapenum</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAPEREAD</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>LogicalTapeReadExact(state-&gt;tapeset, tapenum, (ptr), (len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAPEWRITE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>LogicalTapeWrite(state-&gt;tapeset, tapenum, (ptr), (len))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>writetup_orioledb_index</name><parameter_list>(<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>TAPEDECL</name></type></decl></parameter>, <parameter><decl><type><name>SortTuple</name> <modifier>*</modifier></type><name>stup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexBuildSortArg</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>OIndexBuildSortArg</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tuplen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>stup</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuplen</name> <operator>=</operator> <call><name>o_tuple_size</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TAPEWRITE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tuplen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tuplen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TAPEWRITE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TAPEWRITE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SortHaveRandomAccess</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* need trailing length word? */</comment>
		<expr_stmt><expr><call><name>TAPEWRITE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tuplen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tuplen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>slabAllocatorUsed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>availMem</name></name> <operator>+=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>readtup_orioledb_index</name><parameter_list>(<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>SortTuple</name> <modifier>*</modifier></type><name>stup</name></decl></parameter>,
					   <parameter><decl><type><name>TAPEDECL</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexBuildSortArg</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>OIndexBuildSortArg</name> <operator>*</operator><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>id</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>tuplen</name> <init>= <expr><name>len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>tup</name> <init>= <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <call><name>readtup_alloc</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>tuplen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>

	<comment type="block">/* read in the tuple proper */</comment>
	<expr_stmt><expr><call><name>TAPEREAD</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>tuplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TAPEREAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stup</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SortHaveRandomAccess</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* need trailing length word? */</comment>
		<expr_stmt><expr><call><name>TAPEREAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tuplen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tuplen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>tup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>tup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>stup</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
	<comment type="block">/* set up first-column key value */</comment>
	<expr_stmt><expr><name><name>stup</name><operator>-&gt;</operator><name>datum1</name></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
								 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ssup_attno</name></expr></argument>,
								 <argument><expr><name><name>state</name><operator>-&gt;</operator><name>tupDesc</name></name></expr></argument>,
								 <argument><expr><name>spec</name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name><name>stup</name><operator>-&gt;</operator><name>isnull1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Tuplesortstate</name> <modifier>*</modifier></type>
<name>tuplesort_begin_orioledb_index</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>workMem</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>randomAccess</name></decl></parameter>,
							   <parameter><decl><type><name>SortCoordinate</name></type> <name>coordinate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_fields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexBuildSortArg</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SortSupport</name></type> <name>sortKeys</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>key_fields</name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>nFields</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>unique</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>key_fields</name> <operator>-</operator> <name><name>idx</name><operator>-&gt;</operator><name>nPrimaryFields</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>key_fields</name> <operator>-=</operator> <name><name>idx</name><operator>-&gt;</operator><name>nPrimaryFields</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>sortKeys</name> <operator>=</operator> <operator>(</operator><name>SortSupport</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>key_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SortSupportData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>OIndexBuildSortArg</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexBuildSortArg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SortSupport</name></type> <name>sortKey</name> <init>= <expr><operator>&amp;</operator><name><name>sortKeys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_cxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_collation</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_nulls_first</name></name> <operator>=</operator> <name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullfirst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_attno</name></name> <operator>=</operator> <call><name>OIndexKeyAttnumToTupleAttnum</name><argument_list>(<argument><expr><name>BTreeKeyLeafTuple</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>abbreviate</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_reverse</name></name> <operator>=</operator> <operator>!</operator><name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ascending</name></expr>;</expr_stmt>
		<comment type="block">/* FIXME: no abbrev converter yet */</comment>
		<expr_stmt><expr><call><name>o_finish_sort_support_function</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comparator</name></expr></argument>, <argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>tuplesort_begin_custom</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>unique</name></name></expr></argument>,
								   <argument><expr><name>key_fields</name></expr></argument>, <argument><expr><name>sortKeys</name></expr></argument>,
								   <argument><expr><name>workMem</name></expr></argument>, <argument><expr><name>coordinate</name></expr></argument>, <argument><expr><name>randomAccess</name></expr></argument>,
								   <argument><expr><name>comparetup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>copytup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>writetup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>readtup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Tuplesortstate</name> <modifier>*</modifier></type>
<name>tuplesort_begin_orioledb_toast</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>,
							   <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>workMem</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name></type> <name>randomAccess</name></decl></parameter>,
							   <parameter><decl><type><name>SortCoordinate</name></type> <name>coordinate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_fields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexBuildSortArg</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexField</name></type> <name>field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortSupport</name></type> <name>sortKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortSupport</name></type> <name>sortKeys</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>key_fields</name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>sortKeys</name> <operator>=</operator> <operator>(</operator><name>SortSupport</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><name>key_fields</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SortSupportData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>OIndexBuildSortArg</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OIndexBuildSortArg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>primary</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>sortKey</name> <operator>=</operator> <operator>&amp;</operator><name><name>sortKeys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_cxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_collation</name></name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collation</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_nulls_first</name></name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullfirst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_attno</name></name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attnum</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>abbreviate</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_reverse</name></name> <operator>=</operator> <operator>!</operator><name><name>primary</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ascending</name></expr>;</expr_stmt>
		<comment type="block">/* FIXME: no abbrev converter yet */</comment>
		<expr_stmt><expr><call><name>o_finish_sort_support_function</name><argument_list>(<argument><expr><name><name>primary</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comparator</name></expr></argument>, <argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>field</name><operator>.</operator><name>collation</name></name> <operator>=</operator> <name>DEFAULT_COLLATION_OID</name></expr>;</expr_stmt>

	<comment type="block">/* ATTN_POS */</comment>
	<expr_stmt><expr><name>sortKey</name> <operator>=</operator> <operator>&amp;</operator><name><name>sortKeys</name><index>[<expr><name>key_fields</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_cxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_collation</name></name> <operator>=</operator> <name>DEFAULT_COLLATION_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_nulls_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_attno</name></name> <operator>=</operator> <name>key_fields</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>abbreviate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_reverse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>oFillFieldOpClassAndComparator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><name><name>toast</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
								   <argument><expr><name>INT2_BTREE_OPS_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_finish_sort_support_function</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>comparator</name></name></expr></argument>, <argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* OFFSET_POS */</comment>
	<expr_stmt><expr><name>sortKey</name> <operator>=</operator> <operator>&amp;</operator><name><name>sortKeys</name><index>[<expr><name>key_fields</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_cxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_collation</name></name> <operator>=</operator> <name>DEFAULT_COLLATION_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_nulls_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_attno</name></name> <operator>=</operator> <name>key_fields</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>abbreviate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sortKey</name><operator>-&gt;</operator><name>ssup_reverse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>oFillFieldOpClassAndComparator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field</name></expr></argument>, <argument><expr><name><name>toast</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
								   <argument><expr><name>INT4_BTREE_OPS_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_finish_sort_support_function</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>comparator</name></name></expr></argument>, <argument><expr><name>sortKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>tuplesort_begin_custom</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
								   <argument><expr><name>key_fields</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>sortKeys</name></expr></argument>,
								   <argument><expr><name>workMem</name></expr></argument>, <argument><expr><name>coordinate</name></expr></argument>, <argument><expr><name>randomAccess</name></expr></argument>,
								   <argument><expr><name>comparetup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>copytup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>writetup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>readtup_orioledb_index</name></expr></argument>,
								   <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tuplesort_end_orioledb_index</name><parameter_list>(<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplesort_end</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OTuple</name></type>
<name>tuplesort_getotuple</name><parameter_list>(<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forward</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortcontext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortTuple</name></type>	<name>stup</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tuplesort_gettuple_common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>forward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stup</name><operator>.</operator><name>tuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>stup</name><operator>.</operator><name>tuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>stup</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tuplesort_putotuple</name><parameter_list>(<parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>sortcontext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortTuple</name></type>	<name>stup</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Copy the given tuple into memory we control, and decrease availMem.
	 * Then call the common code.
	 */</comment>
	<expr_stmt><expr><name><name>stup</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>tup</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPYTUP</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stup</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplesort_puttuple_common</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
