<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/tuple/toast.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * toast.h
 * 		Routines for orioledb TOAST implementation
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/tuple/toast.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/wal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/sort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/detoast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl>;</decl_stmt>
}</block></struct></type> <name>OTableToastArg</name>;</typedef>

<comment type="block">/*
 * Help functions.
 */</comment>
<comment type="block">/* creates table tuple which can be stored in TOAST BTree */</comment>
<function_decl><type><specifier>static</specifier> <name>OTuple</name></type> <name>o_create_toast_tuple</name><parameter_list>(<parameter><decl><type><name>OToastKey</name></type> <name>tkey</name></decl></parameter>,
								   <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_length</name></decl></parameter>,
								   <parameter><decl><type><name>OTableToastArg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* creates index tuple which can be stored in TOAST BTree */</comment>
<function_decl><type><specifier>static</specifier> <name>OTuple</name></type> <name>o_create_toast_key</name><parameter_list>(<parameter><decl><type><name>OToastKey</name></type> <name>tkey</name></decl></parameter>, <parameter><decl><type><name>OTableToastArg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * prints TOAST table tuple (is_tuple = true)
 * or TOAST index tuple (is_tuple = false
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>toast_tuple_print</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupDesc</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
							  <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>outputFns</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>,
							  <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_tuple</name></decl></parameter>,
							  <parameter><decl><type><name>bool</name></type> <name>printRowVersion</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>o_toast_init_tupdescs</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>ix_primary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>pidx_natts</name> <init>= <expr><name><name>ix_primary</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>pidx_natts</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>toast</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>pidx_natts</name> <operator>+</operator> <name>TOAST_NON_LEAF_FIELDS_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* copies entries from primary index TupleDesc */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pidx_natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TupleDescCopyEntry</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ix_primary</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescCopyEntry</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ix_primary</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * adds new entries
	 */</comment>
	<comment type="block">/* attribute number */</comment>
	<expr_stmt><expr><call><name>o_tables_tupdesc_init_builtin</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>pidx_natts</name> <operator>+</operator> <name>ATTN_POS</name></expr></argument>, <argument><expr><literal type="string">"attnum"</literal></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_tupdesc_init_builtin</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><name>pidx_natts</name> <operator>+</operator> <name>ATTN_POS</name></expr></argument>, <argument><expr><literal type="string">"attnum"</literal></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* offset */</comment>
	<expr_stmt><expr><call><name>o_tables_tupdesc_init_builtin</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>pidx_natts</name> <operator>+</operator> <name>OFFSET_POS</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_tupdesc_init_builtin</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><name>pidx_natts</name> <operator>+</operator> <name>OFFSET_POS</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* data only in leaf tuples */</comment>
	<expr_stmt><expr><call><name>o_tables_tupdesc_init_builtin</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>pidx_natts</name> <operator>+</operator> <name>DATA_POS</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>BYTEAOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>o_toast_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
			<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
			<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toastd</name> <init>= <expr><operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pkAttnum</name> <init>= <expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>-</operator> <name>TOAST_NON_LEAF_FIELDS_NUM</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>pk1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>pk2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>attnum1</name></decl>,
				<decl><type ref="prev"/><name>attnum2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>offset1</name></decl>,
				<decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pk1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>pk_tuple</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pk1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pk2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>pk_tuple</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pk2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pkAttnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>v1</name></decl>,
					<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>null1</name></decl>,
					<decl><type ref="prev"/><name>null2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>pk1</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>pk2</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>null1</name> <operator>||</operator> <name>null2</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>null1</name> <operator>&amp;&amp;</operator> <name>null2</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>null1</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>nullfirst</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>nullfirst</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>o_call_comparator</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>comparator</name></name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>ascending</name></name></expr> ?</condition><then> <expr><name>cmp</name></expr> </then><else>: <expr><operator>-</operator><name>cmp</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>attnum1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>attnum</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>null</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>attnum1</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>pk1</name></expr></argument>, <argument><expr><name>pkAttnum</name> <operator>+</operator> <name>ATTN_POS</name></expr></argument>, <argument><expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset1</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>pk1</name></expr></argument>, <argument><expr><name>pkAttnum</name> <operator>+</operator> <name>OFFSET_POS</name></expr></argument>, <argument><expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>attnum2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>attnum</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>offset</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>null</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>attnum2</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>pk2</name></expr></argument>, <argument><expr><name>pkAttnum</name> <operator>+</operator> <name>ATTN_POS</name></expr></argument>, <argument><expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset2</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>pk2</name></expr></argument>, <argument><expr><name>pkAttnum</name> <operator>+</operator> <name>OFFSET_POS</name></expr></argument>, <argument><expr><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toastd</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>attnum1</name> <operator>!=</operator> <name>attnum2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>attnum1</name> <operator>&lt;</operator> <name>attnum2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>offset1</name> <operator>!=</operator> <name>offset2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>offset1</name> <operator>&lt;</operator> <name>offset2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_toast_needs_undo</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>BTreeOperationType</name></type> <name>action</name></decl></parameter>,
				   <parameter><decl><type><name>OTuple</name></type> <name>oldTuple</name></decl></parameter>, <parameter><decl><type><name>OTupleXactInfo</name></type> <name>oldXactInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>oldDeleted</name></decl></parameter>,
				   <parameter><decl><type><name>OTuple</name></type> <name>newTuple</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>newOxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>BTreeOperationDelete</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XACT_INFO_OXID_EQ</name><argument_list>(<argument><expr><name>oldXactInfo</name></expr></argument>, <argument><expr><name>newOxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldDeleted</name> <operator>&amp;&amp;</operator> <call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>oldTuple</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>newTuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>newTuple</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>oldTuple</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>newTuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type>
<name>o_detoast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastExternal</name></type> <name>ote</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OFixedKey</name></type>	<name>key</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ote</name></expr></argument>, <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_TOAST_EXTERNAL_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>ote</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>ote</name><operator>.</operator><name>relid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>ote</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>descr</name> <operator>=</operator> <call><name>o_fetch_table_descr</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tuple</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>ote</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>fixedData</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>fixedData</name></name></expr></argument>,
		   <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name></expr></argument>,
		   <argument><expr><name><name>ote</name><operator>.</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>o_toast_get</name><argument_list>(<argument><expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
										  <argument><expr><name><name>key</name><operator>.</operator><name>tuple</name></name></expr></argument>, <argument><expr><name><name>ote</name><operator>.</operator><name>attnum</name></name></expr></argument>,
										  <argument><expr><name><name>ote</name><operator>.</operator><name>toasted_size</name></name></expr></argument>, <argument><expr><name><name>ote</name><operator>.</operator><name>csn</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BTreeDescr</name> <modifier>*</modifier></type>
<name>tableGetBTreeDesc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>toast</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>tableGetMaxChunkSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name>  <modifier>*</modifier></type><name>tkey</name> <init>= <expr><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>toast</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>pk</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>natts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bytea</name></type>		<name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>minTupleSize</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name><name>tkey</name><operator>-&gt;</operator><name>pk_tuple</name></name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>,
								  <argument><expr><name><name>primary</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>natts</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>natts</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>natts</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>minTupleSize</name> <operator>=</operator> <call><name>o_new_tuple_size</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toast</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>MAXALIGN_DOWN</name><argument_list>(<argument><expr><name>O_BTREE_MAX_TUPLE_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>minTupleSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">3</literal> <operator>-</operator> <name>minTupleSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LocationIndex</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tableUpdateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name>  <modifier>*</modifier></type><name>tkey</name> <init>= <expr><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>tableGetNextKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name>  <modifier>*</modifier></type><name>tkey</name> <init>= <expr><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>OToastKey</name></type> <name>nextKey</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nextKey</name> <operator>=</operator> <operator>*</operator><name>tkey</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextKey</name><operator>.</operator><name>attnum</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextKey</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>nextKey</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>tableCreateTuple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name>  <modifier>*</modifier></type><name>tkey</name> <init>= <expr><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_create_toast_tuple</name><argument_list>(<argument><expr><operator>*</operator><name>tkey</name></expr></argument>,
								  <argument><expr><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>,
								  <argument><expr><name>length</name></expr></argument>,
								  <argument><expr><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>tableCreateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name>  <modifier>*</modifier></type><name>tkey</name> <init>= <expr><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_create_toast_key</name><argument_list>(<argument><expr><operator>*</operator><name>tkey</name></expr></argument>, <argument><expr><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bytea</name> <modifier>*</modifier></type>
<name>get_data</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>DatumGetByteaPP</name><argument_list>(<argument><expr><call><name>o_fastgetattr_ptr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>natts</name></expr></argument>, <argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toast</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Pointer</name></type>
<name>tableGetTupleData</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>toast</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><call><name>get_data</name><argument_list>(<argument><expr><name>toast</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>tableGetTupleOffset</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>toast</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
						   <argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>+</operator> <name>OFFSET_POS</name> <operator>-</operator> <name>DATA_POS</name></expr></argument>,
						   <argument><expr><name><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name><name>toast</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>tableGetTupleDataSize</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTableToastArg</name> <operator>*</operator><operator>)</operator> <name>arg</name><operator>)</operator><operator>-&gt;</operator><name>toast</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><call><name>get_data</name><argument_list>(<argument><expr><name>toast</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleFetchCallbackResult</name></type>
<name>tableVersionCallback</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>tupOxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
					 <parameter><decl><type><name>TupleFetchCallbackCheckType</name></type> <name>check_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name>  <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OToastKey</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>check_type</name> <operator>!=</operator> <name>OTupleFetchCallbackVersionCheck</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>COMMITSEQNO_IS_INPROGRESS</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>tupOxid</name> <operator>==</operator> <call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pk_tuple</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchMatch</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><name>ToastAPI</name></type>	<name>tableToastAPI</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>getBTreeDesc</name> <operator>=</operator> <name>tableGetBTreeDesc</name></expr>,
	<expr><operator>.</operator><name>getKeySize</name> <operator>=</operator> <name>NULL</name></expr>,
	<expr><operator>.</operator><name>getMaxChunkSize</name> <operator>=</operator> <name>tableGetMaxChunkSize</name></expr>,
	<expr><operator>.</operator><name>updateKey</name> <operator>=</operator> <name>tableUpdateKey</name></expr>,
	<expr><operator>.</operator><name>getNextKey</name> <operator>=</operator> <name>tableGetNextKey</name></expr>,
	<expr><operator>.</operator><name>createTuple</name> <operator>=</operator> <name>tableCreateTuple</name></expr>,
	<expr><operator>.</operator><name>createKey</name> <operator>=</operator> <name>tableCreateKey</name></expr>,
	<expr><operator>.</operator><name>getTupleData</name> <operator>=</operator> <name>tableGetTupleData</name></expr>,
	<expr><operator>.</operator><name>getTupleOffset</name> <operator>=</operator> <name>tableGetTupleOffset</name></expr>,
	<expr><operator>.</operator><name>getTupleDataSize</name> <operator>=</operator> <name>tableGetTupleDataSize</name></expr>,
	<expr><operator>.</operator><name>deleteLogFullTuple</name> <operator>=</operator> <name>false</name></expr>,
	<expr><operator>.</operator><name>versionCallback</name> <operator>=</operator> <name>tableVersionCallback</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>bool</name></type>
<name>generic_toast_insert</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
					 <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getBTreeDesc</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>max_length</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getMaxChunkSize</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>inserted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeModifyCallbackInfo</name></type> <name>callbackInfo</name> <init>= <expr><name>nullCallbackInfo</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>inserted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&lt;</operator> <name>max_length</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <name>max_length</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>createTuple</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>o_btree_modify</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>BTreeOperationInsert</name></expr></argument>,
								  <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>BTreeKeyLeafTuple</name></expr></argument>,
								  <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								  <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>RowLockUpdate</name></expr></argument>,
								  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbackInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBTreeModifyResultInserted</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inserted</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_INSERT</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
							  <argument><expr><name>tup</name></expr></argument>, <argument><expr><call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OTupleLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>inserted</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>generic_toast_sort_add</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
					   <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
					   <parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>sortstate</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>max_length</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getMaxChunkSize</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mctx</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&lt;</operator> <name>max_length</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <name>max_length</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>mctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>tuplecontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>createTuple</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tuplesort_putotuple</name><argument_list>(<argument><expr><name>sortstate</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OBTreeModifyCallbackAction</name></type>
<name>o_update_callback</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
				  <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>OTuple</name> <modifier>*</modifier></type><name>newtup</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>,
				  <parameter><decl><type><name>OTupleXactInfo</name></type> <name>xactInfo</name></decl></parameter>, <parameter><decl><type><name>UndoLocation</name></type> <name>location</name></decl></parameter>,
				  <parameter><decl><type><name>RowLockMode</name> <modifier>*</modifier></type><name>lock_mode</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>OBTreeCallbackActionUpdate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OBTreeModifyCallbackAction</name></type>
<name>o_delete_callback</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
				  <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>OTuple</name> <modifier>*</modifier></type><name>newtup</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>,
				  <parameter><decl><type><name>OTupleXactInfo</name></type> <name>xactInfo</name></decl></parameter>, <parameter><decl><type><name>UndoLocation</name></type> <name>location</name></decl></parameter>,
				  <parameter><decl><type><name>RowLockMode</name> <modifier>*</modifier></type><name>lock_mode</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>OBTreeCallbackActionDelete</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>generic_toast_update</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
					 <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getBTreeDesc</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max_length</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getMaxChunkSize</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeModifyCallbackInfo</name></type> <name>callbackInfo</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>waitCallback</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>modifyDeletedCallback</name> <operator>=</operator> <name>o_update_callback</name></expr>,
		<expr><operator>.</operator><name>modifyCallback</name> <operator>=</operator> <name>o_update_callback</name></expr>,
		<expr><operator>.</operator><name>needsUndoForSelfCreated</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>arg</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>data_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBTreeModifyResult</name></type> <name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>data_size</name> <operator>&lt;</operator> <name>max_length</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <name>max_length</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>createTuple</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_btree_modify</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>BTreeOperationInsert</name></expr></argument>,
								<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>BTreeKeyLeafTuple</name></expr></argument>,
								<argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								<argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>RowLockUpdate</name></expr></argument>,
								<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbackInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>OBTreeModifyResultInserted</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>!=</operator> <name>OBTreeModifyResultUpdated</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>


		<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>result</name> <operator>==</operator> <name>OBTreeModifyResultUpdated</name><operator>)</operator></expr> ?</condition><then> <expr><name>WAL_REC_UPDATE</name></expr> </then><else>:
							  <expr><name>WAL_REC_INSERT</name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OTupleLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * There might be tailing tuples.  We need to delete them.
	 */</comment>
	<expr_stmt><expr><call><name><name>api</name><operator>-&gt;</operator><name>updateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>generic_toast_delete</name><argument_list>(<argument><expr><name>api</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>generic_toast_delete</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>,
					 <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getBTreeDesc</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>nextKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>deleted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeModifyCallbackInfo</name></type> <name>callbackInfo</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>waitCallback</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>modifyDeletedCallback</name> <operator>=</operator> <name>NULL</name></expr>,
		<expr><operator>.</operator><name>modifyCallback</name> <operator>=</operator> <name>o_delete_callback</name></expr>,
		<expr><operator>.</operator><name>needsUndoForSelfCreated</name> <operator>=</operator> <name>false</name></expr>,
		<expr><operator>.</operator><name>arg</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>nextKey</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>getNextKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>BTreeLocationHint</name></type> <name>hint</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>key_allocated</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>walKey</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>nullTup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nextKey</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* if tuple not found */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>getTupleOffset</name></name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>api</name><operator>-&gt;</operator><name>updateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name>nullTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>o_btree_modify</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>BTreeOperationDelete</name></expr></argument>,
						   <argument><expr><name>nullTup</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
						   <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>RowLockUpdate</name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callbackInfo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OBTreeModifyResultDeleted</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected missing TOAST chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>deleted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>api</name><operator>-&gt;</operator><name>deleteLogFullTuple</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>walKey</name> <operator>=</operator> <call><name>o_btree_tuple_make_key</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_allocated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_DELETE</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
								  <argument><expr><name>walKey</name></expr></argument>, <argument><expr><call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>walKey</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>key_allocated</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>walKey</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_DELETE</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
								  <argument><expr><name>tuple</name></expr></argument>, <argument><expr><call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>OTupleLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

	<return>return <expr><name>deleted</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>generic_toast_get</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
				  <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getBTreeDesc</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>nextKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max_length</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getMaxChunkSize</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>actual_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nextKey</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>getNextKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>versionCallback</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_btree_iterator_set_callback</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>versionCallback</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>actual_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>iter_data_size</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nextKey</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* if tuple not found */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>iter_data_size</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>getTupleDataSize</name></name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>actual_size</name> <operator>+</operator> <name>iter_data_size</name> <operator>&gt;</operator> <name>data_size</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* avoid memcpy to unallocated memory */</comment>
			<expr_stmt><expr><name>actual_size</name> <operator>+=</operator> <name>iter_data_size</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>actual_size</name></expr></argument>,
			   <argument><expr><call><name><name>api</name><operator>-&gt;</operator><name>getTupleData</name></name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>iter_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>actual_size</name> <operator>+=</operator> <name>iter_data_size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>iter_data_size</name> <operator>&lt;</operator> <name>max_length</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>actual_size</name> <operator>&lt;=</operator> <name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>actual_size</name> <operator>==</operator> <name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>actual_size</name> <operator>!=</operator> <name>data_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Common code for
 * generic_toast_get_any_with_callback and generic_toast_get_any_with_key
 */</comment>
<function><type><specifier>static</specifier> <name>Pointer</name></type>
<name>generic_toast_get_any_common</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>,
							 <parameter><decl><type><name>Pointer</name></type> <name>key</name></decl></parameter>,
							 <parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>,
							 <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
							 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
							 <parameter><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl></parameter>,
							 <parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>found_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>nextKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nextKey</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>getNextKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>chunk_size</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nextKey</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* if tuple not found */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>found_key</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Size</name></type>		<name>key_size</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getKeySize</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><operator>*</operator><name>found_key</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>found_key</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name><name>api</name><operator>-&gt;</operator><name>getTupleDataSize</name></name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><call><name><name>api</name><operator>-&gt;</operator><name>getTupleData</name></name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>data_size</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>str</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>generic_toast_get_any_with_callback</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>key</name></decl></parameter>,
									<parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
									<parameter><decl><type><name>TupleFetchCallback</name></type> <name>fetch_callback</name></decl></parameter>,
									<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getBTreeDesc</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fetch_callback</name> <operator>&amp;&amp;</operator> <name>callback_arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_btree_iterator_set_callback</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>fetch_callback</name></expr></argument>, <argument><expr><name>callback_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>generic_toast_get_any_common</name><argument_list>(<argument><expr><name>api</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>,
										<argument><expr><name>csn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>generic_toast_get_any_with_key</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>,
							   <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>found_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name><name>api</name><operator>-&gt;</operator><name>getBTreeDesc</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>api</name><operator>-&gt;</operator><name>versionCallback</name></name> <operator>&amp;&amp;</operator> <name>found_key</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>found_key</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_btree_iterator_set_callback</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name><name>api</name><operator>-&gt;</operator><name>versionCallback</name></name></expr></argument>,
									  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>found_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>generic_toast_get_any_common</name><argument_list>(<argument><expr><name>api</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>it</name></expr></argument>,
										<argument><expr><name>found_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>generic_toast_get_any</name><parameter_list>(<parameter><decl><type><name>ToastAPI</name> <modifier>*</modifier></type><name>api</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>data_size</name></decl></parameter>,
					  <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>generic_toast_get_any_with_key</name><argument_list>(<argument><expr><name>api</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_toast_insert</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>pk</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attn</name></decl></parameter>,
			   <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
			   <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name></type>	<name>tkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableToastArg</name></type> <name>arg</name> <init>= <expr><block>{<expr><name>primary</name></expr>, <expr><name>toast</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name>attn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>desc</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>oIndexToast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tableToastAPI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tkey</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
								  <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_toast_sort_add</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>,
				 <parameter><decl><type><name>OTuple</name></type> <name>pk</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attn</name></decl></parameter>,
				 <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>,
				 <parameter><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>sortstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name></type>	<name>tkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableToastArg</name></type> <name>arg</name> <init>= <expr><block>{<expr><name>primary</name></expr>, <expr><name>toast</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name>attn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>desc</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>oIndexToast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>generic_toast_sort_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tableToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>tkey</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
						   <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>sortstate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_toast_delete</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>,
			   <parameter><decl><type><name>OTuple</name></type> <name>pk</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attn</name></decl></parameter>,
			   <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name></type>	<name>tkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableToastArg</name></type> <name>arg</name> <init>= <expr><block>{<expr><name>primary</name></expr>, <expr><name>toast</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name>attn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>desc</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>oIndexToast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tableToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>tkey</name></expr></argument>,
								  <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_toast_get</name><parameter_list>(<parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>toast</name></decl></parameter>,
			<parameter><decl><type><name>OTuple</name></type> <name>pk</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attn</name></decl></parameter>,
			<parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastKey</name></type>	<name>tkey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableToastArg</name></type> <name>arg</name> <init>= <expr><block>{<expr><name>primary</name></expr>, <expr><name>toast</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name> <operator>=</operator> <name>pk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name>attn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tkey</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>toast</name><operator>-&gt;</operator><name>desc</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>oIndexToast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tableToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>tkey</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>,
							   <argument><expr><name>csn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>o_create_toast_tuple</name><parameter_list>(<parameter><decl><type><name>OToastKey</name></type> <name>tkey</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data_ptr</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_length</name></decl></parameter>,
					 <parameter><decl><type><name>OTableToastArg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>key</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>natts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>,
							   <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_ptr</name></expr></argument>, <argument><expr><name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>VARHDRSZ</name> <operator>+</operator> <name>data_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><index>[<expr><name>natts</name></expr>]</index></name> <operator>=</operator> <name><name>tkey</name><operator>.</operator><name>attnum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><index>[<expr><name>natts</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tkey</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><index>[<expr><name>natts</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_form_tuple</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
						  <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>,
						  <argument><expr><call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>key</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>o_create_toast_key</name><parameter_list>(<parameter><decl><type><name>OToastKey</name></type> <name>tkey</name></decl></parameter>,
				   <parameter><decl><type><name>OTableToastArg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>key</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><name>INDEX_MAX_KEYS</name> <operator>+</operator> <name>TOAST_LEAF_FIELDS_NUM</name></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>natts</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>isnull</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isnull</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>nonLeafTupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>,
							   <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>key</name><index>[<expr><name>natts</name></expr>]</index></name> <operator>=</operator> <name><name>tkey</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><index>[<expr><name>natts</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tkey</name><operator>.</operator><name>attnum</name></name></expr>;</expr_stmt>

	<return>return <expr><call><name>o_form_tuple</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>nonLeafTupdesc</name></name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>,
						<argument><expr><call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name><name>tkey</name><operator>.</operator><name>pk_tuple</name></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>key</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_toast_equal</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>primary</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OToastExternal</name></type> <name>left_ote</name></decl>,
				<decl><type ref="prev"/><name>right_ote</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<operator>!</operator><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* left or right is not orioledb TOAST value */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* easy case: it's same pointers */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>left_ote</name></expr></argument>,
		   <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>O_TOAST_EXTERNAL_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>right_ote</name></expr></argument>,
		   <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>O_TOAST_EXTERNAL_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left_ote</name><operator>.</operator><name>datoid</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>datoid</name></name> <operator>||</operator>
		<name><name>left_ote</name><operator>.</operator><name>relid</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>relid</name></name> <operator>||</operator>
		<name><name>left_ote</name><operator>.</operator><name>relnode</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>relnode</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* values are not from the same index */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left_ote</name><operator>.</operator><name>raw_size</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>raw_size</name></name> <operator>||</operator>
		<name><name>left_ote</name><operator>.</operator><name>toasted_size</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>toasted_size</name></name> <operator>||</operator>
		<name><name>left_ote</name><operator>.</operator><name>data_size</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>data_size</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* sizes are not equal */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left_ote</name><operator>.</operator><name>attnum</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>attnum</name></name> <operator>||</operator>
		<name><name>left_ote</name><operator>.</operator><name>csn</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>csn</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* it's a different attribute */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* now we can make final check: compare primary keys */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>left_ote</name><operator>.</operator><name>formatFlags</name></name> <operator>!=</operator> <name><name>right_ote</name><operator>.</operator><name>formatFlags</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name></expr></argument>,
				  <argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name></expr></argument>,
				  <argument><expr><name><name>left_ote</name><operator>.</operator><name>data_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>o_get_raw_value</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>free</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>tmp</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>free</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_detoast</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>detoast_attr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>toast_decompress_datum</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>o_get_raw_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>o_get_src_value</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>free</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>free</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_ORIOLEDB</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_detoast</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>detoast_external_attr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>free</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>o_get_src_size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_toast_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TuplePrintOpaque</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><operator>(</operator><name>TuplePrintOpaque</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>toast_tuple_print</name><argument_list>(<argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>keyDesc</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>keySpec</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>keyOutputFns</name></name></expr></argument>,
					  <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_toast_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TuplePrintOpaque</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><operator>(</operator><name>TuplePrintOpaque</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>toast_tuple_print</name><argument_list>(<argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>outputFns</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
					  <argument><expr><name>tup</name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>opaque</name><operator>-&gt;</operator><name>printRowVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>create_o_toast_external</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
						<parameter><decl><type><name>OTuple</name></type> <name>idx_tup</name></decl></parameter>,
						<parameter><decl><type><name>AttrNumber</name></type> <name>attnum</name></decl></parameter>,
						<parameter><decl><type><name>OToastValue</name> <modifier>*</modifier></type><name>toasted</name></decl></parameter>,
						<parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OToastExternal</name></type> <name>ote</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>tupSize</name> <init>= <expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>idx_tup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>id</name><operator>-&gt;</operator><name>nonLeafSpec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>VARHDRSZ_EXTERNAL</name> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name> <operator>+</operator> <name>tupSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SET_VARTAG_EXTERNAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>VARTAG_ORIOLEDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ote</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ote</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>raw_size</name></name> <operator>=</operator> <name><name>toasted</name><operator>-&gt;</operator><name>raw_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>toasted_size</name></name> <operator>=</operator> <name><name>toasted</name><operator>-&gt;</operator><name>toasted_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>relid</name></name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>data_size</name></name> <operator>=</operator> <name>tupSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <name><name>idx_tup</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>ote</name><operator>.</operator><name>formatFlags</name></name> <operator>|=</operator> <name><name>toasted</name><operator>-&gt;</operator><name>compression</name></name> <operator>&lt;&lt;</operator> <name>ORIOLEDB_EXT_FORMAT_FLAGS_BITS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ote</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ote</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA_EXTERNAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>O_TOAST_EXTERNAL_SZ</name></expr></argument>, <argument><expr><name><name>idx_tup</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>tupSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>toast_tuple_print</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupDesc</name></decl></parameter>, <parameter><decl><type><name>OTupleFixedFormatSpec</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,
				  <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>outputFns</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
				  <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_tuple</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name></type> <name>printRowVersion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>offset_pos</name></decl>,
				<decl><type ref="prev"/><name>attn_pos</name></decl>,
				<decl><type ref="prev"/><name>datasz_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pk_natts</name> <init>= <expr><name><name>tupDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>is_tuple</name></expr> ?</condition><then> <expr><name>TOAST_LEAF_FIELDS_NUM</name></expr>
											 </then><else>: <expr><name>TOAST_NON_LEAF_FIELDS_NUM</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>printRowVersion</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%u) "</literal></expr></argument>, <argument><expr><call><name>o_tuple_get_version</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"PK: ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pk_natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"'%s'"</literal></expr></argument>,
							 <argument><expr><call><name>OutputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>outputFns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"), "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>offset_pos</name> <operator>=</operator> <name>pk_natts</name> <operator>+</operator> <name>OFFSET_POS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>attn_pos</name> <operator>=</operator> <name>pk_natts</name> <operator>+</operator> <name>ATTN_POS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>attn_pos</name></expr>]</index></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>pk_natts</name> <operator>+</operator> <name>ATTN_POS</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>attn_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>offset_pos</name></expr>]</index></name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>pk_natts</name> <operator>+</operator> <name>OFFSET_POS</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>offset_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>is_tuple</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>data</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>datasz_pos</name> <operator>=</operator> <name>pk_natts</name> <operator>+</operator> <name>DATA_POS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>o_fastgetattr</name><argument_list>(<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>pk_natts</name> <operator>+</operator> <name>DATA_POS</name></expr></argument>, <argument><expr><name>tupDesc</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>datasz_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nulls</name><index>[<expr><name>datasz_pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>datasz_pos</name></expr>]</index></name> <operator>=</operator> <call><name>UInt32GetDatum</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attnum %hu, offset %u, data_length %u"</literal></expr></argument>,
						 <argument><expr><call><name>DatumGetUInt16</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>attn_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>offset_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>datasz_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"attnum %hu, offset %u"</literal></expr></argument>,
						 <argument><expr><call><name>DatumGetUInt16</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>attn_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>DatumGetUInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>offset_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">") "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
