<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/utils/seq_buf.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * seq_buf.c
 *		Routines for sequential buffered data access.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/utils/seq_buf.c
 *
 * TODO
 *	  make it lockless with state of following structure
 *		AABBCCCCDDDDDDDD
 *		^ ^	^	^
 *		| |	|   on-disk page number
 *		| |	page offset
 *		| usage count for odd page
 *		usage count for event number
 *	  It would be possible to read/write a value in one CAS and one atomic
 *	  decrement.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/seq_buf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memdebug.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We does not use orioledb page header and should not
 * write it to sequence buffer files.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQBUF_ALIGN</name></cpp:macro> <cpp:value>(sizeof(uint64))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQBUF_CHUNK_SIZE</name></cpp:macro> <cpp:value>(TYPEALIGN_DOWN(SEQBUF_ALIGN, \
										  ORIOLEDB_BLCKSZ - O_PAGE_HEADER_SIZE))</cpp:value></cpp:define>

<comment type="block">/*
 * The offset to aligned data.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQBUF_DATA_OFF</name></cpp:macro> <cpp:value>(ORIOLEDB_BLCKSZ - SEQBUF_CHUNK_SIZE)</cpp:value></cpp:define>

<comment type="block">/* we should skip orioledb page header on io operations */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQBUF_DATA_POS</name><parameter_list>(<parameter><type><name>page</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Pointer)(page) + SEQBUF_DATA_OFF)</cpp:value></cpp:define>

<comment type="block">/* offset of current sequence buffer page in file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEQBUF_FILE_OFFSET</name><parameter_list>(<parameter><type><name>shared</name></type></parameter>, <parameter><type><name>blkno</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((off_t) SEQBUF_CHUNK_SIZE * (blkno) \
												+ (shared)-&gt;evictOffset)</cpp:value></cpp:define>

<comment type="block">/*
 * this functions returns true if success
 */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>seq_buf_tag_eq</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>seq_buf_check_open_file</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>seq_buf_switch_page</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>seq_buf_rw</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>seq_buf_read_pages</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>,
							   <parameter><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_off</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>evicted_off</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initialize sequential buffered access to given file.
 */</comment>
<function><type><name>bool</name></type>
<name>init_seq_buf</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name></decl></parameter>,
			 <parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init_shared</name></decl></parameter>,
			 <parameter><decl><type><name>int</name></type> <name>skip_len</name></decl></parameter>, <parameter><decl><type><name>EvictedSeqBufData</name> <modifier>*</modifier></type><name>evicted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>evicted_used</name> <init>= <expr><name>evicted</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name> <operator>=</operator> <name>shared</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>write</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>init_shared</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>
			   <operator>&amp;&amp;</operator> <call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>SEQBUF_DATA_OFF</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>evicted_used</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>skip_len</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><name>tag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>SeqBufPrevPageDone</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>evictOffset</name></name> <operator>=</operator> <ternary><condition><expr><name>evicted_used</name></expr> ?</condition><then> <expr><name><name>evicted</name><operator>-&gt;</operator><name>offset</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><name>tag</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OrioleDBPageDesc</name> <modifier>*</modifier></type><name>page_desc</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>write</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <call><name>seq_buf_file_exist</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>seq_buf_read_pages</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><name>shared</name></expr></argument>, <argument><expr><name>skip_len</name></expr></argument>,
									<argument><expr><ternary><condition><expr><name>evicted_used</name></expr> ?</condition><then> <expr><name><name>evicted</name><operator>-&gt;</operator><name>offset</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>write</name> <operator>||</operator> <operator>(</operator><name><name>tag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>evicted_used</name> <operator>||</operator> <name><name>evicted</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><name>shared</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>shared</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>shared</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>get_seq_buf_filename</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>typename</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"tmp"</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>tag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>typename</name> <operator>=</operator> <literal type="string">"map"</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* this format is used by recovery_cleanup_old_files() */</comment>
	<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><name>ORIOLEDB_DATA_DIR</name> <literal type="string">"/%u_%u-%u.%s"</literal></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>,
					<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_buf_tag_eq</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>datoid</name></name> <operator>==</operator> <name><name>t2</name><operator>-&gt;</operator><name>datoid</name></name> <operator>&amp;&amp;</operator>
		<name><name>t1</name><operator>-&gt;</operator><name>relnode</name></name> <operator>==</operator> <name><name>t2</name><operator>-&gt;</operator><name>relnode</name></name> <operator>&amp;&amp;</operator>
		<name><name>t1</name><operator>-&gt;</operator><name>num</name></name> <operator>==</operator> <name><name>t2</name><operator>-&gt;</operator><name>num</name></name> <operator>&amp;&amp;</operator>
		<name><name>t1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>t2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Open underlying file.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_buf_check_open_file</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SeqBufTag</name></type>	<name>old_tag</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>flags</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>file_exists</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>file_exists</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>seq_buf_tag_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>shared</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>file_exists</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open seq buf file %s for %s"</literal></expr></argument>,
								   <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>private</name><operator>-&gt;</operator><name>write</name></name></expr> ?</condition><then> <expr><literal type="string">"write"</literal></expr> </then><else>: <expr><literal type="string">"read"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>old_tag</name></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>seq_buf_close_file</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_buf_wait_prev_page</name><parameter_list>(<parameter><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SpinDelayStatus</name></type> <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>!=</operator> <name>SeqBufPrevPageInProgress</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>init_local_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>==</operator> <name>SeqBufPrevPageInProgress</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>perform_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>finish_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_buf_finish_prev_page</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>offset</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>SEQBUF_FILE_OFFSET</name><argument_list>(<argument><expr><name>shared</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Write previous page */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>OFileWrite</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,
					   <argument><expr><call><name>SEQBUF_DATA_POS</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name>SEQBUF_CHUNK_SIZE</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>WAIT_EVENT_SLRU_WRITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SEQBUF_CHUNK_SIZE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error write seq buf %s at offset %u"</literal></expr></argument>,
								   <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<expr_stmt><expr><call><name>put_page_image</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Read next page */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>nbytes</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>SEQBUF_FILE_OFFSET</name><argument_list>(<argument><expr><name>shared</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nbytes</name> <operator>=</operator> <call><name>OFileRead</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><call><name>SEQBUF_DATA_POS</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEQBUF_CHUNK_SIZE</name></expr></argument>,
									<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>WAIT_EVENT_SLRU_READ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error read seq buf %s at offset %u"</literal></expr></argument>,
									   <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>&gt;=</operator> <name>SEQBUF_CHUNK_SIZE</name> <operator>&amp;&amp;</operator>
				<name>nbytes</name> <operator>!=</operator> <name>SEQBUF_CHUNK_SIZE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&lt;</operator> <name>SEQBUF_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Error read sequence buffer file %s at offset %u."</literal>
					 <literal type="string">"Bytes read = %d is less than expected = %ld."</literal></expr></argument>,
					 <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>offset</name></expr></argument>,
					 <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>SEQBUF_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>&lt;</operator> <name>SEQBUF_CHUNK_SIZE</name> <operator>&amp;&amp;</operator>
					 <name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>!=</operator> <name>nbytes</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Error read sequence buffer file %s at offset %u. "</literal>
					 <literal type="string">"Bytes read = %d is not equal than expected = %lu"</literal></expr></argument>,
					 <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>offset</name></expr></argument>,
					 <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>-=</operator> <name>nbytes</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>put_page_image</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Switch to the next page after filePageNum.  Function returns control when
 * we have switched to the next page or other process did it instead of us.
 *
 * Private-&gt;shared should be locked. Call unlocks private-&gt;shared.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_buf_switch_page</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>filePageNum</name> <init>= <expr><name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SeqBufPrevPageState</name></type> <name>resultState</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_buf_check_open_file</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check if it's already switched after given page number... */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name> <operator>!=</operator> <name>filePageNum</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check if it's already switched after waiting when previous page have
	 * been processed
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>seq_buf_wait_prev_page</name><argument_list>(<argument><expr><name>shared</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name> <operator>!=</operator> <name>filePageNum</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>==</operator> <name>SeqBufPrevPageError</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_buf_finish_prev_page</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>SeqBufPrevPageDone</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>==</operator> <name>SeqBufPrevPageDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>==</operator> <name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>SEQBUF_DATA_OFF</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>SeqBufPrevPageInProgress</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>resultState</name> <operator>=</operator> <ternary><condition><expr><call><name>seq_buf_finish_prev_page</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SeqBufPrevPageDone</name></expr>
		</then><else>: <expr><name>SeqBufPrevPageError</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>resultState</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If even we didn't finish the next page, current page is OK. */</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Private function which reads/writes data from/to sequential file.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>seq_buf_rw</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>switched</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>write</name></name> <operator>==</operator> <name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>+</operator> <name>data_size</name> <operator>&lt;=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>page</name> <operator>+</operator> <name><name>shared</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>page</name> <operator>+</operator> <name><name>shared</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>switched</name> <operator>=</operator> <call><name>seq_buf_switch_page</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* releases shared-&gt;lock */</comment>
	</block_content>}</block> while <condition>(<expr><name>switched</name></expr>)</condition>;</do>
	<return>return <expr><name>false</name></expr>;</return>				<comment type="block">/* can not switch to another page */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Writes uint32 offset to a sequential file.
 * Returns true if success.
 */</comment>
<function><type><name>bool</name></type>
<name>seq_buf_write_u32</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>SEQBUF_CHUNK_SIZE</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>seq_buf_rw</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Writes FileExtent to a sequential file.
 * Returns true if success.
 */</comment>
<function><type><name>bool</name></type>
<name>seq_buf_write_file_extent</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>FileExtent</name></type> <name>extent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>SEQBUF_CHUNK_SIZE</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>seq_buf_rw</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>extent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reads uint32 offset from a sequential file.
 * Returns true if success.
 */</comment>
<function><type><name>bool</name></type>
<name>seq_buf_read_u32</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>seq_buf_rw</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reads FileExtent from a sequential file.
 * Returns true if success.
 */</comment>
<function><type><name>bool</name></type>
<name>seq_buf_read_file_extent</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>FileExtent</name> <modifier>*</modifier></type><name>extent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>SEQBUF_CHUNK_SIZE</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>seq_buf_rw</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>extent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Finalize work with sequential file.
 */</comment>
<function><type><name>uint64</name></type>
<name>seq_buf_finalize</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>seq_buf_wait_prev_page</name><argument_list>(<argument><expr><name>shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>==</operator> <name>SeqBufPrevPageError</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_buf_finish_prev_page</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not finalize previous sequence buffer page to file %s"</literal></expr></argument>,
								   <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>SeqBufPrevPageDone</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>private</name><operator>-&gt;</operator><name>write</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_buf_check_open_file</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open sequence buffer file %s"</literal></expr></argument>,
								   <argument><expr><call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>off_t</name></type>		<name>offset</name> <init>= <expr><call><name>SEQBUF_FILE_OFFSET</name><argument_list>(<argument><expr><name>shared</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>OFileWrite</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><call><name>SEQBUF_DATA_POS</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>-</operator> <name>SEQBUF_DATA_OFF</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>WAIT_EVENT_SLRU_WRITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>-</operator> <name>SEQBUF_DATA_OFF</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not finalize sequence buffer into file %s"</literal></expr></argument>,
									   <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>SEQBUF_FILE_OFFSET</name><argument_list>(<argument><expr><name>shared</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name></expr></argument>)</argument_list></call>
		<operator>+</operator> <operator>(</operator><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>-</operator> <name>SEQBUF_DATA_OFF</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>seq_buf_close_file</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>seq_buf_remove_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>private</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get current offset in the file.
 */</comment>
<function><type><name>uint64</name></type>
<name>seq_buf_get_offset</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>SEQBUF_FILE_OFFSET</name><argument_list>(<argument><expr><name>shared</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name></expr></argument>)</argument_list></call>
		<operator>+</operator> <operator>(</operator><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>-</operator> <name>SEQBUF_DATA_OFF</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Try to replace sequential file with newer one.
 */</comment>
<function><type><name>SeqBufReplaceResult</name></type>
<name>seq_buf_try_replace</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
					<parameter><decl><type><name>pg_atomic_uint64</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>data_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name> <init>= <expr><name><name>private</name><operator>-&gt;</operator><name>shared</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SeqBufTag</name></type>	<name>old_tag</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>private</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>SEQBUF_CHUNK_SIZE</name> <operator>%</operator> <name>data_size</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>datoid</name></name> <operator>==</operator> <name><name>tag</name><operator>-&gt;</operator><name>datoid</name></name> <operator>&amp;&amp;</operator> <name><name>shared</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>relnode</name></name> <operator>==</operator> <name><name>tag</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>seq_buf_wait_prev_page</name><argument_list>(<argument><expr><name>shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>==</operator> <name>SeqBufPrevPageError</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>SeqBufPrevPageDone</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>shared</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>num</name></name> <operator>&gt;=</operator> <name><name>tag</name><operator>-&gt;</operator><name>num</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Already have newer sequential file */</comment>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SeqBufReplaceAlready</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>old_tag</name> <operator>=</operator> <name><name>shared</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><name>tag</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>seq_buf_file_exist</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_buf_read_pages</name><argument_list>(<argument><expr><name>private</name></expr></argument>, <argument><expr><name>shared</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>old_tag</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SeqBufReplaceError</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>FileSize</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>old_tag</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not seek to the end of file %s"</literal></expr></argument>,
								   <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SeqBufReplaceError</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>curPageNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>filePageNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* reads data from tmp file, it has not header */</comment>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>SEQBUF_DATA_OFF</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>evictOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>prevPageState</name></name> <operator>=</operator> <name>SeqBufPrevPageDone</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SeqBufReplaceSuccess</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>seq_buf_read_pages</name><parameter_list>(<parameter><decl><type><name>SeqBufDescPrivate</name> <modifier>*</modifier></type><name>private</name></decl></parameter>, <parameter><decl><type><name>SeqBufDescShared</name> <modifier>*</modifier></type><name>shared</name></decl></parameter>,
				   <parameter><decl><type><name>int</name></type> <name>header_off</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>evicted_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf_first</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf_second</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nbytes</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>,
				<decl><type ref="prev"/><name>free_bytes</name></decl>,
				<decl><type ref="prev"/><name>should_read</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>seq_buf_check_open_file</name><argument_list>(<argument><expr><name>private</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FileSize</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>header_off</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"length %d of file %s is less than header %d"</literal></expr></argument>,
							   <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header_off</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>evicted_off</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>header_off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>evicted_off</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>header_off</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf_first</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf_second</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read first page */</comment>
	<expr_stmt><expr><name>should_read</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>SEQBUF_CHUNK_SIZE</name></expr> ?</condition><then> <expr><name>SEQBUF_CHUNK_SIZE</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>OFileRead</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><call><name>SEQBUF_DATA_POS</name><argument_list>(<argument><expr><name>buf_first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>should_read</name></expr></argument>, <argument><expr><name>evicted_off</name></expr></argument>, <argument><expr><name>WAIT_EVENT_SLRU_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>!=</operator> <name>should_read</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not to read first page from file %s, read = %d, expected = %d"</literal></expr></argument>,
							   <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>should_read</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>free_bytes</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>nbytes</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>SEQBUF_CHUNK_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* read second page */</comment>
		<expr_stmt><expr><name>evicted_off</name> <operator>+=</operator> <name>should_read</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>should_read</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>SEQBUF_CHUNK_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>should_read</name> <operator>=</operator> <ternary><condition><expr><name>should_read</name> <operator>&gt;</operator> <name>SEQBUF_CHUNK_SIZE</name></expr> ?</condition><then> <expr><name>SEQBUF_CHUNK_SIZE</name></expr> </then><else>: <expr><name>should_read</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>OFileRead</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><call><name>SEQBUF_DATA_POS</name><argument_list>(<argument><expr><name>buf_second</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>should_read</name></expr></argument>, <argument><expr><name>evicted_off</name></expr></argument>, <argument><expr><name>WAIT_EVENT_SLRU_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>!=</operator> <name>should_read</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shared</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not to read second page from file %s, read = %d, expected = %d"</literal></expr></argument>,
								   <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>should_read</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>free_bytes</name> <operator>-=</operator> <name>nbytes</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>put_page_image</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>put_page_image</name><argument_list>(<argument><expr><name><name>shared</name><operator>-&gt;</operator><name>pages</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shared</name><operator>-&gt;</operator><name>freeBytesNum</name></name> <operator>=</operator> <name>free_bytes</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type>
<name>seq_buf_filename_if_exist</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>not_used</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_seq_buf_filename</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>not_used</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>filename</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>seq_buf_file_exist</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>filename</name> <operator>=</operator> <call><name>seq_buf_filename_if_exist</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>seq_buf_remove_file</name><parameter_list>(<parameter><decl><type><name>SeqBufTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>filename</name> <operator>=</operator> <call><name>seq_buf_filename_if_exist</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>durable_unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FATAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
