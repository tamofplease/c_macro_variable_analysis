<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/utils/ucm.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ucm.c
 *		OrioleDB usage count map (UCM) implementation.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/utils/ucm.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ucm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCM_BRANCH_FACTOR</name></cpp:macro>	<cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCM_LEVEL_BITS</name></cpp:macro>		<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCM_LEVEL_MASK</name></cpp:macro>		<cpp:value>0xF</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>skip_ucm</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>init_ucm_non_leaf_recursive</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ucm_inc_recursive</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>next</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ucm_check_recursive</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ucm_inc</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>next</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Estimate shaed memory space for UCM data structure.
 */</comment>
<function><type><name>Size</name></type>
<name>estimate_ucm_space</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>n_leaf_groups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n_leaf_vars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n_non_leaf_levels</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n_non_leaf_vars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n_leaf_groups</name> <operator>=</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>UCM_BRANCH_FACTOR</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n_leaf_vars</name> <operator>=</operator> <name>n_leaf_groups</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n_non_leaf_levels</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n_non_leaf_vars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n_leaf_vars</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>rootFactor</name></name> <operator>=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>UCM_BRANCH_FACTOR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n_non_leaf_vars</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_non_leaf_vars</name> <operator>*=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>UCM_BRANCH_FACTOR</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>/=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_non_leaf_levels</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>rootFactor</name></name> <operator>*=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name>n_non_leaf_vars</name> <operator>+</operator> <name>n_leaf_vars</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>nonLeaf</name></name> <operator>=</operator> <name>n_non_leaf_vars</name></expr>;</expr_stmt>
	<return>return <expr><name>PG_CACHE_LINE_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>total</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_value_frame</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mask</name> <init>= <expr><name>UCM_LEVEL_MASK</name></expr></init></decl>,
				<decl><type ref="prev"/><name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UCM_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>+=</operator> <name>one</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>one</name> <operator>&lt;&lt;=</operator> <name>UCM_LEVEL_BITS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <name>UCM_LEVEL_BITS</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_ucm_non_leaf_recursive</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>nonLeaf</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>value</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>+=</operator> <call><name>get_value_frame</name><argument_list>(<argument><expr><call><name>init_ucm_non_leaf_recursive</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>value</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize UCM shared memory.
 */</comment>
<function><type><name>void</name></type>
<name>init_ucm</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>PG_CACHE_LINE_SIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>ucm</name></name> <operator>=</operator> <operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Init leaf variables */</comment>
	<expr_stmt><expr><name>blkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>nonLeaf</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>total</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>pagesCount</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>blkno</name></expr></argument>, <argument><expr><name>UCM_BRANCH_FACTOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
						   <argument><expr><name>pagesCount</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>UCM_FREE_PAGES_LEVEL</name> <operator>*</operator> <name>UCM_LEVEL_BITS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>blkno</name> <operator>+=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Recursively inin non-leaf variables */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>init_ucm_non_leaf_recursive</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Worker function, which recursively increments value of ucm map.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ucm_inc_recursive</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>val</name></decl>,
				<decl><type ref="prev"/><name>new_val</name></decl>,
				<decl><type ref="prev"/><name>prev_mask</name></decl>,
				<decl><type ref="prev"/><name>next_mask</name></decl>,
				<decl><type ref="prev"/><name>prev_one</name></decl>,
				<decl><type ref="prev"/><name>next_one</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>prev</name> <operator>&lt;</operator> <name>UCM_LEVELS</name> <operator>||</operator> <name>prev</name> <operator>==</operator> <name>InvalidUsageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>next</name> <operator>&lt;</operator> <name>UCM_LEVELS</name> <operator>||</operator> <name>next</name> <operator>==</operator> <name>InvalidUsageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>InvalidUsageCount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>prev_mask</name> <operator>=</operator> <name>UCM_LEVEL_MASK</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>prev</name> <operator>*</operator> <name>UCM_LEVEL_BITS</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_one</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>prev</name> <operator>*</operator> <name>UCM_LEVEL_BITS</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>prev_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_one</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>InvalidUsageCount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>next_mask</name> <operator>=</operator> <name>UCM_LEVEL_MASK</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>next</name> <operator>*</operator> <name>UCM_LEVEL_BITS</name><operator>)</operator></expr><operator>,</operator>
			<expr><name>next_one</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>next</name> <operator>*</operator> <name>UCM_LEVEL_BITS</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>next_mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_one</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <name>prev_mask</name><operator>)</operator> <operator>&lt;</operator> <name>prev_one</name> <operator>||</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <name>next_mask</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>next_mask</name> <operator>-</operator> <name>next_one</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SpinDelayStatus</name></type> <name>delayStatus</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>init_local_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delayStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<while>while <condition>(<expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <name>prev_mask</name><operator>)</operator> <operator>&lt;</operator> <name>prev_one</name> <operator>||</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <name>next_mask</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>next_mask</name> <operator>-</operator> <name>next_one</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>perform_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delayStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>finish_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delayStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>new_val</name> <operator>=</operator> <name>val</name> <operator>-</operator> <name>prev_one</name> <operator>+</operator> <name>next_one</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>UCM_BRANCH_FACTOR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ucm_inc_recursive</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
						  <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>new_val</name> <operator>&amp;</operator> <name>prev_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>InvalidUsageCount</name></expr></else></ternary></expr></argument>,
						  <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <name>next_mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>next</name></expr> </then><else>: <expr><name>InvalidUsageCount</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ucm_inc</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ucm_inc_recursive</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nonLeaf</name></name> <operator>+</operator> <name>blkno</name> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>page_inc_usage_count</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>,
					 <parameter><decl><type><name>uint32</name></type> <name>usageCount</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>epoch</name> <init>= <expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>usageCount</name> <operator>==</operator> <name>InvalidUsageCount</name> <operator>||</operator>
		<name>usageCount</name> <operator>==</operator> <name>UCM_FREE_PAGES_LEVEL</name> <operator>||</operator>
		<operator>(</operator><operator>!</operator><name>no_skip</name> <operator>&amp;&amp;</operator> <name>skip_ucm</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>usageCount</name> <operator>&lt;</operator> <name>UCM_USAGE_LEVELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>usageCounter</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>UCM_USAGE_LEVELS</name> <operator>+</operator> <name>usageCount</name> <operator>-</operator> <name>epoch</name><operator>)</operator> <operator>%</operator> <name>UCM_USAGE_LEVELS</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>usageCounter</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>usageCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>UCM_USAGE_LEVELS</name> <operator>!=</operator> <name>epoch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>usageCount</name><operator>)</operator></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>usageCount</name></expr></argument>,
										   <argument><expr><operator>(</operator><name>usageCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>UCM_USAGE_LEVELS</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ucm_inc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>blkno</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>usageCount</name></expr></argument>, <argument><expr><operator>(</operator><name>usageCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>UCM_USAGE_LEVELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>page_change_usage_count</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>usageCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>prev_usagecount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>prev_usagecount</name> <operator>=</operator> <call><name>pg_atomic_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>usageCount</name><operator>)</operator></expr></argument>,
											 <argument><expr><name>usageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ucm_inc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>blkno</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>prev_usagecount</name></expr></argument>, <argument><expr><name>usageCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>page_try_change_usage_count</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>,
							<parameter><decl><type><name>uint32</name></type> <name>old_usagecount</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>new_usagecount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>usageCount</name><operator>)</operator></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>old_usagecount</name></expr></argument>,
									   <argument><expr><name>new_usagecount</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ucm_inc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>blkno</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>old_usagecount</name></expr></argument>, <argument><expr><name>new_usagecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ucm_check_recursive</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>nonLeaf</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Non-leaf */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>,
					<decl><type ref="prev"/><name>j_max</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>expected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
					<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>j_max</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>j_max</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>&amp;&amp;</operator> <call><name>ucm_check_recursive</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>expected</name> <operator>+=</operator> <call><name>get_value_frame</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>expected</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"wrong value of internal ucm[%d]: expected %x, have %x"</literal></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>group_num</name> <init>= <expr><name>i</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>nonLeaf</name></name></expr></init></decl>,
					<decl><type ref="prev"/><name>blkno</name></decl>,
					<decl><type ref="prev"/><name>blkno_max</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>expected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
					<decl><type ref="prev"/><name>value</name></decl>,
					<decl><type ref="prev"/><name>usageCount</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>blkno_max</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><operator>(</operator><name>group_num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>blkno</name> <operator>=</operator> <name>group_num</name> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</init> <condition><expr><name>blkno</name> <operator>&lt;</operator> <name>blkno_max</name></expr>;</condition> <incr><expr><name>blkno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>usageCount</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>usageCount</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>usageCount</name> <operator>&lt;</operator> <name>UCM_LEVELS</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>expected</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>UCM_LEVEL_BITS</name> <operator>*</operator> <name>usageCount</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>usageCount</name> <operator>!=</operator> <name>InvalidUsageCount</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"wrong value of ucm[%d]: expected %x, have %x"</literal></expr></argument>,
					 <argument><expr><name>i</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>expected</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"wrong value of leaf ucm[%d]: expected %x, have %x"</literal></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucm_check_map</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>&amp;&amp;</operator> <call><name>ucm_check_recursive</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ucm_epoch_needs_shift</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mask</name></decl>,
				<decl><type ref="prev"/><name>epoch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>epoch</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>UCM_USAGE_LEVELS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UCM_USAGE_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>shift</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>epoch</name><operator>)</operator> <operator>%</operator> <name>UCM_USAGE_LEVELS</name><operator>)</operator> <operator>*</operator> <name>UCM_LEVEL_BITS</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>UCM_LEVEL_MASK</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ucm_epoch_shift</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>epoch</name></decl>,
				<decl><type ref="prev"/><name>next_epoch</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>epoch</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>epoch</name> <operator>==</operator> <name>UCM_USAGE_LEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>next_epoch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>next_epoch</name> <operator>=</operator> <name>epoch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epoch</name></expr></argument>, <argument><expr><name>next_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OInMemoryBlkno</name></type>
<name>ucm_next_blkno</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>init_blkno</name></decl></parameter>,
			   <parameter><decl><type><name>uint32</name></type> <name>mask_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>location</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>factor</name></decl>,
				<decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>num_iterations</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>epoch</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>epoch</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UCM_USAGE_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>mask_src</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>shift</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <name>epoch</name><operator>)</operator> <operator>%</operator> <name>UCM_USAGE_LEVELS</name><operator>)</operator> <operator>*</operator> <name>UCM_LEVEL_BITS</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>UCM_LEVEL_MASK</name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>location</name> <operator>=</operator> <name>init_blkno</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>factor</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>rootFactor</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>location</name> <operator>/</operator> <name>factor</name><operator>)</operator> <operator>%</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>factor</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Work with pages themselves */</comment>
			<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>location</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>usageCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>usageCount</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>usageCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>usageCount</name> <operator>&lt;</operator> <name>UCM_LEVELS</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>j</name> <init>= <expr><operator>(</operator><name>UCM_LEVELS</name> <operator>+</operator> <name>usageCount</name> <operator>-</operator> <name>epoch</name><operator>)</operator> <operator>%</operator> <name>UCM_LEVELS</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>mask_src</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>page_inc_usage_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>location</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>usageCount</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>location</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>total</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Required usage counts should be here, so step into */</comment>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>factor</name> <operator>/=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Not found, so step over */</comment>
			<decl_stmt><decl><type><name>int64</name></type>		<name>j</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>num_iterations</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Made two rounds and didn't found required usage counts.  So
				 * give up and retry at upper level.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>uint32</name></type>		<name>next_epoch</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>epoch</name> <operator>==</operator> <name>UCM_USAGE_LEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>next_epoch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>next_epoch</name> <operator>=</operator> <name>epoch</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>pg_atomic_compare_exchange_u32</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>epoch</name></expr></argument>,
												   <argument><expr><name>next_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<goto>goto <name>retry</name>;</goto>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>factor</name> <operator>*=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>num_iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>location</name> <operator>/</operator> <name>factor</name><operator>)</operator> <operator>%</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>location</name> <operator>=</operator> <operator>(</operator><name>location</name> <operator>/</operator> <name>factor</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>location</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>UCM_BRANCH_FACTOR</name> <operator>-</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_iterations</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>OInMemoryBlkno</name></type>
<name>ucm_occupy_free_page</name><parameter_list>(<parameter><decl><type><name>UsageCountMap</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>location</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>factor</name></decl>,
				<decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>num_iterations</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mask</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>UCM_LEVEL_MASK</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>UCM_FREE_PAGES_LEVEL</name> <operator>*</operator> <name>UCM_LEVEL_BITS</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>location</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>factor</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>rootFactor</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>num_iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>factor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><name>location</name> <operator>/</operator> <name>factor</name><operator>)</operator> <operator>%</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>factor</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>location</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Work with pages themselves */</comment>
			<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name> <init>= <expr><name>location</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>usageCount</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>usageCount</name> <operator>=</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><operator>-&gt;</operator><name>usageCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>usageCount</name> <operator>==</operator> <name>UCM_FREE_PAGES_LEVEL</name> <operator>&amp;&amp;</operator>
				<call><name>page_try_change_usage_count</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>,
											<argument><expr><name>UCM_FREE_PAGES_LEVEL</name></expr></argument>, <argument><expr><name>InvalidUsageCount</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>blkno</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>total</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>ucm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Required usage counts should be here, so step into */</comment>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>factor</name> <operator>/=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Not found, so step over */</comment>
			<decl_stmt><decl><type><name>int64</name></type>		<name>j</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>num_iterations</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Made two rounds and didn't found required usage counts.  So
				 * give up and retry at upper level.
				 */</comment>
				<expr_stmt><expr><name>factor</name> <operator>*=</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>UCM_BRANCH_FACTOR</name><operator>)</operator> <operator>*</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>num_iterations</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>location</name> <operator>/</operator> <name>factor</name><operator>)</operator> <operator>%</operator> <name>UCM_BRANCH_FACTOR</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>location</name> <operator>=</operator> <operator>(</operator><name>location</name> <operator>/</operator> <name>factor</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>location</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>UCM_BRANCH_FACTOR</name> <operator>-</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_iterations</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_skip_ucm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>skip_ucm</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>unset_skip_ucm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>skip_ucm</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
