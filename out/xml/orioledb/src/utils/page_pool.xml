<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/utils/page_pool.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * page_pool.c
 *		OrioleDB logical page pool implementation.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/utils/page_pool.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/page_contents.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ucm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memdebug.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Calculates shared memory space needed for a page pool. Be careful,
 * it prepares local memory structures to initialize.
 */</comment>
<function><type><name>Size</name></type>
<name>ppool_estimate_space</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>debug</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>debug</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>PPOOL_MIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>ucmShmemSize</name></name> <operator>=</operator> <call><name>estimate_ucm_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>pool</name><operator>-&gt;</operator><name>ucmShmemSize</name></name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes data in shared memory for the page pool. ppool_estimate_space()
 * must be already called for the pool.
 */</comment>
<function><type><name>void</name></type>
<name>ppool_shmem_init</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name> <operator>=</operator> <operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>dirtyPagesCount</name></name> <operator>=</operator> <operator>(</operator><name>pg_atomic_uint32</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dirtyPagesCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>init_ucm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">150000</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>pg_prng_seed</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>prngSeed</name></name></expr></argument>, <argument><expr><name>MyBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <call><name>pg_prng_uint64_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>prngSeed</name></name></expr></argument>,
										  <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
										  <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>xseed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MyBackendId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>xseed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MyBackendId</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>xseed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <call><name>pg_jrand48</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>xseed</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Reserve pages for further allocation.  Reserving pages might require running
 * clock algorithm with page eviction.  It shouldn't be called while holding
 * a page lock for two reasons.
 *
 * 1) Searching and eviction of page might take too long time for holding a
 *    page lock.
 * 2) Eviction of page places page locks itself.  And it's hard to guarantee
 *    there is no deadlocks assuming that we might evict almost any page.
 *
 * This is why one should reserve enough amount of pages _before_ taking a page
 * lock, and then allocate them using ucm_occupy_free_page().
 */</comment>
<function><type><name>void</name></type>
<name>ppool_reserve_pages</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>val</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>have_locked_pages</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>count</name> <operator>-=</operator> <name><name>pool</name><operator>-&gt;</operator><name>numPagesReserved</name><index>[<expr><name>kind</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>pg_atomic_sub_fetch_u64</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>val</name> <operator>&amp;</operator> <operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ppool_run_clock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>numPagesReserved</name><index>[<expr><name>kind</name></expr>]</index></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Release previously reserved pages according to mask (multiple kinds can be
 * released in one call).
 */</comment>
<function><type><name>void</name></type>
<name>ppool_release_reserved</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>kind</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>kind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>kind</name> <operator>&lt;</operator> <name>PPOOL_RESERVE_COUNT</name></expr>;</condition> <incr><expr><name>kind</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kind</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>pool</name><operator>-&gt;</operator><name>numPagesReserved</name><index>[<expr><name>kind</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>numPagesReserved</name><index>[<expr><name>kind</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_add_fetch_u64</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Release all reserved pages in all the pools.
 */</comment>
<function><type><name>void</name></type>
<name>ppool_release_all_pages</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OPagePool</name>  <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>get_ppool</name><argument_list>(<argument><expr><operator>(</operator><name>OPagePoolType</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ppool_release_reserved</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>PPOOL_RESERVE_MASK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Reserves and allocate page for metadata. Metadata pages are typically
 * allocated without holding any page locks.
 */</comment>
<function><type><name>OInMemoryBlkno</name></type>
<name>ppool_get_metapage</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ppool_reserve_pages</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>PPOOL_RESERVE_META</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ppool_get_page</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>PPOOL_RESERVE_META</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get next free page from the pool.
 *
 * Free page should be previously reserved by o_pool_reserve_pages().
 */</comment>
<function><type><name>OInMemoryBlkno</name></type>
<name>ppool_get_page</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>numPagesReserved</name><index>[<expr><name>kind</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>numPagesReserved</name><index>[<expr><name>kind</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ucm_occupy_free_page</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;=</operator> <name>result</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return free page to the pool.
 */</comment>
<function><type><name>void</name></type>
<name>ppool_free_page</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>haveLock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OrioleDBPageDesc</name> <modifier>*</modifier></type><name>page_desc</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGEDESC</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;=</operator> <name>blkno</name> <operator>&amp;&amp;</operator> <name>blkno</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>VALGRIND_CHECK_MEM_IS_DEFINED</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>IS_DIRTY</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reset page header and descriptor.  Do this while holding a page lock in
	 * order to prevent race condition with walk_page().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>haveLock</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>lock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>O_PAGE_CHANGE_COUNT_INC</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>fileExtent</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>InvalidFileExtentOff</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_desc</name><operator>-&gt;</operator><name>fileExtent</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>InvalidFileExtentLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlock_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>page_change_usage_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>UCM_FREE_PAGES_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_add_fetch_u64</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return count of free pages in the pool.
 */</comment>
<function><type><name>OInMemoryBlkno</name></type>
<name>ppool_free_pages_count</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>count</name> <init>= <expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>availablePagesCount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&amp;</operator> <operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">63</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>OInMemoryBlkno</name><operator>)</operator> <name>count</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return count of dirty pages in the pool.
 */</comment>
<function><type><name>OInMemoryBlkno</name></type>
<name>ppool_dirty_pages_count</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>dirtyPagesCount</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Run clock replacement algorithm until we evict at least one page.
 */</comment>
<function><type><name>void</name></type>
<name>ppool_run_clock</name><parameter_list>(<parameter><decl><type><name>OPagePool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>evict</name></decl></parameter>,
				<parameter><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name> <modifier>*</modifier></type><name>shutdown_requested</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>blkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>undoSize</name> <init>= <expr><call><name>get_reserved_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>haveRetainLoc</name> <init>= <expr><call><name>have_retained_undo_location</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">150000</literal></expr></cpp:if>
	<expr_stmt><expr><name>blkno</name> <operator>=</operator> <call><name>pg_prng_uint64_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>prngSeed</name></name></expr></argument>,
								 <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
								 <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>blkno</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <call><name>pg_jrand48</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>xseed</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Shouldn't be called while holding a page lock: one should reserve the
	 * pages in advance.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>have_locked_pages</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We might need to merge pages */</comment>
	<expr_stmt><expr><call><name>reserve_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>O_MERGE_UNDO_IMAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>blkno</name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;&amp;</operator> <name>blkno</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Our attempts to evict pages shouldn't themselves affect UCM */</comment>
	<expr_stmt><expr><call><name>set_skip_ucm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>shutdown_requested</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>shutdown_requested</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>blkno</name> <operator>=</operator> <call><name>ucm_next_blkno</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>blkno</name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;&amp;</operator> <name>blkno</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>walk_page</name><argument_list>(<argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>evict</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OWalkPageSkipped</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>have_locked_pages</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>have_locked_pages</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>blkno</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>blkno</name> <operator>&gt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>blkno</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>unset_skip_ucm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The caller might have the undo location reserved.  We need to carefully
	 * put the undo location back.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>haveRetainLoc</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>undoSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>reserve_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>, <argument><expr><name>undoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>release_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_retained_undo_location</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>undoSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>reserve_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>, <argument><expr><name>undoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
