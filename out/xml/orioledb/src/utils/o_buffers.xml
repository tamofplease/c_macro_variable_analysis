<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/utils/o_buffers.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * o_buffers.c
 * 		Buffering layer for file access.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_indices.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/o_buffers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_BUFFERS_PER_GROUP</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>OBuffersMeta</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>groupCtlTrancheId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bufferCtlTrancheId</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>LWLock</name></type>		<name>bufferCtlLock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>blockNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>usageCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>dirty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>data</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>OBuffer</name>;</typedef>

<struct>struct <name>OBuffersGroup</name>
<block>{
	<decl_stmt><decl><type><name>LWLock</name></type>		<name>groupCtlLock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBuffer</name></type>		<name><name>buffers</name><index>[<expr><name>O_BUFFERS_PER_GROUP</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>Size</name></type>
<name>o_buffers_shmem_needs</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name> <operator>=</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>buffersCount</name></name> <operator>+</operator> <name>O_BUFFERS_PER_GROUP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</expr_stmt>

	<return>return <expr><call><name>add_size</name><argument_list>(<argument><expr><call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OBuffersMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OBuffersGroup</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_buffers_shmem_init</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name></name> <operator>=</operator> <operator>(</operator><name>OBuffersMeta</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OBuffersMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <operator>(</operator><name>OBuffersGroup</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name> <operator>=</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>buffersCount</name></name> <operator>+</operator> <name>O_BUFFERS_PER_GROUP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name> <operator>%</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name></decl>,
					<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name><operator>-&gt;</operator><name>groupCtlTrancheId</name></name> <operator>=</operator> <call><name>LWLockNewTrancheId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name><operator>-&gt;</operator><name>bufferCtlTrancheId</name></name> <operator>=</operator> <call><name>LWLockNewTrancheId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OBuffersGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>groupCtlLock</name></name></expr></argument>,
							 <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name><operator>-&gt;</operator><name>groupCtlTrancheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OBuffer</name>    <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>,
								 <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name><operator>-&gt;</operator><name>bufferCtlTrancheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>usageCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name><operator>-&gt;</operator><name>groupCtlTrancheId</name></name></expr></argument>,
						  <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>groupCtlTrancheName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>metaPageBlkno</name><operator>-&gt;</operator><name>bufferCtlTrancheId</name></name></expr></argument>,
						  <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>bufferCtlTrancheName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>open_file</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>fileNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>curFileNum</name></name> <operator>==</operator> <name>fileNum</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_snprintf</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFileName</name></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>,
				<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>filenameTemplate</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>fileNum</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>fileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFileName</name></name></expr></argument>,
									 <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>curFileNum</name></name> <operator>=</operator> <name>fileNum</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open undo log file %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFileName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unlink_file</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>fileNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>fileNameToUnlink</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_snprintf</name><argument_list>(<argument><expr><name>fileNameToUnlink</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>,
				<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>filenameTemplate</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>fileNum</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>fileNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>fileNameToUnlink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_buffer</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>open_file</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>/</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>OFileWrite</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>,
						<argument><expr><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>*</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator> <operator>%</operator> <name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name></expr></argument>,
						<argument><expr><name>WAIT_EVENT_SLRU_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write buffer to file %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFileName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_buffer</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>open_file</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>/</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>OFileRead</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>,
					   <argument><expr><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>*</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator> <operator>%</operator> <name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name></expr></argument>,
					   <argument><expr><name>WAIT_EVENT_SLRU_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we may not read all the bytes due to read past EOF */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read buffer from file %s"</literal></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFileName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <name>ORIOLEDB_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>result</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name> <operator>-</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OBuffer</name> <modifier>*</modifier></type>
<name>get_buffer</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>blockNum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OBuffersGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>blockNum</name> <operator>%</operator> <name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBuffer</name>    <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>victim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>victimUsageCount</name></decl>;</decl_stmt>

	<comment type="block">/* First check if required buffer is already loaded */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>groupCtlLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>==</operator> <name>blockNum</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><name>LW_EXCLUSIVE</name></expr> </then><else>: <expr><name>LW_SHARED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>usageCount</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>groupCtlLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>buffer</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>groupCtlLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No lock: have to evict some buffer */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>groupCtlLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Search for victim buffer */</comment>
	<expr_stmt><expr><name>victim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>victimUsageCount</name> <operator>=</operator> <name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>usageCount</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>usageCount</name></name> <operator>&lt;</operator> <name>victimUsageCount</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>victim</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>victim</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>write_buffer</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>usageCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>=</operator> <name>blockNum</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>read_buffer</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>groupCtlLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_buffers_rw</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>buf</name></decl></parameter>,
			 <parameter><decl><type><name>int64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>size</name></decl></parameter>,
			 <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>firstBlockNum</name> <init>= <expr><name>offset</name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr></init></decl>,
				<decl><type ref="prev"/><name>lastBlockNum</name> <init>= <expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr></init></decl>,
				<decl><type ref="prev"/><name>blockNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>blockNum</name> <operator>=</operator> <name>firstBlockNum</name></expr>;</init> <condition><expr><name>blockNum</name> <operator>&lt;=</operator> <name>lastBlockNum</name></expr>;</condition> <incr><expr><name>blockNum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBuffer</name>    <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>get_buffer</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>blockNum</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>copySize</name></decl>,
					<decl><type ref="prev"/><name>copyOffset</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>firstBlockNum</name> <operator>==</operator> <name>lastBlockNum</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>copySize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>copyOffset</name> <operator>=</operator> <name>offset</name> <operator>%</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>blockNum</name> <operator>==</operator> <name>firstBlockNum</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>copySize</name> <operator>=</operator> <name>ORIOLEDB_BLCKSZ</name> <operator>-</operator> <name>offset</name> <operator>%</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>copyOffset</name> <operator>=</operator> <name>offset</name> <operator>%</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>blockNum</name> <operator>==</operator> <name>lastBlockNum</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>copySize</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>ORIOLEDB_BLCKSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>copyOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>copySize</name> <operator>=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>copyOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>copyOffset</name></expr>]</index></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>copySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>copyOffset</name></expr>]</index></name></expr></argument>, <argument><expr><name>copySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>copySize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_buffers_read</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_buffers_rw</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_buffers_write</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_buffers_rw</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_buffers_flush</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
				<parameter><decl><type><name>int64</name></type> <name>firstBufferNumber</name></decl></parameter>,
				<parameter><decl><type><name>int64</name></type> <name>lastBufferNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBuffersGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OBuffer</name>    <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>&amp;&amp;</operator>
				<name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;=</operator> <name>firstBufferNumber</name> <operator>&amp;&amp;</operator>
				<name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&lt;=</operator> <name>lastBufferNumber</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>write_buffer</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_buffers_wipe</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
			   <parameter><decl><type><name>int64</name></type> <name>firstBufferNumber</name></decl></parameter>,
			   <parameter><decl><type><name>int64</name></type> <name>lastBufferNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>groupsCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OBuffersGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>groups</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>O_BUFFERS_PER_GROUP</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OBuffer</name>    <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>&amp;</operator><name><name>group</name><operator>-&gt;</operator><name>buffers</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>&amp;&amp;</operator>
				<name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;=</operator> <name>firstBufferNumber</name> <operator>&amp;&amp;</operator>
				<name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&lt;=</operator> <name>lastBufferNumber</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>bufferCtlLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_buffers_sync</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
			   <parameter><decl><type><name>int64</name></type> <name>fromOffset</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>toOffset</name></decl></parameter>,
			   <parameter><decl><type><name>uint32</name></type> <name>wait_event_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>firstPageNumber</name></decl>,
				<decl><type ref="prev"/><name>lastPageNumber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>firstFileNumber</name></decl>,
				<decl><type ref="prev"/><name>lastFileNumber</name></decl>,
				<decl><type ref="prev"/><name>fileNumber</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>firstPageNumber</name> <operator>=</operator> <name>fromOffset</name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lastPageNumber</name> <operator>=</operator> <name>toOffset</name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>toOffset</name> <operator>%</operator> <name>ORIOLEDB_BLCKSZ</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lastPageNumber</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>o_buffers_flush</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>firstPageNumber</name></expr></argument>, <argument><expr><name>lastPageNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>firstFileNumber</name> <operator>=</operator> <name>fromOffset</name> <operator>/</operator> <name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lastFileNumber</name> <operator>=</operator> <name>toOffset</name> <operator>/</operator> <name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>toOffset</name> <operator>%</operator> <name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>lastFileNumber</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>fileNumber</name> <operator>=</operator> <name>firstFileNumber</name></expr>;</init> <condition><expr><name>fileNumber</name> <operator>&lt;=</operator> <name>lastFileNumber</name></expr>;</condition> <incr><expr><name>fileNumber</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>open_file</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>fileNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FileSync</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>curFile</name></name></expr></argument>, <argument><expr><name>wait_event_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_buffers_unlink_files_range</name><parameter_list>(<parameter><decl><type><name>OBuffersDesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
							 <parameter><decl><type><name>int64</name></type> <name>firstFileNumber</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>lastFileNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>fileNumber</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_buffers_wipe</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
				   <argument><expr><name>firstFileNumber</name> <operator>*</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator></expr></argument>,
				   <argument><expr><operator>(</operator><name>lastFileNumber</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>singleFileSize</name></name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>fileNumber</name> <operator>=</operator> <name>firstFileNumber</name></expr>;</init>
		 <condition><expr><name>fileNumber</name> <operator>&lt;=</operator> <name>lastFileNumber</name></expr>;</condition>
		 <incr><expr><name>fileNumber</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>unlink_file</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>fileNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
