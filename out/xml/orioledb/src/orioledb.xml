<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/orioledb.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * orioledb.c
 *		Main file: setup shared memory, hooks and other general-purpose
 *		routines.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/orioledb.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/find.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/sys_trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ucm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"workers/bgwriter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/plancat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/autovacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgwriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proclist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rangetypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>debug_disable_pools_limit</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>shared_segment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>shared_segment_initialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>free_tree_buffers_guc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Size</name></type> <name>free_tree_buffers_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>catalog_buffers_guc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Size</name></type> <name>catalog_buffers_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Size</name></type> <name>main_buffers_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pointer</name></type>		<name>o_shared_buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pointer</name></type>		<name>o_undo_buffers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OrioleDBPageDesc</name> <modifier>*</modifier></type><name>page_descs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Custom GUC variables */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>main_buffers_guc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>undo_buffers_guc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>xid_buffers_guc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>max_procs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type>		<name>orioledb_buffers_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type>		<name>orioledb_buffers_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type>		<name>page_descs_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type>		<name>undo_circular_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type>		<name>undo_buffers_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type>		<name>xid_circular_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type>		<name>xid_buffers_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>remove_old_checkpoint_files</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>debug_disable_bgwriter</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>use_mmap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>use_device</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>device_filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pointer</name></type>		<name>mmap_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>device_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>device_length_guc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Size</name></type>		<name>device_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>o_checkpoint_completion_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>bgwriter_num_workers</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>max_io_concurrency</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ODBProcData</name> <modifier>*</modifier></type><name>oProcData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>default_compress</name> <init>= <expr><name>InvalidOCompress</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>default_primary_compress</name> <init>= <expr><name>InvalidOCompress</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>default_toast_compress</name> <init>= <expr><name>InvalidOCompress</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Previous values of hooks to chain call them */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>prev_shmem_request_hook</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>get_relation_info_hook_type</name></type> <name>prev_get_relation_info_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CheckPoint_hook_type</name></type> <name>next_CheckPoint_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Temporary memory context for BTree operations. Helps us to avoid
 * excessive code complexity.
 */</comment>
<decl_stmt><decl><type><name>MemoryContext</name></type> <name>btree_insert_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Memory context for btree sequential scans.  Scans needs to survive till
 * seq_scans_cleanup().
 */</comment>
<decl_stmt><decl><type><name>MemoryContext</name></type> <name>btree_seqscan_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OPagePool</name></type>	<name><name>page_pools</name><index>[<expr><name>OPagePoolTypesCount</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name><name>page_pools_size</name><index>[<expr><name>OPagePoolTypesCount</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>o_proc_shmem_needs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_proc_shmem_init</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>ppools_shmem_needs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ppools_shmem_init</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
	<function_decl><type><name>Size</name></type>		(<modifier>*</modifier><name>shmem_size</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type>		(<modifier>*</modifier><name>shmem_init</name>) <parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ShmemItem</name>;</typedef>

<comment type="block">/*
 * checkpoint_shmem_init() should be before recovery_shmem_init().
 * See recovery_shmem_init() for description.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ShmemItem</name></type> <name><name>shmemItems</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>btree_io_shmem_needs</name></expr>, <expr><name>btree_io_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>oxid_shmem_needs</name></expr>, <expr><name>oxid_init_shmem</name></expr>}</block></expr>,
	<expr><block>{<expr><name>sys_trees_shmem_needs</name></expr>, <expr><name>sys_trees_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>StopEventShmemSize</name></expr>, <expr><name>StopEventShmemInit</name></expr>}</block></expr>,
	<expr><block>{<expr><name>undo_shmem_needs</name></expr>, <expr><name>undo_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>checkpoint_shmem_size</name></expr>, <expr><name>checkpoint_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>recovery_shmem_needs</name></expr>, <expr><name>recovery_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>o_proc_shmem_needs</name></expr>, <expr><name>o_proc_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>ppools_shmem_needs</name></expr>, <expr><name>ppools_shmem_init</name></expr>}</block></expr>,
	<expr><block>{<expr><name>btree_scan_shmem_needs</name></expr>, <expr><name>btree_scan_init_shmem</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>orioledb_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_shmem_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>verify_dir_is_empty_or_create</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>created</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_usercache_hook</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg3</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_error_cleanup_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_get_relation_info_hook</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>rootPageBlkno</name></decl></parameter>,
											<parameter><decl><type><name>Oid</name></type> <name>relationObjectId</name></decl></parameter>,
											<parameter><decl><type><name>bool</name></type> <name>inhparent</name></decl></parameter>,
											<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_page_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_commit_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ucm_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>main_buffers_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process_shared_preload_libraries_in_progress</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>verify_dir_is_empty_or_create</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>ORIOLEDB_DATA_DIR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>verify_dir_is_empty_or_create</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>ORIOLEDB_UNDO_DIR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* See InitializeMaxBackends(), InitProcGlobal() */</comment>
	<expr_stmt><expr><name>max_procs</name> <operator>=</operator> <name>MaxConnections</name> <operator>+</operator> <name>autovacuum_max_workers</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator>
		<name>max_worker_processes</name> <operator>+</operator> <name>max_wal_senders</name> <operator>+</operator> <name>NUM_AUXILIARY_PROCS</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.debug_disable_pools_limit"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Disables pools minimal limit for debug."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>debug_disable_pools_limit</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.main_buffers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of orioledb engine shared buffers for main data."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>main_buffers_guc</name></expr></argument>,
							<argument><expr><literal type="number">8192</literal></expr></argument>,
							<argument><expr><ternary><condition><expr><name>debug_disable_pools_limit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>PPOOL_MIN_SIZE_BLCKS</name></expr></else></ternary></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_BLOCKS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.free_tree_buffers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of orioledb engine shared buffers for free extents BTrees."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>free_tree_buffers_guc</name></expr></argument>,
							<argument><expr><name>PPOOL_MIN_SIZE_BLCKS</name></expr></argument>,
							<argument><expr><ternary><condition><expr><name>debug_disable_pools_limit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>PPOOL_MIN_SIZE_BLCKS</name></expr></else></ternary></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_BLOCKS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.catalog_buffers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of orioledb engine shared buffers for free extents BTrees."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>catalog_buffers_guc</name></expr></argument>,
							<argument><expr><name>PPOOL_MIN_SIZE_BLCKS</name></expr></argument>,
							<argument><expr><ternary><condition><expr><name>debug_disable_pools_limit</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>PPOOL_MIN_SIZE_BLCKS</name></expr></else></ternary></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_BLOCKS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.undo_buffers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of orioledb engine undo log buffers."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>undo_buffers_guc</name></expr></argument>,
							<argument><expr><literal type="number">128</literal></expr></argument>,
							<argument><expr><literal type="number">128</literal></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_BLOCKS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.xid_buffers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of orioledb engine xid buffers."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>xid_buffers_guc</name></expr></argument>,
							<argument><expr><literal type="number">128</literal></expr></argument>,
							<argument><expr><literal type="number">128</literal></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_BLOCKS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.enable_stopevents"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Enable stop events."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>enable_stopevents</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.trace_stopevents"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Trace all the stop events to the system log."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>trace_stopevents</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.remove_old_checkpoint_files"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Remove temporary *.tmp and *.map files after checkpoint."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>remove_old_checkpoint_files</name></expr></argument>,
							 <argument><expr><name>true</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.debug_disable_bgwriter"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Disables bgwriter for debug."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>debug_disable_bgwriter</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.recovery_queue_size"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of orioledb recovery queue per worker."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>recovery_queue_size_guc</name></expr></argument>,
							<argument><expr><literal type="number">1024</literal></expr></argument>,
							<argument><expr><literal type="number">512</literal></expr></argument>,
							<argument><expr><name>MAX_KILOBYTES</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_KB</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.recovery_pool_size"</literal></expr></argument>,
							<argument><expr><literal type="string">"Sets the number of recovery workers."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>recovery_pool_size_guc</name></expr></argument>,
							<argument><expr><literal type="number">3</literal></expr></argument>,
							<argument><expr><literal type="number">1</literal></expr></argument>,
							<argument><expr><literal type="number">128</literal></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This variable added because we need values less than minimum value of
	 * checkpoint_timeout(30s) for tests.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.debug_checkpoint_timeout"</literal></expr></argument>,
							<argument><expr><literal type="string">"Sets the maximum time between automatic WAL checkpoints."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>CheckPointTimeout</name></expr></argument>,
							<argument><expr><name>CheckPointTimeout</name></expr></argument>,
							<argument><expr><literal type="number">1</literal></expr></argument>,
							<argument><expr><literal type="number">86400</literal></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_S</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * How much time orioledb checkpoint can take relative to PostgreSQL
	 * checkpoint.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomRealVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.checkpoint_completion_ratio"</literal></expr></argument>,
							 <argument><expr><literal type="string">"ratio of orioledb checkpoint to postgres checkpoint."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>o_checkpoint_completion_ratio</name></expr></argument>,
							 <argument><expr><literal type="number">0.5</literal></expr></argument>,
							 <argument><expr><literal type="number">0.0</literal></expr></argument>,
							 <argument><expr><literal type="number">1.0</literal></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.bgwriter_num_workers"</literal></expr></argument>,
							<argument><expr><literal type="string">"Number of background writers."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>bgwriter_num_workers</name></expr></argument>,
							<argument><expr><literal type="number">1</literal></expr></argument>,
							<argument><expr><literal type="number">1</literal></expr></argument>,
							<argument><expr><name>MAX_BACKENDS</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.max_io_concurrency"</literal></expr></argument>,
							<argument><expr><literal type="string">"Number of maximum concurrent IO operations."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>max_io_concurrency</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.use_mmap"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Store data in the mmap'ed file."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>use_mmap</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.device_filename"</literal></expr></argument>,
							   <argument><expr><literal type="string">"Data file for mmap."</literal></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>device_filename</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>,
							   <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							   <argument><expr><literal type="number">0</literal></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>,
							   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.device_length"</literal></expr></argument>,
							<argument><expr><literal type="string">"Size of mmap."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>device_length_guc</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_BLOCKS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.default_compress"</literal></expr></argument>,
							<argument><expr><literal type="string">"Default compression level."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>default_compress</name></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><call><name>o_compress_max_lvl</name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><name>PGC_USERSET</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.default_primary_compress"</literal></expr></argument>,
							<argument><expr><literal type="string">"Default compression level of primary index."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>default_primary_compress</name></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><call><name>o_compress_max_lvl</name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><name>PGC_USERSET</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"orioledb.default_toast_compress"</literal></expr></argument>,
							<argument><expr><literal type="string">"Default compression level of TOAST."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>default_toast_compress</name></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><call><name>o_compress_max_lvl</name><argument_list>()</argument_list></call></expr></argument>,
							<argument><expr><name>PGC_USERSET</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>main_buffers_count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Size</name><operator>)</operator> <name>main_buffers_guc</name> <operator>*</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>BLCKSZ</name><operator>)</operator> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>free_tree_buffers_count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Size</name><operator>)</operator> <name>free_tree_buffers_guc</name> <operator>*</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>BLCKSZ</name><operator>)</operator> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>catalog_buffers_count</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Size</name><operator>)</operator> <name>catalog_buffers_guc</name> <operator>*</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>BLCKSZ</name><operator>)</operator> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>main_buffers_offset</name> <operator>=</operator> <name>free_tree_buffers_count</name> <operator>+</operator> <name>catalog_buffers_count</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>orioledb_buffers_count</name> <operator>=</operator> <name>main_buffers_count</name> <operator>+</operator> <name>free_tree_buffers_count</name> <operator>+</operator> <name>catalog_buffers_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>orioledb_buffers_size</name> <operator>=</operator> <call><name>mul_size</name><argument_list>(<argument><expr><name>orioledb_buffers_count</name></expr></argument>, <argument><expr><name>ORIOLEDB_BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>undo_circular_buffer_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Size</name><operator>)</operator> <name>undo_buffers_guc</name> <operator>*</operator> <name>BLCKSZ</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>undo_circular_buffer_size</name> <operator>/=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>undo_buffers_count</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>undo_circular_buffer_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>undo_circular_buffer_size</name> <operator>*=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>xid_circular_buffer_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Size</name><operator>)</operator> <name>xid_buffers_guc</name> <operator>*</operator> <name>BLCKSZ</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>xid_circular_buffer_size</name> <operator>/=</operator> <name>ORIOLEDB_BLCKSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xid_buffers_count</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>xid_circular_buffer_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xid_circular_buffer_size</name> <operator>*=</operator> <name>ORIOLEDB_BLCKSZ</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>recovery_queue_size_guc</name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>page_descs_size</name> <operator>=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>orioledb_buffers_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OrioleDBPageDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EmitWarningsOnPlaceholders</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>page_pools</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>OPagePoolTypesCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OPagePool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_pools_size</name><index>[<expr><name>OPagePoolFreeTree</name></expr>]</index></name> <operator>=</operator> <call><name>ppool_estimate_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>OPagePoolFreeTree</name></expr>]</index></name></expr></argument>,
															  <argument><expr><literal type="number">0</literal></expr></argument>,
															  <argument><expr><name>free_tree_buffers_count</name></expr></argument>,
															  <argument><expr><name>debug_disable_pools_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>page_pools_size</name><index>[<expr><name>OPagePoolCatalog</name></expr>]</index></name> <operator>=</operator> <call><name>ppool_estimate_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>OPagePoolCatalog</name></expr>]</index></name></expr></argument>,
															 <argument><expr><name>free_tree_buffers_count</name></expr></argument>,
															 <argument><expr><name>catalog_buffers_count</name></expr></argument>,
															 <argument><expr><name>debug_disable_pools_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>page_pools_size</name><index>[<expr><name>OPagePoolMain</name></expr>]</index></name> <operator>=</operator> <call><name>ppool_estimate_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>OPagePoolMain</name></expr>]</index></name></expr></argument>,
														  <argument><expr><name>main_buffers_offset</name></expr></argument>,
														  <argument><expr><name>main_buffers_count</name></expr></argument>,
														  <argument><expr><name>debug_disable_pools_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>page_pools_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><name><name>page_pools_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">150000</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>orioledb_shmem_request</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>device_filename</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>device_fd</name> <operator>=</operator> <call><name>BasicOpenFile</name><argument_list>(<argument><expr><name>device_filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>device_length</name> <operator>=</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>device_length_guc</name> <operator>*</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>device_fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"can't open device file %s"</literal></expr></argument>, <argument><expr><name>device_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>use_mmap</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mmap_data</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>device_length</name></expr></argument>,
							 <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
							 <argument><expr><name>MAP_FILE</name> <operator>|</operator> <name>MAP_SHARED</name></expr></argument>,
							 <argument><expr><name>device_fd</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mmap_data</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"can't map device file %s"</literal></expr></argument>, <argument><expr><name>device_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>device_fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>use_device</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mmap_data</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>use_mmap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>use_mmap</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>use_device</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Register background writers */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bgwriter_num_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>register_bgwriter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Register custom deTOAST function */</comment>
	<expr_stmt><expr><call><name>register_o_detoast_func</name><argument_list>(<argument><expr><name>o_detoast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Setup the required hooks. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">150000</literal></expr></cpp:if>
	<expr_stmt><expr><name>prev_shmem_request_hook</name> <operator>=</operator> <name>shmem_request_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_request_hook</name> <operator>=</operator> <name>orioledb_shmem_request</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>orioledb_shmem_startup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_CheckPoint_hook</name> <operator>=</operator> <name>CheckPoint_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_set_rel_pathlist_hook</name> <operator>=</operator> <name>set_rel_pathlist_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>set_rel_pathlist_hook</name> <operator>=</operator> <name>orioledb_set_rel_pathlist_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>set_plain_rel_pathlist_hook</name> <operator>=</operator> <name>orioledb_set_plain_rel_pathlist_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterXactCallback</name><argument_list>(<argument><expr><name>undo_xact_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterSubXactCallback</name><argument_list>(<argument><expr><name>undo_subxact_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CacheRegisterUsercacheCallback</name><argument_list>(<argument><expr><name>orioledb_usercache_hook</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CheckPoint_hook</name> <operator>=</operator> <name>o_perform_checkpoint</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>after_checkpoint_cleanup_hook</name> <operator>=</operator> <name>o_after_checkpoint_cleanup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>logicalmsg_redo_hook</name> <operator>=</operator> <name>o_recovery_logicalmsg_redo_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>RedoStartHook</name> <operator>=</operator> <name>o_recovery_start_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>RedoFinishHook</name> <operator>=</operator> <name>o_recovery_finish_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>snapshot_hook</name> <operator>=</operator> <name>orioledb_snapshot_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CustomErrorCleanupHook</name> <operator>=</operator> <name>orioledb_error_cleanup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>snapshot_register_hook</name> <operator>=</operator> <name>undo_snapshot_register_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>snapshot_deregister_hook</name> <operator>=</operator> <name>undo_snapshot_deregister_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>reset_xmin_hook</name> <operator>=</operator> <name>orioledb_reset_xmin_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_get_relation_info_hook</name> <operator>=</operator> <name>get_relation_info_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>get_relation_info_hook</name> <operator>=</operator> <name>orioledb_get_relation_info_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>xact_redo_hook</name> <operator>=</operator> <name>o_xact_redo_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>orioledb_setup_syscache_hooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>orioledb_setup_ddl_hooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>stopevents_make_cxt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Size</name></type>
<name>o_proc_shmem_needs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>mul_size</name><argument_list>(<argument><expr><name>max_procs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ODBProcData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_proc_shmem_init</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>oProcData</name> <operator>=</operator> <operator>(</operator><name>ODBProcData</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_procs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reservedUndoLocation</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>snapshotRetainUndoLocation</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transactionUndoRetainLocation</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commitInProgressXlogLocation</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xmin</name></expr></argument>, <argument><expr><name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lastLXid</name> <operator>=</operator> <name>LXID_NORMAL_FROM</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vxids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vxids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>undoStackLocationsFlushLock</name></expr></argument>,
							 <argument><expr><name><name>undo_meta</name><operator>-&gt;</operator><name>undoStackLocationsFlushLockTrancheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flushUndoLocations</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PROC_XID_ARRAY_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>undoStackLocations</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>location</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>undoStackLocations</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>branchLocation</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>undoStackLocations</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>subxactLocation</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>undoStackLocations</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>onCommitLocation</name></expr></argument>, <argument><expr><name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vxids</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>oxid</name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Size</name></type>
<name>ppools_shmem_needs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>page_pools_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>orioledb_buffers_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>page_descs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ppools_shmem_init</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name><name>page_pools_ptr</name><index>[<expr><name>OPagePoolTypesCount</name></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>page_pools_ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>page_pools_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>o_shared_buffers</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>orioledb_buffers_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>page_descs</name> <operator>=</operator> <operator>(</operator><name>OrioleDBPageDesc</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ppool_shmem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>page_pools_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>orioledb_buffers_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Page</name></type>		<name>p</name> <init>= <expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OrioleDBPageHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>OrioleDBPageHeader</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>O_PAGE_HEADER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>usageCount</name><operator>)</operator></expr></argument>, <argument><expr><name>UCM_FREE_PAGES_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>pageChangeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>page_descs_size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OrioleDBPageDesc</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fileExtent</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>InvalidFileExtentLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fileExtent</name><operator>.</operator><name>off</name></name> <operator>=</operator> <name>InvalidFileExtentOff</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ionum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>proclist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_descs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>waitersList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate amount of shared memory required by OrioleDB extension.
 */</comment>
<function><type><specifier>static</specifier> <name>Size</name></type>
<name>orioledb_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>shmemItems</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>shmemItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><name><name>shmemItems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>shmem_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_on_shmem_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>MyProc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr>]</index></name><operator>.</operator><name>xmin</name></expr></argument>, <argument><expr><name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Request for shared memory and lwlocks
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_shmem_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>prev_shmem_request_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_shmem_request_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>orioledb_memsize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>request_btree_io_lwlocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><literal type="string">"orioledb_unique_locks"</literal></expr></argument>, <argument><expr><name>max_procs</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize OrioleDB's shared memory.  Called on database instanse start
 * or restart.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>shmemItems</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>shmemItems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>shared_segment</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We must hold AddinShmemInitLock while initilization of our shared
	 * memory.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>shared_segment</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"orioledb_enigne"</literal></expr></argument>,
									 <argument><expr><call><name>orioledb_memsize</name><argument_list>()</argument_list></call></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>shared_segment</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>shmemItems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>shmem_init</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><name><name>shmemItems</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>shmem_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>init_btree_io_lwlocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_btree_init_unique_lwlocks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tableam_descr_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_compress_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_caches_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>before_shmem_exit</name><argument_list>(<argument><expr><name>orioledb_on_shmem_exit</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>shared_segment_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s started"</literal></expr></argument>, <argument><expr><name>ORIOLEDB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>btree_insert_context</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
												 <argument><expr><literal type="string">"orioledb B-tree insert context"</literal></expr></argument>,
												 <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>btree_seqscan_context</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>,
												  <argument><expr><literal type="string">"orioledb B-tree seqential scans context"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>remove_old_checkpoint_files</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>recovery_cleanup_old_files</name><argument_list>(<argument><expr><name><name>checkpoint_state</name><operator>-&gt;</operator><name>lastCheckpointNumber</name></name></expr></argument>,
								   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64</name></type>
<name>orioledb_device_alloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>BTreeDescr</name></name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>mmapDataLength</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>device_length</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"device file overflow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>orioledb_check_shmem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shared_segment_initialized</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"orioledb must be loaded via shared_preload_libraries"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Verify that the given directory exists and is empty. If it does not
 * exist, it is created. If it exists but is not empty, an error will
 * be give and the process ended.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>verify_dir_is_empty_or_create</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>created</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errstr</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>pg_check_dir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>

			<comment type="block">/*
			 * Does not exist, so create
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>pg_mkdir_p</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>errstr</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"could not access directory \"%s\": %s"</literal></expr></argument>,
					 <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>created</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>created</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		<case>case <expr><literal type="number">1</literal></expr>:</case>

			<comment type="block">/*
			 * Exists, empty
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
		<case>case <expr><literal type="number">4</literal></expr>:</case>

			<comment type="block">/*
			 * Exists, not empty
			 */</comment>
			<return>return <expr><name>false</name></expr>;</return>
		<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

			<comment type="block">/*
			 * Access problem
			 */</comment>
			<expr_stmt><expr><name>errstr</name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"could not access directory \"%s\": %s"</literal></expr></argument>,
				 <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><name>false</name></expr>;</return>				<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Test to see if a directory exists and is empty or not.
 *
 * Returns:
 *		0 if nonexistent
 *		1 if exists and empty
 *		2 if exists and contains _only_ dot files
 *		3 if exists and contains a mount point
 *		4 if exists and not empty
 *		-1 if trouble accessing directory (errno reflects the error)
 */</comment>
<function><type><name>int</name></type>
<name>pg_check_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name>		   <modifier>*</modifier></type><name>chkdir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>dot_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>mount_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>readdir_errno</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>chkdir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>chkdir</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOENT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><operator>(</operator><name>file</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>chkdir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* skip this and parent directory */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<comment type="block">/* file starts with "." */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>dot_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="block">/* lost+found directory */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"lost+found"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mount_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>			<comment type="block">/* not empty */</comment>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>			<comment type="block">/* some kind of I/O error? */</comment>

	<comment type="block">/* Close chkdir and avoid overwriting the readdir errno on success */</comment>
	<expr_stmt><expr><name>readdir_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>closedir</name><argument_list>(<argument><expr><name>chkdir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>			<comment type="block">/* error executing closedir */</comment>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>readdir_errno</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* We report on mount point if we find a lost+found directory */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>mount_found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* We report on dot-files if we _only_ find dot files */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>dot_found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_mkdir_p --- create a directory and, if necessary, parent directories
 *
 * This is equivalent to "mkdir -p" except we don't complain if the target
 * directory already exists.
 *
 * We assume the path is in canonical form, i.e., uses / as the separator.
 *
 * omode is the file permissions bits for the target directory.  Note that any
 * parent directories that have to be created get permissions according to the
 * prevailing umask, but with u+wx forced on to ensure we can create there.
 * (We declare omode as int, not mode_t, to minimize dependencies for port.h.)
 *
 * Returns 0 on success, -1 (with errno set) on failure.
 *
 * Note that on failure, the path arg has been modified to show the particular
 * directory level we had problems with.
 */</comment>
<function><type><name>int</name></type>
<name>pg_mkdir_p</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>omode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mode_t</name></type>		<name>numask</name></decl>,
				<decl><type ref="prev"/><name>oumask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>last</name></decl>,
				<decl><type ref="prev"/><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="block">/* skip network and drive specifiers for win32 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* network drive */</comment>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator>
				 <operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
				  <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* local drive */</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * POSIX 1003.2: For each dir operand that does not name an existing
	 * directory, effects equivalent to those caused by the following command
	 * shall occur:
	 *
	 * mkdir -p -m $(umask -S),u+wx $(dirname dir) &amp;&amp; mkdir [-m mode] dir
	 *
	 * We change the user's umask and then restore it, instead of doing
	 * chmod's.  Note we assume umask() can't change errno.
	 */</comment>
	<expr_stmt><expr><name>oumask</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>numask</name> <operator>=</operator> <name>oumask</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>S_IWUSR</name> <operator>|</operator> <name>S_IXUSR</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>umask</name><argument_list>(<argument><expr><name>numask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* Skip leading '/'. */</comment>
		<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>last</name></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>umask</name><argument_list>(<argument><expr><name>oumask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* check for pre-existing directory */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name>last</name></expr> ?</condition><then> <expr><name>omode</name></expr> </then><else>: <expr><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* ensure we restored umask */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>umask</name><argument_list>(<argument><expr><name>oumask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_page_stats</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>orioledb_check_shmem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Build and return the tuple
	 */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>		<name>num_free_pages</name></decl>,
					<decl><type ref="prev"/><name>total_num_pages</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>total_num_pages</name> <operator>=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name><name>page_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>OPagePoolMain</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>OPagePoolFreeTree</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"free_tree"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>OPagePoolCatalog</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"catalog"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>num_free_pages</name> <operator>=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <call><name>ppool_free_pages_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>total_num_pages</name> <operator>-</operator> <name>num_free_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>num_free_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <call><name>ppool_dirty_pages_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>total_num_pages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name></expr></argument>, <argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ucm_check</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name> <operator>&amp;&amp;</operator> <name>result</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ucm_check_map</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ucm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_usercache_hook</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>arg3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>o_invalidate_descrs</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_invalidate_oids</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedInvalidationMessage</name></type> <name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>usr</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>SHAREDINVALUSERCACHE_ID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>usr</name><operator>.</operator><name>arg1</name></name> <operator>=</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>usr</name><operator>.</operator><name>arg2</name></name> <operator>=</operator> <name><name>oids</name><operator>.</operator><name>reloid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>usr</name><operator>.</operator><name>arg3</name></name> <operator>=</operator> <name><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>

	<comment type="block">/* check AddCatcacheInvalidationMessage() for an explanation */</comment>
	<expr_stmt><expr><call><name>VALGRIND_MAKE_MEM_DEFINED</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SendSharedInvalidMessages</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_version</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>ORIOLEDB_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_HASH_STRING</name></cpp:macro> <cpp:value>#COMMIT_HASH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIZE2</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRINGIZE2(s)</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>orioledb_commit_hash</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><call><name>STRINGIZE</name><argument_list>(<argument><expr><name>COMMIT_HASH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns a page pool by the type.
 */</comment>
<function><type><name>OPagePool</name> <modifier>*</modifier></type>
<name>get_ppool</name><parameter_list>(<parameter><decl><type><name>OPagePoolType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>type</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns a page pool for the page number.
 */</comment>
<function><type><name>OPagePool</name> <modifier>*</modifier></type>
<name>get_ppool_by_blkno</name><parameter_list>(<parameter><decl><type><name>OInMemoryBlkno</name></type> <name>blkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>blkno</name> <operator>&lt;</operator> <name>orioledb_buffers_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>blkno</name> <operator>&gt;=</operator> <name>main_buffers_offset</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>OPagePoolMain</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>blkno</name> <operator>&lt;</operator> <name>free_tree_buffers_count</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>OPagePoolFreeTree</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>OPagePoolCatalog</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns count of all dirty pages (sum of dirty pages for all page pools).
 */</comment>
<function><type><name>OInMemoryBlkno</name></type>
<name>get_dirty_pages_count_sum</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OInMemoryBlkno</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>ppool_dirty_pages_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>page_pools</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jsonb_push_key</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jsonb_push_int8_key</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jsonb_push_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jsonb_push_null_key</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jsonb_push_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNull</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jsonb_push_bool_key</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jsonb_push_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvBool</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>val</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>jsonb_push_string_key</name><parameter_list>(<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jval</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jsonb_push_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jval</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_VALUE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_error_cleanup_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>release_all_page_locks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ppool_release_all_pages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>release_undo_size</name><argument_list>(<argument><expr><name>UndoReserveTxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_mark_incomplete_splits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unset_skip_ucm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_io_error_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>seq_scans_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cleanup_saved_undo_locations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_get_relation_info_hook</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>rootPageBlkno</name></decl></parameter>,
								<parameter><decl><type><name>Oid</name></type> <name>relationObjectId</name></decl></parameter>,
								<parameter><decl><type><name>bool</name></type> <name>inhparent</name></decl></parameter>,
								<parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>relation</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>relationObjectId</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Evade parallel scan of OrioleDB's tables */</comment>
		<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>rel_parallel_workers</name></name> <operator>=</operator> <call><name>RelationGetParallelWorkers</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rel_parallel_workers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Rel parallel workers = %d"</literal></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rel_parallel_workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>relation</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relhasindex</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><call><name>relation_get_descr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>descr</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>primary</name> <operator>=</operator> <call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rel-&gt;indexlist</argument>)</argument_list></macro>
				<block>{<block_content>
					<decl_stmt><decl><type><name>IndexOptInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>IndexOptInfo</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Relation</name></type>	<name>index</name> <init>= <expr><call><name>index_open</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>indexoid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>hasbitmap</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>hasbitmap</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>indexoid</name></name> <operator>!=</operator> <name><name>primary</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>&amp;&amp;</operator>
						<operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>ncolumns</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>nkeycolumns</name></name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>nkeycolumns</name></name></expr>;</init>
						 <condition><expr><name>hasbitmap</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>ncolumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Oid</name></type>			<name>typeoid</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type>		<name>valid</name> <init>= <expr><name>typeoid</name> <operator>==</operator> <name>INT4OID</name> <operator>||</operator>
						<name>typeoid</name> <operator>==</operator> <name>INT8OID</name> <operator>||</operator>
						<name>typeoid</name> <operator>==</operator> <name>TIDOID</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>hasbitmap</name> <operator>=</operator> <name>hasbitmap</name> <operator>&amp;&amp;</operator> <name>valid</name></expr>;</expr_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>amhasgetbitmap</name></name> <operator>=</operator> <name>hasbitmap</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
