<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/sys_trees.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sys_trees.c
 *		Defitions for system trees.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/sys_trees.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/sys_trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrprotos.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>BTreeRootInfo</name></type> <name>rootInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SysTreeShmemHeader</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>keyLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OBTreeKeyCmp</name></type> <name>cmpFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tupleLength</name></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>tupleLengthFunc</name>) <parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>JsonbValue</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>keyToJsonb</name>) <parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>PrintFunc</name></type>	<name>keyPrint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PrintFunc</name></type>	<name>tupPrint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OPagePoolType</name></type> <name>poolType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UndoReserveType</name></type> <name>undoReserveType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeStorageType</name></type> <name>storageType</name></decl>;</decl_stmt>
	<function_decl><type><name>bool</name></type>		(<modifier>*</modifier><name>needs_undo</name>) <parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>BTreeOperationType</name></type> <name>action</name></decl></parameter>,
							   <parameter><decl><type><name>OTuple</name></type> <name>oldTuple</name></decl></parameter>, <parameter><decl><type><name>OTupleXactInfo</name></type> <name>oldXactInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>oldDeleted</name></decl></parameter>,
							   <parameter><decl><type><name>OTuple</name></type> <name>newTuple</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>newOxid</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>SysTreeMeta</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>BTreeDescr</name></type>	<name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeOps</name></type>	<name>ops</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>initialized</name></decl>;</decl_stmt>
}</block></struct></type> <name>SysTreeDescr</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sys_tree_init_if_needed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sys_tree_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init_shmem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>sys_tree_len</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OLengthType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>sys_tree_hash</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_tree_num_input</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OTuple</name></type> <name>sys_tree_tuple_make_key</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>,
									  <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keep_version</name></decl></parameter>,
									  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>allocated</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>shared_root_info_key_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
									 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
									 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idx_descr_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
								<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>idx_descr_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
								<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>idx_descr_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>,
										  <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>o_table_chunk_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
							  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
							  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_table_chunk_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
									<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_table_chunk_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
									<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>o_table_chunk_length</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>o_table_chunk_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>,
											  <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_table_chunk_needs_undo</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>BTreeOperationType</name></type> <name>action</name></decl></parameter>,
									 <parameter><decl><type><name>OTuple</name></type> <name>oldTuple</name></decl></parameter>, <parameter><decl><type><name>OTupleXactInfo</name></type> <name>oldXactInfo</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>oldDeleted</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>newTuple</name></decl></parameter>,
									 <parameter><decl><type><name>OXid</name></type> <name>newOxid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>o_index_chunk_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
							  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
							  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_index_chunk_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
									<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_index_chunk_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
									<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>o_index_chunk_length</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>o_index_chunk_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>,
											  <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>free_tree_off_len_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
								  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
								  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>free_tree_len_off_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
								  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
								  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_tree_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
							<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>free_tree_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>,
										  <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>SysTreeMeta</name></type> <name><name>sysTreesMeta</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{							<comment type="block">/* SYS_TREES_SHARED_ROOT_INFO */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SharedRootInfoKey</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SharedRootInfo</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>shared_root_info_key_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>idx_descr_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>idx_descr_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>idx_descr_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolMain</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveNone</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStorageInMemory</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_O_TABLES */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableChunkKey</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>tupleLengthFunc</name> <operator>=</operator> <name>o_table_chunk_length</name></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_table_chunk_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_table_chunk_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_table_chunk_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_table_chunk_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>o_table_chunk_needs_undo</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_O_INDICES */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OIndexChunkKey</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>tupleLengthFunc</name> <operator>=</operator> <name>o_index_chunk_length</name></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_index_chunk_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_index_chunk_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_index_chunk_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_index_chunk_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_OPCLASS_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OOpclass</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_opclass_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_ENUM_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>tupleLengthFunc</name> <operator>=</operator> <name>o_sys_cache_toast_chunk_length</name></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_toast_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_toast_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_sys_cache_toast_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_toast_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_ENUMOID_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OEnumOid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_enumoid_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_RANGE_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ORange</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_range_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_CLASS_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>tupleLengthFunc</name> <operator>=</operator> <name>o_sys_cache_toast_chunk_length</name></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_toast_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_toast_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_sys_cache_toast_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_toast_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_EXTENTS_OFF_LEN */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FreeTreeTuple</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FreeTreeTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>free_tree_off_len_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>free_tree_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>free_tree_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>free_tree_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolFreeTree</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveNone</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStorageTemporary</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_EXTENTS_LEN_OFF */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FreeTreeTuple</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FreeTreeTuple</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>free_tree_len_off_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>free_tree_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>free_tree_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>free_tree_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolFreeTree</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveNone</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStorageTemporary</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_PROC_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>tupleLengthFunc</name> <operator>=</operator> <name>o_sys_cache_toast_chunk_length</name></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_toast_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_toast_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_sys_cache_toast_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_toast_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_TYPE_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OType</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_type_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_AGG_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>.</operator><name>tupleLengthFunc</name> <operator>=</operator> <name>o_sys_cache_toast_chunk_length</name></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_toast_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_toast_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_sys_cache_toast_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_toast_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_OPER_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey1</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OOperator</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_operator_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_AMOP_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey3</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OAmOp</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_amop_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{							<comment type="block">/* SYS_TREES_AMPROC_CACHE */</comment>
		<expr><operator>.</operator><name>keyLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey4</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>tupleLength</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OAmProc</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>.</operator><name>cmpFunc</name> <operator>=</operator> <name>o_sys_cache_cmp</name></expr>,
		<expr><operator>.</operator><name>keyPrint</name> <operator>=</operator> <name>o_sys_cache_key_print</name></expr>,
		<expr><operator>.</operator><name>tupPrint</name> <operator>=</operator> <name>o_amproc_cache_tup_print</name></expr>,
		<expr><operator>.</operator><name>keyToJsonb</name> <operator>=</operator> <name>o_sys_cache_key_to_jsonb</name></expr>,
		<expr><operator>.</operator><name>poolType</name> <operator>=</operator> <name>OPagePoolCatalog</name></expr>,
		<expr><operator>.</operator><name>undoReserveType</name> <operator>=</operator> <name>UndoReserveTxn</name></expr>,
		<expr><operator>.</operator><name>storageType</name> <operator>=</operator> <name>BTreeStoragePersistence</name></expr>,
		<expr><operator>.</operator><name>needs_undo</name> <operator>=</operator> <name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SysTreeShmemHeader</name> <modifier>*</modifier></type><name>sysTreesShmemHeaders</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SysTreeDescr</name></type> <name><name>sysTreesDescrs</name><index>[<expr><name>SYS_TREES_NUM</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_sys_tree_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_sys_tree_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_sys_tree_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Returns size of the shared memory needed for enum tree header.
 */</comment>
<function><type><name>Size</name></type>
<name>sys_trees_shmem_needs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>SYS_TREES_NUM</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sysTreesMeta</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SysTreeMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"mismatch between size of sysTreesMeta and SYS_TREES_NUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SysTreeShmemHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SYS_TREES_NUM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes the enum B-tree memory.
 */</comment>
<function><type><name>void</name></type>
<name>sys_trees_shmem_init</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sysTreesShmemHeaders</name> <operator>=</operator> <operator>(</operator><name>SysTreeShmemHeader</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SysTreeShmemHeader</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SYS_TREES_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>&amp;</operator><name><name>sysTreesShmemHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name> <operator>=</operator> <name>OInvalidInMemoryBlkno</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageChangeCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sysTreesDescrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sysTreesDescrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>BTreeDescr</name> <modifier>*</modifier></type>
<name>get_sys_tree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tree_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tree_num</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tree_num</name> <operator>&lt;=</operator> <name>SYS_TREES_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sys_tree_init_if_needed</name><argument_list>(<argument><expr><name>tree_num</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>sysTreesDescrs</name><index>[<expr><name>tree_num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>descr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PrintFunc</name></type>
<name>sys_tree_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysTreeMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>SysTreeMeta</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>meta</name><operator>-&gt;</operator><name>keyPrint</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PrintFunc</name></type>
<name>sys_tree_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysTreeMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>SysTreeMeta</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>meta</name><operator>-&gt;</operator><name>tupPrint</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_tree_num_input</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>num</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&lt;=</operator> <name>SYS_TREES_NUM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Value num must be in the range from 1 to %d"</literal></expr></argument>,
						<argument><expr><name>SYS_TREES_NUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Prints structure of sys trees.
 */</comment>
<function><type><name>Datum</name></type>
<name>orioledb_sys_tree_structure</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VarChar</name>    <modifier>*</modifier></type><name>optionsArg</name> <init>= <expr><operator>(</operator><name>VarChar</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_VARCHAR_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>depth</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreePrintOptions</name></type> <name>printOptions</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_tree_num_input</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>orioledb_check_shmem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_print_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>printOptions</name></expr></argument>, <argument><expr><name>optionsArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_print_btree_pages</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
						<argument><expr><call><name>sys_tree_key_print</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>sys_tree_tup_print</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>printOptions</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_sys_tree_check</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>force_map_check</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_tree_num_input</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>orioledb_check_shmem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>check_btree</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>force_map_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns amount of all rows and dead rows
 */</comment>
<function><type><name>Datum</name></type>
<name>orioledb_sys_tree_rows</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>dead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>td</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_tree_num_input</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>orioledb_check_shmem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Build a tuple descriptor for our result type
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupleDesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
								 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><call><name>btree_iterate_raw</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
											<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dead</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>total</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupleDesc</name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Build and return the tuple
	 */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>dead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>sys_tree_supports_transactions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tree_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>sysTreesMeta</name><index>[<expr><name>tree_num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>undoReserveType</name> <operator>!=</operator> <name>UndoReserveNone</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BTreeStorageType</name></type>
<name>sys_tree_get_storage_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tree_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>sysTreesMeta</name><index>[<expr><name>tree_num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>storageType</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes the system B-tree if it is not already done.
 *
 * We can not initialize it on the shared memory startup because it uses
 * postgres file descriptors for BTreeDescr.file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sys_tree_init_if_needed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysTreeShmemHeader</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sysTreesDescrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Try to initialize every system tree (avoid possible problem when
	 * walk_page() initializes system tree).  Given we initialize them at
	 * once, they all should be already initialized when walk_page() is
	 * called.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SYS_TREES_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sysTreesDescrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>&amp;</operator><name><name>sysTreesShmemHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oSharedRootInfoInsertLocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					  <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>OInMemoryBlknoIsValid</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sys_tree_init</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>sys_tree_init</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oSharedRootInfoInsertLocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes the system B-tree.
 *
 * We can not initialize system BTree on shmem startup because it uses
 * postgres file descriptors and functions to work with them.
 *
 * Recovery worker should initialize system BTree with init_shmem = true on
 * startup. Backends should call it only with init_shmem = false.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sys_tree_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>init_shmem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OPagePool</name>  <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysTreeShmemHeader</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysTreeMeta</name> <modifier>*</modifier></type><name>meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeOps</name>   <modifier>*</modifier></type><name>ops</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>&amp;</operator><name><name>sysTreesShmemHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>sysTreesMeta</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>get_ppool</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>poolType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>descr</name> <operator>=</operator> <operator>&amp;</operator><name><name>sysTreesDescrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>descr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ops</name> <operator>=</operator> <operator>&amp;</operator><name><name>sysTreesDescrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ops</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <name>ops</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>init_shmem</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name> <operator>=</operator> <call><name>ppool_get_metapage</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name> <operator>=</operator> <call><name>ppool_get_metapage</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageChangeCount</name></name> <operator>=</operator> <call><name>O_PAGE_GET_CHANGE_COUNT</name><argument_list>(<argument><expr><call><name>O_GET_IN_MEMORY_PAGE</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>rootInfo</name></name> <operator>=</operator> <name><name>header</name><operator>-&gt;</operator><name>rootInfo</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>oIndexPrimary</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>SYS_TREES_DATOID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>meta</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>key_to_jsonb</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>keyToJsonb</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>sys_tree_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>tuple_make_key</name></name> <operator>=</operator> <name>sys_tree_tuple_make_key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>needs_undo</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>needs_undo</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>cmp</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>cmpFunc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>unique_hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ops</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>sys_tree_hash</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>compress</name></name> <operator>=</operator> <name>InvalidOCompress</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>ppool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>undoType</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>undoReserveType</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>storageType</name></name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>storageType</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>descr</name><operator>-&gt;</operator><name>createOxid</name></name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>storageType</name></name> <operator>==</operator> <name>BTreeStoragePersistence</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>checkpointable_tree_init</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>init_shmem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>storageType</name></name> <operator>==</operator> <name>BTreeStorageTemporary</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>evictable_tree_init</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>init_shmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>storageType</name></name> <operator>==</operator> <name>BTreeStorageInMemory</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>init_shmem</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>o_btree_init</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>sysTreesDescrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sys_tree_len</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OLengthType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysTreeMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>SysTreeMeta</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OTupleLength</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>tupleLength</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>meta</name><operator>-&gt;</operator><name>tupleLength</name></name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><call><name><name>meta</name><operator>-&gt;</operator><name>tupleLengthFunc</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>OKeyLength</name> <operator>||</operator>
			   <name>type</name> <operator>==</operator> <name>OTupleKeyLength</name> <operator>||</operator>
			   <name>type</name> <operator>==</operator> <name>OTupleKeyLengthNoVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>meta</name><operator>-&gt;</operator><name>keyLength</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>sys_tree_hash</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysTreeMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>SysTreeMeta</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>tag_hash</name><argument_list>(<argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>sys_tree_tuple_make_key</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>keep_version</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>allocated</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysTreeMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>SysTreeMeta</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>keyLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>allocated</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><name>tuple</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>shared_root_info_key_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
						 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
						 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name> <modifier>*</modifier></type><name>key1</name> <init>= <expr><operator>(</operator><name>SharedRootInfoKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name> <modifier>*</modifier></type><name>key2</name> <init>= <expr><operator>(</operator><name>SharedRootInfoKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>k1</name> <operator>!=</operator> <name>BTreeKeyBound</name> <operator>&amp;&amp;</operator> <name>k2</name> <operator>!=</operator> <name>BTreeKeyBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>datoid</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>datoid</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>relnode</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>relnode</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idx_descr_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>SharedRootInfoKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%u, %u)"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>idx_descr_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfo</name> <modifier>*</modifier></type><name>sh_descr</name> <init>= <expr><operator>(</operator><name>SharedRootInfo</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"((%u, %u), %u, %u)"</literal></expr></argument>,
					 <argument><expr><name><name>sh_descr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>datoid</name></name></expr></argument>,
					 <argument><expr><name><name>sh_descr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>relnode</name></name></expr></argument>,
					 <argument><expr><name><name>sh_descr</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>rootPageBlkno</name></name></expr></argument>,
					 <argument><expr><name><name>sh_descr</name><operator>-&gt;</operator><name>rootInfo</name><operator>.</operator><name>metaPageBlkno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>idx_descr_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SharedRootInfoKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>SharedRootInfoKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"datoid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"relnode"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>o_table_chunk_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
				  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
				  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>key1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>key2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>p2</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>o_table_chunk_length</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>OTableChunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dataLength</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_table_chunk_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"((%u, %u, %u), %u, %u)"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
					 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
					 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_table_chunk_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(((%u, %u, %u), %u, %u), %u)"</literal></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>offset</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>version</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>dataLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>o_table_chunk_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"datoid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"reloid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"relnode"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_table_chunk_needs_undo</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>BTreeOperationType</name></type> <name>action</name></decl></parameter>,
						 <parameter><decl><type><name>OTuple</name></type> <name>oldTuple</name></decl></parameter>, <parameter><decl><type><name>OTupleXactInfo</name></type> <name>oldXactInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>oldDeleted</name></decl></parameter>,
						 <parameter><decl><type><name>OTuple</name></type> <name>newTuple</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>newOxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>old_tuple_key</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>oldTuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>new_tuple_key</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>newTuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>BTreeOperationDelete</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XACT_INFO_OXID_EQ</name><argument_list>(<argument><expr><name>oldXactInfo</name></expr></argument>, <argument><expr><name>newOxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldDeleted</name> <operator>&amp;&amp;</operator> <name><name>old_tuple_key</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>new_tuple_key</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>new_tuple_key</name> <operator>&amp;&amp;</operator> <name><name>old_tuple_key</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>new_tuple_key</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>o_index_chunk_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
				  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
				  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexChunkKey</name> <modifier>*</modifier></type><name>key1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexChunkKey</name> <modifier>*</modifier></type><name>key2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>(</operator><name>OIndexChunkKey</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>(</operator><name>OIndexChunkKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><name>OIndexChunkKey</name> <operator>*</operator><operator>)</operator> <name>p2</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><name>OIndexChunkKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>key1</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>key1</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>o_index_chunk_length</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OIndexChunk</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>OIndexChunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dataLength</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_index_chunk_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexChunkKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OIndexChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%d, (%u, %u, %u), %u)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_index_chunk_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OIndexChunk</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"((%d, (%u, %u, %u), %u), %u)"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>type</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>offset</name></name></expr></argument>,
					 <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>dataLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>o_index_chunk_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexChunkKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OIndexChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"datoid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"reloid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"relnode"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compares oids and ix_num of FreeTreeTuples.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>free_tree_id_cmp</name><parameter_list>(<parameter><decl><type><name>FreeTreeTuple</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>FreeTreeTuple</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>ixType</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>ixType</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>left</name><operator>-&gt;</operator><name>ixType</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>ixType</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>datoid</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>left</name><operator>-&gt;</operator><name>datoid</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>datoid</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>relnode</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>left</name><operator>-&gt;</operator><name>relnode</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>relnode</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Comparator for sort order inside a B-tree:
 * 1. FreeTreeTuple.datoid
 * 2. FreeTreeTuple.relnode
 * 3. FreeTreeTuple.ix_num
 * 4. FreeTreeTuple.extent.off
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>free_tree_off_len_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FreeTreeTuple</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><name>FreeTreeTuple</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>right</name> <init>= <expr><operator>(</operator><name>FreeTreeTuple</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>free_tree_id_cmp</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>left</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Comparator for sort order inside a B-tree:
 * 1. FreeTreeTuple.datoid
 * 2. FreeTreeTuple.relnode
 * 3. FreeTreeTuple.ix_num
 * 4. FreeTreeTuple.extent.len
 * 5. FreeTreeTuple.extent.off
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>free_tree_len_off_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FreeTreeTuple</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><name>FreeTreeTuple</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>right</name> <init>= <expr><operator>(</operator><name>FreeTreeTuple</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>free_tree_id_cmp</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>left</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>length</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>left</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>right</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_tree_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FreeTreeTuple</name> <modifier>*</modifier></type><name>f_tree_tup</name> <init>= <expr><operator>(</operator><name>FreeTreeTuple</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(
					 <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"((%u, %u, %u), %lu, %lu)"</literal></expr></argument>,
					 <argument><expr><name><name>f_tree_tup</name><operator>-&gt;</operator><name>ixType</name></name></expr></argument>,
					 <argument><expr><name><name>f_tree_tup</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>,
					 <argument><expr><name><name>f_tree_tup</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>,
					 <argument><expr><name><name>f_tree_tup</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name></expr></argument>,
					 <argument><expr><name><name>f_tree_tup</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>free_tree_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FreeTreeTuple</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>FreeTreeTuple</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"ixType"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>ixType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"datoid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"relnode"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>extent</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
