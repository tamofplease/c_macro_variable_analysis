<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/o_tables.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * o_tables.c
 * 		Routines for orioledb tables system tree.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_tables.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_indices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/wal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/planner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ruleutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Relation locks from recovery workers may conflict with PostgreSQL WAL locks
 * that leads to deadlocks. We need to have own relation locks for
 * checkpoint process to avoid this.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKPOINT_LOCK_BIT</name></cpp:macro> <cpp:value>((uint32) 1 &lt;&lt; (32 - 1))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_table_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>orioledb_table_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OTablesCallback</name></type> <name>callback</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>OTablesForeachArg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
}</block></struct></type> <name>OTablesDropAllArg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>type_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>type_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>OTablesDropAllWithTypeArg</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>OIndexType</name></type>	<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ixNum</name></decl>;</decl_stmt>
}</block></struct></type> <name>OTableIndexOidsKey</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_table_tupdesc_init_entry</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>att_num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_tables_foreach_callback</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_tables_drop_all_callback</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_table_oids_array_callback</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>o_tables_rel_fill_locktag</name><parameter_list>(<parameter><decl><type><name>LOCKTAG</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>ORelOids</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>serialize_o_table</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OTable</name> <modifier>*</modifier></type><name>deserialize_o_table</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>BTreeDescr</name> <modifier>*</modifier></type>
<name>oTablesGetBTreeDesc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>desc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oTablesGetKeySize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableChunkKey</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oTablesGetMaxChunkSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>max_chunk_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>max_chunk_size</name> <operator>=</operator> <call><name>MAXALIGN_DOWN</name><argument_list>(<argument><expr><operator>(</operator><name>O_BTREE_MAX_TUPLE_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableChunkKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OTableChunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>max_chunk_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>oTablesUpdateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ckey</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>oTablesGetNextKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>OTableChunkKey</name></type> <name>nextKey</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nextKey</name> <operator>=</operator> <operator>*</operator><name>ckey</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextKey</name><operator>.</operator><name>oids</name><operator>.</operator><name>relnode</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextKey</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>nextKey</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>oTablesCreateTuple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>,
				   <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ckey</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>OTableChunk</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>*</operator><name>ckey</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>chunk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>oTablesCreateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>ckey_copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ckey_copy</name> <operator>=</operator> <operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableChunkKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ckey_copy</name> <operator>=</operator> <operator>*</operator><name>ckey</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>ckey_copy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Pointer</name></type>
<name>oTablesGetTupleData</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oTablesGetTupleOffset</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oTablesGetTupleDataSize</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>chunk</name><operator>-&gt;</operator><name>dataLength</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleFetchCallbackResult</name></type>
<name>oTablesVersionCallback</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>tupOxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
					   <parameter><decl><type><name>TupleFetchCallbackCheckType</name></type> <name>check_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>tupleKey</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableChunkKey</name> <modifier>*</modifier></type><name>boundKey</name> <init>= <expr><operator>(</operator><name>OTableChunkKey</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>check_type</name> <operator>!=</operator> <name>OTupleFetchCallbackVersionCheck</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>COMMITSEQNO_IS_INPROGRESS</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>tupOxid</name> <operator>==</operator> <call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>boundKey</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>O_TABLE_INVALID_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>boundKey</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>tupleKey</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tupleKey</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name><name>boundKey</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>tupleKey</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name><name>boundKey</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchMatch</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNotMatch</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ToastAPI</name></type>	<name>oTablesToastAPI</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>getBTreeDesc</name> <operator>=</operator> <name>oTablesGetBTreeDesc</name></expr>,
	<expr><operator>.</operator><name>getKeySize</name> <operator>=</operator> <name>oTablesGetKeySize</name></expr>,
	<expr><operator>.</operator><name>getMaxChunkSize</name> <operator>=</operator> <name>oTablesGetMaxChunkSize</name></expr>,
	<expr><operator>.</operator><name>updateKey</name> <operator>=</operator> <name>oTablesUpdateKey</name></expr>,
	<expr><operator>.</operator><name>getNextKey</name> <operator>=</operator> <name>oTablesGetNextKey</name></expr>,
	<expr><operator>.</operator><name>createTuple</name> <operator>=</operator> <name>oTablesCreateTuple</name></expr>,
	<expr><operator>.</operator><name>createKey</name> <operator>=</operator> <name>oTablesCreateKey</name></expr>,
	<expr><operator>.</operator><name>getTupleData</name> <operator>=</operator> <name>oTablesGetTupleData</name></expr>,
	<expr><operator>.</operator><name>getTupleOffset</name> <operator>=</operator> <name>oTablesGetTupleOffset</name></expr>,
	<expr><operator>.</operator><name>getTupleDataSize</name> <operator>=</operator> <name>oTablesGetTupleDataSize</name></expr>,
	<expr><operator>.</operator><name>deleteLogFullTuple</name> <operator>=</operator> <name>false</name></expr>,
	<expr><operator>.</operator><name>versionCallback</name> <operator>=</operator> <name>oTablesVersionCallback</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>o_tables_foreach_oids</name><parameter_list>(<parameter><decl><type><name>OTablesOidsCallback</name></type> <name>callback</name></decl></parameter>,
					  <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name></type> <name>chunk_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,
				<decl><type ref="prev"/><name>old_oids</name> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_O_TABLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>chunk_key</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk_key</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>chunk_key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								   <argument><expr><name>BTreeKeyNone</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_oids</name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableChunk</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>OTableChunk</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>oids</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>oids</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ORelOidsIsEqual</name><argument_list>(<argument><expr><name>old_oids</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_oids</name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>		<comment type="block">/* go to the next oid */</comment>
		<expr_stmt><expr><name><name>chunk_key</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chunk_key</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>chunk_key</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
									 <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
									   <argument><expr><name>BTreeKeyNone</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * It can be much more efficient.
 */</comment>
<function><type><name>void</name></type>
<name>o_tables_foreach</name><parameter_list>(<parameter><decl><type><name>OTablesCallback</name></type> <name>callback</name></decl></parameter>,
				 <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
				 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTablesForeachArg</name></type> <name>foreach_arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>foreach_arg</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>foreach_arg</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tables_foreach_oids</name><argument_list>(<argument><expr><name>o_tables_foreach_callback</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foreach_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>o_deparse_expression</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expr_str</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>expr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>expr_text</name> <init>= <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>expr_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>pg_get_expr</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>expr_text</name></expr></argument>,
							   <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_table_fill_index</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl></parameter>,
				   <parameter><decl><type><name>OIndexType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>index_rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableIndex</name>	   <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>	   <modifier>*</modifier></type><name>index_expr_elem</name> <init>= <expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indexprs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>ix_exprfield_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>	   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>mcxt</name></decl>,
					<decl><type ref="prev"/><name>old_mcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>keyno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>			<name>datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>oidvector</name>	   <modifier>*</modifier></type><name>indclass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>oidvector</name>	   <modifier>*</modifier></type><name>indcollation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>isnull</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>index_mctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mcxt</name> <operator>=</operator> <call><name>OGetIndexContext</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_mcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indexprs</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>nexprfields</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indexprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>exprfields</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>nexprfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>predicate</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator>
		<call><name>expression_planner</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name><name>index_rel</name><operator>-&gt;</operator><name>rd_indpred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>predicate</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>predicate_str</name></name> <operator>=</operator>
			<call><name>o_deparse_expression</name><argument_list>(<argument><expr><call><name>nodeToString</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>predicate</name></name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>o_collect_funcexpr</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>index</name><operator>-&gt;</operator><name>predicate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>expressions</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>index_rel-&gt;rd_indexprs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>expression_planner</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>expressions</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>expressions</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>o_collect_funcexpr</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>index</name><operator>-&gt;</operator><name>expressions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Must get indclass the hard way */</comment>
	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>INDEXRELID</name></expr></argument>, <argument><expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indextuple</name></name></expr></argument>,
							<argument><expr><name>Anum_pg_index_indclass</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indclass</name> <operator>=</operator> <operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Extract indcollation from the pg_index tuple */</comment>
	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>INDEXRELID</name></expr></argument>, <argument><expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indextuple</name></name></expr></argument>,
							<argument><expr><name>Anum_pg_index_indcollation</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>indcollation</name> <operator>=</operator> <operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ix_exprfield_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>keyno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>keyno</name> <operator>&lt;</operator> <name><name>index_rel</name><operator>-&gt;</operator><name>rd_index</name><operator>-&gt;</operator><name>indnkeyatts</name></name></expr>;</condition> <incr><expr><name>keyno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AttrNumber</name></type>			<name>attnum</name> <init>= <expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_index</name><operator>-&gt;</operator><name>indkey</name><operator>.</operator><name>values</name><index>[<expr><name>keyno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTableIndexField</name>   <modifier>*</modifier></type><name>ix_field</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int16</name></type>				<name>opt</name> <init>= <expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indoption</name><index>[<expr><name>keyno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ix_field</name> <operator>=</operator> <operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>keyno</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>AttributeNumberIsValid</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Field validation performed in o_validate_index_elements */</comment>
			<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Expressional index */</comment>
			<decl_stmt><decl><type><name>Node</name>		   <modifier>*</modifier></type><name>indexkey</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_type</name></type>	<name>typeTup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTableField</name>	   <modifier>*</modifier></type><name>exprField</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type>				<name>field_typeid</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indexprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>indexkey</name> <operator>=</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>index_expr_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index_expr_elem</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name><name>index_rel</name><operator>-&gt;</operator><name>rd_indexprs</name></name></expr></argument>, <argument><expr><name>index_expr_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>exprField</name> <operator>=</operator> <operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>exprfields</name><index>[<expr><name>ix_exprfield_num</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/*
			 * Lookup the expression type in pg_type for the type length etc.
			 */</comment>
			<expr_stmt><expr><name>field_typeid</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><name>indexkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>field_typeid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>field_typeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>typeTup</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Assign some of the attributes values. Leave the rest.
			 */</comment>
			<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>exprField</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>,
					   <argument><expr><call><name>o_deparse_expression</name><argument_list>(<argument><expr><call><name>nodeToString</name><argument_list>(<argument><expr><name>indexkey</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>typid</name></name> <operator>=</operator> <name>field_typeid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <name><name>typeTup</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>byval</name></name> <operator>=</operator> <name><name>typeTup</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>storage</name></name> <operator>=</operator> <name><name>typeTup</name><operator>-&gt;</operator><name>typstorage</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name><name>typeTup</name><operator>-&gt;</operator><name>typalign</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>typmod</name></name> <operator>=</operator> <call><name>exprTypmod</name><argument_list>(<argument><expr><name>indexkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>exprField</name><operator>-&gt;</operator><name>collation</name></name> <operator>=</operator> <call><name>exprCollation</name><argument_list>(<argument><expr><name>indexkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Make sure the expression yields a type that's safe to store in
			 * an index.  We need this defense because we have index opclasses
			 * for pseudo-types such as "record", and the actually stored type
			 * had better be safe; eg, a named composite type is okay, an
			 * anonymous record type is not.  The test is the same as for
			 * whether a table column is of a safe type (which is why we
			 * needn't check for the non-expression case).
			 */</comment>
			<expr_stmt><expr><call><name>CheckAttributeType</name><argument_list>(<argument><expr><literal type="string">"EXPR_FIELD"</literal></expr></argument>,
							   <argument><expr><name><name>exprField</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>, <argument><expr><name><name>exprField</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>,
							   <argument><expr><name>NIL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <name>EXPR_ATTNUM</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>collation</name></name> <operator>=</operator> <name><name>indcollation</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>keyno</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>opclass</name></name> <operator>=</operator> <name><name>indclass</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>keyno</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>ordering</name></name> <operator>=</operator> <name>SORTBY_DEFAULT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>nullsOrdering</name></name> <operator>=</operator> <name>SORTBY_NULLS_DEFAULT</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>INDOPTION_DESC</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>ordering</name></name> <operator>=</operator> <name>SORTBY_DESC</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>&amp;</operator> <name>INDOPTION_NULLS_FIRST</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>nullsOrdering</name></name> <operator>=</operator> <name>SORTBY_NULLS_LAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>INDOPTION_NULLS_FIRST</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ix_field</name><operator>-&gt;</operator><name>nullsOrdering</name></name> <operator>=</operator> <name>SORTBY_NULLS_FIRST</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_table_resize_constr</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>tbl_cxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tbl_cxt</name> <operator>=</operator> <call><name>OGetTableContext</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>tbl_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>missing</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrMissing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name></name></expr></argument>,
									<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrMissing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>am_present</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>am_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name></name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name></name></expr></argument>,
									<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name><index>[<expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_table_fill_constr</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>AttrMissing</name> <modifier>*</modifier></type><name>attrmiss</name></decl></parameter>,
					<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>defval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableField</name>	   <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>tbl_cxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tbl_cxt</name> <operator>=</operator> <call><name>OGetTableContext</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>tbl_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>attrmiss</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>hasmissing</name></name> <operator>&amp;&amp;</operator>
										 <name><name>attrmiss</name><operator>-&gt;</operator><name>am_present</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_value</name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>attrmiss</name><operator>-&gt;</operator><name>am_value</name></name></expr></argument>,
													 <argument><expr><name><name>field</name><operator>-&gt;</operator><name>byval</name></name></expr></argument>,
													 <argument><expr><name><name>field</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>defval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OTable</name> <modifier>*</modifier></type>
<name>o_table_tableam_create</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>primary_init_nfields</name></name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* + ctid field */</comment>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>tid_btree_ops_oid</name></name> <operator>=</operator> <call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>TIDOID</name></expr></argument>, <argument><expr><name>BTREE_AM_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>orioledb_attr_to_field</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_table_resize_constr</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>o_table</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>OTableField</name></type> <name><name>builtin_fields</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><name>INT2OID</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
	<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><name>INT4OID</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
	<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><name>OIDOID</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
	<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><name>TIDOID</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
	<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>, <expr><name>BYTEAOID</name></expr>, <expr><name>InvalidOid</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'x'</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>OTableField</name> <modifier>*</modifier></type>
<name>o_tables_get_builtin_field</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>builtin_fields</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>builtin_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>builtin_fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>typid</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><operator>&amp;</operator><name><name>builtin_fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* shouldn't get there */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * We hold data of some types itself because they used inside o_tables.
 */</comment>
<function><type><name>void</name></type>
<name>o_tables_tupdesc_init_builtin</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>att_num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>o_table_tupdesc_init_entry</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>att_num</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>o_tables_get_builtin_field</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns tuple descriptor made from array
 */</comment>
<function><type><name>TupleDesc</name></type>
<name>o_table_fields_make_tupdesc</name><parameter_list>(<parameter><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nfields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>nfields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>&amp;</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_table_tupdesc_init_entry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>tupdesc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tupdesc_load_constr</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>	<name>idx_cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>ctid_off</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx_cxt</name> <operator>=</operator> <call><name>OGetIndexContext</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>idx_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctid_off</name> <operator>=</operator> <ternary><condition><expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>constr</name></name> <operator>=</operator> <operator>(</operator><name>TupleConstr</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleConstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>constr</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <operator>(</operator><name>AttrMissing</name> <operator>*</operator><operator>)</operator>
		<call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>+</operator> <name>ctid_off</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrMissing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>constr</name><operator>-&gt;</operator><name>missing</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>am_present</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AttrMissing</name> <modifier>*</modifier></type><name>tupdesc_miss</name> <init>= <expr><operator>&amp;</operator><name><name>tupdesc</name><operator>-&gt;</operator><name>constr</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name> <operator>+</operator> <name>ctid_off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>tupdesc_miss</name><operator>-&gt;</operator><name>am_present</name></name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>tupdesc_miss</name><operator>-&gt;</operator><name>am_value</name></name> <operator>=</operator>
				<call><name>datumCopy</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_value</name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>byval</name></name></expr></argument>,
							<argument><expr><name><name>field</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TupleDesc</name></type>
<name>o_table_tupdesc</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>o_table_fields_make_tupdesc</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>index_keys_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OTableIndexOidsKey</name> <modifier>*</modifier></type><name>key1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>OTableIndexOidsKey</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>OTableIndexOidsKey</name> <modifier>*</modifier></type><name>key2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>OTableIndexOidsKey</name> <operator>*</operator><operator>)</operator> <name>p2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTableIndexOidsKey</name> <modifier>*</modifier></type>
<name>o_table_make_index_keys</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableIndexOidsKey</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>keys_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>keys</name> <operator>=</operator> <operator>(</operator><name>OTableIndexOidsKey</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndexOidsKey</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
										 <operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ctid primary index if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>oIndexPrimary</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>oIndexPrimary</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name></expr>]</index></name><operator>.</operator><name>ixNum</name> <operator>=</operator> <name>keys_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>oids</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name></expr>]</index></name><operator>.</operator><name>ixNum</name> <operator>=</operator> <name>keys_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>oids</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oids</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>toast_oids</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>oIndexToast</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name></expr>]</index></name><operator>.</operator><name>ixNum</name> <operator>=</operator> <name>TOASTIndexNumber</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_num</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>oids</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>toast_oids</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keys_num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndexOidsKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>index_keys_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>keys_num</name></expr>;</expr_stmt>
	<return>return <expr><name>keys</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns array of ORelOids for each table index (including TOAST).
 *
 * Array is allocated in CurTransactionContext.
 */</comment>
<function><type><name>ORelOids</name> <modifier>*</modifier></type>
<name>o_table_make_index_oids</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ORelOids</name>   <modifier>*</modifier></type><name>oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>oids_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>table</name> <operator>&amp;&amp;</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oids_num</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oids</name> <operator>=</operator> <operator>(</operator><name>ORelOids</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORelOids</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>oids_num</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>oids_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>oids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oids</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>oids</name><index>[<expr><name>oids_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>toast_oids</name></name></expr>;</expr_stmt>

	<comment type="block">/* ctid primary index if needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>oids</name><index>[<expr><name>oids_num</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>oids_num</name></expr>;</expr_stmt>
	<return>return <expr><name>oids</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Updates SYS_TREES_O_INDICES.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_tables_oids_indexes</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>old_table</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>new_table</name></decl></parameter>,
					  <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableIndexOidsKey</name> <modifier>*</modifier></type><name>old_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableIndexOidsKey</name> <modifier>*</modifier></type><name>new_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>old_keys_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>new_keys_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>old_keys</name> <operator>=</operator> <call><name>o_table_make_index_keys</name><argument_list>(<argument><expr><name>old_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_keys_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>new_keys</name> <operator>=</operator> <call><name>o_table_make_index_keys</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_keys_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>old_keys_num</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>new_keys_num</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>old_keys_num</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>new_keys_num</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>index_keys_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"o_indices del (%u, %u, %u, %u) - (%u, %u, %u)"</literal></expr></argument>,
				 <argument><expr><name><name>old_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>,
				 <argument><expr><name><name>old_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
				 <argument><expr><name><name>old_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
				 <argument><expr><name><name>old_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>,
				 <argument><expr><name><name>old_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
				 <argument><expr><name><name>old_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
				 <argument><expr><name><name>old_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_indices_del</name><argument_list>(<argument><expr><name>old_table</name></expr></argument>, <argument><expr><name><name>old_keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ixNum</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing entries in o_indices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name>		<name>result</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"o_indices add (%u, %u, %u, %u) - (%u, %u, %u)"</literal></expr></argument>,
				 <argument><expr><name><name>new_keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>,
				 <argument><expr><name><name>new_keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
				 <argument><expr><name><name>new_keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
				 <argument><expr><name><name>new_keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>,
				 <argument><expr><name><name>new_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>,
				 <argument><expr><name><name>new_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
				 <argument><expr><name><name>new_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_indices_add</name><argument_list>(<argument><expr><name>new_table</name></expr></argument>, <argument><expr><name><name>new_keys</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ixNum</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>OTable</name> <modifier>*</modifier></type>
<name>o_tables_drop_by_oids</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systrees_modify_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_oids_indexes</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oTablesToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>,
								  <argument><expr><name>csn</name></expr></argument>, <argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_O_TABLES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>systrees_modify_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>table</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tables_drop_all</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>database_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTablesDropAllArg</name></type> <name>arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>oxid</name></name> <operator>=</operator> <name>oxid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>database_id</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tables_foreach_oids</name><argument_list>(<argument><expr><name>o_tables_drop_all_callback</name></expr></argument>,
						  <argument><expr><name>COMMITSEQNO_NON_DELETED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_tables_add</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>serialize_o_table</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systrees_modify_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_oids_indexes</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oTablesToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
								  <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_O_TABLES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>systrees_modify_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Same as o_tables_get, if version not NULL find o_tables with passed version
 */</comment>
<function><type><name>OTable</name> <modifier>*</modifier></type>
<name>o_tables_get_by_oids_and_version</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name></type> <name>key</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>found_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>dataLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>oTable</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>=</operator> <operator>*</operator><name>version</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>O_TABLE_INVALID_VERSION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>found_key</name> <operator>=</operator> <operator>&amp;</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_get_any_with_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oTablesToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>dataLength</name></expr></argument>,
											<argument><expr><name>COMMITSEQNO_NON_DELETED</name></expr></argument>,
											<argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_O_TABLES</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>found_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>oTable</name> <operator>=</operator> <call><name>deserialize_o_table</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>dataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>found_key</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>found_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>oTable</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find OTable by its oids
 */</comment>
<function><type><name>OTable</name> <modifier>*</modifier></type>
<name>o_tables_get</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>o_tables_get_by_oids_and_version</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find OTable by tree oids
 */</comment>
<function><type><name>OTable</name> <modifier>*</modifier></type>
<name>o_tables_get_by_tree</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>OIndexType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>tableOids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<comment type="block">/* See if it's index oid first */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_indices_find_table_oids</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>tableOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>o_tables_get</name><argument_list>(<argument><expr><name>tableOids</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_table_free</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>byval</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>missing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index_mctx</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index_mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>indices</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>indices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>tbl_mctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>tbl_mctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_tables_update</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTableChunkKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>old_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>serialize_o_table</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>version</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systrees_modify_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_oids_indexes</name><argument_list>(<argument><expr><name>old_table</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oTablesToastAPI</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
								  <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name>SYS_TREES_O_TABLES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>systrees_modify_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>old_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_invalidate_wal_record</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tables_after_update</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>o_opclass_cache_add_table</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_indices_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>PrimaryIndexNumber</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_tables_rel_try_lock_extended</name><parameter_list>(<parameter><decl><type><name>ORelOids</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>,
							   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nested</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>locktag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LockAcquireResult</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_tables_rel_fill_locktag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nested</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>nested</name> <operator>=</operator> <call><name>DoLocalLockExist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>lockmode</name> <operator>==</operator> <name>AccessExclusiveLock</name> <operator>&amp;&amp;</operator>
		<name><name>locktag</name><operator>.</operator><name>locktag_lockmethodid</name></name> <operator>==</operator> <name>DEFAULT_LOCKMETHOD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>locktag</name><operator>.</operator><name>locktag_lockmethodid</name></name> <operator>=</operator> <name>NO_LOG_LOCKMETHOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>LOCKACQUIRE_NOT_AVAIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tables_rel_lock_extended</name><parameter_list>(<parameter><decl><type><name>ORelOids</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>locktag</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_tables_rel_fill_locktag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lockmode</name> <operator>==</operator> <name>AccessExclusiveLock</name> <operator>&amp;&amp;</operator> <name>checkpoint</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>locktag</name><operator>.</operator><name>locktag_lockmethodid</name></name> <operator>=</operator> <name>NO_LOG_LOCKMETHOD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_tables_rel_unlock_extended</name><parameter_list>(<parameter><decl><type><name>ORelOids</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>locktag</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_tables_rel_fill_locktag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>checkpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can not release %s table lock on datoid = %d, "</literal>

			 <literal type="string">"relnode = %d"</literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>lockmode</name> <operator>==</operator> <name>AccessShareLock</name></expr> ?</condition><then> <expr><literal type="string">"share"</literal></expr> </then><else>: <expr><literal type="string">"exclusive"</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><name><name>oids</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>oids</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>o_get_type_name</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>format_type_extended</name><argument_list>(<argument><expr><name>typid</name></expr></argument>,
								<argument><expr><name>typmod</name></expr></argument>,
								<argument><expr><name>FORMAT_TYPE_TYPEMOD_GIVEN</name> <operator>|</operator>
								<name>FORMAT_TYPE_ALLOW_INVALID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>o_get_collation_name</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>colid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>colid</name> <operator>&lt;</operator> <name>FirstGenbkiObjectId</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>get_collation_name</name><argument_list>(<argument><expr><name>colid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>colid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type>
<name>describe_table</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>,
				<decl><type ref="prev"/><name>format</name></decl>,
				<decl><type ref="prev"/><name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>column_str</name> <init>= <expr><literal type="string">"Column"</literal></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>type_str</name> <init>= <expr><literal type="string">"Type"</literal></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>collation_str</name> <init>= <expr><literal type="string">"Collation"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>max_column_str</name></decl>,
				<decl><type ref="prev"/><name>max_type_str</name></decl>,
				<decl><type ref="prev"/><name>max_collation_str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to find orioledb table description."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>max_column_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>column_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_type_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_collation_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>collation_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>o_get_type_name</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>colname</name> <init>= <expr><call><name>o_get_collation_name</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>max_column_str</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>max_column_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>max_type_str</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>max_type_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>colname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>max_collation_str</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>max_collation_str</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><literal type="string">"Compress = %d, Primary compress = %d, TOAST compress = %d\n"</literal></expr></argument>,
					 <argument><expr><name><name>table</name><operator>-&gt;</operator><name>default_compress</name></name></expr></argument>,
					 <argument><expr><name><name>table</name><operator>-&gt;</operator><name>primary_compress</name></name></expr></argument>,
					 <argument><expr><name><name>table</name><operator>-&gt;</operator><name>toast_compress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>title</name></expr></argument>, <argument><expr><literal type="string">" %%%ds | %%%ds | %%%ds | Nullable | Droped \n"</literal></expr></argument>,
					 <argument><expr><name>max_column_str</name></expr></argument>,
					 <argument><expr><name>max_type_str</name></expr></argument>,
					 <argument><expr><name>max_collation_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format</name></expr></argument>, <argument><expr><literal type="string">" %%%ds | %%%ds | %%%ds | %%8s | %%6s \n"</literal></expr></argument>,
					 <argument><expr><name>max_column_str</name></expr></argument>,
					 <argument><expr><name>max_type_str</name></expr></argument>,
					 <argument><expr><name>max_collation_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>title</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>column_str</name></expr></argument>, <argument><expr><name>type_str</name></expr></argument>, <argument><expr><name>collation_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>o_get_type_name</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>colname</name> <init>= <expr><call><name>o_get_collation_name</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>format</name><operator>.</operator><name>data</name></name></expr></argument>,
						 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name>typename</name></expr></argument>,
						 <argument><expr><ternary><condition><expr><name>colname</name></expr> ?</condition><then> <expr><name>colname</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>notnull</name></name></expr> ?</condition><then> <expr><literal type="string">"false"</literal></expr> </then><else>: <expr><literal type="string">"true"</literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>field</name><operator>-&gt;</operator><name>droped</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_table_description</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>describe_table</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>orioledb_table_oids</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tables_foreach_oids</name><argument_list>(<argument><expr><name>o_table_oids_array_callback</name></expr></argument>,
						  <argument><expr><name>COMMITSEQNO_NON_DELETED</name></expr></argument>, <argument><expr><name>rsinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_tables_foreach_callback</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTablesForeachArg</name> <modifier>*</modifier></type><name>foreach_arg</name> <init>= <expr><operator>(</operator><name>OTablesForeachArg</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>foreach_arg</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>foreach_arg</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_tables_drop_all_callback</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTablesDropAllArg</name> <modifier>*</modifier></type><name>drop_arg</name> <init>= <expr><operator>(</operator><name>OTablesDropAllArg</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>drop_arg</name><operator>-&gt;</operator><name>datoid</name></name> <operator>==</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>o_tables_drop_by_oids</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name><name>drop_arg</name><operator>-&gt;</operator><name>oxid</name></name></expr></argument>, <argument><expr><name><name>drop_arg</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ORelOids</name>   <modifier>*</modifier></type><name>treeOids</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>numTreeOids</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>treeOids</name> <operator>=</operator> <call><name>o_table_make_index_oids</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>add_undo_drop_relnode</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>treeOids</name></expr></argument>, <argument><expr><name>numTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>treeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_table_oids_array_callback</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>oids</name><operator>.</operator><name>reloid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>oids</name><operator>.</operator><name>relnode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name></expr></argument>, <argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OTableField</name> <modifier>*</modifier></type>
<name>o_table_field_by_name</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>o_table_fieldnum</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nfields</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Copy of TupleDescInitEntry() without SysCache usage.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_table_tupdesc_init_entry</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>att_num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
						   <parameter><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * sanity checks
	 */</comment>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>att_num</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>att_num</name> <operator>&lt;=</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>field</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize the attribute fields
	 */</comment>
	<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>att_num</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attrelid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* dummy value */</comment>

	<comment type="block">/*
	 * Note: name can be NULL, because the planner doesn't always fill in
	 * valid resname values in targetlists, particularly for resjunk
	 * attributes. Also, do nothing if caller wants to re-use the old attname.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>name</name> <operator>!=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>att</name><operator>-&gt;</operator><name>attname</name></name><operator>)</operator></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attstattarget</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attcacheoff</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>typmod</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attnum</name></name> <operator>=</operator> <name>att_num</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attndims</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>ndims</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attnotnull</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>notnull</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>atthasdef</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>hasdef</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>atthasmissing</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>hasmissing</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attidentity</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>droped</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attislocal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attinhcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* attacl, attoptions and attfdwoptions are not present in tupledescs */</comment>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>typid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attbyval</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>byval</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attalign</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>storage</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attcompression</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>compression</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>att</name><operator>-&gt;</operator><name>attcollation</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>o_tables_rel_fill_locktag</name><parameter_list>(<parameter><decl><type><name>LOCKTAG</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>ORelOids</name> <modifier>*</modifier></type><name>oids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name> <init>= <expr><ternary><condition><expr><name>checkpoint</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>oids</name><operator>-&gt;</operator><name>datoid</name></name> <operator>|</operator> <name>CHECKPOINT_LOCK_BIT</name><operator>)</operator></expr> </then><else>: <expr><name><name>oids</name><operator>-&gt;</operator><name>datoid</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lockmode</name> <operator>==</operator> <name>AccessShareLock</name> <operator>||</operator> <name>lockmode</name> <operator>==</operator> <name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ORelOidsIsValid</name><argument_list>(<argument><expr><operator>*</operator><name>oids</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_SYS_TREE_OIDS</name><argument_list>(<argument><expr><operator>*</operator><name>oids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOCKTAG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_LOCKTAG_RELATION</name><argument_list>(<argument><expr><operator>*</operator><name>tag</name></expr></argument>, <argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>oids</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>checkpoint</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>locktag_type</name></name> <operator>=</operator> <name>LOCKTAG_USERLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>serialize_o_table_index</name><parameter_list>(<parameter><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>o_table_index</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_table_index</name></expr></argument>,
						   <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>, <argument><expr><name>exprfields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>o_table_index</name><operator>-&gt;</operator><name>exprfields</name></name></expr></argument>,
						   <argument><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>nexprfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_serialize_node</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>o_table_index</name><operator>-&gt;</operator><name>predicate</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>o_table_index</name><operator>-&gt;</operator><name>predicate</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_serialize_string</name><argument_list>(<argument><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>predicate_str</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>o_serialize_node</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>o_table_index</name><operator>-&gt;</operator><name>expressions</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Pointer</name></type>
<name>serialize_o_table</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_table</name></expr></argument>,
						   <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>OTable</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>serialize_o_table_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>,
						   <argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>field_size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Pointer</name></type>		<name>buf</name></decl>,
					<decl><type ref="prev"/><name>buf_start</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>field_size</name> <operator>=</operator> <call><name>datumEstimateSpace</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_value</name></expr></argument>,
										<argument><expr><operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name></expr></argument>,
										<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>byval</name></expr></argument>,
										<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>typlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name></expr></argument>,
							   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_start</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>	<comment type="block">/* copied because datumSerialize moves buf ptr */</comment>
		<expr_stmt><expr><call><name>datumSerialize</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_value</name></expr></argument>,
					   <argument><expr><operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>am_present</name></expr></argument>,
					   <argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>byval</name></expr></argument>,
					   <argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>typlen</name></expr></argument>,
					   <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>buf_start</name></expr></argument>, <argument><expr><name>field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_serialize_string</name><argument_list>(<argument><expr><call><name>nodeToString</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>str</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>str</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deserialize_o_table_index</name><parameter_list>(<parameter><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>o_table_index</name></decl></parameter>, <parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl>,
				<decl><type ref="prev"/><name>old_mcxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>, <argument><expr><name>exprfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>o_table_index</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>index_mctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mcxt</name> <operator>=</operator> <call><name>OGetIndexContext</name><argument_list>(<argument><expr><name>o_table_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_mcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>o_table_index</name><operator>-&gt;</operator><name>nexprfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>exprfields</name></name> <operator>=</operator> <operator>(</operator><name>OTableField</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>exprfields</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>predicate</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>o_deserialize_node</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>o_table_index</name><operator>-&gt;</operator><name>predicate</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>predicate_str</name></name> <operator>=</operator> <call><name>o_deserialize_string</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>o_table_index</name><operator>-&gt;</operator><name>expressions</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>o_deserialize_node</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OTable</name> <modifier>*</modifier></type>
<name>deserialize_o_table</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>o_table</name> <operator>=</operator> <operator>(</operator><name>OTable</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OTable</name></expr></argument>, <argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>OTableIndex</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>deserialize_o_table_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <operator>(</operator><name>OTableField</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <name>data</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>missing</name></name> <operator>=</operator> <operator>(</operator><name>AttrMissing</name> <operator>*</operator><operator>)</operator>
		<call><name>palloc</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrMissing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AttrMissing</name> <modifier>*</modifier></type><name>miss</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>missing</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>miss</name><operator>-&gt;</operator><name>am_present</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>miss</name><operator>-&gt;</operator><name>am_value</name></name> <operator>=</operator> <call><name>datumRestore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <name>data</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Expr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>defval_str</name> <init>= <expr><call><name>o_deserialize_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>defvals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>stringToNode</name><argument_list>(<argument><expr><name>defval_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>defval_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <name>data</name> <operator>==</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>o_table</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_tables_drop_columns_with_type_callback</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>updated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTablesDropAllWithTypeArg</name> <modifier>*</modifier></type><name>drop_arg</name> <init>= <expr><operator>(</operator><name>OTablesDropAllWithTypeArg</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ignore search for rows of own class in table and base types */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>drop_arg</name><operator>-&gt;</operator><name>type_data</name><operator>-&gt;</operator><name>typtype</name></name> <operator>==</operator> <name>TYPTYPE_BASE</name> <operator>||</operator>
		<operator>(</operator><name><name>drop_arg</name><operator>-&gt;</operator><name>type_data</name><operator>-&gt;</operator><name>typtype</name></name> <operator>==</operator> <name>TYPTYPE_COMPOSITE</name> <operator>&amp;&amp;</operator>
		 <name><name>drop_arg</name><operator>-&gt;</operator><name>type_data</name><operator>-&gt;</operator><name>typrelid</name></name> <operator>==</operator> <name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Drop columns containing type */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>o_field</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>drop_arg</name><operator>-&gt;</operator><name>type_oid</name></name> <operator>==</operator> <name><name>o_field</name><operator>-&gt;</operator><name>typid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o_field</name><operator>-&gt;</operator><name>droped</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>o_field</name><operator>-&gt;</operator><name>droped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>updated</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name><name>drop_arg</name><operator>-&gt;</operator><name>oxid</name></name></expr></argument>, <argument><expr><name><name>drop_arg</name><operator>-&gt;</operator><name>csn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Drops all columns of a specific type
 */</comment>
<function><type><name>void</name></type>
<name>o_tables_drop_columns_by_type</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTablesDropAllWithTypeArg</name></type> <name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>oxid</name></name> <operator>=</operator> <name>oxid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>csn</name></name> <operator>=</operator> <name>csn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>type_oid</name></name> <operator>=</operator> <name>type_oid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>.</operator><name>type_data</name></name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tables_foreach</name><argument_list>(<argument><expr><name>o_tables_drop_columns_with_type_callback</name></expr></argument>,
					 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_table_fill_oids</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>oTable</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RelFileNode</name> <modifier>*</modifier></type><name>newrnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>toastRel</name></decl>,
				<decl><type ref="prev"/><name>indexRel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>newrnode</name><operator>-&gt;</operator><name>relNode</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>toastRel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltoastrelid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>toast_oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>toast_oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>toastRel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>toast_oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>toastRel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>toastRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oTable</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>indexRel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name><name>oTable</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>indexRel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oTable</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>indexRel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>indexRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
