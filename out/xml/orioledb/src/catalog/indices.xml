<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/indices.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * indices.c
 *		Indices routines
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/indices.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/build.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/wal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/operations.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/slot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/planner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_utilcmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/predicate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tuplesort.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type>		<name>in_indexes_rebuild</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>is_in_indexes_rebuild</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>in_indexes_rebuild</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>assign_new_oids</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>oTable</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>heap_relid</name></decl>,
				<decl><type ref="prev"/><name>toast_relid</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>ReindexParams</name></type> <name>params</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>CheckTableForSerializableConflictIn</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>toast_relid</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltoastrelid</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>toast_relid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>toastrel</name> <init>= <expr><call><name>relation_open</name><argument_list>(<argument><expr><name>toast_relid</name></expr></argument>,
											 <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>RelationSetNewRelfilenode</name><argument_list>(<argument><expr><name>toastrel</name></expr></argument>,
								  <argument><expr><name><name>toastrel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpersistence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>toastrel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>heap_relid</name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>params</name><operator>.</operator><name>options</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><operator>.</operator><name>tablespaceOid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reindex_relation</name><argument_list>(<argument><expr><name>heap_relid</name></expr></argument>, <argument><expr><name>REINDEX_REL_PROCESS_TOAST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>reindex_relation</name><argument_list>(<argument><expr><name>heap_relid</name></expr></argument>, <argument><expr><name>REINDEX_REL_PROCESS_TOAST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>in_indexes_rebuild</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RelationSetNewRelfilenode</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpersistence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>in_indexes_rebuild</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_indexes_rebuild</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_table_fill_oids</name><argument_list>(<argument><expr><name>oTable</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>orioledb_free_rd_amcache</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>recreate_o_table</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>old_o_table</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>oldTreeOidsNum</name></decl>,
				<decl><type ref="prev"/><name>newTreeOidsNum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oldOids</name> <init>= <expr><name><name>old_o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>oldTreeOids</name></decl>,
				<decl><type ref="prev"/><name>newOids</name> <init>= <expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>newTreeOids</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldTreeOids</name> <operator>=</operator> <call><name>o_table_make_index_oids</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldTreeOidsNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>newTreeOids</name> <operator>=</operator> <call><name>o_table_make_index_oids</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newTreeOidsNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_tables_drop_by_oids</name><argument_list>(<argument><expr><name><name>old_o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_add</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_invalidate_wal_record</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name><name>old_o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_undo_truncate_relnode</name><argument_list>(<argument><expr><name>oldOids</name></expr></argument>, <argument><expr><name>oldTreeOids</name></expr></argument>, <argument><expr><name>oldTreeOidsNum</name></expr></argument>,
							  <argument><expr><name>newOids</name></expr></argument>, <argument><expr><name>newTreeOids</name></expr></argument>, <argument><expr><name>newTreeOidsNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>oldTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>newTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_validate_index_elements</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl></parameter>,
						  <parameter><decl><type><name>OIndexType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>index_elems</name></decl></parameter>,
						  <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>whereClause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>field_cell</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>whereClause</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_validate_funcexpr</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>, <argument><expr><literal type="string">" are supported in "</literal>
							<literal type="string">"orioledb index predicate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>field_cell</argument>, <argument>index_elems</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IndexElem</name>  <modifier>*</modifier></type><name>ielem</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>IndexElem</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>field_cell</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ielem</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><call><name>o_table_fieldnum</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name><name>ielem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>==</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"indexed field %s is not found in orioledb table"</literal></expr></argument>,
					 <argument><expr><name><name>ielem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>attnum</name></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>oIndexPrimary</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>field</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"primary key should include only NOT NULL columns, "</literal>
					 <literal type="string">"but column %s is nullable"</literal></expr></argument>, <argument><expr><name><name>ielem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>type_is_collatable</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INDETERMINATE_COLLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not determine which collation to use for index expression"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use the COLLATE clause to set the collation explicitly."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>collation</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"collations are not supported by type %s"</literal></expr></argument>,
									<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>typid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>o_validate_funcexpr</name><argument_list>(<argument><expr><name><name>ielem</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><literal type="string">" are supported in "</literal>
								<literal type="string">"orioledb index expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_define_index_validate</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>IndexStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>,
						<parameter><decl><type><name>ODefineIndexContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nattrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>myrelid</name> <init>= <expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type> <name>oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name>myrelid</name></expr>, <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OCompress</name></type> <name>compress</name> <init>= <expr><name>InvalidOCompress</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexType</name></type> <name>ix_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type> <name>primary_oids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ODefineIndexContext</name></type> <name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <operator>&amp;</operator><name>context</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>is_build</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>o_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>old_o_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>accessMethod</name></name></expr></argument>, <argument><expr><literal type="string">"btree"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"'%s' access method is not supported"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>accessMethod</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Only 'btree' access method supported now "</literal>
						<literal type="string">"for indices on orioledb tables."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>concurrent</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"concurrent indexes are not supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>tableSpace</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"tablespaces aren't supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>extract_compress_rel_option</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>,
												<argument><expr><literal type="string">"compress"</literal></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>validate_compress</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><literal type="string">"Index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"orioledb tables indices support "</literal>
					<literal type="string">"only \"compress\" option."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>indexIncludingParams</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"include indexes are not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>o_table</name></name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>.</operator><name>o_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"orioledb table does not exists for oids = %u, %u, %u"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>o_table</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>o_table</name></name></expr>;</expr_stmt>

		<comment type="block">/* check index type */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>primary</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ix_type</name> <operator>=</operator> <name>oIndexPrimary</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>unique</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ix_type</name> <operator>=</operator> <name>oIndexUnique</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ix_type</name> <operator>=</operator> <name>oIndexRegular</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* check index fields number */</comment>
		<expr_stmt><expr><name>nattrs</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>indexParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ix_type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>nattrs_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
					<decl><type ref="prev"/><name>ix</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"table already has primary index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<for>for <control>(<init><expr><name>ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>ix</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name>nattrs_max</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>nattrs_max</name></expr></argument>, <argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix</name></expr>]</index></name><operator>.</operator><name>nfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

				<if_stmt><if>if <condition>(<expr><name>nattrs_max</name> <operator>+</operator> <name>nattrs</name> <operator>&gt;</operator> <name>INDEX_MAX_KEYS</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many fields in the primary index for exiting indices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>oIndexRegular</name> <operator>&amp;&amp;</operator>
				<name>nattrs</name> <operator>+</operator> <name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nfields</name> <operator>&gt;</operator> <name>INDEX_MAX_KEYS</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many fields in the index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>primary_oids</name> <operator>=</operator> <ternary><condition><expr><name>ix_type</name> <operator>==</operator> <name>oIndexPrimary</name> <operator>||</operator>
					   <operator>!</operator><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr> ?</condition><then>
						   <expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr> </then><else>:
						   <expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name>oids</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>.</operator><name>is_build</name></name> <operator>=</operator> <call><name>tbl_data_exists</name><argument_list>(<argument><expr><operator>&amp;</operator><name>primary_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Rebuild, assign new oids */</comment>
		<if_stmt><if>if <condition>(<expr><name>ix_type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>context</name><operator>.</operator><name>old_o_table</name></name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>o_table</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>context</name><operator>.</operator><name>o_table</name></name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>o_table</name> <operator>=</operator> <name><name>context</name><operator>.</operator><name>o_table</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assign_new_oids</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>oids</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>context</name><operator>.</operator><name>oids</name></name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ix_type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ix_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* place first */</comment>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>primary_init_nfields</name></name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>ix_num</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>context</name><operator>.</operator><name>ix_num</name></name> <operator>=</operator> <name>ix_num</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name></name> <operator>=</operator> <operator>(</operator><name>OTableIndex</name> <operator>*</operator><operator>)</operator>
			<call><name>repalloc</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
										   <operator>(</operator><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* move indices if needed */</comment>
		<if_stmt><if>if <condition>(<expr><name>ix_type</name> <operator>==</operator> <name>oIndexPrimary</name> <operator>&amp;&amp;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
					<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>ix_type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>nfields</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>indexParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>compress</name> <operator>=</operator> <name>compress</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>ix_type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>compress</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>primary_compress</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>compress</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>default_compress</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * Add primary key fields, because otherwise, when planning a query with a
		 * where clause consisting only of index fields and primary key fields, an
		 * index-only scan is not selected.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>ix_type</name> <operator>!=</operator> <name>oIndexPrimary</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>nfields</name></decl>;</decl_stmt>

			<comment type="block">/* Remove assert if INCLUDE supported */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>indexIncludingParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nfields</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name>nfields</name></expr>;</expr_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OTableIndexField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>table_field</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>IndexElem</name> <modifier>*</modifier></type><name>iparam</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>table_field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>field</name><operator>-&gt;</operator><name>attnum</name></name></expr>]</index></name></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>iparam</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>table_field</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>iparam</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>iparam</name><operator>-&gt;</operator><name>indexcolname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>iparam</name><operator>-&gt;</operator><name>collation</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>iparam</name><operator>-&gt;</operator><name>opclass</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>iparam</name><operator>-&gt;</operator><name>opclassopts</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>indexIncludingParams</name></name> <operator>=</operator>
						<call><name>lappend</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>indexIncludingParams</name></name></expr></argument>, <argument><expr><name>iparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>idxname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>indexColNames</name> <init>= <expr><call><name>ChooseIndexColumnNames</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>indexParams</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>idxname</name></name> <operator>=</operator> <call><name>ChooseIndexName</name><argument_list>(<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><name>indexColNames</name></expr></argument>,
											<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>excludeOpNames</name></name></expr></argument>,
											<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>primary</name></name></expr></argument>,
											<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>isconstraint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check index fields */</comment>
		<expr_stmt><expr><call><name>o_validate_index_elements</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>, <argument><expr><name>ix_type</name></expr></argument>,
								  <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>indexParams</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>whereClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_define_index</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ObjectAddress</name></type> <name>address</name></decl></parameter>,
			   <parameter><decl><type><name>ODefineIndexContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>index_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>o_table</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name> <modifier>*</modifier></type><name>old_o_table</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>old_o_table</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>ix_num</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>old_descr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>index_rel</name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index_rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>,
		   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NameData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>index_rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relfilenode</name></name></expr>;</expr_stmt>

	<comment type="block">/* fill index fields */</comment>
	<expr_stmt><expr><call><name>o_table_fill_index</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>index_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>index_rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>index</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>address</name><operator>.</operator><name>objectId</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_opclass_cache_add_table</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>custom_types_add_all</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* update o_table */</comment>
	<if_stmt><if>if <condition>(<expr><name>old_o_table</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>old_descr</name> <operator>=</operator> <call><name>o_fetch_table_descr</name><argument_list>(<argument><expr><name><name>old_o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* create orioledb index from exist data */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>is_build</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTableDescr</name></type> <name>tmpDescr</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_fill_tmp_table_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDescr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rebuild_indices</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>, <argument><expr><name>old_descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_free_tmp_table_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>o_fill_tmp_table_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDescr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>build_secondary_index</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpDescr</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_free_tmp_table_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmpDescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>index</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OXid</name></type> <name>oxid</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>recreate_o_table</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_undo_create_relnode</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>recreate_table_descr_by_oids</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>old_o_table</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>is_build</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oTablesAddLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>build_secondary_index</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>sortstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>primarySlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>tableRelation</name></decl>,
				<decl><type ref="prev"/><name>indexRelation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>heap_tuples</name></decl>,
				<decl><type ref="prev"/><name>index_tuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>ctid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CheckpointFileHeader</name></type> <name>fileHeader</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><ternary><condition><expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr> ?</condition><then> <expr><name>ix_num</name></expr> </then><else>: <expr><name>ix_num</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>primary</name> <operator>=</operator> <call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_recovery_in_progress</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>indexRelation</name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>sortstate</name> <operator>=</operator> <call><name>tuplesort_begin_orioledb_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>indexRelation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>indexRelation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
								   <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>primarySlot</name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>heap_tuples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>primaryTup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>secondaryTup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>primaryTup</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
											<argument><expr><name>BTreeKeyNone</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>primaryTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>tts_orioledb_store_tuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>primaryTup</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>,
								 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>PrimaryIndexNumber</name></expr></argument>,
								 <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>heap_tuples</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>sortstate</name><operator>-&gt;</operator><name>tuplecontext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>secondaryTup</name> <operator>=</operator> <call><name>tts_orioledb_make_secondary_tuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_btree_check_size_of_tuple</name><argument_list>(<argument><expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>secondaryTup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tuplesort_putotuple</name><argument_list>(<argument><expr><name>sortstate</name></expr></argument>, <argument><expr><name>secondaryTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>index_tuples</name> <operator>=</operator> <name>heap_tuples</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplesort_performsort</name><argument_list>(<argument><expr><name>sortstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_write_index_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name>sortstate</name></expr></argument>,
						   <argument><expr><name>ctid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplesort_end_orioledb_index</name><argument_list>(<argument><expr><name>sortstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We hold oTablesAddLock till o_tables_update().  So, checkpoint number
	 * in the data file will be consistent with o_tables metadata.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oTablesAddLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_write_file_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_recovery_in_progress</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tableRelation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>indexRelation</name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
								   <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>index_update_stats</name><argument_list>(<argument><expr><name>tableRelation</name></expr></argument>,
						   <argument><expr><name>true</name></expr></argument>,
						   <argument><expr><name>heap_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>index_update_stats</name><argument_list>(<argument><expr><name>indexRelation</name></expr></argument>,
						   <argument><expr><name>false</name></expr></argument>,
						   <argument><expr><name>index_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Make the updated catalog row versions visible */</comment>
		<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>tableRelation</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>indexRelation</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>rebuild_indices</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>old_o_table</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>old_descr</name></decl></parameter>,
				<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>primary</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier><modifier>*</modifier></type><name>sortstates</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplesortstate</name> <modifier>*</modifier></type><name>toastSortState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>primarySlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>tableRelation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>heap_tuples</name></decl>,
				<decl><type ref="prev"/><name>index_tuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>ctid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CheckpointFileHeader</name> <modifier>*</modifier></type><name>fileHeaders</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CheckpointFileHeader</name></type> <name>toastFileHeader</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>primary</name> <operator>=</operator> <call><name>GET_PRIMARY</name><argument_list>(<argument><expr><name>old_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_btree_load_shmem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sortstates</name> <operator>=</operator> <operator>(</operator><name>Tuplesortstate</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Tuplesortstate</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator>
											<name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fileHeaders</name> <operator>=</operator> <operator>(</operator><name>CheckpointFileHeader</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointFileHeader</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
												  <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sortstates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tuplesort_begin_orioledb_index</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>primarySlot</name> <operator>=</operator> <call><name>MakeSingleTupleTableSlot</name><argument_list>(<argument><expr><name><name>old_descr</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TTSOpsOrioleDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_open_smgr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>toastSortState</name> <operator>=</operator> <call><name>tuplesort_begin_orioledb_toast</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name></name></expr></argument>,
													<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
													<argument><expr><name>work_mem</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primary</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
								   <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>heap_tuples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>primaryTup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>primaryTup</name> <operator>=</operator> <call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
											<argument><expr><name>BTreeKeyNone</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>primaryTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>tts_orioledb_store_tuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>primaryTup</name></expr></argument>, <argument><expr><name>old_descr</name></expr></argument>,
								 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>PrimaryIndexNumber</name></expr></argument>,
								 <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tts_orioledb_detoast</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tts_orioledb_toast</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTuple</name></type>		<name>newTup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>o_is_index_predicate_satisfied</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>primarySlot</name></expr></argument>,
												<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>econtext</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>sortstates</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuplecontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>primarySlot</name><operator>-&gt;</operator><name>tts_tid</name><operator>.</operator><name>ip_posid</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name><operator>)</operator> <name>ctid</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>BlockIdSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>primarySlot</name><operator>-&gt;</operator><name>tts_tid</name><operator>.</operator><name>ip_blkid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>ctid</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ctid</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>newTup</name> <operator>=</operator> <call><name>tts_orioledb_form_orphan_tuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>newTup</name> <operator>=</operator> <call><name>tts_orioledb_make_secondary_tuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>o_btree_check_size_of_tuple</name><argument_list>(<argument><expr><call><name>o_tuple_size</name><argument_list>(<argument><expr><name>newTup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>leafSpec</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>tuplesort_putotuple</name><argument_list>(<argument><expr><name><name>sortstates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>newTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>tts_orioledb_toast_sort_add</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>, <argument><expr><name>toastSortState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>heap_tuples</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>index_tuples</name> <operator>=</operator> <name>heap_tuples</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>primarySlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tuplesort_performsort</name><argument_list>(<argument><expr><name><name>sortstates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>btree_write_index_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>idx</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>, <argument><expr><name><name>sortstates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
							   <argument><expr><ternary><condition><expr><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>primaryIsCtid</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>PrimaryIndexNumber</name><operator>)</operator></expr> ?</condition><then> <expr><name>ctid</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>fileHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tuplesort_end_orioledb_index</name><argument_list>(<argument><expr><name><name>sortstates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>sortstates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplesort_performsort</name><argument_list>(<argument><expr><name>toastSortState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_write_index_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>leafTupdesc</name></name></expr></argument>,
						   <argument><expr><name>toastSortState</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>toastFileHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplesort_end_orioledb_index</name><argument_list>(<argument><expr><name>toastSortState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We hold oTablesAddLock till o_tables_update().  So, checkpoint number
	 * in the data file will be consistent with o_tables metadata.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oTablesAddLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>btree_write_file_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fileHeaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>btree_write_file_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>descr</name><operator>-&gt;</operator><name>toast</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toastFileHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fileHeaders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_recovery_in_progress</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tableRelation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>index_update_stats</name><argument_list>(<argument><expr><name>tableRelation</name></expr></argument>,
						   <argument><expr><name>true</name></expr></argument>,
						   <argument><expr><name>heap_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>table_index</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>ctid_off</name> <init>= <expr><ternary><condition><expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>idx_descr</name> <init>= <expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name> <operator>+</operator> <name>ctid_off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Relation</name></type>	<name>indexRelation</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>indexRelation</name> <operator>=</operator> <call><name>index_open</name><argument_list>(<argument><expr><name><name>table_index</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>,
									   <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>table_index</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>oIndexPrimary</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>reloid</name> <init>= <expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>indexRelation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_class</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_index</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_attribute</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>class_form</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_index</name></type> <name>index_form</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>class_tuple</name></decl>,
							<decl><type ref="prev"/><name>index_tuple</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>pg_class</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>class_tuple</name> <operator>=</operator> <call><name>SearchSysCacheCopy1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>,
												  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>class_tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find pg_class for relation %u"</literal></expr></argument>,
						 <argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>class_form</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>pg_index</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>IndexRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>index_tuple</name> <operator>=</operator> <call><name>SearchSysCacheCopy1</name><argument_list>(<argument><expr><name>INDEXRELID</name></expr></argument>,
												  <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find pg_index for relation %u"</literal></expr></argument>,
						 <argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>index_form</name> <operator>=</operator> <operator>(</operator><name>Form_pg_index</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>pg_attribute</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>AttributeRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int2vector</name> <modifier>*</modifier></type><name>indkey</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>pkey_natts</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_index</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>Natts_pg_index</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name><name>replaces</name><index>[<expr><name>Natts_pg_index</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>old_index_tuple</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>nsupport</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>indkey_ix</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>pkey_natts</name> <operator>=</operator> <name><name>idx_descr</name><operator>-&gt;</operator><name>nFields</name></name> <operator>-</operator>
						<name><name>idx_descr</name><operator>-&gt;</operator><name>nPrimaryFields</name></name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>attnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>attnum</name> <operator>&lt;</operator> <name>pkey_natts</name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>FormData_pg_attribute</name></type> <name>attribute</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
						<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name><name>aattr</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>&amp;</operator><name>attribute</name></expr>}</block></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<decl_stmt><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>idx_field</name> <init>= <expr><operator>&amp;</operator><name><name>idx_descr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>idx_descr</name><operator>-&gt;</operator><name>nPrimaryFields</name></name> <operator>+</operator> <name>attnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>table_field</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>idx_field</name><operator>-&gt;</operator><name>tableAttnum</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attrelid</name></name> <operator>=</operator> <name>reloid</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>attribute</name><operator>.</operator><name>attname</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>table_field</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>atttypid</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>typid</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attstattarget</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attlen</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name><name>idx_descr</name><operator>-&gt;</operator><name>nPrimaryFields</name></name> <operator>+</operator> <name>attnum</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attndims</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>ndims</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>atttypmod</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>typmod</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attbyval</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>byval</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attalign</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>align</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attstorage</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>storage</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attcompression</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>compression</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attnotnull</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>notnull</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>atthasdef</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>atthasmissing</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attidentity</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attgenerated</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attisdropped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attislocal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attinhcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>attribute</name><operator>.</operator><name>attcollation</name></name> <operator>=</operator> <name><name>table_field</name><operator>-&gt;</operator><name>collation</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
						<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTupleDesc</name><argument_list>(<argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>aattr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>FormData_pg_attribute</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>aattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>InsertPgAttributeTuples</name><argument_list>(<argument><expr><name>pg_attribute</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>reloid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<expr_stmt><expr><call><name>InsertPgAttributeTuple</name><argument_list>(<argument><expr><name>pg_attribute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attribute</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					</block_content>}</block></for>

					<if_stmt><if>if <condition>(<expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_opcoptions</name></name></expr>)</condition>
					<block>{<block_content>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indnatts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_opcoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_opcoptions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></for>
						<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_opcoptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_opcoptions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_support</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_support</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_supportinfo</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_supportinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name><name>class_form</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>+=</operator> <name>pkey_natts</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>index_form</name><operator>-&gt;</operator><name>indnatts</name></name> <operator>+=</operator> <name>pkey_natts</name></expr>;</expr_stmt>

					<expr_stmt><expr><name>nsupport</name> <operator>=</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indnatts</name></name> <operator>*</operator>
							   <name><name>indexRelation</name><operator>-&gt;</operator><name>rd_indam</name><operator>-&gt;</operator><name>amsupport</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_support</name></name> <operator>=</operator> <operator>(</operator><name>RegProcedure</name> <operator>*</operator><operator>)</operator>
						<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_indexcxt</name></name></expr></argument>,
											   <argument><expr><name>nsupport</name> <operator>*</operator>
											   <sizeof>sizeof<argument_list>(<argument><expr><name>RegProcedure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_supportinfo</name></name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator>
						<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>indexRelation</name><operator>-&gt;</operator><name>rd_indexcxt</name></name></expr></argument>,
											   <argument><expr><name>nsupport</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>indkey</name> <operator>=</operator> <call><name>buildint2vector</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>index_form</name><operator>-&gt;</operator><name>indnatts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>indkey_ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indkey_ix</name> <operator>&lt;</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indnkeyatts</name></name></expr>;</condition> <incr><expr><name>indkey_ix</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>indkey</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>indkey_ix</name></expr>]</index></name> <operator>=</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indkey</name><operator>.</operator><name>values</name><index>[<expr><name>indkey_ix</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
					<for>for <control>(<init><expr><name>indkey_ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>indkey_ix</name> <operator>&lt;</operator> <name>pkey_natts</name></expr>;</condition> <incr><expr><name>indkey_ix</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>j</name> <init>= <expr><name><name>index_form</name><operator>-&gt;</operator><name>indnkeyatts</name></name> <operator>+</operator> <name>indkey_ix</name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>OIndexField</name> <modifier>*</modifier></type><name>idx_field</name> <init>=
						<expr><operator>&amp;</operator><name><name>idx_descr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>idx_descr</name><operator>-&gt;</operator><name>nPrimaryFields</name></name> <operator>+</operator> <name>indkey_ix</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>indkey</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>idx_field</name><operator>-&gt;</operator><name>tableAttnum</name></name></expr>;</expr_stmt>
					</block_content>}</block></for>

					<expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_pg_index_indkey</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_index_indkey</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>indkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>old_index_tuple</name> <operator>=</operator> <name>index_tuple</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>index_tuple</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>old_index_tuple</name></expr></argument>,
													<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>,
													<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>old_index_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>pkey_natts</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>pkey_natts</name> <operator>=</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indnatts</name></name> <operator>-</operator>
						<name><name>index_form</name><operator>-&gt;</operator><name>indnkeyatts</name></name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>attnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>attnum</name> <operator>&lt;</operator> <name>pkey_natts</name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>attr_tuple</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>attr_tuple</name> <operator>=</operator>
							<call><name>SearchSysCacheCopy2</name><argument_list>(<argument><expr><name>ATTNUM</name></expr></argument>,
												<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>index_form</name><operator>-&gt;</operator><name>indnkeyatts</name></name> <operator>+</operator> <name>attnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>attr_tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find pg_attribute for "</literal>
								 <literal type="string">"relation %u"</literal></expr></argument>, <argument><expr><name>reloid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>CatalogTupleDelete</name><argument_list>(<argument><expr><name>pg_attribute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>attr_tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><name><name>class_form</name><operator>-&gt;</operator><name>relnatts</name></name> <operator>=</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indnkeyatts</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>index_form</name><operator>-&gt;</operator><name>indnatts</name></name> <operator>=</operator> <name><name>index_form</name><operator>-&gt;</operator><name>indnkeyatts</name></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_class</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>class_tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>,
								   <argument><expr><name>class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>index_tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>,
								   <argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>class_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>index_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_attribute</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_class</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pg_index</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>index_update_stats</name><argument_list>(<argument><expr><name>indexRelation</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>index_tuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>indexRelation</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Make the updated catalog row versions visible */</comment>
		<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>tableRelation</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>drop_primary_index</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>old_o_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name></type> <name>tmp_descr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>old_descr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>PrimaryIndexNumber</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>oIndexPrimary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>old_o_table</name> <operator>=</operator> <name>o_table</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assign_new_oids</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
			<argument><expr><operator>(</operator><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>has_primary</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>primary_init_nfields</name></name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>	<comment type="block">/* + ctid field */</comment>

	<expr_stmt><expr><name>old_descr</name> <operator>=</operator> <call><name>o_fetch_table_descr</name><argument_list>(<argument><expr><name><name>old_o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_fill_tmp_table_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rebuild_indices</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>, <argument><expr><name>old_descr</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_free_tmp_table_descr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>recreate_o_table</name><argument_list>(<argument><expr><name>old_o_table</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oTablesAddLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>drop_secondary_index</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>deletedOids</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>oIndexInvalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>deletedOids</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>oids</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><operator>(</operator><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>-</operator> <name>ix_num</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OTableIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* update o_table */</comment>
	<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_undo_drop_relnode</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deletedOids</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>recreate_table_descr_by_oids</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_index_drop</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>tbl</name></decl></parameter>, <parameter><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
	<expr><name><name>tbl</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"orioledb table does not exists for oids = %u, %u, %u"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>drop_primary_index</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>drop_secondary_index</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>OIndexNumber</name></type>
<name>o_find_ix_num_by_name</name><parameter_list>(<parameter><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ix_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>result</name> <init>= <expr><name>InvalidIndexNumber</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>descr</name><operator>-&gt;</operator><name>nIndices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>name</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>ix_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
