<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/o_type_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 *  o_type_cache.c
 *		Routines for orioledb type cache.
 *
 * type_cache is tree that contains cached metadata from pg_type.
 *
 * Copyright (c) 2021-2022, OrioleDB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_type_cache.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCache</name> <modifier>*</modifier></type><name>type_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_type_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									<parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_type_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>O_SYS_CACHE_FUNCS</name><argument_list>(<argument><expr><name>type_cache</name></expr></argument>, <argument><expr><name>OType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheFuncs</name></type> <name>type_cache_funcs</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>free_entry</name> <operator>=</operator> <name>o_type_cache_free_entry</name></expr>,
	<expr><operator>.</operator><name>fill_entry</name> <operator>=</operator> <name>o_type_cache_fill_entry</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initializes the type sys cache memory.
 */</comment>
<macro><name>O_SYS_CACHE_INIT_FUNC</name><argument_list>(<argument>type_cache</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>keytypes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OIDOID</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>type_cache</name> <operator>=</operator> <call><name>o_create_sys_cache</name><argument_list>(<argument><expr><name>SYS_TREES_TYPE_CACHE</name></expr></argument>,
									<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
									<argument><expr><name>TypeOidIndexId</name></expr></argument>, <argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									<argument><expr><name>keytypes</name></expr></argument>, <argument><expr><name>fastcache</name></expr></argument>,
									<argument><expr><name>mcxt</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>type_cache_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type>
<name>o_type_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>typetup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typeform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name> <init>= <expr><operator>(</operator><name>OType</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>entry_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typeoid</name> <init>= <expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>typetup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>typetup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>typeform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>typetup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>			<comment type="block">/* Existed o_type updated */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>o_type</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>entry_ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_type</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typname</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typname</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typalign</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typalign</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typstorage</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typstorage</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typcollation</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typcollation</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typrelid</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typrelid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typtype</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typtype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typcategory</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typcategory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typispreferred</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typispreferred</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typisdefined</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typisdefined</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typinput</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typinput</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typoutput</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typoutput</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typreceive</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typreceive</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typsend</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typsend</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typelem</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typelem</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>typdelim</name></name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typdelim</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>o_type</name><operator>-&gt;</operator><name>default_opclass</name></name> <operator>=</operator> <call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>BTREE_AM_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>default_opclass</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name><name>typeform</name><operator>-&gt;</operator><name>typtype</name></name> <operator>!=</operator> <name>TYPTYPE_PSEUDO</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not identify a comparison function for type %s"</literal></expr></argument>,
						<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_type_cache_add_if_needed</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>,
								   <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>typetup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_type_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name> <init>= <expr><operator>(</operator><name>OType</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>o_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HeapTuple</name></type>
<name>o_type_cache_search_htup</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>typetup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_type</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>Natts_pg_type</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_type</name> <operator>=</operator> <call><name>o_type_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name><name>type_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>o_type</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_oid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>o_type</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typname</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_type</name><operator>-&gt;</operator><name>typname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int16GetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typbyval</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typalign</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typstorage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typstorage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typcollation</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typcollation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typtype</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typcategory</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typcategory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typispreferred</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typispreferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typisdefined</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>BoolGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typisdefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typinput</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typinput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typoutput</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typoutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typreceive</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typreceive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typsend</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typsend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typelem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_type_typdelim</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>CharGetDatum</name><argument_list>(<argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typdelim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_type_typdefault</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_type_typdefaultbin</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_type_typacl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>typetup</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>typetup</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Oid</name></type>
<name>o_type_cache_get_typrelid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_type</name> <operator>=</operator> <call><name>o_type_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name><name>type_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>o_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>o_type</name><operator>-&gt;</operator><name>typrelid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Oid</name></type>
<name>o_type_cache_default_opclass</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_type</name> <operator>=</operator> <call><name>o_type_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name><name>type_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>o_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>o_type</name><operator>-&gt;</operator><name>default_opclass</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_type_cache_fill_info</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>typlen</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>typbyval</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typalign</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typstorage</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>typcollation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_type</name> <operator>=</operator> <call><name>o_type_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name><name>type_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>o_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>typlen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>typlen</name> <operator>=</operator> <name><name>o_type</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>typbyval</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>typbyval</name> <operator>=</operator> <name><name>o_type</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>typalign</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>typalign</name> <operator>=</operator> <name><name>o_type</name><operator>-&gt;</operator><name>typalign</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>typstorage</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>typstorage</name> <operator>=</operator> <name><name>o_type</name><operator>-&gt;</operator><name>typstorage</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>typcollation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>typcollation</name> <operator>=</operator> <name><name>o_type</name><operator>-&gt;</operator><name>typcollation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TypeCacheEntry</name> <modifier>*</modifier></type>
<name>o_type_elements_cmp_hook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>elemtype</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>prev_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opclassoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OOpclass</name>   <modifier>*</modifier></type><name>o_opclass</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>opclassoid</name> <operator>=</operator> <call><name>o_type_cache_default_opclass</name><argument_list>(<argument><expr><name>elemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_opclass</name> <operator>=</operator> <call><name>o_opclass_get</name><argument_list>(<argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prev_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>typcache</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TypeCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>typcache</name><operator>-&gt;</operator><name>type_id</name></name> <operator>=</operator> <name>elemtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_type_cache_fill_info</name><argument_list>(<argument><expr><name>elemtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_proc_cache_fill_finfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>cmp_proc_finfo</name></name></expr></argument>, <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>cmpOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>prev_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>typcache</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A tuple print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_type_cache_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
					   <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OType</name>	   <modifier>*</modifier></type><name>o_type</name> <init>= <expr><operator>(</operator><name>OType</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_print</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", typname: %s"</literal>
					 <literal type="string">", typlen: %d"</literal>
					 <literal type="string">", typbyval: %c"</literal>
					 <literal type="string">", typalign: '%c'"</literal>
					 <literal type="string">", typstorage: '%c'"</literal>
					 <literal type="string">", typcollation: %u"</literal>
					 <literal type="string">", typrelid: %u"</literal>
					 <literal type="string">", typtype: '%c'"</literal>
					 <literal type="string">", typcategory: '%c'"</literal>
					 <literal type="string">", typispreferred: %c"</literal>
					 <literal type="string">", typisdefined: %c"</literal>
					 <literal type="string">", typinput: %u"</literal>
					 <literal type="string">", typoutput: %u"</literal>
					 <literal type="string">", typreceive: %u"</literal>
					 <literal type="string">", typsend: %u"</literal>
					 <literal type="string">", typelem: %u"</literal>
					 <literal type="string">", typdelim: '%c'"</literal>
					 <literal type="string">", default_opclass: %u"</literal>
					 <literal type="string">")"</literal></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typname</name><operator>.</operator><name>data</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>o_type</name><operator>-&gt;</operator><name>typbyval</name></name></expr> ?</condition><then> <expr><literal type="char">'Y'</literal></expr> </then><else>: <expr><literal type="char">'N'</literal></expr></else></ternary></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typstorage</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typcollation</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typrelid</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typtype</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typcategory</name></name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>o_type</name><operator>-&gt;</operator><name>typispreferred</name></name></expr> ?</condition><then> <expr><literal type="char">'Y'</literal></expr> </then><else>: <expr><literal type="char">'N'</literal></expr></else></ternary></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>o_type</name><operator>-&gt;</operator><name>typisdefined</name></name></expr> ?</condition><then> <expr><literal type="char">'Y'</literal></expr> </then><else>: <expr><literal type="char">'N'</literal></expr></else></ternary></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typinput</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typoutput</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typreceive</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typsend</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>typdelim</name></name></expr></argument>,
					 <argument><expr><name><name>o_type</name><operator>-&gt;</operator><name>default_opclass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
