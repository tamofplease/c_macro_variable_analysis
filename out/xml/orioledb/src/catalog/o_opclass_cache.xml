<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/o_opclass_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * o_opclass.c
 *		Routines for orioledb operator classes sys cache.
 *
 * Operator class B-tree stores data used by comparator and field initialization
 * for orioledb engine tables.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_opclass.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkpoint/checkpoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/wal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCache</name> <modifier>*</modifier></type><name>opclass_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_opclass_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_opclass_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									   <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>O_SYS_CACHE_FUNCS</name><argument_list>(<argument><expr><name>opclass_cache</name></expr></argument>, <argument><expr><name>OOpclass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheFuncs</name></type> <name>opclass_cache_funcs</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>free_entry</name> <operator>=</operator> <name>o_opclass_cache_free_entry</name></expr>,
	<expr><operator>.</operator><name>fill_entry</name> <operator>=</operator> <name>o_opclass_cache_fill_entry</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initializes the opclass sys cache memory.
 */</comment>
<macro><name>O_SYS_CACHE_INIT_FUNC</name><argument_list>(<argument>opclass_cache</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>keytypes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OIDOID</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>opclass_cache</name> <operator>=</operator> <call><name>o_create_sys_cache</name><argument_list>(<argument><expr><name>SYS_TREES_OPCLASS_CACHE</name></expr></argument>,
									   <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
									   <argument><expr><name>OpclassOidIndexId</name></expr></argument>, <argument><expr><name>CLAOID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									   <argument><expr><name>keytypes</name></expr></argument>, <argument><expr><name>fastcache</name></expr></argument>,
									   <argument><expr><name>mcxt</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>opclass_cache_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/*
 * Inserts opclasses for all fields of the o_table to the opclass B-tree.
 */</comment>
<function><type><name>void</name></type>
<name>o_opclass_cache_add_table</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_ix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>datoid</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_sys_caches_add_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/*
		 * Inserts opclasses for TOAST index.
		 */</comment>
		<expr_stmt><expr><call><name>o_opclass_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>,
									  <argument><expr><call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>INT2OID</name></expr></argument>,
														<argument><expr><name>BTREE_AM_OID</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_opclass_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>,
									  <argument><expr><call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>INT4OID</name></expr></argument>,
														<argument><expr><name>BTREE_AM_OID</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Inserts opclass for default index if there is no unique index.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>oIndexRegular</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>o_opclass_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>,
										  <argument><expr><call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>TIDOID</name></expr></argument>,
															<argument><expr><name>BTREE_AM_OID</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>cur_ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur_ix</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>cur_ix</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>cur_ix</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>cur_field</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>cur_field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur_field</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>cur_field</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_opclass_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>,
											  <argument><expr><name><name>index</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>cur_field</name></expr>]</index></name><operator>.</operator><name>opclass</name></expr></argument>,
											  <argument><expr><name>cur_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_FINALLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>o_sys_caches_add_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Finds and returns OOpclass.
 */</comment>
<function><type><name>OOpclass</name> <modifier>*</modifier></type>
<name>o_opclass_get</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>o_opclass_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>,
								  <argument><expr><name><name>opclass_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>HeapTuple</name></type>
<name>o_opclass_cache_search_htup</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_opclass</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>Natts_pg_opclass</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OOpclass</name>   <modifier>*</modifier></type><name>o_opclass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NameData</name></type>	<name>oname</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_opclass</name> <operator>=</operator> <call><name>o_opclass_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>,
									   <argument><expr><name><name>opclass_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>o_opclass</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_opclass_oid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>o_opclass</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oname</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_opclass_opcname</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_opclass_opcfamily</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_opclass_opcintype</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
			<call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_opclass_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>opclasstuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>opclassform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>base_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OOpclass</name>   <modifier>*</modifier></type><name>o_opclass</name> <init>= <expr><operator>(</operator><name>OOpclass</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>entry_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opclassoid</name> <init>= <expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * find typecache entry
	 */</comment>
	<expr_stmt><expr><name>opclasstuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CLAOID</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>opclasstuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for opclass %u"</literal></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>opclassform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>opclasstuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_opclass</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>o_opclass</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OOpclass</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>entry_ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_opclass</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>opfamily</name></name> <operator>=</operator> <name><name>opclassform</name><operator>-&gt;</operator><name>opcfamily</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>inputtype</name></name> <operator>=</operator> <name><name>opclassform</name><operator>-&gt;</operator><name>opcintype</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>base_type</name> <operator>=</operator> <call><name>getBaseType</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>ssupOid</name></name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr></argument>, <argument><expr><name>base_type</name></expr></argument>,
										   <argument><expr><name>base_type</name></expr></argument>, <argument><expr><name>BTSORTSUPPORT_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>ssupOid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_proc_cache_validate_add</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>,
								  <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>ssupOid</name></name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
								  <argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>cmpOid</name></name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr></argument>, <argument><expr><name>base_type</name></expr></argument>,
										  <argument><expr><name>base_type</name></expr></argument>, <argument><expr><name>BTORDER_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_proc_cache_validate_add</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>cmpOid</name></name></expr></argument>,
							  <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="string">"comparsion"</literal></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>opclasstuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_opclass_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * A tuple print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_opclass_cache_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
						  <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OOpclass</name>   <modifier>*</modifier></type><name>o_opclass</name> <init>= <expr><operator>(</operator><name>OOpclass</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_print</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", opfamily: %u, inputtype: %d, "</literal>
					 <literal type="string">"cmpOid: %u, ssupOid: %u)"</literal></expr></argument>,
					 <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr></argument>, <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>,
					 <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>cmpOid</name></name></expr></argument>, <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>ssupOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
