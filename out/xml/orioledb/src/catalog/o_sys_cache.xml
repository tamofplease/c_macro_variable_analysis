<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/o_sys_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * o_sys_cache.c
 *		Generic interface for sys cache duplicate trees.
 *
 * Copyright (c) 2021-2022, OrioleDB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_sys_cache.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/modify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/sys_trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/wal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tuple/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/planner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heaptoast.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_aggregate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>Oid</name></type>			<name>o_sys_cache_search_datoid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>o_sys_cache_get_from_tree</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>,
										 <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
										 <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>o_sys_cache_get_from_toast_tree</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>,
											   <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_sys_cache_add</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
							<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_sys_cache_update</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>updated_entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>o_sys_cache_key_cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
								<parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_sys_cache_keys_to_str</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
									<parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>BTreeDescr</name> <modifier>*</modifier></type><name>oSysCacheToastGetBTreeDesc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>oSysCacheToastGetMaxChunkSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>oSysCacheToastUpdateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>oSysCacheToastGetNextKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OTuple</name></type> <name>oSysCacheToastCreateTuple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>,
										<parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,
										<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OTuple</name></type> <name>oSysCacheToastCreateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>oSysCacheToastGetTupleData</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>oSysCacheToastGetTupleOffset</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>oSysCacheToastGetTupleDataSize</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HeapTuple</name></type> <name>o_auth_cache_search_htup</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>authoid</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>ToastAPI</name></type>	<name>oSysCacheToastAPI</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>getBTreeDesc</name> <operator>=</operator> <name>oSysCacheToastGetBTreeDesc</name></expr>,
	<expr><operator>.</operator><name>getMaxChunkSize</name> <operator>=</operator> <name>oSysCacheToastGetMaxChunkSize</name></expr>,
	<expr><operator>.</operator><name>updateKey</name> <operator>=</operator> <name>oSysCacheToastUpdateKey</name></expr>,
	<expr><operator>.</operator><name>getNextKey</name> <operator>=</operator> <name>oSysCacheToastGetNextKey</name></expr>,
	<expr><operator>.</operator><name>createTuple</name> <operator>=</operator> <name>oSysCacheToastCreateTuple</name></expr>,
	<expr><operator>.</operator><name>createKey</name> <operator>=</operator> <name>oSysCacheToastCreateKey</name></expr>,
	<expr><operator>.</operator><name>getTupleData</name> <operator>=</operator> <name>oSysCacheToastGetTupleData</name></expr>,
	<expr><operator>.</operator><name>getTupleOffset</name> <operator>=</operator> <name>oSysCacheToastGetTupleOffset</name></expr>,
	<expr><operator>.</operator><name>getTupleDataSize</name> <operator>=</operator> <name>oSysCacheToastGetTupleDataSize</name></expr>,
	<expr><operator>.</operator><name>deleteLogFullTuple</name> <operator>=</operator> <name>true</name></expr>,
	<expr><operator>.</operator><name>versionCallback</name> <operator>=</operator> <name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>sys_cache_cxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>sys_cache_fastcache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>sys_caches</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ResourceOwner</name></type> <name>my_owner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type>	<name>save_userid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>save_sec_context</name></decl>;</decl_stmt>

<comment type="block">/*
 * Initializes the enum B-tree memory.
 */</comment>
<function><type><name>void</name></type>
<name>o_sys_caches_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sys_cache_cxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
										  <argument><expr><literal type="string">"OrioleDB sys_caches fastcache context"</literal></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>sys_cache_cxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_cache_fastcache</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"OrioleDB sys_caches fastcache"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
									  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_aggregate_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_amop_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_amproc_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_enum_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_enumoid_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_class_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_opclass_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_operator_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_proc_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_range_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_type_cache_init</name><argument_list>(<argument><expr><name>sys_cache_cxt</name></expr></argument>, <argument><expr><name>sys_cache_fastcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>charhashfast</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>murmurhash32</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>DatumGetChar</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>int2hashfast</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>murmurhash32</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>int4hashfast</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>murmurhash32</name><argument_list>(<argument><expr><operator>(</operator><name>int32</name><operator>)</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_hash_func</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>keytype</name></decl></parameter>, <parameter><decl><type><name>CCHashFN</name> <modifier>*</modifier></type><name>hashfunc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>keytype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHAROID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>hashfunc</name> <operator>=</operator> <name>charhashfast</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>hashfunc</name> <operator>=</operator> <name>int2hashfast</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDOID</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>hashfunc</name> <operator>=</operator> <name>int4hashfast</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"type %u not supported as catcache key"</literal></expr></argument>, <argument><expr><name>keytype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>hashfunc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Initializes the enum B-tree memory.
 */</comment>
<function><type><name>OSysCache</name> <modifier>*</modifier></type>
<name>o_create_sys_cache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sys_tree_num</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_toast</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>update_if_exist</name></decl></parameter>,
				   <parameter><decl><type><name>Oid</name></type> <name>cc_indexoid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
				   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>keytypes</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>fast_cache</name></decl></parameter>,
				   <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>, <parameter><decl><type><name>OSysCacheFuncs</name> <modifier>*</modifier></type><name>funcs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCache</name>  <modifier>*</modifier></type><name>sys_cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_mcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fast_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sys_cache</name> <operator>=</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>sys_tree_num</name></name> <operator>=</operator> <name>sys_tree_num</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name> <operator>=</operator> <name>is_toast</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>update_if_exist</name></name> <operator>=</operator> <name>update_if_exist</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_indexoid</name></name> <operator>=</operator> <name>cc_indexoid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cacheId</name></name> <operator>=</operator> <name>cacheId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name> <operator>=</operator> <name>nkeys</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>fast_cache</name></name> <operator>=</operator> <name>fast_cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>mcxt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name></name> <operator>=</operator> <name>funcs</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>free_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>fill_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>toast_serialize_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>toast_deserialize_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>set_hash_func</name><argument_list>(<argument><expr><name><name>keytypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_hashfunc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>old_mcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_caches</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>sys_caches</name></expr></argument>, <argument><expr><name>sys_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sys_cache</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *		CatalogCacheComputeHashValue
 *
 * Compute the hash value associated with a given set of lookup keys
 */</comment>
<function><type><specifier>static</specifier> <name>OSysCacheHashKey</name></type>
<name>compute_hash_value</name><parameter_list>(<parameter><decl><type><name>CCHashFN</name> <modifier>*</modifier></type><name>cc_hashfunc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hashValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>oneHash</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>nkeys</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">4</literal></expr>:</case>
			<expr_stmt><expr><name>oneHash</name> <operator>=</operator> <operator>(</operator><name><name>cc_hashfunc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><literal type="number">3</literal></expr>:</case>
			<expr_stmt><expr><name>oneHash</name> <operator>=</operator> <operator>(</operator><name><name>cc_hashfunc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><name>oneHash</name> <operator>=</operator> <operator>(</operator><name><name>cc_hashfunc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<comment type="block">/* FALLTHROUGH */</comment>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>oneHash</name> <operator>=</operator> <operator>(</operator><name><name>cc_hashfunc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>hashValue</name> <operator>^=</operator> <name>oneHash</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"wrong number of hash keys: %d"</literal></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>hashValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>invalidate_fastcache_entry</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheHashEntry</name> <modifier>*</modifier></type><name>fast_cache_entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fast_cache_entry</name> <operator>=</operator> <operator>(</operator><name>OSysCacheHashEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>sys_cache_fastcache</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>hashvalue</name></expr></argument>,
														  <argument><expr><name>HASH_REMOVE</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>fast_cache_entry-&gt;tree_entries</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OSysCacheHashTreeEntry</name> <modifier>*</modifier></type><name>tree_entry</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>tree_entry</name> <operator>=</operator> <operator>(</operator><name>OSysCacheHashTreeEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>tree_entry</name><operator>-&gt;</operator><name>sys_cache</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OSysCache</name>  <modifier>*</modifier></type><name>sys_cache</name> <init>= <expr><name><name>tree_entry</name><operator>-&gt;</operator><name>sys_cache</name></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_key</name></name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name><name>fast_cache_entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name><name>tree_entry</name><operator>-&gt;</operator><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>free_entry</name></name><argument_list>(<argument><expr><name><name>tree_entry</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name><name>fast_cache_entry</name><operator>-&gt;</operator><name>tree_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_syscache_hook</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sys_cache_fastcache</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>invalidate_fastcache_entry</name><argument_list>(<argument><expr><name>cacheid</name></expr></argument>, <argument><expr><name>hashvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>orioledb_setup_syscache_hooks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>cacheIds</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>sys_caches</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCache</name>  <modifier>*</modifier></type><name>sys_cache</name> <init>= <expr><operator>(</operator><name>OSysCache</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>cacheIds</name> <operator>=</operator> <call><name>list_append_unique_int</name><argument_list>(<argument><expr><name>cacheIds</name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cacheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>cacheIds</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>cacheId</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CacheRegisterSyscacheCallback</name><argument_list>(<argument><expr><name>cacheId</name></expr></argument>, <argument><expr><name>orioledb_syscache_hook</name></expr></argument>,
									  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>cacheIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_sys_caches_add_start</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>sys_caches</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCache</name>  <modifier>*</modifier></type><name>sys_cache</name> <init>= <expr><operator>(</operator><name>OSysCache</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheKey4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>sys_cache_cxt</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Orioledb cache add hash"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
											<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator>
											<name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_sys_caches_add_finish</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>sys_caches</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCache</name>  <modifier>*</modifier></type><name>sys_cache</name> <init>= <expr><operator>(</operator><name>OSysCache</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_sys_cache_search</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheHashKey</name></type> <name>cur_fast_cache_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheHashEntry</name> <modifier>*</modifier></type><name>fast_cache_entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>tree_entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>prev_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheHashTreeEntry</name> <modifier>*</modifier></type><name>new_entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cur_fast_cache_key</name> <operator>=</operator> <call><name>compute_hash_value</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_hashfunc</name></name></expr></argument>,
											<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* fast search */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_fast_cache_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_key</name></name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sys_cache_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>&amp;&amp;</operator>
			<call><name>o_sys_cache_key_cmp</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>sys_cache_key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* cache search */</comment>
	<expr_stmt><expr><name>fast_cache_entry</name> <operator>=</operator> <operator>(</operator><name>OSysCacheHashEntry</name> <operator>*</operator><operator>)</operator>
		<call><name>hash_search</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>fast_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_fast_cache_key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>fast_cache_entry-&gt;tree_entries</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OSysCacheHashTreeEntry</name> <modifier>*</modifier></type><name>tree_entry</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>tree_entry</name> <operator>=</operator> <operator>(</operator><name>OSysCacheHashTreeEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>tree_entry</name><operator>-&gt;</operator><name>sys_cache</name></name> <operator>==</operator> <name>sys_cache</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name><name>tree_entry</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>sys_cache_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>&amp;&amp;</operator>
					<call><name>o_sys_cache_key_cmp</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>sys_cache_key</name></expr></argument>,
										<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_key</name></name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>cur_fast_cache_key</name></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name> <operator>=</operator> <name><name>tree_entry</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
					<return>return <expr><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fast_cache_entry</name><operator>-&gt;</operator><name>tree_entries</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>prev_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tree_entry</name> <operator>=</operator> <call><name>o_sys_cache_get_from_toast_tree</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tree_entry</name> <operator>=</operator> <call><name>o_sys_cache_get_from_tree</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tree_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>prev_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>new_entry</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashTreeEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>sys_cache</name></name> <operator>=</operator> <name>sys_cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <name>tree_entry</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fast_cache_entry</name><operator>-&gt;</operator><name>tree_entries</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>fast_cache_entry</name><operator>-&gt;</operator><name>tree_entries</name></name></expr></argument>,
											 <argument><expr><name>new_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>prev_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_key</name></name></expr></argument>,
		   <argument><expr><operator>&amp;</operator><name>cur_fast_cache_key</name></expr></argument>,
		   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name> <operator>=</operator> <name><name>new_entry</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>sys_cache</name><operator>-&gt;</operator><name>last_fast_cache_entry</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleFetchCallbackResult</name></type>
<name>o_sys_cache_get_by_lsn_callback</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>tupOxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>,
								<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
								<parameter><decl><type><name>TupleFetchCallbackCheckType</name></type> <name>check_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>tuple_key</name> <init>= <expr><operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>cur_lsn</name> <init>= <expr><operator>(</operator><name>XLogRecPtr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>check_type</name> <operator>!=</operator> <name>OTupleFetchCallbackKeyCheck</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tuple_key</name><operator>-&gt;</operator><name>sys_cache_key</name><operator>.</operator><name>common</name><operator>.</operator><name>lsn</name></name> <operator>&lt;</operator> <operator>*</operator><name>cur_lsn</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchMatch</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>OTupleFetchNext</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_sys_cache_get_from_toast_tree</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>dataLength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>sys_tree_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name></type> <name>toast_key</name> <init>= <expr><block>{<expr><operator>.</operator><name>common</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,
	<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>,<expr><operator>.</operator><name>lsn_cmp</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>generic_toast_get_any_with_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oSysCacheToastAPI</name></expr></argument>,
											   <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>toast_key</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>dataLength</name></expr></argument>,
											   <argument><expr><name>COMMITSEQNO_NON_DELETED</name></expr></argument>,
											   <argument><expr><name>td</name></expr></argument>,
											   <argument><expr><name>o_sys_cache_get_by_lsn_callback</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>toast_deserialize_entry</name></name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
													   <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_sys_cache_get_from_tree</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>sys_tree_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>last_tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheBound</name></type> <name>bound</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>,<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <name>nkeys</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>bound</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
								 <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>O_TUPLE_SET_NULL</name><argument_list>(<argument><expr><name>last_tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><call><name>o_btree_iterator_fetch</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
												 <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>bound</name></expr></argument>,
												 <argument><expr><name>BTreeKeyBound</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
												 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>last_tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>last_tup</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sys_cache_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name> <operator>&gt;</operator> <name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>last_tup</name> <operator>=</operator> <name>tup</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>last_tup</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>o_sys_cache_fill_locktag</name><parameter_list>(<parameter><decl><type><name>LOCKTAG</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>classoid</name></decl></parameter>,
						 <parameter><decl><type><name>OSysCacheHashKey</name></type> <name>key_hash</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lockmode</name> <operator>==</operator> <name>AccessShareLock</name> <operator>||</operator> <name>lockmode</name> <operator>==</operator> <name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOCKTAG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_LOCKTAG_OBJECT</name><argument_list>(<argument><expr><operator>*</operator><name>tag</name></expr></argument>, <argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>classoid</name></expr></argument>, <argument><expr><name>key_hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>locktag_type</name></name> <operator>=</operator> <name>LOCKTAG_USERLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_sys_cache_lock</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>locktag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheHashKey</name></type> <name>key_hash</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>key_hash</name> <operator>=</operator> <call><name>compute_hash_value</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_hashfunc</name></name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>,
								  <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_fill_locktag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name>key_hash</name></expr></argument>,
							 <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_indexoid</name></name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_sys_cache_unlock</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>locktag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheHashKey</name></type> <name>key_hash</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>key_hash</name> <operator>=</operator> <call><name>compute_hash_value</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_hashfunc</name></name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>,
								  <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_fill_locktag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name>key_hash</name></expr></argument>,
							 <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>cc_indexoid</name></name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfo</name></type>	<name>str</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>o_sys_cache_keys_to_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can not release %s catalog cache lock on datoid = %d, "</literal>
			 <literal type="string">"key = %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>lockmode</name> <operator>==</operator> <name>AccessShareLock</name></expr> ?</condition><then> <expr><literal type="string">"share"</literal></expr> </then><else>: <expr><literal type="string">"exclusive"</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier>

<comment type="block">/* Non-key fields of entry should be filled before call */</comment>
<name>bool</name></type>
<name>o_sys_cache_add</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>inserted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>entry_key</name> <init>= <expr><operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>sys_tree_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>entry_key</name><operator>-&gt;</operator><name>common</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry_key</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>tup</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>o_btree_autonomous_insert</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name></type> <name>toast_key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OAutonomousTxState</name></type> <name>state</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>entry_key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>common</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>lsn_cmp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>toast_serialize_entry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>start_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>generic_toast_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oSysCacheToastAPI</name></expr></argument>,
											<argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>toast_key</name></expr></argument>,
											<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
											<argument><expr><call><name>get_current_oxid</name><argument_list>()</argument_list></call></expr></argument>,
											<argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>,
											<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>abort_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>finish_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>inserted</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OBTreeWaitCallbackAction</name></type>
<name>o_sys_cache_wait_callback</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
						  <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>OTuple</name> <modifier>*</modifier></type><name>newtup</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>,
						  <parameter><decl><type><name>OTupleXactInfo</name></type> <name>xactInfo</name></decl></parameter>, <parameter><decl><type><name>UndoLocation</name></type> <name>location</name></decl></parameter>,
						  <parameter><decl><type><name>RowLockMode</name> <modifier>*</modifier></type><name>lock_mode</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>,
						  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>OBTreeCallbackActionXidWait</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OBTreeModifyCallbackAction</name></type>
<name>o_sys_cache_update_callback</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>descr</name></decl></parameter>,
							<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>OTuple</name> <modifier>*</modifier></type><name>newtup</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>,
							<parameter><decl><type><name>OTupleXactInfo</name></type> <name>xactInfo</name></decl></parameter>, <parameter><decl><type><name>UndoLocation</name></type> <name>location</name></decl></parameter>,
							<parameter><decl><type><name>RowLockMode</name> <modifier>*</modifier></type><name>lock_mode</name></decl></parameter>, <parameter><decl><type><name>BTreeLocationHint</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>,
							<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>OBTreeCallbackActionUpdate</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>BTreeModifyCallbackInfo</name></type> <name>callbackInfo</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>waitCallback</name> <operator>=</operator> <name>o_sys_cache_wait_callback</name></expr>,
	<expr><operator>.</operator><name>modifyCallback</name> <operator>=</operator> <name>o_sys_cache_update_callback</name></expr>,
	<expr><operator>.</operator><name>modifyDeletedCallback</name> <operator>=</operator> <name>o_sys_cache_update_callback</name></expr>,
	<expr><operator>.</operator><name>arg</name> <operator>=</operator> <name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>o_sys_cache_update</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>updated_entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>sys_tree_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheBound</name></type> <name>bound</name> <init>= <expr><block>{<expr><operator>.</operator><name>nkeys</name> <operator>=</operator> <name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name>updated_entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bound</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>sys_cache_key</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OAutonomousTxState</name></type> <name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>tup</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>updated_entry</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>start_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_btree_modify</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>BTreeOperationUpdate</name></expr></argument>,
									<argument><expr><name>tup</name></expr></argument>, <argument><expr><name>BTreeKeyLeafTuple</name></expr></argument>,
									<argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>bound</name></expr></argument>, <argument><expr><name>BTreeKeyBound</name></expr></argument>,
									<argument><expr><call><name>get_current_oxid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>,
									<argument><expr><name>RowLockNoKeyUpdate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>callbackInfo</name></expr></argument>)</argument_list></call> <operator>==</operator>
				<name>OBTreeModifyResultUpdated</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>o_wal_update</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>abort_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>finish_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Pointer</name></type>		<name>data</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name></type> <name>toast_key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OAutonomousTxState</name></type> <name>state</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>sys_cache_key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>common</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>lsn_cmp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>toast_serialize_entry</name></name><argument_list>(<argument><expr><name>updated_entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>start_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oSysCacheToastAPI</name></expr></argument>,
										  <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>toast_key</name></expr></argument>,
										  <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
										  <argument><expr><call><name>get_current_oxid</name><argument_list>()</argument_list></call></expr></argument>,
										  <argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>,
										  <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>abort_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>finish_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_sys_cache_add_if_needed</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>		<name>inserted</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_lock</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheKey4</name></type> <name>hash_key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>hash_key</name><operator>.</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hash_key</name><operator>.</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>added_hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>o_sys_cache_search</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <name>entry</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* it's already exist in B-tree */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>sys_cache</name><operator>-&gt;</operator><name>update_if_exist</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>o_sys_cache_update_if_needed</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>o_sys_cache_unlock</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>fill_entry</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * All done, now try to insert into B-tree.
	 */</comment>
	<expr_stmt><expr><name>inserted</name> <operator>=</operator> <call><name>o_sys_cache_add</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>inserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_unlock</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>free_entry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_sys_cache_update_if_needed</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
							 <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>		<name>updated</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_lock</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>o_sys_cache_search</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* it's not exist in B-tree */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>fill_entry</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>sys_cache_key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>updated</name> <operator>=</operator> <call><name>o_sys_cache_update</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_unlock</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_sys_cache_delete</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>o_sys_cache_search</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>delete_hook</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>sys_cache</name><operator>-&gt;</operator><name>funcs</name><operator>-&gt;</operator><name>delete_hook</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sys_cache_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>deleted</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><call><name>o_sys_cache_update</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_sys_cache_delete_by_lsn</name><parameter_list>(<parameter><decl><type><name>OSysCache</name> <modifier>*</modifier></type><name>sys_cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><call><name>get_sys_tree</name><argument_list>(<argument><expr><name><name>sys_cache</name><operator>-&gt;</operator><name>sys_tree_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>o_btree_iterator_create</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
								 <argument><expr><name>COMMITSEQNO_NON_DELETED</name></expr></argument>,
								 <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BTreeLocationHint</name></type> <name>hint</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><call><name>btree_iterate_raw</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BTreeKeyNone</name></expr></argument>,
											<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>sys_cache_key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTuple</name></type>		<name>key_tup</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>O_TUPLE_IS_NULL</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator>
				<operator>(</operator><name><name>tup</name><operator>.</operator><name>data</name></name> <operator>+</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OSysCacheToastChunkKey</name></expr></argument>, <argument><expr><name>sys_cache_key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>sys_cache_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>key_tup</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key_tup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>sys_cache_key</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sys_cache_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name> <operator>&lt;</operator> <name>lsn</name> <operator>&amp;&amp;</operator> <name><name>sys_cache_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>deleted</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name>		<name>result</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys_cache</name><operator>-&gt;</operator><name>is_toast</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>o_btree_autonomous_delete</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>key_tup</name></expr></argument>,
												   <argument><expr><name>BTreeKeyNonLeafKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name></type> <name>toast_key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OAutonomousTxState</name></type> <name>state</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>sys_cache_key</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>common</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>toast_key</name><operator>.</operator><name>lsn_cmp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>start_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<block>{<block_content>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>generic_toast_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oSysCacheToastAPI</name></expr></argument>,
												  <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>toast_key</name></expr></argument>,
												  <argument><expr><call><name>get_current_oxid</name><argument_list>()</argument_list></call></expr></argument>,
												  <argument><expr><name>COMMITSEQNO_NON_DELETED</name></expr></argument>,
												  <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<block>{<block_content>
					<expr_stmt><expr><call><name>abort_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>finish_autonomous_transaction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>btree_iterator_free</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_sys_caches_delete_by_lsn</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>checkPointRedo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>sys_caches</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCache</name>  <modifier>*</modifier></type><name>sys_cache</name> <init>= <expr><operator>(</operator><name>OSysCache</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>o_sys_cache_delete_by_lsn</name><argument_list>(<argument><expr><name>sys_cache</name></expr></argument>, <argument><expr><name>checkPointRedo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>BTreeDescr</name> <modifier>*</modifier></type>
<name>oSysCacheToastGetBTreeDesc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>desc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oSysCacheToastGetMaxChunkSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>chunk_key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>max_chunk_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>max_chunk_size</name> <operator>=</operator> <call><name>MAXALIGN_DOWN</name><argument_list>(<argument><expr><operator>(</operator><name>O_BTREE_MAX_TUPLE_SIZE</name> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator>
									<call><name>MAXALIGN</name><argument_list>(<argument><expr><name>chunk_key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator>
								   <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator>
		<operator>(</operator><name>chunk_key_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkCommon</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>max_chunk_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>oSysCacheToastUpdateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OSysCacheToastKeyBound</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ckey</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>nkeys_for_desc</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>toast</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>ops</name><operator>-&gt;</operator><name>cmp</name></name> <operator>==</operator> <name>o_sys_cache_toast_cmp</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>toast</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>chunk_key_len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key_len</name> <operator>=</operator> <name>chunk_key_len</name> <operator>-</operator>
			<call><name>offsetof</name><argument_list>(<argument><expr><name>OSysCacheToastChunkKey</name></expr></argument>, <argument><expr><name>sys_cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <operator>(</operator><name>key_len</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OSysCacheKey</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<return>return <expr><name>nkeys</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>oSysCacheToastGetNextKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OSysCacheToastKeyBound</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheKey4</name></type> <name>nextKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheToastKeyBound</name></type> <name>nextKeyBound</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator>
	<operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nextKey</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <call><name>nkeys_for_desc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>key_len</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OSysCacheKey</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nkeys</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>nextKeyBound</name><operator>.</operator><name>common</name></name> <operator>=</operator> <name><name>ckey</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>nextKeyBound</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ckey</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextKeyBound</name><operator>.</operator><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>nkeys</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>nextKeyBound</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>oSysCacheToastCreateTuple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name> <modifier>*</modifier></type><name>bound</name> <init>= <expr><operator>(</operator><name>OSysCacheToastKeyBound</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>chunk_key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>chunk_key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkCommon</name> <modifier>*</modifier></type><name>common</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>bound</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>key_len</name> <operator>=</operator> <name>chunk_key_len</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OSysCacheToastChunkKey</name></expr></argument>, <argument><expr><name>sys_cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>chunk_key_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkCommon</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
					<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>common</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkCommon</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>chunk</name> <operator>+</operator> <name>chunk_key_len</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>dataLength</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <name>chunk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk_key</name><operator>-&gt;</operator><name>common</name></name> <operator>=</operator> <name><name>bound</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk_key</name><operator>-&gt;</operator><name>sys_cache_key</name></name></expr></argument>, <argument><expr><name><name>bound</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>chunk</name> <operator>+</operator> <name>chunk_key_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkCommon</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		   <argument><expr><name>data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>chunk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OTuple</name></type>
<name>oSysCacheToastCreateKey</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>ckey</name> <init>= <expr><operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>ckey_copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ckey_copy</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ckey_copy</name> <operator>=</operator> <operator>*</operator><name>ckey</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>ckey_copy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>formatFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Pointer</name></type>
<name>oSysCacheToastGetTupleData</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>chunk_key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>chunk</name> <init>= <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>chunk</name> <operator>+</operator> <name>chunk_key_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkCommon</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oSysCacheToastGetTupleOffset</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>chunk</name> <init>= <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>chunk_key</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <name>chunk</name></expr>;</expr_stmt>

	<return>return <expr><name><name>chunk_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>oSysCacheToastGetTupleDataSize</name><parameter_list>(<parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>chunk</name> <init>= <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkCommon</name> <modifier>*</modifier></type><name>common</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>BTreeDescr</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>chunk_key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>common</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkCommon</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>chunk</name> <operator>+</operator> <name>chunk_key_len</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name><name>common</name><operator>-&gt;</operator><name>dataLength</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>custom_type_add_if_needed</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typoid</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>insert_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typeform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>typeform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>typeform</name><operator>-&gt;</operator><name>typtype</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TYPTYPE_COMPOSITE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>typeform</name><operator>-&gt;</operator><name>typtypmod</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OClassArg</name></type>	<name>arg</name> <init>= <expr><block>{<expr><operator>.</operator><name>sys_table</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>o_class_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typrelid</name></name></expr></argument>,
											<argument><expr><name>insert_lsn</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_type_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>insert_lsn</name></expr></argument>,
										   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_RANGE</name></expr>:</case>
			<expr_stmt><expr><call><name>o_range_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>insert_lsn</name></expr></argument>,
										<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_ENUM</name></expr>:</case>
			<expr_stmt><expr><call><name>o_enum_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>insert_lsn</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_DOMAIN</name></expr>:</case>
			<expr_stmt><expr><call><name>custom_type_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typbasetype</name></name></expr></argument>,
									  <argument><expr><name>insert_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><name><name>typeform</name><operator>-&gt;</operator><name>typcategory</name></name> <operator>==</operator> <name>TYPCATEGORY_ARRAY</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_composite_type_element_save</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>,
											  <argument><expr><name>insert_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Inserts type elements for all fields of the o_table to the orioledb sys
 * cache.
 */</comment>
<function><type><name>void</name></type>
<name>custom_types_add_all</name><parameter_list>(<parameter><decl><type><name>OTable</name> <modifier>*</modifier></type><name>o_table</name></decl></parameter>, <parameter><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>o_table_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_field</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>expr_field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_caches_add_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>cur_field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cur_field</name> <operator>&lt;</operator> <name><name>o_table_index</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>cur_field</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name><name>o_table_index</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>cur_field</name></expr>]</index></name><operator>.</operator><name>attnum</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>typid</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>!=</operator> <name>EXPR_ATTNUM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>typid</name> <operator>=</operator> <name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>attnum</name></expr>]</index></name><operator>.</operator><name>typid</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>typid</name> <operator>=</operator> <name><name>o_table_index</name><operator>-&gt;</operator><name>exprfields</name><index>[<expr><name>expr_field</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>typid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>custom_type_add_if_needed</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name>typid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_FINALLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>o_sys_caches_add_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_composite_type_element_save</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typoid</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>insert_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opclassoid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>custom_type_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>typoid</name></expr></argument>, <argument><expr><name>insert_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_type_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>typoid</name></expr></argument>, <argument><expr><name>insert_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>opclassoid</name> <operator>=</operator> <call><name>o_type_cache_default_opclass</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_opclass_cache_add_if_needed</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>, <argument><expr><name>insert_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CatCTup</name> <modifier>*</modifier></type>
<name>heap_to_catctup</name><parameter_list>(<parameter><decl><type><name>CatCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>cc_tupdesc</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
				<parameter><decl><type><name>bool</name></type> <name>refcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CatCTup</name>    <modifier>*</modifier></type><name>ct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>dtp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If there are any out-of-line toasted fields in the tuple, expand them
	 * in-line. This saves cycles during later use of the catcache entry, and
	 * also protects us against the possibility of the toast tuples being
	 * freed before we attempt to fetch them, in case of something using a
	 * slightly stale catcache entry.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleHasExternal</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dtp</name> <operator>=</operator> <call><name>toast_flatten_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>cc_tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dtp</name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Allocate memory for CatCTup and the cached tuple in one go */</comment>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ct</name> <operator>=</operator> <operator>(</operator><name>CatCTup</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CatCTup</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MAXIMUM_ALIGNOF</name> <operator>+</operator> <name><name>dtp</name><operator>-&gt;</operator><name>t_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>t_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>t_self</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>t_self</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>t_tableOid</name></name> <operator>=</operator> <name><name>dtp</name><operator>-&gt;</operator><name>t_tableOid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <operator>(</operator><name>HeapTupleHeader</name><operator>)</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ct</name><operator>)</operator> <operator>+</operator>
												  <sizeof>sizeof<argument_list>(<argument><expr><name>CatCTup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* copy tuple contents */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ct</name><operator>-&gt;</operator><name>tuple</name><operator>.</operator><name>t_data</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>dtp</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>,
		   <argument><expr><name><name>dtp</name><operator>-&gt;</operator><name>t_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dtp</name> <operator>!=</operator> <name>tuple</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>dtp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* extract keys - they'll point into the tuple if not by-value */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>cc_nkeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>atp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>atp</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cc_keyno</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cc_tupdesc</name></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>atp</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Finish initializing the CatCTup header, and add it to the cache's
	 * linked list and counts.
	 */</comment>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>ct_magic</name></name> <operator>=</operator> <name>CT_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>my_cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

	<comment type="block">/* immediately set the refcount to 1 */</comment>
	<if_stmt><if>if <condition>(<expr><name>refcount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ResourceOwnerEnlargeCatCacheRefs</name><argument_list>(<argument><expr><name>CurrentResourceOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResourceOwnerRememberCatCacheRef</name><argument_list>(<argument><expr><name>CurrentResourceOwner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ct</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ct</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CatCTup</name> <modifier>*</modifier></type>
<name>o_SearchCatCacheInternal_hook</name><parameter_list>(<parameter><decl><type><name>CatCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>v2</name></decl></parameter>,
							  <parameter><decl><type><name>Datum</name></type> <name>v3</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>v4</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CatCTup</name>    <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>hook_tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cc_indexoid</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AggregateFnoidIndexId</name></expr>:</case>
		<case>case <expr><name>AccessMethodOperatorIndexId</name></expr>:</case>
		<case>case <expr><name>AccessMethodProcedureIndexId</name></expr>:</case>
		<case>case <expr><name>AuthIdOidIndexId</name></expr>:</case>
		<case>case <expr><name>OperatorClassRelationId</name></expr>:</case>
		<case>case <expr><name>OperatorOidIndexId</name></expr>:</case>
		<case>case <expr><name>ProcedureOidIndexId</name></expr>:</case>
		<case>case <expr><name>TypeOidIndexId</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>o_class_cache_search_tupdesc</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cc_reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<switch>switch <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cc_indexoid</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AggregateFnoidIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>aggfnoid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>aggfnoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_aggregate_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>aggfnoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>AccessMethodOperatorIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>amopopr</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name></type>		<name>amoppurpose</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>amopfamily</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amopopr</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>amoppurpose</name> <operator>=</operator> <call><name>DatumGetChar</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>amopfamily</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_amop_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>amopopr</name></expr></argument>,
													  <argument><expr><name>amoppurpose</name></expr></argument>, <argument><expr><name>amopfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>AccessMethodProcedureIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>amprocfamily</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>amproclefttype</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>amprocrighttype</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int16</name></type>		<name>amprocnum</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>amprocfamily</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>amproclefttype</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>amprocrighttype</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>amprocnum</name> <operator>=</operator> <call><name>DatumGetChar</name><argument_list>(<argument><expr><name>v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_amproc_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>amprocfamily</name></expr></argument>,
														<argument><expr><name>amproclefttype</name></expr></argument>,
														<argument><expr><name>amprocrighttype</name></expr></argument>,
														<argument><expr><name>amprocnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>AuthIdOidIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>authoid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>authoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_auth_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>authoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>OperatorClassRelationId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>opclassoid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>opclassoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_opclass_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>OperatorOidIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>operoid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>operoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_operator_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>operoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>ProcedureOidIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>procoid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>procoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_proc_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>procoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>TypeOidIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>typeoid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>typeoid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>hook_tuple</name> <operator>=</operator> <call><name>o_type_cache_search_htup</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>hook_tuple</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_to_catctup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>hook_tuple</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tupdesc</name> <operator>&amp;&amp;</operator> <name>tupdesc</name> <operator>!=</operator> <name><name>cache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CatCList</name> <modifier>*</modifier></type>
<name>o_SearchCatCacheList_hook</name><parameter_list>(<parameter><decl><type><name>CatCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>v2</name></decl></parameter>,
						  <parameter><decl><type><name>Datum</name></type> <name>v3</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CatCList</name>   <modifier>*</modifier></type><name>cl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cc_indexoid</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AccessMethodOperatorIndexId</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>htup_list</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>nmembers</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Oid</name></type>			<name>amopopr</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>o_class_cache_search_tupdesc</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cc_reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nkeys</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>amopopr</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>htup_list</name> <operator>=</operator> <call><name>o_amop_cache_search_htup_list</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>amopopr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>htup_list</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>nmembers</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>htup_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>cl</name> <operator>=</operator> <operator>(</operator><name>CatCList</name> <operator>*</operator><operator>)</operator>
						<call><name>palloc0</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>CatCList</name></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<name>nmembers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CatCTup</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>cl_magic</name></name> <operator>=</operator> <name>CL_MAGIC</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>my_cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>n_members</name></name> <operator>=</operator> <name>nmembers</name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>ResourceOwnerEnlargeCatCacheListRefs</name><argument_list>(<argument><expr><name>CurrentResourceOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>htup_list</argument>)</argument_list></macro>
					<block>{<block_content>
						<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>ht</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CatCTup</name>    <modifier>*</modifier></type><name>ct</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>heap_to_catctup</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>c_list</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>
					</block_content>}</block>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>nmembers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>cl</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ResourceOwnerRememberCatCacheListRef</name><argument_list>(<argument><expr><name>CurrentResourceOwner</name></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>tupdesc</name> <operator>&amp;&amp;</operator> <name>tupdesc</name> <operator>!=</operator> <name><name>cache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FreeTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>cl</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleDesc</name></type>
<name>o_SysCacheGetAttr_hook</name><parameter_list>(<parameter><decl><type><name>CatCache</name> <modifier>*</modifier></type><name>SysCache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>SysCache</name><operator>-&gt;</operator><name>cc_indexoid</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AggregateFnoidIndexId</name></expr>:</case>
		<case>case <expr><name>AccessMethodOperatorIndexId</name></expr>:</case>
		<case>case <expr><name>AccessMethodProcedureIndexId</name></expr>:</case>
		<case>case <expr><name>AuthIdOidIndexId</name></expr>:</case>
		<case>case <expr><name>OperatorClassRelationId</name></expr>:</case>
		<case>case <expr><name>OperatorOidIndexId</name></expr>:</case>
		<case>case <expr><name>ProcedureOidIndexId</name></expr>:</case>
		<case>case <expr><name>TypeOidIndexId</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>SysCache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>SysCache</name><operator>-&gt;</operator><name>cc_tupdesc</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>o_class_cache_search_tupdesc</name><argument_list>(<argument><expr><name><name>SysCache</name><operator>-&gt;</operator><name>cc_reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>tupdesc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>o_sys_cache_key_cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name><name>key1</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>key2</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>cmp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Comparison function for non-TOAST sys cache B-tree.
 *
 * If none of the arguments is BTreeKeyBound it comparses by both
 * oid and lsn. It make possible to insert values with same oid.
 * Else it comparses only by oid, which is used by other operations than
 * insert, to find all rows with exact oid.
 * If key kind is not BTreeKeyBound it expects that OTuple passed.
 */</comment>
<function><type><name>int</name></type>
<name>o_sys_cache_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
				<parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>lsn_cmp</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <call><name>nkeys_for_desc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheBound</name> <modifier>*</modifier></type><name>bound</name> <init>= <expr><operator>(</operator><name>OSysCacheBound</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>key1</name> <operator>=</operator> <name><name>bound</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <name><name>bound</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lsn_cmp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheBound</name> <modifier>*</modifier></type><name>bound</name> <init>= <expr><operator>(</operator><name>OSysCacheBound</name> <operator>*</operator><operator>)</operator> <name>p2</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>key2</name> <operator>=</operator> <name><name>bound</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <name><name>bound</name><operator>-&gt;</operator><name>nkeys</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lsn_cmp</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>key1</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>o_sys_cache_key_cmp</name><argument_list>(<argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>lsn_cmp</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name> <operator>!=</operator> <name><name>key2</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><name><name>key1</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_sys_cache_keys_to_str</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Generic non-TOAST sys cache key print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_sys_cache_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>key_tup</name></decl></parameter>,
					  <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name><name>key_tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>id</name></decl>,
				<decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

	<comment type="block">/* Decode ID and offset */</comment>
	<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"(%u, "</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_keys_to_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>nkeys_for_desc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", %X/%X, %c)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
					 <argument><expr><ternary><condition><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>deleted</name></name></expr> ?</condition><then> <expr><literal type="char">'Y'</literal></expr> </then><else>: <expr><literal type="char">'N'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_sys_cache_key_push_to_jsonb_state</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									<parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"datoid"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_bool_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"deleted"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>deleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_keys_to_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>nkeys_for_desc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_string_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JsonbValue</name> <modifier>*</modifier></type>
<name>o_sys_cache_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_push_to_jsonb_state</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>o_sys_cache_toast_chunk_length</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>chunk</name> <init>= <expr><name><name>tuple</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>chunk_key_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkCommon</name> <modifier>*</modifier></type><name>common</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>common</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkCommon</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>chunk</name> <operator>+</operator> <name>chunk_key_len</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>chunk_key_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OSysCacheToastChunkCommon</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
		<name><name>common</name><operator>-&gt;</operator><name>dataLength</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Comparison function for TOAST sys cache B-tree.
 *
 * If key kind BTreeKeyBound it expects OSysCacheToastKeyBound.
 * Otherwise it expects that OTuple passed.
 * It wraps OSysCacheToastChunkKey to OTuple to pass it to o_sys_cache_cmp.
 */</comment>
<function><type><name>int</name></type>
<name>o_sys_cache_toast_cmp</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k1</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>, <parameter><decl><type><name>BTreeKeyType</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>offset1</name></decl>,
				<decl><type ref="prev"/><name>offset2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheKey4</name></type> <name>_key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheBound</name></type> <name>_bound</name> <init>= <expr><block>{<expr><operator>.</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>_key</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>key_tuple1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,
				<decl><type ref="prev"/><name>key_tuple2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>sys_cache_key_cmp_arg1</name> <init>= <expr><name>NULL</name></expr></init></decl>,
				<decl><type ref="prev"/><name>sys_cache_key_cmp_arg2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sys_cache_key_cmp_result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nkeys</name> <operator>=</operator> <call><name>nkeys_for_desc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>_bound</name><operator>.</operator><name>nkeys</name></name> <operator>=</operator> <name>nkeys</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name> <modifier>*</modifier></type><name>kb1</name> <init>= <expr><operator>(</operator><name>OSysCacheToastKeyBound</name> <operator>*</operator><operator>)</operator> <name>p1</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>k2</name> <operator>!=</operator> <name>BTreeKeyBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>_key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key1</name><operator>-&gt;</operator><name>common</name></name> <operator>=</operator> <name><name>kb1</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset1</name> <operator>=</operator> <name><name>kb1</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key1</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>kb1</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>kb1</name><operator>-&gt;</operator><name>lsn_cmp</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>k1</name> <operator>=</operator> <name>BTreeKeyNonLeafKey</name></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* make o_sys_cache_cmp to compare by
										 * lsn */</comment>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>sys_cache_key_cmp_arg1</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>_bound</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>chunk_key</name> <init>=
		<expr><operator>(</operator><operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p1</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>key1</name> <operator>=</operator> <operator>&amp;</operator><name><name>chunk_key</name><operator>-&gt;</operator><name>sys_cache_key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset1</name> <operator>=</operator> <name><name>chunk_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_cache_key_cmp_arg1</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key_tuple1</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>key1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sys_cache_key_cmp_arg1</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key_tuple1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <name>BTreeKeyBound</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheToastKeyBound</name> <modifier>*</modifier></type><name>kb2</name> <init>= <expr><operator>(</operator><name>OSysCacheToastKeyBound</name> <operator>*</operator><operator>)</operator> <name>p2</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>k1</name> <operator>!=</operator> <name>BTreeKeyBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><name>OSysCacheKey</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>_key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key2</name><operator>-&gt;</operator><name>common</name></name> <operator>=</operator> <name><name>kb2</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>common</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset2</name> <operator>=</operator> <name><name>kb2</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key2</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><name><name>kb2</name><operator>-&gt;</operator><name>key</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>kb2</name><operator>-&gt;</operator><name>lsn_cmp</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>k2</name> <operator>=</operator> <name>BTreeKeyNonLeafKey</name></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* make o_sys_cache_cmp to compare by
										 * lsn */</comment>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>sys_cache_key_cmp_arg2</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>_bound</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>chunk_key</name> <init>=
		<expr><operator>(</operator><operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>OTuple</name> <operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>&amp;</operator><name><name>chunk_key</name><operator>-&gt;</operator><name>sys_cache_key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset2</name> <operator>=</operator> <name><name>chunk_key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys_cache_key_cmp_arg2</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key_tuple2</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>key2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sys_cache_key_cmp_arg2</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>key_tuple2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>sys_cache_key_cmp_result</name> <operator>=</operator> <call><name>o_sys_cache_cmp</name><argument_list>(<argument><expr><name>desc</name></expr></argument>,
											   <argument><expr><name>sys_cache_key_cmp_arg1</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>,
											   <argument><expr><name>sys_cache_key_cmp_arg2</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sys_cache_key_cmp_result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>sys_cache_key_cmp_result</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset1</name> <operator>!=</operator> <name>offset2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name>offset1</name> <operator>&lt;</operator> <name>offset2</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generic TOAST sys cache key print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_sys_cache_toast_key_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
							<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>key_tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key_tup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>sys_cache_key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_print</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>key_tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", %u)"</literal></expr></argument>,
					 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JsonbValue</name> <modifier>*</modifier></type>
<name>o_sys_cache_toast_key_to_jsonb</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>,
							   <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSysCacheToastChunkKey</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>OSysCacheToastChunkKey</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_push_to_jsonb_state</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>sys_cache_key</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>jsonb_push_int8_key</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="string">"offset"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A tuple print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_sys_cache_toast_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
							<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>key_tup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>chunk</name> <init>= <expr><name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSysCacheToastChunkCommon</name> <modifier>*</modifier></type><name>common</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>chunk_key_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>chunk_key_len</name> <operator>=</operator> <call><name>o_btree_len</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key_tup</name></expr></argument>, <argument><expr><name>OKeyLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>common</name> <operator>=</operator> <operator>(</operator><name>OSysCacheToastChunkCommon</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>chunk</name> <operator>+</operator> <name>chunk_key_len</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key_tup</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>chunk</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_toast_key_print</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>key_tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", %u)"</literal></expr></argument>, <argument><expr><name><name>common</name><operator>-&gt;</operator><name>dataLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HeapTuple</name></type>
<name>o_auth_cache_search_htup</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>authoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_authid</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>Natts_pg_authid</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NameData</name></type>	<name>oname</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>authoid</name> <operator>==</operator> <name>BOOTSTRAP_SUPERUSERID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_authid_oid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>BOOTSTRAP_SUPERUSERID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oname</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_authid_rolname</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>NameGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_authid_rolsuper</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_authid_rolpassword</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_authid_rolvaliduntil</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>o_is_syscache_hooks_set</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>SearchCatCacheInternal_hook</name> <operator>==</operator> <name>o_SearchCatCacheInternal_hook</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_set_syscache_hooks</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CurrentResourceOwner</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_owner</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>my_owner</name> <operator>=</operator> <call><name>ResourceOwnerCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"orioledb o_fmgr_sql"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>my_owner</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_userid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_sec_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>BOOTSTRAP_SUPERUSERID</name></expr></argument>,
						   <argument><expr><name>save_sec_context</name> <operator>|</operator>
						   <name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>SearchCatCacheInternal_hook</name> <operator>=</operator> <name>o_SearchCatCacheInternal_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>SearchCatCacheList_hook</name> <operator>=</operator> <name>o_SearchCatCacheList_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>SysCacheGetAttr_hook</name> <operator>=</operator> <name>o_SysCacheGetAttr_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>enum_cmp_internal_hook</name> <operator>=</operator> <name>o_enum_cmp_internal_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>range_cmp_hook</name> <operator>=</operator> <name>o_range_cmp_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>type_elements_cmp_hook</name> <operator>=</operator> <name>o_type_elements_cmp_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>record_cmp_hook</name> <operator>=</operator> <name>o_record_cmp_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_reset_syscache_hooks</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>SearchCatCacheInternal_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>SearchCatCacheList_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>SysCacheGetAttr_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>enum_cmp_internal_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>range_cmp_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>type_elements_cmp_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>record_cmp_hook</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>save_userid</name></expr></argument>, <argument><expr><name>save_sec_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>CurrentResourceOwner</name> <operator>==</operator> <name>my_owner</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
