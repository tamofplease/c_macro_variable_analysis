<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/ddl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ddl.c
 *		Rountines for DDL handling.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/ddl.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btree/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_indices.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/toast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/compress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tableam.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/toast_compression.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attrdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_depend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_inherits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/toasting.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/createas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/matview.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/prepare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/view.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_utilcmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/dest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ProcessUtility_hook_type</name></type> <name>next_ProcessUtility_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>object_access_hook_type</name></type> <name>old_objectaccess_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorStart_hook_type</name></type> <name>prev_ExecutorStart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorEnd_hook_type</name></type> <name>prev_ExecutorEnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorRun_hook_type</name></type> <name>prev_ExecutorRun_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UndoLocation</name></type>	<name>saved_undo_location</name> <init>= <expr><name>InvalidUndoLocation</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>List</name>	   <modifier>*</modifier></type><name>saved_undo_locations</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* list of UndoLocation* */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name>		<name>isTopLevel</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_utility_command</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
									 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
									 <parameter><decl><type><name>bool</name></type> <name>readOnlyTree</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
									 <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
									 <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
									 <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
									 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
									 <parameter><decl><type><name><name>struct</name> <name>QueryCompletion</name></name> <modifier>*</modifier></type><name>qc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_object_access_hook</name><parameter_list>(<parameter><decl><type><name>ObjectAccessType</name></type> <name>access</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>,
										<parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_ExecutorStart_hook</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_ExecutorEnd_hook</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>orioledb_ExecutorRun_hook</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>,
									  <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>,
									  <parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>,
									  <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>o_intorel_receive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>create_ctas_nodata</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>, <parameter><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ObjectAddress</name></type> <name>o_define_relation</name><parameter_list>(<parameter><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>cstmt</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>relkind</name></decl></parameter>,
									   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DestReceiver</name> <modifier>*</modifier></type><name>OCreateIntoRelDestReceiver</name><parameter_list>(<parameter><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>intoClause</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>			<comment type="block">/* publicly-known function pointers */</comment>
	<decl_stmt><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name></decl>;</decl_stmt>			<comment type="block">/* target relation specification */</comment>
	<comment type="block">/* These fields are filled by intorel_startup: */</comment>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>			<comment type="block">/* relation to write to */</comment>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>reladdr</name></decl>;</decl_stmt>		<comment type="block">/* address of rel, for ExecCreateTableAs */</comment>
	<decl_stmt><decl><type><name>CommandId</name></type>	<name>output_cid</name></decl>;</decl_stmt>		<comment type="block">/* cmin to insert in output tuples */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ti_options</name></decl>;</decl_stmt>		<comment type="block">/* table_tuple_insert performance options */</comment>
	<decl_stmt><decl><type><name>BulkInsertState</name></type> <name>bistate</name></decl>;</decl_stmt>	<comment type="block">/* bulk insert state */</comment>
	<decl_stmt><decl><type><name>EState</name>	   <modifier>*</modifier></type><name>estate</name></decl>;</decl_stmt>
}</block></struct></type> <name>o_data_receiver</name>;</typedef>

<function><type><name>void</name></type>
<name>orioledb_setup_ddl_hooks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>next_ProcessUtility_hook</name> <operator>=</operator> <name>ProcessUtility_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcessUtility_hook</name> <operator>=</operator> <name>orioledb_utility_command</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorRun_hook</name> <operator>=</operator> <name>ExecutorRun_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>orioledb_ExecutorRun_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_objectaccess_hook</name> <operator>=</operator> <name>object_access_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>object_access_hook</name> <operator>=</operator> <name>orioledb_object_access_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorStart</name> <operator>=</operator> <name>ExecutorStart_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>orioledb_ExecutorStart_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorEnd</name> <operator>=</operator> <name>ExecutorEnd_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorEnd_hook</name> <operator>=</operator> <name>orioledb_ExecutorEnd_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>List</name> <modifier>*</modifier></type>
<name>extract_compress_rel_option</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>defs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>founded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>def</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name>defs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>def</name><operator>-&gt;</operator><name>arg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>O_COMPRESS_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>Integer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option %s must be integer value."</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>intVal</name><argument_list>(<argument><expr><name><name>def</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>founded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>founded</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>defs</name> <operator>=</operator> <call><name>list_delete_nth_cell</name><argument_list>(<argument><expr><name>defs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>defs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>validate_compress</name><parameter_list>(<parameter><decl><type><name>OCompress</name></type> <name>compress</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OCompress</name></type>	<name>max_compress</name> <init>= <expr><call><name>o_compress_max_lvl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compress</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>compress</name></expr></argument> &gt;</argument_list></name> <name>max_compress</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s compression level must be between %d and %d"</literal></expr></argument>,
			 <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>deparse_alter_table_cmd_subtype</name><parameter_list>(<parameter><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strtype</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AT_AddColumn</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD COLUMN"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddColumnRecurse</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD COLUMN (and recurse)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddColumnToView</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD COLUMN TO VIEW"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ColumnDefault</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET DEFAULT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_CookedColumnDefault</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET DEFAULT (precooked)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropNotNull</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP NOT NULL"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetNotNull</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET NOT NULL"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_CheckNotNull</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"CHECK NOT NULL"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetStatistics</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET STATS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET OPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ResetOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"RESET OPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetStorage</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET STORAGE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropColumn</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP COLUMN"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropColumnRecurse</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP COLUMN (and recurse)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddIndex</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD INDEX"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ReAddIndex</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"(re) ADD INDEX"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddConstraint</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD CONSTRAINT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddConstraintRecurse</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD CONSTRAINT (and recurse)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ReAddConstraint</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"(re) ADD CONSTRAINT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AlterConstraint</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER CONSTRAINT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ValidateConstraint</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"VALIDATE CONSTRAINT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ValidateConstraintRecurse</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"VALIDATE CONSTRAINT (and recurse)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddIndexConstraint</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD CONSTRAINT (using index)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropConstraint</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP CONSTRAINT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropConstraintRecurse</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP CONSTRAINT (and recurse)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ReAddComment</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"(re) ADD COMMENT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AlterColumnType</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET TYPE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AlterColumnGenericOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ALTER COLUMN SET OPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ChangeOwner</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"CHANGE OWNER"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ClusterOn</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"CLUSTER"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropCluster</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP CLUSTER"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetLogged</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET LOGGED"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetUnLogged</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET UNLOGGED"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropOids</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP OIDS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetTableSpace</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET TABLESPACE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetRelOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET RELOPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ResetRelOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"RESET RELOPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ReplaceRelOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"REPLACE RELOPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableTrig</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableAlwaysTrig</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (always)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableReplicaTrig</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (replica)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DisableTrig</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE TRIGGER"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableTrigAll</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (all)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DisableTrigAll</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE TRIGGER (all)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableTrigUser</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE TRIGGER (user)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DisableTrigUser</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE TRIGGER (user)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableRule</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE RULE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableAlwaysRule</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE RULE (always)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableReplicaRule</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE RULE (replica)"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DisableRule</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE RULE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddInherit</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD INHERIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropInherit</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP INHERIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AddOf</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"OF"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropOf</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"NOT OF"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ReplicaIdentity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"REPLICA IDENTITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_EnableRowSecurity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ENABLE ROW SECURITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DisableRowSecurity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DISABLE ROW SECURITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ForceRowSecurity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"FORCE ROW SECURITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_NoForceRowSecurity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"NO FORCE ROW SECURITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_GenericOptions</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET OPTIONS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_AttachPartition</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ATTACH PARTITION"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DetachPartition</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DETACH PARTITION"</literal></expr>;</expr_stmt>
			<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
		<case>case <expr><name>AT_DetachPartitionFinalize</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DETACH PARTITION FINALIZE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_ReAddStatistics</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD STATISTICS"</literal></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><name>AT_AddIdentity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"ADD IDENTITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_SetIdentity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"SET IDENTITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>AT_DropIdentity</name></expr>:</case>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"DROP IDENTITY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>strtype</name> <operator>=</operator> <literal type="string">"unrecognized"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>strtype</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_ExecutorStart_hook</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>UndoLocation</name></type>		<name>lastUsedLocation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UndoLocation</name>	   <modifier>*</modifier></type><name>cur_undo_location</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>		<name>oldcxt</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>	<name>depth</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>	<name>top_level</name> <init>= <expr><name>isTopLevel</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>isTopLevel</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>pg_trigger_depth</name></expr></argument>,
												   <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>top_level</name> <operator>&amp;&amp;</operator> <name>depth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>saved_undo_locations</name> <operator>==</operator> <name>NIL</name> <operator>&amp;&amp;</operator>
				   <name>saved_undo_location</name> <operator>==</operator> <name>InvalidUndoLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>lastUsedLocation</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>undo_meta</name><operator>-&gt;</operator><name>lastUsedLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur_undo_location</name> <operator>=</operator> <operator>(</operator><name>UndoLocation</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>UndoLocation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>saved_undo_location</name> <operator>=</operator> <name>lastUsedLocation</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cur_undo_location</name> <operator>=</operator> <name>lastUsedLocation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>saved_undo_locations</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>saved_undo_locations</name></expr></argument>, <argument><expr><name>cur_undo_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorStart</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>prev_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>standard_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_ExecutorEnd_hook</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>list_tail</name><argument_list>(<argument><expr><name>saved_undo_locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>saved_undo_locations</name> <operator>=</operator> <call><name>list_delete_last</name><argument_list>(<argument><expr><name>saved_undo_locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>saved_undo_locations</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>list_tail</name><argument_list>(<argument><expr><name>saved_undo_locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>saved_undo_location</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>UndoLocation</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>saved_undo_location</name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorEnd</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>prev_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>standard_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cleanup_saved_undo_locations</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>saved_undo_locations</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>list_tail</name><argument_list>(<argument><expr><name>saved_undo_locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>saved_undo_locations</name> <operator>=</operator> <call><name>list_delete_last</name><argument_list>(<argument><expr><name>saved_undo_locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>saved_undo_location</name> <operator>=</operator> <name>InvalidUndoLocation</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_alter_table_partition</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTableStmt</name> <modifier>*</modifier></type><name>top_atstmt</name> <init>= <expr><operator>(</operator><name>AlterTableStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>top_atstmt</name><operator>-&gt;</operator><name>cmds</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>top_atstmt</name><operator>-&gt;</operator><name>cmds</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>AT_AttachPartition</name> <operator>||</operator>
			<name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>AT_DetachPartition</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>objtype</name></cpp:macro> <cpp:value>relkind</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * OCreateTableAsRelExists --- check existence of relation for CreateTableAsStmt
 *
 * Utility wrapper checking if the relation pending for creation in this
 * CreateTableAsStmt query already exists or not.  Returns true if the
 * relation exists, otherwise false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>OCreateTableAsRelExists</name><parameter_list>(<parameter><decl><type><name>CreateTableAsStmt</name> <modifier>*</modifier></type><name>ctas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>nspid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name> <init>= <expr><name><name>ctas</name><operator>-&gt;</operator><name>into</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>nspid</name> <operator>=</operator> <call><name>RangeVarGetCreationNamespace</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>get_relname_relid</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name>nspid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Relation does not exist, it can be created */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Common RangeVarGetRelid callback for rename, set schema, and alter table
 * processing.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RangeVarCallbackForAlterRelation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeVar</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oldrelid</name></decl></parameter>,
								 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectType</name></type>	<name>reltype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>classform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AclResult</name></type>	<name>aclresult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>relkind</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* concurrently dropped */</comment>
	<expr_stmt><expr><name>classform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relkind</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>relkind</name></name></expr>;</expr_stmt>

	<comment type="block">/* Must own relation. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_class_ownercheck</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><call><name>get_relkind_objtype</name><argument_list>(<argument><expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* No system table modifications unless explicitly allowed. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowSystemTableMods</name> <operator>&amp;&amp;</operator> <call><name>IsSystemClass</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>classform</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied: \"%s\" is a system catalog"</literal></expr></argument>,
						<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Extract the specified relation type from the statement parse tree.
	 *
	 * Also, for ALTER .. RENAME, check permissions: the user must (still)
	 * have CREATE rights on the containing namespace.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>RenameStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aclresult</name> <operator>=</operator> <call><name>pg_namespace_aclcheck</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>,
										  <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ACL_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>aclresult</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>aclresult</name></expr></argument>, <argument><expr><name>OBJECT_SCHEMA</name></expr></argument>,
						   <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>reltype</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>RenameStmt</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>renameType</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>AlterObjectSchemaStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>reltype</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AlterObjectSchemaStmt</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>objectType</name></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>AlterTableStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>reltype</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AlterTableStmt</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>objtype</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>reltype</name> <operator>=</operator> <name>OBJECT_TABLE</name></expr>;</expr_stmt> <comment type="block">/* placate compiler */</comment>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * For compatibility with prior releases, we allow ALTER TABLE to be used
	 * with most other types of relations (but not composite types). We allow
	 * similar flexibility for ALTER INDEX in the case of RENAME, but not
	 * otherwise.  Otherwise, the user must select the correct form of the
	 * command for the relation at issue.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>OBJECT_SEQUENCE</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a sequence"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>OBJECT_VIEW</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_VIEW</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a view"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>OBJECT_MATVIEW</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_MATVIEW</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a materialized view"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>OBJECT_FOREIGN_TABLE</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a foreign table"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>OBJECT_TYPE</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_COMPOSITE_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a composite type"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>==</operator> <name>OBJECT_INDEX</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>!=</operator> <name>RELKIND_INDEX</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_PARTITIONED_INDEX</name>
		<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>RenameStmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not an index"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Don't allow ALTER TABLE on composite types. We want people to use ALTER
	 * TYPE for that.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>reltype</name> <operator>!=</operator> <name>OBJECT_TYPE</name> <operator>&amp;&amp;</operator> <name>relkind</name> <operator>==</operator> <name>RELKIND_COMPOSITE_TYPE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is a composite type"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use ALTER TYPE instead."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Don't allow ALTER TABLE .. SET SCHEMA on relations that can't be moved
	 * to a different schema, such as indexes and TOAST tables.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>AlterObjectSchemaStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_VIEW</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_MATVIEW</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_SEQUENCE</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_FOREIGN_TABLE</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a table, view, materialized view, sequence, or foreign table"</literal></expr></argument>,
						<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *		renameatt_check			- basic sanity checks before attribute rename
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>renameatt_check</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>myrelid</name></decl></parameter>, <parameter><decl><type><name>Form_pg_class</name></type> <name>classform</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recursing</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>relkind</name> <init>= <expr><name><name>classform</name><operator>-&gt;</operator><name>relkind</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>classform</name><operator>-&gt;</operator><name>reloftype</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>recursing</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot rename column of typed table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Renaming the columns of sequences or toast tables doesn't actually
	 * break anything from the system's point of view, since internal
	 * references are by attnum.  But it doesn't seem right to allow users to
	 * change names that are hardcoded into the system, hence the following
	 * restriction.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_VIEW</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_MATVIEW</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_COMPOSITE_TYPE</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_INDEX</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_PARTITIONED_INDEX</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_FOREIGN_TABLE</name> <operator>&amp;&amp;</operator>
		<name>relkind</name> <operator>!=</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WRONG_OBJECT_TYPE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"\"%s\" is not a table, view, materialized view, composite type, index, or foreign table"</literal></expr></argument>,
						<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * permissions checking.  only the owner of a class can change its schema.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_class_ownercheck</name><argument_list>(<argument><expr><name>myrelid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>ACLCHECK_NOT_OWNER</name></expr></argument>, <argument><expr><call><name>get_relkind_objtype</name><argument_list>(<argument><expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>myrelid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>allowSystemTableMods</name> <operator>&amp;&amp;</operator> <call><name>IsSystemClass</name><argument_list>(<argument><expr><name>myrelid</name></expr></argument>, <argument><expr><name>classform</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"permission denied: \"%s\" is a system catalog"</literal></expr></argument>,
						<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Perform permissions and integrity checks before acquiring a relation lock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RangeVarCallbackForRenameAttribute</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeVar</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oldrelid</name></decl></parameter>,
								   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>form</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* concurrently dropped */</comment>
	<expr_stmt><expr><name>form</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>renameatt_check</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>form</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_utility_command</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
						 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
						 <parameter><decl><type><name>bool</name></type> <name>readOnlyTree</name></decl></parameter>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						 <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
						 <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
						 <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>env</name></decl></parameter>,
						 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
						 <parameter><decl><type><name><name>struct</name> <name>QueryCompletion</name></name> <modifier>*</modifier></type><name>qc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>call_next</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>isTopLevel</name> <operator>=</operator> <operator>(</operator><name>context</name> <operator>==</operator> <name>PROCESS_UTILITY_TOPLEVEL</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
	<comment type="block">/* copied from standard_ProcessUtility */</comment>
	<if_stmt><if>if <condition>(<expr><name>readOnlyTree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pstmt</name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>AlterTableStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>is_alter_table_partition</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AlterTableStmt</name>	   <modifier>*</modifier></type><name>atstmt</name> <init>= <expr><operator>(</operator><name>AlterTableStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>					<name>relid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LOCKMODE</name></type>			<name>lockmode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
		<decl_stmt><decl><type><name>ListCell</name>		   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>				<name>isTopLevel</name> <init>= <expr><operator>(</operator><name>context</name> <operator>==</operator> <name>PROCESS_UTILITY_TOPLEVEL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>bool</name></type>				<name>isCompleteQuery</name> <init>= <expr><operator>(</operator><name>context</name> <operator>&lt;=</operator>
											   <name>PROCESS_UTILITY_QUERY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>				<name>needCleanup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>needCleanup</name> <operator>=</operator> <name>isCompleteQuery</name> <operator>&amp;&amp;</operator> <call><name>EventTriggerBeginCompleteQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* PG_TRY block is to ensure we call EventTriggerEndCompleteQuery */</comment>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isCompleteQuery</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EventTriggerDDLCommandStart</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
			<comment type="block">/*
			* Disallow ALTER TABLE .. DETACH CONCURRENTLY in a
			* transaction block or function.  (Perhaps it could be
			* allowed in a procedure, but don't hold your breath.)
			*/</comment>
			<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>atstmt-&gt;cmds</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>AlterTableCmd</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/* Disallow DETACH CONCURRENTLY in a transaction block */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name> <operator>==</operator> <name>AT_DetachPartition</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PartitionCmd</name> <operator>*</operator><operator>)</operator> <name><name>cmd</name><operator>-&gt;</operator><name>def</name></name><operator>)</operator><operator>-&gt;</operator><name>concurrent</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>PreventInTransactionBlock</name><argument_list>(<argument><expr><name>isTopLevel</name></expr></argument>,
													<argument><expr><literal type="string">"ALTER TABLE ... DETACH CONCURRENTLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<comment type="block">/*
			* Figure out lock mode, and acquire lock.  This also does
			* basic permissions checks, so that we won't wait for a
			* lock on (for example) a relation on which we have no
			* permissions.
			*/</comment>
			<expr_stmt><expr><name>lockmode</name> <operator>=</operator> <call><name>AlterTableGetLockLevel</name><argument_list>(<argument><expr><name><name>atstmt</name><operator>-&gt;</operator><name>cmds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>AlterTableLookupRelation</name><argument_list>(<argument><expr><name>atstmt</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>AlterTableUtilityContext</name></type> <name>atcontext</name></decl>;</decl_stmt>

				<comment type="block">/* Set up info needed for recursive callbacks ... */</comment>
				<expr_stmt><expr><name><name>atcontext</name><operator>.</operator><name>pstmt</name></name> <operator>=</operator> <name>pstmt</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>atcontext</name><operator>.</operator><name>queryString</name></name> <operator>=</operator> <name>queryString</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>atcontext</name><operator>.</operator><name>relid</name></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>atcontext</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>atcontext</name><operator>.</operator><name>queryEnv</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>

				<comment type="block">/* ... ensure we have an event trigger context ... */</comment>
				<expr_stmt><expr><call><name>EventTriggerAlterTableStart</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>EventTriggerAlterTableRelid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>atstmt</name><operator>-&gt;</operator><name>objtype</name></name> <operator>==</operator> <name>OBJECT_TABLE</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>lockmode</name> <operator>==</operator> <name>AccessExclusiveLock</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if_stmt><if>if <condition>(<expr><call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

							<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>atstmt-&gt;cmds</argument>)</argument_list></macro>
							<block>{<block_content>
								<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>(</operator><name>AlterTableCmd</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

								<comment type="block">/* make checks */</comment>
								<switch>switch <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>subtype</name></name></expr>)</condition>
								<block>{<block_content>
								<case>case <expr><name>AT_AlterColumnType</name></expr>:</case>
								<case>case <expr><name>AT_AddIndex</name></expr>:</case>
								<case>case <expr><name>AT_AddColumn</name></expr>:</case>
								<case>case <expr><name>AT_DropColumn</name></expr>:</case>
								<case>case <expr><name>AT_ColumnDefault</name></expr>:</case>
								<case>case <expr><name>AT_AddConstraint</name></expr>:</case>
								<case>case <expr><name>AT_DropConstraint</name></expr>:</case>
								<case>case <expr><name>AT_GenericOptions</name></expr>:</case>
								<case>case <expr><name>AT_SetNotNull</name></expr>:</case>
								<case>case <expr><name>AT_ChangeOwner</name></expr>:</case>
								<case>case <expr><name>AT_DropNotNull</name></expr>:</case>
								<case>case <expr><name>AT_AddInherit</name></expr>:</case>
								<case>case <expr><name>AT_DropInherit</name></expr>:</case>
									<break>break;</break>
								<default>default:</default>
									<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
											<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
											 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported alter table subcommand"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
											<argument><expr><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Subcommand \"%s\" is not "</literal>
													  <literal type="string">"supported on OrioleDB tables yet. "</literal>
													  <literal type="string">"Please send a bug report."</literal></expr></argument>,
													  <argument><expr><call><name>deparse_alter_table_cmd_subtype</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>
								</block_content>}</block></switch>
							</block_content>}</block>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* ... and do it */</comment>
				<expr_stmt><expr><call><name>AlterTable</name><argument_list>(<argument><expr><name>atstmt</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* done */</comment>
				<expr_stmt><expr><call><name>EventTriggerAlterTableEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"relation \"%s\" does not exist, skipping"</literal></expr></argument>,
								<argument><expr><name><name>atstmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>isCompleteQuery</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>EventTriggerSQLDrop</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>EventTriggerDDLCommandEnd</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_FINALLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>needCleanup</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EventTriggerEndCompleteQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>call_next</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>CreateStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * copy-paste with new_o_tables list from ProcessUtilitySlow in
		 * utility.c
		 */</comment>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>stmts</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RangeVar</name>   <modifier>*</modifier></type><name>table_rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isCompleteQuery</name> <init>= <expr><operator>(</operator><name>context</name> <operator>&lt;=</operator> <name>PROCESS_UTILITY_QUERY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>needCleanup</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>needCleanup</name> <operator>=</operator> <name>isCompleteQuery</name> <operator>&amp;&amp;</operator> <call><name>EventTriggerBeginCompleteQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* PG_TRY block is to ensure we call EventTriggerEndCompleteQuery */</comment>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isCompleteQuery</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EventTriggerDDLCommandStart</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>stmts</name> <operator>=</operator> <call><name>transformCreateStmt</name><argument_list>(<argument><expr><operator>(</operator><name>CreateStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			* ... and do it.  We can't use foreach() because we may modify the
			* list midway through, so pick off the elements one at a time, the
			* hard way.
			*/</comment>
			<while>while <condition>(<expr><name>stmts</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>stmts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>stmts</name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name>stmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>CreateStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>cstmt</name> <init>= <expr><operator>(</operator><name>CreateStmt</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></init></decl>;</decl_stmt>

					<comment type="block">/* Remember transformed RangeVar for LIKE */</comment>
					<expr_stmt><expr><name>table_rv</name> <operator>=</operator> <name><name>cstmt</name><operator>-&gt;</operator><name>relation</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>o_define_relation</name><argument_list>(<argument><expr><name>cstmt</name></expr></argument>, <argument><expr><name>RELKIND_RELATION</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>TableLikeClause</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					* Do delayed processing of LIKE options.  This will result in
					* additional sub-statements for us to process.  Those should
					* get done before any remaining actions, so prepend them to
					* "stmts".
					*/</comment>
					<decl_stmt><decl><type><name>TableLikeClause</name> <modifier>*</modifier></type><name>like</name> <init>= <expr><operator>(</operator><name>TableLikeClause</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>morestmts</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>table_rv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>morestmts</name> <operator>=</operator> <call><name>expandTableLikeClause</name><argument_list>(<argument><expr><name>table_rv</name></expr></argument>, <argument><expr><name>like</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>stmts</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>morestmts</name></expr></argument>, <argument><expr><name>stmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/*
					* Recurse for anything else.  Note the recursive call will
					* stash the objects so created into our event trigger
					* context.
					*/</comment>
					<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>wrapper</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>wrapper</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>PlannedStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>commandType</name></name> <operator>=</operator> <name>CMD_UTILITY</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>canSetTag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>stmt_location</name></name> <operator>=</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>stmt_location</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>wrapper</name><operator>-&gt;</operator><name>stmt_len</name></name> <operator>=</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>stmt_len</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>ProcessUtility</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>,
								   <argument><expr><name>queryString</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
								   <argument><expr><name>readOnlyTree</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
								   <argument><expr><name>PROCESS_UTILITY_SUBCOMMAND</name></expr></argument>,
								   <argument><expr><name>params</name></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>,
								   <argument><expr><name>None_Receiver</name></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>stmts</name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></while>

			<if_stmt><if>if <condition>(<expr><name>isCompleteQuery</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>EventTriggerSQLDrop</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>EventTriggerDDLCommandEnd</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_FINALLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>needCleanup</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EventTriggerEndCompleteQuery</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>call_next</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>CreateTableAsStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CreateTableAsStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>CreateTableAsStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>create</name> <init>= <expr><name>false</name></expr></init></decl>,
					<decl><type ref="prev"/><name>orioledb</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>into</name><operator>-&gt;</operator><name>accessMethod</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>into</name><operator>-&gt;</operator><name>accessMethod</name></name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>default_table_access_method</name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>create</name> <operator>=</operator> <operator>!</operator><call><name>OCreateTableAsRelExists</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>orioledb</name></expr>;</expr_stmt>

		<comment type="block">/* Check if the relation exists or not */</comment>
		<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Query</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Query</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>into</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>is_matview</name> <init>= <expr><operator>(</operator><name><name>into</name><operator>-&gt;</operator><name>viewQuery</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>save_userid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>save_sec_context</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>save_nestlevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * Create the tuple receiver object and insert info it will need
			 */</comment>
			<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>OCreateIntoRelDestReceiver</name><argument_list>(<argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <name>queryString</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_queryEnv</name></name> <operator>=</operator> <name>env</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * The contained Query could be a SELECT, or an EXECUTE utility
			 * command. If the latter, we just pass it off to ExecuteQuery.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_UTILITY</name> <operator>&amp;&amp;</operator>
				<call><name>IsA</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>ExecuteStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ExecuteStmt</name> <modifier>*</modifier></type><name>estmt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>ExecuteStmt</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_matview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* excluded by syntax */</comment>
				<expr_stmt><expr><call><name>ExecuteQuery</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>estmt</name></expr></argument>, <argument><expr><name>into</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * For materialized views, lock down security-restricted
				 * operations and arrange to make GUC variable changes local
				 * to this command.  This is not necessary for security, but
				 * this keeps the behavior similar to REFRESH MATERIALIZED
				 * VIEW.  Otherwise, one could create a materialized view not
				 * possible to refresh.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>is_matview</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>save_userid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>save_sec_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>save_userid</name></expr></argument>,
										   <argument><expr><name>save_sec_context</name> <operator>|</operator>
										   <name>SECURITY_RESTRICTED_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>save_nestlevel</name> <operator>=</operator> <call><name>NewGUCNestLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>into</name><operator>-&gt;</operator><name>skipData</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * If WITH NO DATA was specified, do not go through the
					 * rewriter, planner and executor.  Just define the
					 * relation using a code path similar to CREATE VIEW. This
					 * avoids dump/restore problems stemming from running the
					 * planner before all dependencies are set up.
					 */</comment>
					<expr_stmt><expr><call><name>create_ctas_nodata</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>rewritten</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>QueryDesc</name>  <modifier>*</modifier></type><name>queryDesc</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * Parse analysis was done already, but we still have to
					 * run the rule rewriter.  We do not do
					 * AcquireRewriteLocks: we assume the query either came
					 * straight from the parser, or suitable locks were
					 * acquired by plancache.c.
					 */</comment>
					<expr_stmt><expr><name>rewritten</name> <operator>=</operator> <call><name>QueryRewrite</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * SELECT should never rewrite to more or less than one
					 * SELECT query
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>rewritten</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected rewrite result for %s"</literal></expr></argument>,
							 <argument><expr><ternary><condition><expr><name>is_matview</name></expr> ?</condition><then> <expr><literal type="string">"CREATE MATERIALIZED VIEW"</literal></expr> </then><else>:
							 <expr><literal type="string">"CREATE TABLE AS SELECT"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>linitial_node</name><argument_list>(<argument><expr><name>Query</name></expr></argument>, <argument><expr><name>rewritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* plan the query */</comment>
					<expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name>pg_plan_query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name></expr></argument>,
										 <argument><expr><name>CURSOR_OPT_PARALLEL_OK</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Use a snapshot with an updated command ID to ensure
					 * this query sees results of any previously executed
					 * queries.  (This could only matter if the planner
					 * executed an allegedly-stable function that changed the
					 * database contents, but let's do it anyway to be
					 * parallel to the EXPLAIN code path.)
					 */</comment>
					<expr_stmt><expr><call><name>PushCopiedSnapshot</name><argument_list>(<argument><expr><call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>UpdateActiveSnapshotCommandId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Create a QueryDesc, redirecting output to our tuple
					 * receiver
					 */</comment>
					<expr_stmt><expr><name>queryDesc</name> <operator>=</operator> <call><name>CreateQueryDesc</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name></expr></argument>,
												<argument><expr><call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>InvalidSnapshot</name></expr></argument>,
												<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* call ExecutorStart to prepare the plan for execution */</comment>
					<expr_stmt><expr><call><name>ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><call><name>GetIntoRelEFlags</name><argument_list>(<argument><expr><name>into</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* run the plan to completion */</comment>
					<expr_stmt><expr><call><name>ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* save the rowcount if we're given a qc to fill */</comment>
					<if_stmt><if>if <condition>(<expr><name>qc</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>SetQueryCompletion</name><argument_list>(<argument><expr><name>qc</name></expr></argument>, <argument><expr><name>CMDTAG_SELECT</name></expr></argument>, <argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_processed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/* and clean up */</comment>
					<expr_stmt><expr><call><name>ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>FreeQueryDesc</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>is_matview</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Roll back any GUC changes */</comment>
					<expr_stmt><expr><call><name>AtEOXact_GUC</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>save_nestlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Restore userid and security context */</comment>
					<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>save_userid</name></expr></argument>, <argument><expr><name>save_sec_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"created materialized view with orioledb access method will not support refresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>free_parsestate</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>call_next</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>RefreshMatViewStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RefreshMatViewStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>RefreshMatViewStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>amname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>orioledb</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_openrv</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>amname</name> <operator>=</operator> <call><name>get_am_name</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>amname</name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>orioledb</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* TODO: Implement REFRESH MATERIALIZED VIEW */</comment>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"materialized views with orioledb access method do not support refresh yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>RenameStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>RenameStmt</name> <operator>*</operator><operator>)</operator> <name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_INDEX</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type> <name>is_index_stmt</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_INDEX</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type> <name>relid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Relation</name></type> <name>idx</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Grab an exclusive lock on the target table, index, sequence, view,
			 * materialized view, or foreign table, which we will NOT release until
			 * end of transaction.
			 *
			 * Lock level used here should match RenameRelationInternal, to avoid lock
			 * escalation.  However, because ALTER INDEX can be used with any relation
			 * type, we mustn't believe without verification.
			 */</comment>
			<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name></type> <name>relkind</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>obj_is_index</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>lockmode</name> <operator>=</operator> <ternary><condition><expr><name>is_index_stmt</name></expr> ?</condition><then> <expr><name>ShareUpdateExclusiveLock</name></expr> </then><else>: <expr><name>AccessExclusiveLock</name></expr></else></ternary></expr>;</expr_stmt>

				<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>RangeVarGetRelidExtended</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>,
												 <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr> ?</condition><then> <expr><name>RVR_MISSING_OK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
												 <argument><expr><name>RangeVarCallbackForAlterRelation</name></expr></argument>,
												 <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"relation \"%s\" does not exist, skipping"</literal></expr></argument>,
									<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * We allow mismatched statement and object types (e.g., ALTER INDEX
				 * to rename a table), but we might've used the wrong lock level.  If
				 * that happens, retry with the correct lock level.  We don't bother
				 * if we already acquired AccessExclusiveLock with an index, however.
				 */</comment>
				<expr_stmt><expr><name>relkind</name> <operator>=</operator> <call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>obj_is_index</name> <operator>=</operator> <operator>(</operator><name>relkind</name> <operator>==</operator> <name>RELKIND_INDEX</name> <operator>||</operator>
								<name>relkind</name> <operator>==</operator> <name>RELKIND_PARTITIONED_INDEX</name><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>obj_is_index</name> <operator>||</operator> <name>is_index_stmt</name> <operator>==</operator> <name>obj_is_index</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>UnlockRelationOid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_index_stmt</name> <operator>=</operator> <name>obj_is_index</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>relation_openrv</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_INDEX</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>tbl</name> <init>= <expr><call><name>relation_open</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>rd_index</name><operator>-&gt;</operator><name>indrelid</name></name></expr></argument>,
												<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
					<name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
					<call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ORelOids</name></type>	<name>table_oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
											  <expr><name><name>tbl</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>table_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"orioledb table %s not found"</literal></expr></argument>,
							 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>ix_num</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>ORelOids</name></type>	<name>idx_oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name><name>idx</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
												<expr><name><name>idx</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

						<for>for <control>(<init><expr><name>ix_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>ix_num</name><operator>++</operator></expr></incr>)</control>
						<block>{<block_content>
							<decl_stmt><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

							<if_stmt><if>if <condition>(<expr><call><name>ORelOidsIsEqual</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>, <argument><expr><name>idx_oids</name></expr></argument>)</argument_list></call></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>index</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></for>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_indices_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name>idx_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_add_invalidate_undo_item</name><argument_list>(<argument><expr><name>idx_oids</name></expr></argument>,
												   <argument><expr><name>O_INVALIDATE_OIDS_ON_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ORelOidsIsEqual</name><argument_list>(<argument><expr><name>idx_oids</name></expr></argument>, <argument><expr><name>table_oids</name></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name>table_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>o_add_invalidate_undo_item</name><argument_list>(<argument><expr><name>table_oids</name></expr></argument>,
													   <argument><expr><name>O_INVALIDATE_OIDS_ON_ABORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_COLUMN</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Relation</name></type>	<name>tbl</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name></decl>;</decl_stmt>

			<comment type="block">/* lock level taken here should match renameatt_internal */</comment>
			<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>RangeVarGetRelidExtended</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>,
											 <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr> ?</condition><then> <expr><name>RVR_MISSING_OK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
											 <argument><expr><name>RangeVarCallbackForRenameAttribute</name></expr></argument>,
											 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"relation \"%s\" does not exist, skipping"</literal></expr></argument>,
								<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name>relation_openrv</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
				 <name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
				<call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ORelOids</name></type>	<name>table_oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>, <expr><name><name>tbl</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>table_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"orioledb table %s not found"</literal></expr></argument>,
						 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>ix_num</name></decl>,
								<decl><type ref="prev"/><name>renamed_num</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>renamed_num</name> <operator>=</operator> <call><name>o_table_fieldnum</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>renamed_num</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>renamed_num</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<for>for <control>(<init><expr><name>ix_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix_num</name> <operator>&lt;</operator> <name><name>o_table</name><operator>-&gt;</operator><name>nindices</name></name></expr>;</condition> <incr><expr><name>ix_num</name><operator>++</operator></expr></incr>)</control>
						<block>{<block_content>
							<decl_stmt><decl><type><name>OTableIndex</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>int</name></type>			<name>field_num</name></decl>;</decl_stmt>

							<for>for <control>(<init><expr><name>field_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field_num</name> <operator>&lt;</operator> <name><name>index</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition>
								 <incr><expr><name>field_num</name><operator>++</operator></expr></incr>)</control>
							<block>{<block_content>
								<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>index</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>oIndexPrimary</name><operator>)</operator> <operator>||</operator>
									<operator>(</operator><name><name>index</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>field_num</name></expr>]</index></name><operator>.</operator><name>attnum</name> <operator>==</operator>
									 <name>renamed_num</name><operator>)</operator></expr>)</condition>
								<block>{<block_content>
									<expr_stmt><expr><call><name>o_indices_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>,
													 <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>oids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>
								</block_content>}</block></if></if_stmt>
							</block_content>}</block></for>
						</block_content>}</block></for>
						<expr_stmt><expr><call><name>o_invalidate_oids</name><argument_list>(<argument><expr><name>table_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>call_next</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>next_ProcessUtility_hook</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>next_ProcessUtility_hook</name>) <argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
										 <argument><expr><name>readOnlyTree</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
										 <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>env</name></expr></argument>,
										 <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
									<argument><expr><name>readOnlyTree</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
									<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>env</name></expr></argument>,
									<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_ExecutorRun_hook</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>,
						  <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>,
						  <parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>mydest</name></name> <operator>==</operator> <name>DestIntoRel</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* "into" has same offset in o_data_receiver as in DR_intorel */</comment>
		<decl_stmt><decl><type><name>IntoClause</name>	   <modifier>*</modifier></type><name>into</name> <init>= <expr><operator>(</operator><operator>(</operator><name>o_data_receiver</name> <operator>*</operator><operator>)</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>dest</name></name><operator>)</operator><operator>-&gt;</operator><name>into</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>			<name>orioledb</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>into</name><operator>-&gt;</operator><name>accessMethod</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>accessMethod</name></name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>default_table_access_method</name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>orioledb</name> <operator>&amp;&amp;</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>dest</name><operator>-&gt;</operator><name>receiveSlot</name></name> <operator>!=</operator> <name>o_intorel_receive</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <call><name>OCreateIntoRelDestReceiver</name><argument_list>(<argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorRun_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>prev_ExecutorRun_hook</name>) <argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>standard_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_find_composite_type_dependencies</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeOid</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>origRelation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>depRel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>depScan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>depTup</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We scan pg_depend to find those things that depend on the given type.
	 * (We assume we can ignore refobjsubid for a type.)
	 */</comment>
	<expr_stmt><expr><name>depRel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>DependRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_depend_refclassid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>TypeRelationId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_depend_refobjid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>depScan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>depRel</name></expr></argument>, <argument><expr><name>DependReferenceIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
								 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>depTup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>depScan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_depend</name></type> <name>pg_depend</name> <init>= <expr><operator>(</operator><name>Form_pg_depend</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>depTup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>

		<comment type="block">/* Check for directly dependent types */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pg_depend</name><operator>-&gt;</operator><name>classid</name></name> <operator>==</operator> <name>TypeRelationId</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * This must be an array, domain, or range containing the given
			 * type, so recursively check for uses of this type.  Note that
			 * any error message will mention the original type not the
			 * container; this is intentional.
			 */</comment>
			<expr_stmt><expr><call><name>o_find_composite_type_dependencies</name><argument_list>(<argument><expr><name><name>pg_depend</name><operator>-&gt;</operator><name>objid</name></name></expr></argument>, <argument><expr><name>origRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Else, ignore dependees that aren't user columns of relations */</comment>
		<comment type="block">/* (we assume system columns are never of interesting types) */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pg_depend</name><operator>-&gt;</operator><name>classid</name></name> <operator>!=</operator> <name>RelationRelationId</name> <operator>||</operator>
			<name><name>pg_depend</name><operator>-&gt;</operator><name>objsubid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name><name>pg_depend</name><operator>-&gt;</operator><name>objid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
			 <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
			<call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ORelOids</name></type>	<name>table_oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
			<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>table_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"orioledb table %s not found"</literal></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>nindices</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

					<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nfields</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fields</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>attnum</name> <operator>==</operator>
							<name><name>pg_depend</name><operator>-&gt;</operator><name>objsubid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></for>

				</block_content>}</block></for>

				<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot alter type \"%s\" because index "</literal>
									<literal type="string">"\"%s\" uses it"</literal></expr></argument>,
									<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>origRelation</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * A view or composite type itself isn't a problem, but we must
			 * recursively check for indirect dependencies via its rowtype.
			 */</comment>
			<expr_stmt><expr><call><name>o_find_composite_type_dependencies</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name></expr></argument>,
											   <argument><expr><name>origRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>depScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>depRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>orioledb_object_access_hook</name><parameter_list>(<parameter><decl><type><name>ObjectAccessType</name></type> <name>access</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_DROP</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>RelationRelationId</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ObjectAccessDrop</name> <modifier>*</modifier></type><name>drop_arg</name> <init>= <expr><operator>(</operator><name>ObjectAccessDrop</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
		<block>{<block_content>
			<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>locktag</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOCKTAG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SET_LOCKTAG_RELATION</name><argument_list>(<argument><expr><name>locktag</name></expr></argument>, <argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DoLocalLockExist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>is_open</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
				 <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>(</operator><name>subId</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ORelOids</name>   <modifier>*</modifier></type><name>treeOids</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>numTreeOids</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name>objectId</name></expr>,
				<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>relation_get_descr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>o_tables_drop_by_oids</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>treeOids</name> <operator>=</operator> <call><name>o_table_make_index_oids</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>add_undo_drop_relnode</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>treeOids</name></expr></argument>, <argument><expr><name>numTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>treeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name><operator>)</operator> <operator>&amp;&amp;</operator>
					 <operator>(</operator><name>subId</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OTableField</name> <modifier>*</modifier></type><name>o_field</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>, <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
									<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* table does not exist */</comment>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"orioledb table \"%s\" not found"</literal></expr></argument>,
						<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>o_field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>subId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>o_field</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o_field</name><operator>-&gt;</operator><name>droped</name></name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>CommitSeqNo</name></type>	<name>csn</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>o_field</name><operator>-&gt;</operator><name>droped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>o_tables_after_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_INDEX</name> <operator>&amp;&amp;</operator>
					 <name><name>drop_arg</name><operator>-&gt;</operator><name>dropflags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

				<comment type="block">/*
				 * dropflags == PERFORM_DELETION_OF_RELATION also ignored, to
				 * not drop indices when whole table dropped
				 */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Relation</name></type>	<name>tbl</name> <init>= <expr><call><name>relation_open</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_index</name><operator>-&gt;</operator><name>indrelid</name></name></expr></argument>,
												<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
					 <name><name>tbl</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
					<call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><call><name>relation_get_descr</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ix_num</name> <operator>=</operator> <call><name>o_find_ix_num_by_name</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>ix_num</name> <operator>!=</operator> <name>InvalidIndexNumber</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>OIndexNumber</name></type> <name>ix_num</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>OTableDescr</name> <modifier>*</modifier></type><name>descr</name> <init>= <expr><call><name>relation_get_descr</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>descr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>ix_num</name> <operator>=</operator> <call><name>o_find_ix_num_by_name</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relname</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ix_num</name> <operator>!=</operator> <name>InvalidIndexNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>descr</name><operator>-&gt;</operator><name>indices</name><index>[<expr><name>ix_num</name></expr>]</index></name><operator>-&gt;</operator><name>primaryIsCtid</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>ix_num</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>is_open</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>o_index_drop</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>ix_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_COMPOSITE_TYPE</name> <operator>&amp;&amp;</operator>
					 <operator>(</operator><name>subId</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OClassArg</name></type>	<name>arg</name> <init>= <expr><block>{<expr><operator>.</operator><name>column_drop</name> <operator>=</operator> <name>true</name></expr>,<expr><operator>.</operator><name>dropped</name> <operator>=</operator> <name>subId</name></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>o_find_composite_type_dependencies</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_class_cache_update_if_needed</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
											   <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>is_open</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_DROP</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>DatabaseRelationId</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_tables_drop_all</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_DROP</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>TypeRelationId</name> <operator>&amp;&amp;</operator>
			 <call><name>ActiveSnapshotSet</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typeform</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_tables_drop_columns_by_type</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>typeform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name><name>typeform</name><operator>-&gt;</operator><name>typtype</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>TYPTYPE_COMPOSITE</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>typeform</name><operator>-&gt;</operator><name>typtypmod</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>o_class_cache_delete</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>TYPTYPE_RANGE</name></expr>:</case>
				<expr_stmt><expr><call><name>o_range_cache_delete</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>TYPTYPE_ENUM</name></expr>:</case>
				<expr_stmt><expr><call><name>o_enum_cache_delete</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
		<if_stmt><if>if <condition>(<expr><name><name>typeform</name><operator>-&gt;</operator><name>typtype</name></name> <operator>!=</operator> <name>TYPTYPE_BASE</name> <operator>&amp;&amp;</operator>
			<name><name>typeform</name><operator>-&gt;</operator><name>typtype</name></name> <operator>!=</operator> <name>TYPTYPE_PSEUDO</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>o_type_cache_delete</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_POST_CREATE</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>RelationRelationId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_COMPOSITE_TYPE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_find_composite_type_dependencies</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_class_cache_update_if_needed</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name><operator>)</operator> <operator>&amp;&amp;</operator>
					 <operator>(</operator><name>subId</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OTableField</name>			   <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_attribute</name></type>		<name>attr</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OTable</name>				   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ORelOids</name></type>				<name>oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>,
												<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
												<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>CommitSeqNo</name></type>				<name>csn</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OXid</name></type>					<name>oxid</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* table does not exist */</comment>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"orioledb table \"%s\" not found"</literal></expr></argument>, <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>,
											<argument><expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator>
												<sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OTableField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>o_table</name><operator>-&gt;</operator><name>nfields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>natts</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>orioledb_attr_to_field</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>o_table_resize_constr</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>o_tables_after_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
					  <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name><operator>)</operator> <operator>&amp;&amp;</operator>
					 <operator>(</operator><name>subId</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>CommitSeqNo</name></type>	<name>csn</name> <init>= <expr><name>COMMITSEQNO_INPROGRESS</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><name>InvalidOXid</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>dbNode</name></name> <operator>==</operator> <name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_table_tableam_create</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_opclass_cache_add_table</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oTablesAddLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_tables_add</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_POST_CREATE</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>AttrDefaultRelationId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><name>subId</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_orioledb_rel</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OTableField</name>				   <modifier>*</modifier></type><name>field</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type>			<name>attr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OTable</name>					   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ORelOids</name></type>					<name>oids</name> <init>= <expr><block>{<expr><name>MyDatabaseId</name></expr>,
												<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr>,
												<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Node</name>					   <modifier>*</modifier></type><name>defaultexpr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrMissing</name>				   <modifier>*</modifier></type><name>attrmiss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrMissing</name></type>					<name>attrmiss_temp</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>CommitSeqNo</name></type>					<name>csn</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>OXid</name></type>						<name>oxid</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>o_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* table does not exist */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"orioledb table \"%s\" not found"</literal></expr></argument>,
					 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type> <name>missing_before</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>subId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>missing_before</name> <operator>=</operator> <name><name>attr</name><operator>-&gt;</operator><name>atthasmissing</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>field</name> <operator>=</operator> <operator>&amp;</operator><name><name>o_table</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>subId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>attr</name> <operator>=</operator> <operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>subId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>orioledb_attr_to_field</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>atthasdef</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>defaultexpr</name> <operator>=</operator> <call><name>build_column_default</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>defaultexpr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>missing_before</name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>atthasmissing</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>Datum</name></type>					<name>missingval</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>Expr</name>				   <modifier>*</modifier></type><name>expr2</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ParseNamespaceItem</name>	   <modifier>*</modifier></type><name>nsitem</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ParseState</name>			   <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>EState</name>				   <modifier>*</modifier></type><name>estate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ExprContext</name>			   <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>ExprState</name>			   <modifier>*</modifier></type><name>exprState</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>MemoryContext</name></type>			<name>tbl_cxt</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>MemoryContext</name></type>			<name>oldcxt</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>					<name>missingIsNull</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>nsitem</name> <operator>=</operator> <call><name>addRangeTableEntryForRelation</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
															<argument><expr><name>rel</name></expr></argument>,
															<argument><expr><name>AccessShareLock</name></expr></argument>,
															<argument><expr><name>NULL</name></expr></argument>,
															<argument><expr><name>false</name></expr></argument>,
															<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>addNSItemToQuery</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>nsitem</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>expr2</name> <operator>=</operator> <call><name>expression_planner</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>defaultexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>tbl_cxt</name> <operator>=</operator> <call><name>OGetTableContext</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>tbl_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>estate</name> <operator>=</operator> <call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>exprState</name> <operator>=</operator> <call><name>ExecPrepareExpr</name><argument_list>(<argument><expr><name>expr2</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>econtext</name> <operator>=</operator> <call><name>GetPerTupleExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>missingval</name> <operator>=</operator> <call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name>exprState</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>missingIsNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free_parsestate</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>attrmiss_temp</name><operator>.</operator><name>am_value</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>missingval</name></expr></argument>,
														<argument><expr><name><name>field</name><operator>-&gt;</operator><name>byval</name></name></expr></argument>,
														<argument><expr><name><name>field</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>attrmiss_temp</name><operator>.</operator><name>am_present</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>attrmiss</name> <operator>=</operator> <operator>&amp;</operator><name>attrmiss_temp</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>defaultexpr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr2</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>o_table_fill_constr</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>subId</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>attrmiss</name></expr></argument>,
									<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>defaultexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_tables_after_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_table_free</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_POST_ALTER</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>RelationRelationId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rel</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_COMPOSITE_TYPE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>o_find_composite_type_dependencies</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltype</name></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_class_cache_update_if_needed</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_POST_ALTER</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>TypeRelationId</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>typeTuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>tform</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>typeTuple</name> <operator>=</operator> <call><name>typeidType</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>typeTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name><name>tform</name><operator>-&gt;</operator><name>typtype</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>TYPTYPE_ENUM</name></expr>:</case>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_enum_cache_update_if_needed</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>TYPTYPE_COMPOSITE</name></expr>:</case>
				<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>relation_open</name><argument_list>(<argument><expr><call><name>typeidTypeRelid</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_find_composite_type_dependencies</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>o_class_cache_update_if_needed</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>typeTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_DROP</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>OperatorClassRelationId</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OOpclass</name>   <modifier>*</modifier></type><name>o_opclass</name> <init>= <expr><call><name>o_opclass_get</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>o_opclass</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>o_invalidate_comparator_cache</name><argument_list>(<argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>opfamily</name></name></expr></argument>,
										  <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>,
										  <argument><expr><name><name>o_opclass</name><operator>-&gt;</operator><name>inputtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>old_objectaccess_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>old_objectaccess_hook</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>classId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>o_define_relation</name><parameter_list>(<parameter><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>cstmt</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>relkind</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>secondaryObject</name> <init>= <expr><name>InvalidObjectAddress</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OCompress</name></type>	<name>compress</name> <init>= <expr><name>default_compress</name></expr></init></decl>,
				<decl><type ref="prev"/><name>primary_compress</name> <init>= <expr><name>default_primary_compress</name></expr></init></decl>,
				<decl><type ref="prev"/><name>toast_compress</name> <init>= <expr><name>default_toast_compress</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>toast_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>validnsps</name><index>[]</index></name> <init>= <expr><name>HEAP_RELOPT_NAMESPACES</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>orioledb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name> <init>= <expr><name>COMMITSEQNO_INPROGRESS</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><name>InvalidOXid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>old_max_parallel_maintenance_workers</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cstmt</name><operator>-&gt;</operator><name>accessMethod</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cstmt</name><operator>-&gt;</operator><name>accessMethod</name></name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>orioledb</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>default_table_access_method</name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>orioledb</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>extract_compress_rel_option</name><argument_list>(<argument><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>,
													 <argument><expr><literal type="string">"compress"</literal></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>extract_compress_rel_option</name><argument_list>(<argument><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>,
													 <argument><expr><literal type="string">"primary_compress"</literal></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>primary_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>extract_compress_rel_option</name><argument_list>(<argument><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>,
													 <argument><expr><literal type="string">"toast_compress"</literal></expr></argument>,
													 <argument><expr><operator>&amp;</operator><name>toast_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>validate_compress</name><argument_list>(<argument><expr><name>compress</name></expr></argument>, <argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>validate_compress</name><argument_list>(<argument><expr><name>primary_compress</name></expr></argument>, <argument><expr><literal type="string">"Primary index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>validate_compress</name><argument_list>(<argument><expr><name>toast_compress</name></expr></argument>, <argument><expr><literal type="string">"TOAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Create the table itself */</comment>
	<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>DefineRelation</name><argument_list>(<argument><expr><name>cstmt</name></expr></argument>, <argument><expr><name>relkind</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EventTriggerCollectSimpleCommand</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>secondaryObject</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>cstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Let NewRelationCreateToastTable decide if this one needs a secondary
	 * relation too.
	 */</comment>
	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * parse and validate reloptions for the toast table
	 */</comment>
	<expr_stmt><expr><name>toast_options</name> <operator>=</operator> <call><name>transformRelOptions</name><argument_list>(<argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
										<argument><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>,
										<argument><expr><literal type="string">"toast"</literal></expr></argument>,
										<argument><expr><name>validnsps</name></expr></argument>,
										<argument><expr><name>true</name></expr></argument>,
										<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>heap_reloptions</name><argument_list>(<argument><expr><name>RELKIND_TOASTVALUE</name></expr></argument>,
						   <argument><expr><name>toast_options</name></expr></argument>,
						   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>orioledb</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>old_max_parallel_maintenance_workers</name> <operator>=</operator>
			<name>max_parallel_maintenance_workers</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_parallel_maintenance_workers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>NewRelationCreateToastTable</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>,
								<argument><expr><name>toast_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>orioledb</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_parallel_maintenance_workers</name> <operator>=</operator>
			<name>old_max_parallel_maintenance_workers</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * orioledb table have no need in PostgreSQL TOAST and this calls have no
	 * sense for us (see needs_toast_table(rel) check inside
	 * create_toast_table()), but call NewRelationCreateToastTable() always
	 * gets AccessExclusiveLock on the relation. So we just skip it.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fill_current_oxid_csn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>orioledb</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>,
					<decl><type ref="prev"/><name>toastRel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name></decl>,
					<decl><type ref="prev"/><name>toastOids</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>treeOids</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OTable</name>	   <modifier>*</modifier></type><name>o_table</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>numTreeOids</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>address</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>dbNode</name></name> <operator>==</operator> <name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>toastRel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltoastrelid</name></name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toastOids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toastOids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name><name>toastRel</name><operator>-&gt;</operator><name>rd_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>toastOids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name><name>toastRel</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>o_table</name> <operator>=</operator> <call><name>o_tables_get</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>toast_oids</name></name> <operator>=</operator> <name>toastOids</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name>primary_compress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>primary_compress</name> <operator>=</operator> <name>compress</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OCompressIsValid</name><argument_list>(<argument><expr><name>toast_compress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>toast_compress</name> <operator>=</operator> <name>compress</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>default_compress</name></name> <operator>=</operator> <name>compress</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>toast_compress</name></name> <operator>=</operator> <name>toast_compress</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_table</name><operator>-&gt;</operator><name>primary_compress</name></name> <operator>=</operator> <name>primary_compress</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_tables_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>o_tables_after_update</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><name>oxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>checkpoint_state</name><operator>-&gt;</operator><name>oTablesAddLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>treeOids</name> <operator>=</operator> <call><name>o_table_make_index_oids</name><argument_list>(<argument><expr><name>o_table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_undo_create_relnode</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>treeOids</name></expr></argument>, <argument><expr><name>numTreeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>treeOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>toastRel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>address</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * o_create_ctas_internal
 *
 * Internal utility used for the creation of the definition of a relation
 * created via CREATE TABLE AS or a materialized view.  Caller needs to
 * provide a list of attributes (ColumnDef nodes).
 */</comment>
<function><type><specifier>static</specifier> <name>ObjectAddress</name></type>
<name>o_create_ctas_internal</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>attrList</name></decl></parameter>, <parameter><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>cstmt</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_matview</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>relkind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>intoRelationAddr</name></decl>;</decl_stmt>

	<comment type="block">/* This code supports both CREATE TABLE AS and CREATE MATERIALIZED VIEW */</comment>
	<expr_stmt><expr><name>is_matview</name> <operator>=</operator> <operator>(</operator><name><name>into</name><operator>-&gt;</operator><name>viewQuery</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>relkind</name> <operator>=</operator> <ternary><condition><expr><name>is_matview</name></expr> ?</condition><then> <expr><name>RELKIND_MATVIEW</name></expr> </then><else>: <expr><name>RELKIND_RELATION</name></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create the target relation by faking up a CREATE TABLE parsetree and
	 * passing it to DefineRelation.
	 */</comment>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>relation</name></name> <operator>=</operator> <name><name>into</name><operator>-&gt;</operator><name>rel</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>tableElts</name></name> <operator>=</operator> <name>attrList</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>inhRelations</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>ofTypename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>constraints</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name><name>into</name><operator>-&gt;</operator><name>options</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>oncommit</name></name> <operator>=</operator> <name><name>into</name><operator>-&gt;</operator><name>onCommit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>tablespacename</name></name> <operator>=</operator> <name><name>into</name><operator>-&gt;</operator><name>tableSpaceName</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>if_not_exists</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstmt</name><operator>-&gt;</operator><name>accessMethod</name></name> <operator>=</operator> <name><name>into</name><operator>-&gt;</operator><name>accessMethod</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>intoRelationAddr</name> <operator>=</operator> <call><name>o_define_relation</name><argument_list>(<argument><expr><name>cstmt</name></expr></argument>, <argument><expr><name>relkind</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the "view" part of a materialized view. */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_matview</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* StoreViewQuery scribbles on tree, so make a copy */</comment>
		<decl_stmt><decl><type><name>Query</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>viewQuery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>StoreViewQuery</name><argument_list>(<argument><expr><name><name>intoRelationAddr</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>intoRelationAddr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * create_ctas_nodata
 *
 * Create CTAS or materialized view when WITH NO DATA is used, starting from
 * the targetlist of the SELECT or view definition.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_ctas_nodata</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>, <parameter><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>attrList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>t</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Build list of ColumnDefs from non-junk elements of the tlist.  If a
	 * column name list was specified in CREATE TABLE AS, override the column
	 * names in the query.  (Too few column names are OK, too many are not.)
	 */</comment>
	<expr_stmt><expr><name>attrList</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>colNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>t</argument>, <argument>tlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name> <init>= <expr><operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tle</name><operator>-&gt;</operator><name>resjunk</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ColumnDef</name>  <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>colname</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>lc</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>colNames</name></name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>colname</name> <operator>=</operator> <name><name>tle</name><operator>-&gt;</operator><name>resname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>colname</name></expr></argument>,
								<argument><expr><call><name>exprType</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>exprTypmod</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>exprCollation</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * It's possible that the column is of a collatable type but the
			 * collation could not be resolved, so double-check.  (We must
			 * check this here because DefineRelation would adopt the type's
			 * default collation rather than complaining.)
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>collOid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<call><name>type_is_collatable</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>typeName</name><operator>-&gt;</operator><name>typeOid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INDETERMINATE_COLLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no collation was derived for column \"%s\" with collatable type %s"</literal></expr></argument>,
								<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>,
								<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>typeName</name><operator>-&gt;</operator><name>typeOid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use the COLLATE clause to set the collation explicitly."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>attrList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>attrList</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>lc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too many column names were specified"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Create the relation definition using the ColumnDef list */</comment>
	<expr_stmt><expr><call><name>o_create_ctas_internal</name><argument_list>(<argument><expr><name>attrList</name></expr></argument>, <argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * o_intorel_startup --- executor startup
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_intorel_startup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>o_data_receiver</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>o_data_receiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name> <init>= <expr><name><name>myState</name><operator>-&gt;</operator><name>into</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_matview</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>attrList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>intoRelationAddr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>intoRelationDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>into</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* else somebody forgot to set it */</comment>

	<comment type="block">/* This code supports both CREATE TABLE AS and CREATE MATERIALIZED VIEW */</comment>
	<expr_stmt><expr><name>is_matview</name> <operator>=</operator> <operator>(</operator><name><name>into</name><operator>-&gt;</operator><name>viewQuery</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Build column definitions using "pre-cooked" type and collation info. If
	 * a column name list was specified in CREATE TABLE AS, override the
	 * column names derived from the query.  (Too few column names are OK, too
	 * many are not.)
	 */</comment>
	<expr_stmt><expr><name>attrList</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>colNames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>attnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>attnum</name> <operator>&lt;</operator> <name><name>typeinfo</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attribute</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>typeinfo</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ColumnDef</name>  <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>colname</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>lc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name><name>into</name><operator>-&gt;</operator><name>colNames</name></name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>makeColumnDef</name><argument_list>(<argument><expr><name>colname</name></expr></argument>,
							<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
							<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
							<argument><expr><name><name>attribute</name><operator>-&gt;</operator><name>attcollation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * It's possible that the column is of a collatable type but the
		 * collation could not be resolved, so double-check.  (We must check
		 * this here because DefineRelation would adopt the type's default
		 * collation rather than complaining.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>collOid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>type_is_collatable</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>typeName</name><operator>-&gt;</operator><name>typeOid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INDETERMINATE_COLLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no collation was derived for column \"%s\" with collatable type %s"</literal></expr></argument>,
							<argument><expr><name><name>col</name><operator>-&gt;</operator><name>colname</name></name></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>col</name><operator>-&gt;</operator><name>typeName</name><operator>-&gt;</operator><name>typeOid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use the COLLATE clause to set the collation explicitly."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>attrList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>attrList</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>lc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too many column names were specified"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Actually create the target table
	 */</comment>
	<expr_stmt><expr><name>intoRelationAddr</name> <operator>=</operator> <call><name>o_create_ctas_internal</name><argument_list>(<argument><expr><name>attrList</name></expr></argument>, <argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Finally we can open the target table
	 */</comment>
	<expr_stmt><expr><name>intoRelationDesc</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name><name>intoRelationAddr</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make sure the constructed table does not have RLS enabled.
	 *
	 * check_enable_rls() will ereport(ERROR) itself if the user has requested
	 * something invalid, and otherwise will return RLS_ENABLED if RLS should
	 * be enabled here.  We don't actually support that currently, so throw
	 * our own ereport(ERROR) if that happens.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>check_enable_rls</name><argument_list>(<argument><expr><name><name>intoRelationAddr</name><operator>.</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>RLS_ENABLED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"policies not yet implemented for this command"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Tentatively mark the target as populated, if it's a matview and we're
	 * going to fill it; otherwise, no change needed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_matview</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>into</name><operator>-&gt;</operator><name>skipData</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetMatViewPopulatedState</name><argument_list>(<argument><expr><name>intoRelationDesc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Fill private fields of myState for use by later routines
	 */</comment>
	<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>rel</name></name> <operator>=</operator> <name>intoRelationDesc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>reladdr</name></name> <operator>=</operator> <name>intoRelationAddr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>output_cid</name></name> <operator>=</operator> <call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>ti_options</name></name> <operator>=</operator> <name>TABLE_INSERT_SKIP_FSM</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If WITH NO DATA is specified, there is no need to set up the state for
	 * bulk inserts as there are no tuples to insert.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>into</name><operator>-&gt;</operator><name>skipData</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>bistate</name></name> <operator>=</operator> <call><name>GetBulkInsertState</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>bistate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>estate</name></name> <operator>=</operator> <call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Valid smgr_targblock implies something already wrote to the relation.
	 * This may be harmless, but this function hasn't planned for it.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationGetTargetBlock</name><argument_list>(<argument><expr><name>intoRelationDesc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>InvalidBlockNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * o_intorel_receive --- receive one tuple
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>o_intorel_receive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>o_data_receiver</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>o_data_receiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Nothing to insert if WITH NO DATA is specified. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>myState</name><operator>-&gt;</operator><name>into</name><operator>-&gt;</operator><name>skipData</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Note that the input slot might not be of the type of the target
		 * relation. That's supported by table_tuple_insert(), but slightly
		 * less efficient than inserting with the right slot - but the
		 * alternative would be to copy into a slot of the right type, which
		 * would not be cheap either. This also doesn't allow accessing per-AM
		 * data (say a tuple's xmin), but since we don't do that here...
		 */</comment>
		<expr_stmt><expr><call><name>table_extended_tuple_insert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>,
									<argument><expr><name>slot</name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>,
									<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>output_cid</name></name></expr></argument>,
									<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>ti_options</name></name></expr></argument>,
									<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>bistate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We know this is a newly created relation, so there are no indexes */</comment>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * o_intorel_shutdown --- executor end
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_intorel_shutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>o_data_receiver</name> <modifier>*</modifier></type><name>myState</name> <init>= <expr><operator>(</operator><name>o_data_receiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>into</name> <init>= <expr><name><name>myState</name><operator>-&gt;</operator><name>into</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>into</name><operator>-&gt;</operator><name>skipData</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FreeBulkInsertState</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>bistate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>table_finish_bulk_insert</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>myState</name><operator>-&gt;</operator><name>ti_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* close rel, but keep lock until commit */</comment>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>myState</name><operator>-&gt;</operator><name>rel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name><name>myState</name><operator>-&gt;</operator><name>estate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * o_intorel_destroy --- release DestReceiver object
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>o_intorel_destroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * OCreateIntoRelDestReceiver -- create a suitable DestReceiver object
 */</comment>
<function><type><specifier>static</specifier> <name>DestReceiver</name> <modifier>*</modifier></type>
<name>OCreateIntoRelDestReceiver</name><parameter_list>(<parameter><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>intoClause</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>o_data_receiver</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>o_data_receiver</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>o_data_receiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>o_intorel_receive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>o_intorel_startup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>o_intorel_shutdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>o_intorel_destroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestIntoRel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>into</name></name> <operator>=</operator> <name>intoClause</name></expr>;</expr_stmt>
	<comment type="block">/* other private fields will be set during intorel_startup */</comment>

	<return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>self</name></expr>;</return>
</block_content>}</block></function>
</unit>
