<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/o_range_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * o_range_cache.c
 *		Routines for orioledb range sys cache.
 *
 * range_cache is tree that contains cached range metadata from pg_type.
 *
 * Copyright (c) 2021-2022, OrioleDB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_range_cache.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/sys_trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">150000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogrecovery.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_range.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCache</name> <modifier>*</modifier></type><name>range_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_range_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_range_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									 <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>O_SYS_CACHE_FUNCS</name><argument_list>(<argument><expr><name>range_cache</name></expr></argument>, <argument><expr><name>ORange</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheFuncs</name></type> <name>range_cache_funcs</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>free_entry</name> <operator>=</operator> <name>o_range_cache_free_entry</name></expr>,
	<expr><operator>.</operator><name>fill_entry</name> <operator>=</operator> <name>o_range_cache_fill_entry</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initializes the range sys cache memory.
 */</comment>
<macro><name>O_SYS_CACHE_INIT_FUNC</name><argument_list>(<argument>range_cache</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>keytypes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OIDOID</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>range_cache</name> <operator>=</operator> <call><name>o_create_sys_cache</name><argument_list>(<argument><expr><name>SYS_TREES_RANGE_CACHE</name></expr></argument>,
									 <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
									 <argument><expr><name>TypeOidIndexId</name></expr></argument>, <argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									 <argument><expr><name>keytypes</name></expr></argument>, <argument><expr><name>fastcache</name></expr></argument>,
									 <argument><expr><name>mcxt</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>range_cache_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type>
<name>o_range_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORange</name>	   <modifier>*</modifier></type><name>o_range</name> <init>= <expr><operator>(</operator><name>ORange</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>entry_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typoid</name> <init>= <expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * find typecache entry
	 */</comment>
	<expr_stmt><expr><name>typcache</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>, <argument><expr><name>TYPECACHE_RANGE_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"type %u is not a range type"</literal></expr></argument>, <argument><expr><name>typoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_range</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>o_range</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ORange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>entry_ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_range</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>custom_type_add_if_needed</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>,
							  <argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name><operator>-&gt;</operator><name>type_id</name></name></expr></argument>,
							  <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_type_cache_add_if_needed</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>,
							   <argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name><operator>-&gt;</operator><name>type_id</name></name></expr></argument>,
							   <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_range</name><operator>-&gt;</operator><name>elem_type</name></name> <operator>=</operator> <name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name><operator>-&gt;</operator><name>type_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_range</name><operator>-&gt;</operator><name>rng_collation</name></name> <operator>=</operator> <name><name>typcache</name><operator>-&gt;</operator><name>rng_collation</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_proc_cache_validate_add</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>,
							  <argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>rng_cmp_proc_finfo</name><operator>.</operator><name>fn_oid</name></name></expr></argument>,
							  <argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>rng_collation</name></name></expr></argument>, <argument><expr><literal type="string">"comparison"</literal></expr></argument>,
							  <argument><expr><literal type="string">"range field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_range</name><operator>-&gt;</operator><name>rng_cmp_oid</name></name> <operator>=</operator> <name><name>typcache</name><operator>-&gt;</operator><name>rng_cmp_proc_finfo</name><operator>.</operator><name>fn_oid</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_range_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TypeCacheEntry</name> <modifier>*</modifier></type>
<name>o_range_cmp_hook</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>rngtypid</name></decl></parameter>,
				 <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name> <init>= <expr><operator>(</operator><name>TypeCacheEntry</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>typcache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<name><name>typcache</name><operator>-&gt;</operator><name>type_id</name></name> <operator>!=</operator> <name>rngtypid</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ORange</name>	   <modifier>*</modifier></type><name>o_range</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>o_range</name> <operator>=</operator> <call><name>o_range_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>rngtypid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>,
									   <argument><expr><name><name>range_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>o_range</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>prev_context</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>typcache</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TypeCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>typcache</name><operator>-&gt;</operator><name>type_id</name></name> <operator>=</operator> <name>rngtypid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TypeCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>o_type_cache_fill_info</name><argument_list>(<argument><expr><name><name>o_range</name><operator>-&gt;</operator><name>elem_type</name></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>rngelemtype</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>typcache</name><operator>-&gt;</operator><name>rng_collation</name></name> <operator>=</operator> <name><name>o_range</name><operator>-&gt;</operator><name>rng_collation</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>o_proc_cache_fill_finfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>rng_cmp_proc_finfo</name></name></expr></argument>,
									<argument><expr><name><name>o_range</name><operator>-&gt;</operator><name>rng_cmp_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>typcache</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>prev_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>typcache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>typcache</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A tuple print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_range_cache_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
						<parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ORange</name>	   <modifier>*</modifier></type><name>o_range</name> <init>= <expr><operator>(</operator><name>ORange</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_print</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", elem_type: %u, rng_collation: %d, "</literal>
					 <literal type="string">"rng_cmp_oid: %u)"</literal></expr></argument>,
					 <argument><expr><name><name>o_range</name><operator>-&gt;</operator><name>elem_type</name></name></expr></argument>, <argument><expr><name><name>o_range</name><operator>-&gt;</operator><name>rng_collation</name></name></expr></argument>,
					 <argument><expr><name><name>o_range</name><operator>-&gt;</operator><name>rng_cmp_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
