<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/catalog/o_enum_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * o_enum_cache.c
 *		Routines for orioledb enum and enumoid system caches.
 *
 * enum_cache is TOAST tree that contains cached enum and its values
 * metadata from pg_type.
 * enumoid_cache is tree that contains typeoids for enumoids,
 * that used to get type from enumoid in o_enum_cmp_internal_hook.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/catalog/o_enum_cache.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/o_sys_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">150000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogrecovery.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">140000</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCache</name> <modifier>*</modifier></type><name>enum_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCache</name> <modifier>*</modifier></type><name>enumoid_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_enum_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									<parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>o_enum_cache_serialize_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>,
											<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Pointer</name></type> <name>o_enum_cache_deserialize_entry</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>,
											  <parameter><decl><type><name>Size</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_enum_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_enum_cache_delete_hook</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_enumoid_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									   <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>o_enumoid_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Copied from typecache.c */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>enum_oid</name></decl>;</decl_stmt>		<comment type="block">/* OID of one enum value */</comment>
	<decl_stmt><decl><type><name>float4</name></type>		<name>sort_order</name></decl>;</decl_stmt>		<comment type="block">/* its sort position */</comment>
}</block></struct></type> <name>EnumItem</name>;</typedef>

<comment type="block">/* Copied from typecache.c */</comment>
<typedef>typedef <type><struct>struct <name>TypeCacheEnumData</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>bitmap_base</name></decl>;</decl_stmt>	<comment type="block">/* OID corresponding to bit 0 of bitmapset */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>sorted_values</name></decl>;</decl_stmt>	<comment type="block">/* Set of OIDs known to be in order */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_values</name></decl>;</decl_stmt>		<comment type="block">/* total number of values in enum */</comment>
	<decl_stmt><decl><type><name>EnumItem</name></type>	<name><name>enum_values</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TypeCacheEnumData</name>;</typedef>

<comment type="block">/* Copied fields of TypeCacheEnumData */</comment>
<struct>struct <name>OEnum</name>
<block>{
	<decl_stmt><decl><type><name>OSysCacheKey1</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>bitmap_base</name></decl>;</decl_stmt>	<comment type="block">/* OID corresponding to bit 0 of bitmapset */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>sorted_values</name></decl>;</decl_stmt>	<comment type="block">/* Set of OIDs known to be in order */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_values</name></decl>;</decl_stmt>		<comment type="block">/* total number of values in enum */</comment>
	<decl_stmt><decl><type><name>EnumItem</name>   <modifier>*</modifier></type><name>enum_values</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><call><name>O_SYS_CACHE_FUNCS</name><argument_list>(<argument><expr><name>enum_cache</name></expr></argument>, <argument><expr><name>OEnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>O_SYS_CACHE_FUNCS</name><argument_list>(<argument><expr><name>enumoid_cache</name></expr></argument>, <argument><expr><name>OEnumOid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheFuncs</name></type> <name>enum_cache_funcs</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>free_entry</name> <operator>=</operator> <name>o_enum_cache_free_entry</name></expr>,
	<expr><operator>.</operator><name>fill_entry</name> <operator>=</operator> <name>o_enum_cache_fill_entry</name></expr>,
	<expr><operator>.</operator><name>toast_serialize_entry</name> <operator>=</operator> <name>o_enum_cache_serialize_entry</name></expr>,
	<expr><operator>.</operator><name>toast_deserialize_entry</name> <operator>=</operator> <name>o_enum_cache_deserialize_entry</name></expr>,
	<expr><operator>.</operator><name>delete_hook</name> <operator>=</operator> <name>o_enum_cache_delete_hook</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSysCacheFuncs</name></type> <name>enumoid_cache_funcs</name> <init>=
<expr><block>{
	<expr><operator>.</operator><name>free_entry</name> <operator>=</operator> <name>o_enumoid_cache_free_entry</name></expr>,
	<expr><operator>.</operator><name>fill_entry</name> <operator>=</operator> <name>o_enumoid_cache_fill_entry</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initializes the enum B-tree memory.
 */</comment>
<macro><name>O_SYS_CACHE_INIT_FUNC</name><argument_list>(<argument>enum_cache</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>keytypes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OIDOID</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>enum_cache</name> <operator>=</operator> <call><name>o_create_sys_cache</name><argument_list>(<argument><expr><name>SYS_TREES_ENUM_CACHE</name></expr></argument>,
									<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
									<argument><expr><name>TypeOidIndexId</name></expr></argument>, <argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									<argument><expr><name>keytypes</name></expr></argument>, <argument><expr><name>fastcache</name></expr></argument>,
									<argument><expr><name>mcxt</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>enum_cache_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>O_SYS_CACHE_INIT_FUNC</name><argument_list>(<argument>enumoid_cache</argument>)</argument_list></macro>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>keytypes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>OIDOID</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>enumoid_cache</name> <operator>=</operator> <call><name>o_create_sys_cache</name><argument_list>(<argument><expr><name>SYS_TREES_ENUMOID_CACHE</name></expr></argument>,
									   <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
									   <argument><expr><name>EnumOidIndexId</name></expr></argument>, <argument><expr><name>ENUMOID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									   <argument><expr><name>keytypes</name></expr></argument>, <argument><expr><name>fastcache</name></expr></argument>,
									   <argument><expr><name>mcxt</name></expr></argument>,
									   <argument><expr><operator>&amp;</operator><name>enumoid_cache_funcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>void</name></type>
<name>o_enum_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>prev_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>enum_vals_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEnum</name>	   <modifier>*</modifier></type><name>o_enum</name> <init>= <expr><operator>(</operator><name>OEnum</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>entry_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typoid</name> <init>= <expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>typcache</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>load_enum_cache_data</name><argument_list>(<argument><expr><name>typcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>prev_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>enum_cache</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>enum_vals_len</name> <operator>=</operator> <name><name>typcache</name><operator>-&gt;</operator><name>enumData</name><operator>-&gt;</operator><name>num_values</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EnumItem</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>o_enum</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>			<comment type="block">/* Existed o_enum updated */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name></expr></argument>, <argument><expr><name>enum_vals_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>o_enum</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OEnum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>entry_ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_enum</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>enum_vals_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name> <operator>=</operator> <name><name>typcache</name><operator>-&gt;</operator><name>enumData</name><operator>-&gt;</operator><name>num_values</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>bitmap_base</name></name> <operator>=</operator> <name><name>typcache</name><operator>-&gt;</operator><name>enumData</name><operator>-&gt;</operator><name>bitmap_base</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name> <operator>=</operator> <call><name>bms_copy</name><argument_list>(<argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>enumData</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>EnumItem</name>   <modifier>*</modifier></type><name>o_enum_value</name> <init>= <expr><operator>&amp;</operator><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>typecache_value</name> <init>= <expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>enumData</name><operator>-&gt;</operator><name>enum_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>o_enum_value</name><operator>-&gt;</operator><name>enum_oid</name></name> <operator>=</operator> <name><name>typecache_value</name><operator>-&gt;</operator><name>enum_oid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>o_enum_value</name><operator>-&gt;</operator><name>sort_order</name></name> <operator>=</operator> <name><name>typecache_value</name><operator>-&gt;</operator><name>sort_order</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_enumoid_cache_add_if_needed</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>,
									  <argument><expr><name><name>o_enum_value</name><operator>-&gt;</operator><name>enum_oid</name></name></expr></argument>,
									  <argument><expr><name><name>key</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>typoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>prev_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_enumoid_cache_fill_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name> <modifier>*</modifier></type><name>entry_ptr</name></decl></parameter>, <parameter><decl><type><name>OSysCacheKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OEnumOid</name>   <modifier>*</modifier></type><name>o_enumoid</name> <init>= <expr><operator>(</operator><name>OEnumOid</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>entry_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>typoid</name> <init>= <expr><operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_enumoid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>o_enumoid</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OEnumOid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>entry_ptr</name> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_enumoid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>o_enumoid</name><operator>-&gt;</operator><name>enumtypid</name></name> <operator>=</operator> <operator>*</operator><name>typoid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_enum_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OEnum</name>	   <modifier>*</modifier></type><name>o_enum</name> <init>= <expr><operator>(</operator><name>OEnum</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>o_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_enum_cache_delete_hook</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEnum</name>	   <modifier>*</modifier></type><name>o_enum</name> <init>= <expr><operator>(</operator><name>OEnum</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>enumoid</name> <init>= <expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>enum_oid</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>o_enumoid_cache_delete</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>common</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><name>enumoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_enumoid_cache_free_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_enum_cache_serialize_entry</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEnum</name>	   <modifier>*</modifier></type><name>o_enum</name> <init>= <expr><operator>(</operator><name>OEnum</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_enum</name></expr></argument>,
						   <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>OEnum</name></expr></argument>, <argument><expr><name>sorted_values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument>,
						   <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>Bitmapset</name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name><operator>-&gt;</operator><name>words</name></name></expr></argument>,
						   <argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name><operator>-&gt;</operator><name>nwords</name></name> <operator>*</operator>
						   <sizeof>sizeof<argument_list>(<argument><expr><name>bitmapword</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name></expr></argument>,
						   <argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EnumItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>str</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>str</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pointer</name></type>
<name>o_enum_cache_deserialize_entry</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>ptr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEnum</name>	   <modifier>*</modifier></type><name>o_enum</name> <init>= <expr><operator>(</operator><name>OEnum</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>o_enum</name> <operator>=</operator> <operator>(</operator><name>OEnum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OEnum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>OEnum</name></expr></argument>, <argument><expr><name>sorted_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>o_enum</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>Bitmapset</name></expr></argument>, <argument><expr><name>words</name></expr></argument>)</argument_list></call> <operator>+</operator>
		<operator>(</operator><operator>(</operator><name>Bitmapset</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>nwords</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitmapword</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EnumItem</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>==</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <name>o_enum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TypeCacheEntry</name> <modifier>*</modifier></type>
<name>o_enum_cmp_internal_hook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>enum_oid</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>cur_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>datoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEnum</name>	   <modifier>*</modifier></type><name>o_enum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>prev_context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OEnumOid</name>   <modifier>*</modifier></type><name>enumoid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>o_sys_cache_set_datoid_lsn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>enumoid</name> <operator>=</operator> <call><name>o_enumoid_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name>enum_oid</name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>,
									 <argument><expr><name><name>enumoid_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>o_enum</name> <operator>=</operator> <call><name>o_enum_cache_search</name><argument_list>(<argument><expr><name>datoid</name></expr></argument>, <argument><expr><name><name>enumoid</name><operator>-&gt;</operator><name>enumtypid</name></name></expr></argument>, <argument><expr><name>cur_lsn</name></expr></argument>,
								 <argument><expr><name><name>enum_cache</name><operator>-&gt;</operator><name>nkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>o_enum</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TypeCacheEnumData</name> <modifier>*</modifier></type><name>enumData</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Size</name></type>		<name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>prev_context</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>typcache</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TypeCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>typcache</name><operator>-&gt;</operator><name>type_id</name></name> <operator>=</operator> <name><name>enumoid</name><operator>-&gt;</operator><name>enumtypid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>EnumItem</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>enumData</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>TypeCacheEnumData</name></expr></argument>, <argument><expr><name>enum_values</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>enumData</name><operator>-&gt;</operator><name>bitmap_base</name></name> <operator>=</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>bitmap_base</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>enumData</name><operator>-&gt;</operator><name>sorted_values</name></name> <operator>=</operator> <call><name>bms_copy</name><argument_list>(<argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>sorted_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>enumData</name><operator>-&gt;</operator><name>num_values</name></name> <operator>=</operator> <name><name>o_enum</name><operator>-&gt;</operator><name>num_values</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>enumData</name><operator>-&gt;</operator><name>enum_values</name></name></expr></argument>, <argument><expr><name><name>o_enum</name><operator>-&gt;</operator><name>enum_values</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>typcache</name><operator>-&gt;</operator><name>enumData</name></name> <operator>=</operator> <name>enumData</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>prev_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>typcache</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * A tuple print function for o_print_btree_pages()
 */</comment>
<function><type><name>void</name></type>
<name>o_enumoid_cache_tup_print</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>,
						  <parameter><decl><type><name>OTuple</name></type> <name>tup</name></decl></parameter>, <parameter><decl><type><name>Pointer</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OEnumOid</name>   <modifier>*</modifier></type><name>o_enumoid</name> <init>= <expr><operator>(</operator><name>OEnumOid</name> <operator>*</operator><operator>)</operator> <name><name>tup</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_sys_cache_key_print</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tup</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", %d)"</literal></expr></argument>, <argument><expr><name><name>o_enumoid</name><operator>-&gt;</operator><name>enumtypid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
