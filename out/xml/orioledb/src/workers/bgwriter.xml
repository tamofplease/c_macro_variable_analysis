<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/workers/bgwriter.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bgwriter.c
 *		Routines for background writer process.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/workers/bgwriter.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/undo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/page_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ucm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/stopevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"workers/bgwriter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgwriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/latch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinvaladt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timeout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>IsBGWriter</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_sigterm</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>register_bgwriter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>

	<comment type="block">/* Set up background worker parameters */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_PostmasterStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"orioledb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"bgwriter_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><literal type="string">"orioledb background writer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><literal type="string">"orioledb background writer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>bgwriter_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OPagePool</name>  <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>,
				<decl><type ref="prev"/><name>wake_events</name> <init>= <expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name> <operator>|</operator> <name>WL_TIMEOUT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>need_eviction</name></decl>,
				<decl><type ref="prev"/><name>need_write</name></decl>;</decl_stmt>

	<comment type="block">/* enable timeout for relation lock */</comment>
	<expr_stmt><expr><call><name>RegisterTimeout</name><argument_list>(<argument><expr><name>DEADLOCK_TIMEOUT</name></expr></argument>, <argument><expr><name>CheckDeadLockAlert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* enable relation cache invalidation (remove old OTableDescr) */</comment>
	<expr_stmt><expr><call><name>RelationCacheInitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitCatalogCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SharedInvalBackendInit</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* show the bgwriter in pg_stat_activity, used for tests */</comment>
	<expr_stmt><expr><call><name>InitializeSessionUserIdStandalone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>pgstat_beinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>pgstat_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>pgstat_bestart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetProcessingMode</name><argument_list>(<argument><expr><name>NormalProcessing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* catch SIGTERM signal for reason to not interupt background writing */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>handle_sigterm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"orioledb background writer started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsBGWriter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>debug_disable_bgwriter</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"orioledb background writer stopped: orioledb.debug_disable_bgwriter = True"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>CurTransactionContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
												  <argument><expr><literal type="string">"orioledb bgwriter current transaction context"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TopTransactionContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
												  <argument><expr><literal type="string">"orioledb bgwriter top transaction context"</literal></expr></argument>,
												  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CurTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>true</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OPagePoolType</name></type> <name>poolType</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>UndoLocation</name></type> <name>lastUsedLocation</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>UndoLocation</name></type> <name>writeInProgressLocation</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>shutdown_requested</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Sleep until we are signaled or it's time for another
			 * checkpoint.
			 */</comment>
			<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>wake_events</name></expr></argument>,
						   <argument><expr><name>BgWriterDelay</name></expr></argument>,
						   <argument><expr><name>WAIT_EVENT_BGWRITER_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<for>for <control>(<init><expr><name>poolType</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>poolType</name> <operator>&lt;</operator> <name>OPagePoolTypesCount</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>shutdown_requested</name></expr>;</condition> <incr><expr><name>poolType</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>get_ppool</name><argument_list>(<argument><expr><name>poolType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>need_eviction</name> <operator>=</operator> <call><name>ppool_free_pages_count</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>need_write</name> <operator>=</operator> <call><name>ppool_dirty_pages_count</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>need_eviction</name> <operator>||</operator> <name>need_write</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

					<while>while <condition>(<expr><name>need_eviction</name> <operator>||</operator> <name>need_write</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ppool_run_clock</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>need_eviction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shutdown_requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>bgwriter_lru_maxpages</name> <operator>*</operator> <operator>(</operator><name>BLCKSZ</name> <operator>/</operator> <name>ORIOLEDB_BLCKSZ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><name>shutdown_requested</name></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>

						<expr_stmt><expr><name>need_eviction</name> <operator>=</operator> <call><name>ppool_free_pages_count</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">20</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>need_write</name> <operator>=</operator> <call><name>ppool_dirty_pages_count</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					</block_content>}</block></while>

					<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>CurTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shutdown_requested</name> <operator>&amp;&amp;</operator> <call><name>ucm_epoch_needs_shift</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>ucm_epoch_needs_shift</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ucm_epoch_shift</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>ucm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name>writeInProgressLocation</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>undo_meta</name><operator>-&gt;</operator><name>writeInProgressLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastUsedLocation</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>undo_meta</name><operator>-&gt;</operator><name>lastUsedLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>writeInProgressLocation</name> <operator>+</operator> <name>undo_circular_buffer_size</name> <operator>&lt;</operator>
				<name>lastUsedLocation</name> <operator>+</operator> <name>undo_circular_buffer_size</name> <operator>/</operator> <literal type="number">20</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>UndoLocation</name></type> <name>minProcReservedLocation</name> <init>= <expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>undo_meta</name><operator>-&gt;</operator><name>minProcReservedLocation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>UndoLocation</name></type> <name>targetLocation</name> <init>= <expr><name>lastUsedLocation</name> <operator>-</operator> <operator>(</operator><literal type="number">19</literal> <operator>*</operator> <name>undo_circular_buffer_size</name><operator>)</operator> <operator>/</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>targetLocation</name> <operator>&lt;</operator> <name>minProcReservedLocation</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>write_undo</name><argument_list>(<argument><expr><name>targetLocation</name></expr></argument>, <argument><expr><name>minProcReservedLocation</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"orioledb bgwriter is shut down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LockReleaseSession</name><argument_list>(<argument><expr><name>DEFAULT_LOCKMETHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
