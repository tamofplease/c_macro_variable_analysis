<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/transam/oxid.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * oxid.c
 *		Management of OrioleDB transaction identifiers.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/transam/oxid.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/o_buffers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinvaladt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XID_FILE_SIZE</name></cpp:macro> <cpp:value>(0x1000000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>COMMITSEQNO_SPECIAL_BIT</name></cpp:macro> <cpp:value>(UINT64CONST(1) &lt;&lt; 63)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMITSEQNO_SPECIAL_COMMITTING_BIT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMITSEQNO_IS_SPECIAL</name><parameter_list>(<parameter><type><name>csn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((csn) &amp; COMMITSEQNO_SPECIAL_BIT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMITSEQNO_GET_LXID</name><parameter_list>(<parameter><type><name>csn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((csn) &gt;&gt; 31) &amp; 0xFFFFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMITSEQNO_GET_PROCNUM</name><parameter_list>(<parameter><type><name>csn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((csn) &gt;&gt; 15) &amp; 0xFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMITSEQNO_MAKE_SPECIAL</name><parameter_list>(<parameter><type><name>procnum</name></type></parameter>, <parameter><type><name>lxid</name></type></parameter>, <parameter><type><name>committing</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(COMMITSEQNO_SPECIAL_BIT | ((uint64) procnum &lt;&lt; 15) | \
	 ((uint64) lxid &lt;&lt; 31) | \
	 ((committing) ? COMMITSEQNO_SPECIAL_COMMITTING_BIT : 0))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>OXid</name></type> <name>curOxid</name> <init>= <expr><name>InvalidOXid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pg_atomic_uint64</name> <modifier>*</modifier></type><name>xidBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LocalTransactionId</name></type> <name>curLocalXid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>XidMeta</name>    <modifier>*</modifier></type><name>xid_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>OBuffersDesc</name></type> <name>buffersDesc</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>singleFileSize</name> <operator>=</operator> <name>XID_FILE_SIZE</name></expr>,
	<expr><operator>.</operator><name>filenameTemplate</name> <operator>=</operator> <name>ORIOLEDB_DATA_DIR</name> <literal type="string">"/%02X%08X.xidmap"</literal></expr>,
	<expr><operator>.</operator><name>groupCtlTrancheName</name> <operator>=</operator> <literal type="string">"xidBuffersGroupCtlTranche"</literal></expr>,
	<expr><operator>.</operator><name>bufferCtlTrancheName</name> <operator>=</operator> <literal type="string">"xidBuffersCtlTranche"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>advance_global_xmin</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>newXid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Size</name></type>
<name>oxid_shmem_needs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>buffersDesc</name><operator>.</operator><name>buffersCount</name></name> <operator>=</operator> <name>xid_buffers_count</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XidMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>xid_circular_buffer_size</name></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>o_buffers_shmem_needs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>oxid_init_shmem</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>found</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>xid_meta</name> <operator>=</operator> <operator>(</operator><name>XidMeta</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XidMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xidBuffer</name> <operator>=</operator> <operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>xid_circular_buffer_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_atomic_uint64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>o_buffers_shmem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>		<name>i</name></decl>;</decl_stmt>

		<comment type="block">/* xid_meta fields are initialized in checkpoint_shmem_init() */</comment>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>xid_circular_buffer_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>COMMITSEQNO_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapTrancheId</name></name> <operator>=</operator> <call><name>LWLockNewTrancheId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>,
						 <argument><expr><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapTrancheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Undo positions are initialized in checkpoint_shmem_init() */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapTrancheId</name></name></expr></argument>,
						  <argument><expr><literal type="string">"OXidMapWriteTranche"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the csn value for particular oxid.
 */</comment>
<function><type><name>void</name></type>
<name>set_oxid_csn</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>oldCsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>writeInProgressXmin</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldCsn</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>writeInProgressXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&gt;=</operator> <name>writeInProgressXmin</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_compare_exchange_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>oldCsn</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oldCsn</name> <operator>!=</operator> <name>COMMITSEQNO_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We assume that nobody could change the csn value concurrently.
		 * Thus, it could be only wiped out from the circular buffer to
		 * o_buffers.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Wait for the concurrent write operation if needed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_buffers_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>csn</name></expr></argument>,
					<argument><expr><name>oxid</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read csn of given xid from xidmap.
 */</comment>
<function><type><specifier>static</specifier> <name>CommitSeqNo</name></type>
<name>map_oxid_csn</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>recovery_map_oxid_csn</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>csn</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Optimisticly try to read csn from circular buffer */</comment>
	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Did we manage to read the correct csn? */</comment>
	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>csn</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Wait for the concurrent write operation if needed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>o_buffers_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>, <argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name>csn</name></expr></argument>,
				   <argument><expr><name>oxid</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Recheck if globalXmin was advanced concurrently */</comment>
	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>globalXmin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>COMMITSEQNO_FROZEN</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>csn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write some data from circular buffer to o_buffers
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_xidsmap</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>targetXmax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>,
				<decl><type ref="prev"/><name>xmin</name></decl>,
				<decl><type ref="prev"/><name>xmax</name></decl>,
				<decl><type ref="prev"/><name>lastWrittenXmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bufferLength</name> <init>= <expr><name>ORIOLEDB_BLCKSZ</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name><name>buffer</name><index>[<expr><name>ORIOLEDB_BLCKSZ</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Get the xidmap range to write.
	 */</comment>
	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xmax</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xid_circular_buffer_size</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>,
			   <argument><expr><name>targetXmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xmax</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>, <argument><expr><name>xmin</name> <operator>+</operator> <name>xid_circular_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xmax</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>, <argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>oxid</name> <operator>=</operator> <name>xmin</name></expr>;</init> <condition><expr><name>oxid</name> <operator>&lt;</operator> <name>xmax</name></expr>;</condition> <incr><expr><name>oxid</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>COMMITSEQNO_FROZEN</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>xmax</name> <operator>=</operator> <name>oxid</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xmin</name> <operator>==</operator> <name>xmax</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>xmax</name> <operator>&gt;</operator> <name>xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lastWrittenXmin</name> <operator>=</operator> <name>xmin</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>oxid</name> <operator>=</operator> <name>xmin</name></expr>;</init> <condition><expr><name>oxid</name> <operator>&lt;</operator> <name>xmax</name></expr>;</condition> <incr><expr><name>oxid</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>%</operator> <name>bufferLength</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>oxid</name> <operator>&gt;</operator> <name>lastWrittenXmin</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>o_buffers_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
							<argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>lastWrittenXmin</name> <operator>%</operator> <name>bufferLength</name></expr>]</index></name></expr></argument>,
							<argument><expr><name>lastWrittenXmin</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							<argument><expr><operator>(</operator><name>oxid</name> <operator>-</operator> <name>lastWrittenXmin</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastWrittenXmin</name> <operator>=</operator> <name>oxid</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>bufferLength</name></expr>]</index></name> <operator>=</operator> <call><name>pg_atomic_exchange_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>,
															 <argument><expr><name>COMMITSEQNO_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&gt;</operator> <name>lastWrittenXmin</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>o_buffers_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
						<argument><expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>lastWrittenXmin</name> <operator>%</operator> <name>bufferLength</name></expr>]</index></name></expr></argument>,
						<argument><expr><name>lastWrittenXmin</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						<argument><expr><operator>(</operator><name>oxid</name> <operator>-</operator> <name>lastWrittenXmin</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>advance_global_xmin</name><argument_list>(<argument><expr><name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sync given range of xidmap with disk.
 */</comment>
<function><type><name>void</name></type>
<name>fsync_xidmap_range</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>xmin</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>xmax</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>wait_event_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>xmax</name> <operator>&gt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>LWLockAcquireOrWait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>write_xidsmap</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>o_buffers_sync</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
				   <argument><expr><name>xmin</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				   <argument><expr><name>xmax</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				   <argument><expr><name>wait_event_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Wait particular oxid to finish or oxid_notify() call.  Returns true if
 * oxid was finished.
 */</comment>
<function><type><name>bool</name></type>
<name>wait_for_oxid</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>procnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XidVXidMapElement</name> <modifier>*</modifier></type><name>vxidElem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VirtualTransactionId</name></type> <name>vxid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>map_oxid_csn</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>procnum</name> <operator>=</operator> <call><name>COMMITSEQNO_GET_PROCNUM</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vxidElem</name> <operator>=</operator> <operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>procnum</name></expr>]</index></name><operator>.</operator><name><name>vxids</name><index>[<expr><call><name>COMMITSEQNO_GET_LXID</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>PROC_XID_ARRAY_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>vxid</name> <operator>=</operator> <name><name>vxidElem</name><operator>-&gt;</operator><name>vxid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vxidElem</name><operator>-&gt;</operator><name>oxid</name></name> <operator>!=</operator> <name>oxid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If transaction isn't already present in its process map, then it
		 * must be concurrently gone.
		 */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VirtualTransactionIdIsValid</name><argument_list>(<argument><expr><name>vxid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>VirtualXactLock</name><argument_list>(<argument><expr><name>vxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Notify wait_for_oxid() caller only if it is waiting for current process.
 */</comment>
<function><type><name>void</name></type>
<name>oxid_notify</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGPROC</name>	   <modifier>*</modifier></type><name>proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LOCKTAG</name></type>		<name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VirtualTransactionId</name></type> <name>vxid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>procnum</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>map_oxid_csn</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>procnum</name> <operator>=</operator> <call><name>COMMITSEQNO_GET_PROCNUM</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>GetPGProcByNumber</name><argument_list>(<argument><expr><name>procnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vxid</name><operator>.</operator><name>localTransactionId</name></name> <operator>=</operator> <name><name>MyProc</name><operator>-&gt;</operator><name>lxid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vxid</name><operator>.</operator><name>backendId</name></name> <operator>=</operator> <name>MyBackendId</name></expr>;</expr_stmt>

	<comment type="block">/* ensure that it is waiting for us */</comment>
	<expr_stmt><expr><call><name>SET_LOCKTAG_VIRTUALTRANSACTION</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>vxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">140000</literal></expr></cpp:if>
		<expr><name><name>proc</name><operator>-&gt;</operator><name>waitStatus</name></name> <operator>==</operator> <name>PROC_WAIT_STATUS_WAITING</name> <operator>&amp;&amp;</operator>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<name><name>proc</name><operator>-&gt;</operator><name>waitStatus</name></name> <operator>==</operator> <name>STATUS_WAITING</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>locktag_field1</name></name> <operator>==</operator> <name><name>tag</name><operator>.</operator><name>locktag_field1</name></name> <operator>&amp;&amp;</operator>
		<name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>locktag_field2</name></name> <operator>==</operator> <name><name>tag</name><operator>.</operator><name>locktag_field2</name></name> <operator>&amp;&amp;</operator>
		<name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>locktag_field3</name></name> <operator>==</operator> <name><name>tag</name><operator>.</operator><name>locktag_field3</name></name> <operator>&amp;&amp;</operator>
		<name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>locktag_field4</name></name> <operator>==</operator> <name><name>tag</name><operator>.</operator><name>locktag_field4</name></name> <operator>&amp;&amp;</operator>
		<name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>locktag_lockmethodid</name></name> <operator>==</operator> <name><name>tag</name><operator>.</operator><name>locktag_lockmethodid</name></name> <operator>&amp;&amp;</operator>
		<name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>locktag_type</name></name> <operator>==</operator> <name><name>tag</name><operator>.</operator><name>locktag_type</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * It's a hack. We can not just release lock because VirtualXactLock()
		 * used in critical postgres code. We must release it only for the
		 * specific backend.
		 */</comment>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>hashcode</name> <init>= <expr><call><name>LockTagHashCode</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>waitLock</name><operator>-&gt;</operator><name>tag</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LWLock</name>	   <modifier>*</modifier></type><name>partitionLock</name> <init>= <expr><call><name>LockHashPartitionLock</name><argument_list>(<argument><expr><name>hashcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * No need to acquire the lock before check because the backend can be
		 * unlocked only by this code.
		 */</comment>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>partitionLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RemoveFromWaitQueue</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>hashcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>waitStatus</name></name> <operator>=</operator> <name>STATUS_OK</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SendProcSignal</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>PROCSIG_NOTIFY_INTERRUPT</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>backendId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>partitionLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>VirtualXactLock</name><argument_list>(<argument><expr><name>vxid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Loop over oProcData[] and update xid_meta accordingly.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>advance_global_xmin</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>newXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>globalXmin</name></decl>,
				<decl><type ref="prev"/><name>prevGlobalXmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>writtenXmin</name></decl>,
				<decl><type ref="prev"/><name>writeInProgressXmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>oldCleanedXmin</name></decl>,
				<decl><type ref="prev"/><name>oldCheckpointXmin</name></decl>,
				<decl><type ref="prev"/><name>oldCheckpointXmax</name></decl>,
				<decl><type ref="prev"/><name>newCheckpointXmin</name></decl>,
				<decl><type ref="prev"/><name>newCheckpointXmax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>doCleanup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>newXid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>lastXidWhenUpdatedGlobalXmin</name></name></expr></argument>, <argument><expr><name>newXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>globalXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_procs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>xmin</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>xmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>xmin</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>xmin</name> <operator>&lt;</operator> <name>globalXmin</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>globalXmin</name> <operator>=</operator> <name>xmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>prevGlobalXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>globalXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Sometimes, xmin of individual process can go backwards.  However, xids
	 * in the shift should be never accessed.  We never advance globalXmin
	 * backwards.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>globalXmin</name> <operator>&gt;</operator> <name>prevGlobalXmin</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>globalXmin</name></name></expr></argument>, <argument><expr><name>globalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check if we can update writtenXmin without actual writing.
	 */</comment>
	<expr_stmt><expr><name>writtenXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>writeInProgressXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>writtenXmin</name> <operator>==</operator> <name>writeInProgressXmin</name> <operator>&amp;&amp;</operator> <name>writtenXmin</name> <operator>&lt;</operator> <name>globalXmin</name> <operator>&amp;&amp;</operator>
		<call><name>LWLockConditionalAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>globalXmin</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>globalXmin</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writeInProgressXmin</name></name></expr></argument>, <argument><expr><name>globalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>oxid</name> <operator>=</operator> <name>writtenXmin</name></expr>;</init> <condition><expr><name>oxid</name> <operator>&lt;</operator> <name>globalXmin</name></expr>;</condition> <incr><expr><name>oxid</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>oxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>,
								<argument><expr><name>COMMITSEQNO_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>, <argument><expr><name>globalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>oldCleanedXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>cleanedXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldCheckpointXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>cleanedCheckpointXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldCheckpointXmax</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>cleanedCheckpointXmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>newCheckpointXmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>checkpointRetainXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>newCheckpointXmax</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>checkpointRetainXmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldCleanedXmin</name> <operator>!=</operator> <name>globalXmin</name> <operator>||</operator>
		<name>oldCheckpointXmin</name> <operator>!=</operator> <name>newCheckpointXmin</name> <operator>||</operator>
		<name>oldCheckpointXmax</name> <operator>!=</operator> <name>newCheckpointXmax</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>cleanedCheckpointXmin</name></name></expr></argument>, <argument><expr><name>newCheckpointXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>cleanedCheckpointXmax</name></name></expr></argument>, <argument><expr><name>newCheckpointXmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>cleanedXmin</name></name></expr></argument>, <argument><expr><name>globalXmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>doCleanup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xminMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>doCleanup</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>		<name>xidsPerFile</name> <init>= <expr><name>XID_FILE_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommitSeqNo</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>oldCleanedNum</name> <init>= <expr><name>oldCleanedXmin</name> <operator>/</operator> <name>xidsPerFile</name></expr></init></decl>,
					<decl><type ref="prev"/><name>newCleanedNum</name> <init>= <expr><name>globalXmin</name> <operator>/</operator> <name>xidsPerFile</name></expr></init></decl>,
					<decl><type ref="prev"/><name>oldCheckpointXminNum</name> <init>= <expr><name>oldCheckpointXmin</name> <operator>/</operator> <name>xidsPerFile</name></expr></init></decl>,
					<decl><type ref="prev"/><name>oldCheckpointXmaxNum</name> <init>= <expr><name>oldCheckpointXmax</name> <operator>/</operator> <name>xidsPerFile</name></expr></init></decl>,
					<decl><type ref="prev"/><name>newCheckpointXminNum</name> <init>= <expr><name>newCheckpointXmin</name> <operator>/</operator> <name>xidsPerFile</name></expr></init></decl>,
					<decl><type ref="prev"/><name>newCheckpointXmaxNum</name> <init>= <expr><name>newCheckpointXmax</name> <operator>/</operator> <name>xidsPerFile</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>oldCheckpointXmaxNum</name> <operator>%</operator> <name>xidsPerFile</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldCheckpointXmaxNum</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>newCheckpointXmaxNum</name> <operator>%</operator> <name>xidsPerFile</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>newCheckpointXmaxNum</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>o_buffers_unlink_files_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
									 <argument><expr><name>oldCheckpointXminNum</name></expr></argument>,
									 <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>oldCheckpointXmaxNum</name></expr></argument>,
										 <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>newCheckpointXminNum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
											 <argument><expr><name>newCleanedNum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_buffers_unlink_files_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
									 <argument><expr><call><name>Max</name><argument_list>(<argument><expr><name>oldCheckpointXminNum</name></expr></argument>,
										 <argument><expr><name>newCheckpointXmaxNum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>oldCheckpointXmaxNum</name></expr></argument>,
										 <argument><expr><name>newCleanedNum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_buffers_unlink_files_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
									 <argument><expr><name>oldCleanedNum</name></expr></argument>,
									 <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>newCheckpointXminNum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
										 <argument><expr><name>newCleanedNum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>o_buffers_unlink_files_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buffersDesc</name></expr></argument>,
									 <argument><expr><call><name>Max</name><argument_list>(<argument><expr><name>oldCleanedNum</name></expr></argument>,
										 <argument><expr><name>newCheckpointXmaxNum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name>newCleanedNum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extends xidmap to given value if needed.  New values are filled with
 * COMMITSEQNO_INPROGRESS value.  Used during recovery when procnum from xidmap
 * isn't used (transaction doesn't belong to particular pid).
 *
 * This function is intended to be only called by main recovery process.  So,
 * to locks needed to prevent concurrent execution of the this function by
 * another process.
 */</comment>
<function><type><name>void</name></type>
<name>advance_oxids</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>new_xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>xid</name></decl>,
				<decl><type ref="prev"/><name>xmax</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>new_xid</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We might need to extend xidmap more than xid_circular_buffer_size.  So,
	 * we need a loop here.
	 */</comment>
	<while>while <condition>(<expr><name>new_xid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>advance_global_xmin</name><argument_list>(<argument><expr><name>new_xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Write some xids out of circular buffer if needed. */</comment>
		<if_stmt><if>if <condition>(<expr><name>new_xid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xid_circular_buffer_size</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>LWLockAcquireOrWait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>write_xidsmap</name><argument_list>(<argument><expr><name>new_xid</name> <operator>-</operator> <name>xid_circular_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Fill xidmap in circular buffer. */</comment>
		<expr_stmt><expr><name>xid</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>xmax</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>new_xid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xid_circular_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init>;</init> <condition><expr><name>xid</name> <operator>&lt;</operator> <name>xmax</name></expr>;</condition> <incr><expr><name>xid</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>xid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>,
								<argument><expr><name>COMMITSEQNO_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
 * Get curent OrioleDB xid (oxid).  Assign new oxid it's not done yet.
 */</comment>
<function><type><name>OXid</name></type>
<name>get_current_oxid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>recovery_oxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>recovery_oxid</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>newOxid</name> <init>= <expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>XidVXidMapElement</name> <modifier>*</modifier></type><name>vxidElem</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Advance xmin every 10th part of circular buffer.  That should
		 * prevent unnecessry circular buffer overrun.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>newOxid</name> <operator>&gt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>lastXidWhenUpdatedGlobalXmin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xid_circular_buffer_size</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>advance_global_xmin</name><argument_list>(<argument><expr><name>newOxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Write some xids out of circular buffer if needed.  We always keep
		 * one COMMITSEQNO_FROZEN in circular buffers as a delimited beween
		 * the future and the past.  This helps protect runXmin from growing
		 * bigger than nextXid.
		 */</comment>
		<while>while <condition>(<expr><name>newOxid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xid_circular_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>advance_global_xmin</name><argument_list>(<argument><expr><name>newOxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>newOxid</name> <operator>&gt;=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>writtenXmin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>xid_circular_buffer_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>LWLockAcquireOrWait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>write_xidsmap</name><argument_list>(<argument><expr><name>newOxid</name> <operator>-</operator> <name>xid_circular_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>xidMapWriteLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<comment type="block">/*
		 * Make new xidmap item and write it to the circular buffer.
		 */</comment>
		<expr_stmt><expr><name>curLocalXid</name> <operator>=</operator> <operator>++</operator><operator>(</operator><call><name>GET_CUR_PROCDATA</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>lastLXid</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>vxidElem</name> <operator>=</operator> <operator>&amp;</operator><call><name>GET_CUR_PROCDATA</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>vxids</name><index>[<expr><name>curLocalXid</name> <operator>%</operator> <name>PROC_XID_ARRAY_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>vxidElem</name><operator>-&gt;</operator><name>oxid</name></name> <operator>=</operator> <name>newOxid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vxidElem</name><operator>-&gt;</operator><name>vxid</name><operator>.</operator><name>backendId</name></name> <operator>=</operator> <name><name>MyProc</name><operator>-&gt;</operator><name>backendId</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vxidElem</name><operator>-&gt;</operator><name>vxid</name><operator>.</operator><name>localTransactionId</name></name> <operator>=</operator> <name><name>MyProc</name><operator>-&gt;</operator><name>lxid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>newOxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>COMMITSEQNO_FROZEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xidBuffer</name><index>[<expr><name>newOxid</name> <operator>%</operator> <name>xid_circular_buffer_size</name></expr>]</index></name></expr></argument>,
							<argument><expr><call><name>COMMITSEQNO_MAKE_SPECIAL</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>,
													 <argument><expr><name>curLocalXid</name></expr></argument>,
													 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>curOxid</name> <operator>=</operator> <name>newOxid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>curOxid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LocalTransactionId</name></type>
<name>get_current_local_xid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>curLocalXid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_current_oxid</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>curOxid</name> <operator>=</operator> <name>oxid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>map_oxid_csn</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curLocalXid</name> <operator>=</operator> <call><name>COMMITSEQNO_GET_LXID</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>reset_current_oxid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>curOxid</name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>curLocalXid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>OXid</name></type>
<name>get_current_oxid_if_any</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>recovery_oxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>recovery_oxid</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>curOxid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>current_oxid_precommit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>set_oxid_csn</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>, <argument><expr><call><name>COMMITSEQNO_MAKE_SPECIAL</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr></argument>,
												   <argument><expr><name>curLocalXid</name></expr></argument>,
												   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>advance_run_xmin</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>run_xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>run_xmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>run_xmin</name> <operator>==</operator> <name>oxid</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><call><name>pg_atomic_compare_exchange_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>run_xmin</name></expr></argument>, <argument><expr><name>run_xmin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>run_xmin</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>map_oxid_csn</name><argument_list>(<argument><expr><name>run_xmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>COMMITSEQNO_IS_FROZEN</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>current_oxid_commit</name><parameter_list>(<parameter><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ODBProcData</name> <modifier>*</modifier></type><name>my_proc_info</name> <init>= <expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>my_proc_info</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>set_oxid_csn</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>, <argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_proc_info</name><operator>-&gt;</operator><name>vxids</name><index>[<expr><name>curLocalXid</name> <operator>%</operator> <name>PROC_XID_ARRAY_SIZE</name></expr>]</index></name><operator>.</operator><name>oxid</name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>advance_run_xmin</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curOxid</name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>current_oxid_abort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ODBProcData</name> <modifier>*</modifier></type><name>my_proc_info</name> <init>= <expr><operator>&amp;</operator><name><name>oProcData</name><index>[<expr><name><name>MyProc</name><operator>-&gt;</operator><name>pgprocno</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>my_proc_info</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>set_oxid_csn</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>, <argument><expr><name>COMMITSEQNO_ABORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_proc_info</name><operator>-&gt;</operator><name>vxids</name><index>[<expr><name>curLocalXid</name> <operator>%</operator> <name>PROC_XID_ARRAY_SIZE</name></expr>]</index></name><operator>.</operator><name>oxid</name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>advance_run_xmin</name><argument_list>(<argument><expr><name>curOxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curOxid</name> <operator>=</operator> <name>InvalidOXid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Gets csn for given oxid.  Wrapper over map_oxid_csn(), which loops
 * till "committing bit" is not set.
 */</comment>
<function><type><name>CommitSeqNo</name></type>
<name>oxid_get_csn</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SpinDelayStatus</name></type> <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>==</operator> <name>BootstrapTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>COMMITSEQNO_FROZEN</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>init_local_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>oxid</name> <operator>&lt;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>globalXmin</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>COMMITSEQNO_FROZEN</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>map_oxid_csn</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>csn</name> <operator>&amp;</operator> <name>COMMITSEQNO_SPECIAL_COMMITTING_BIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>perform_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>finish_spin_delay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>COMMITSEQNO_INPROGRESS</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>csn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>fill_current_oxid_csn</name><parameter_list>(<parameter><decl><type><name>OXid</name> <modifier>*</modifier></type><name>oxid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name> <modifier>*</modifier></type><name>csn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name> <init>= <expr><call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>csn</name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>snapshotcsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>oxid</name> <operator>=</operator> <call><name>get_current_oxid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>oxid_get_procnum</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>map_oxid_csn</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>COMMITSEQNO_IS_SPECIAL</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>COMMITSEQNO_GET_PROCNUM</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if xid should be considered as finished for given process.  During
 * recovery we also consult with local map of xids, because workers can go
 * ahead of what is markerd as finished for everybody.
 */</comment>
<function><type><name>bool</name></type>
<name>xid_is_finished</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>xid</name> <operator>==</operator> <name>BootstrapTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>recovery_map_oxid_csn</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>COMMITSEQNO_IS_COMMITTED</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>xmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xid</name> <operator>&lt;</operator> <name>xmin</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>oxid_get_csn</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>COMMITSEQNO_IS_COMMITTED</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if xid is finished for every process.  It's nothing special during
 * normal processing, but for recovery means xid is confirmed by main
 * recovery process as processed by all recovery workers.
 */</comment>
<function><type><name>bool</name></type>
<name>xid_is_finished_for_everybody</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OXid</name></type>		<name>xmin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommitSeqNo</name></type> <name>csn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>xid</name> <operator>==</operator> <name>BootstrapTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>xmin</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xid</name> <operator>&lt;</operator> <name>xmin</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>csn</name> <operator>=</operator> <call><name>oxid_get_csn</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>COMMITSEQNO_IS_COMMITTED</name><argument_list>(<argument><expr><name>csn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
