<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/orioledb/src/recovery/wal.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * wal.c
 *		Routines dealing with WAL for orioledb.
 *
 * Copyright (c) 2021-2022, Oriole DB Inc.
 *
 * IDENTIFICATION
 *	  contrib/orioledb/src/recovery/wal.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orioledb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/sys_trees.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"recovery/wal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableam/descr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transam/oxid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We can use this value because if commit begins at 0
 * than WAL does not consist any modify record.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_COMMIT_POS</name></cpp:macro>		<cpp:value>(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>local_wal_buffer</name><index>[<expr><name>LOCAL_WAL_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>local_wal_buffer_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ORelOids</name></type> <name>local_oids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>OIndexType</name></type> <name>local_type</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_finish_wal_record</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>rec_type</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>xmin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_joint_commit_wal_record</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>xmin</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_xid_wal_record</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_rel_wal_record</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>OIndexType</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>flush_local_wal_if_needed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>required_length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add_local_modify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>record</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>add_modify_wal_record</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>rec_type</name></decl></parameter>, <parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
					  <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>required_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ORelOids</name></type>	<name>oids</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>oids</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OIndexType</name></type>	<name>type</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Do not write WAL during recovery */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>recovery_oxid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SYS_TREE_OIDS</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>oIndexPrimary</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OIndexDescr</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><operator>(</operator><name>OIndexDescr</name> <operator>*</operator><operator>)</operator> <name><name>desc</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>oids</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>tableOids</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>oIndexInvalid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rec_type</name> <operator>==</operator> <name>WAL_REC_INSERT</name> <operator>||</operator> <name>rec_type</name> <operator>==</operator> <name>WAL_REC_UPDATE</name> <operator>||</operator> <name>rec_type</name> <operator>==</operator> <name>WAL_REC_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>required_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WALRecModify</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ORelOidsIsEqual</name><argument_list>(<argument><expr><name>local_oids</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>local_type</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>required_length</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WALRecRelation</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><name>required_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <name>required_length</name> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>!=</operator> <name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ORelOidsIsEqual</name><argument_list>(<argument><expr><name>local_oids</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>local_type</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_rel_wal_record</name><argument_list>(<argument><expr><name>oids</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>add_local_modify</name><argument_list>(<argument><expr><name>rec_type</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Adds the record to the local_wal_buffer.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>add_local_modify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>record_type</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>record</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecModify</name> <modifier>*</modifier></type><name>wal_rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wal_rec</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>length</name> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>wal_rec</name> <operator>=</operator> <operator>(</operator><name>WALRecModify</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wal_rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>record_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wal_rec</name><operator>-&gt;</operator><name>tupleFormatFlags</name></name> <operator>=</operator> <name><name>record</name><operator>.</operator><name>formatFlags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>wal_rec</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wal_rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>record</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wal_commit</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>wait_pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WALRecFinish</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WALRecFinish</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>add_finish_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_COMMIT</name></expr></argument>, <argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>wait_pos</name> <operator>=</operator> <call><name>flush_local_wal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>synchronous_commit</name> <operator>&gt;</operator> <name>SYNCHRONOUS_COMMIT_OFF</name> <operator>||</operator>
		<name>oxid_needs_wal_flush</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>wait_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wal_joint_commit</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WALRecJointCommit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WALRecJointCommit</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>add_joint_commit_wal_record</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>flush_local_wal</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Don't need to flush local WAL, because we only commit if builtin
	 * transaction commits.
	 */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wal_after_commit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ODBProcData</name> <modifier>*</modifier></type><name>curProcData</name> <init>= <expr><call><name>GET_CUR_PROCDATA</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>curProcData</name><operator>-&gt;</operator><name>commitInProgressXlogLocation</name></name></expr></argument>, <argument><expr><name>INVALID_COMMIT_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wal_rollback</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>wait_pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WALRecFinish</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WALRecFinish</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>add_finish_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_ROLLBACK</name></expr></argument>, <argument><expr><call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xid_meta</name><operator>-&gt;</operator><name>runXmin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>wait_pos</name> <operator>=</operator> <call><name>flush_local_wal</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>synchronous_commit</name> <operator>&gt;</operator> <name>SYNCHRONOUS_COMMIT_OFF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XLogFlush</name><argument_list>(<argument><expr><name>wait_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_finish_wal_record</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>rec_type</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>xmin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecFinish</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rec_type</name> <operator>==</operator> <name>WAL_REC_COMMIT</name> <operator>||</operator> <name>WAL_REC_ROLLBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>!=</operator> <name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>WALRecFinish</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>rec_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xmin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_joint_commit_wal_record</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>OXid</name></type> <name>xmin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecJointCommit</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>!=</operator> <name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>WALRecJointCommit</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>WAL_REC_JOINT_COMMIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xmin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns size of a new record.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_xid_wal_record</name><parameter_list>(<parameter><decl><type><name>OXid</name></type> <name>oxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecXid</name>  <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OXidIsValid</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>WALRecXid</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>WAL_REC_XID</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>oxid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oxid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OXid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_rel_wal_record</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>OIndexType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecRelation</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><operator>(</operator><name>WALRecRelation</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>WAL_REC_RELATION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>treeType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>relnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_oids</name> <operator>=</operator> <name>oids</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>add_invalidate_wal_record</name><parameter_list>(<parameter><decl><type><name>ORelOids</name></type> <name>oids</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>old_relnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecInvalidate</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>!=</operator> <name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>WALRecInvalidate</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>WAL_REC_INVALIDATE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>datoid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><operator>.</operator><name>datoid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><operator>.</operator><name>reloid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>old_relnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_relnode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>new_relnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><operator>.</operator><name>relnode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>add_savepoint_wal_record</name><parameter_list>(<parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecSavepoint</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>!=</operator> <name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>WALRecSavepoint</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>WAL_REC_SAVEPOINT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>parentSubid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentSubid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>add_rollback_to_savepoint_wal_record</name><parameter_list>(<parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WALRecRollbackToSavepoint</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>flush_local_wal_if_needed</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>local_wal_buffer_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OXid</name></type>		<name>oxid</name> <init>= <expr><call><name>get_current_oxid_if_any</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>oxid</name> <operator>!=</operator> <name>InvalidOXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_xid_wal_record</name><argument_list>(<argument><expr><name>oxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>WALRecRollbackToSavepoint</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>local_wal_buffer</name><index>[<expr><name>local_wal_buffer_offset</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>recType</name></name> <operator>=</operator> <name>WAL_REC_ROLLBACK_TO_SAVEPOINT</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>parentSubid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parentSubid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rec</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>local_wal_is_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>local_wal_buffer_offset</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns end position of a new WAL container.
 */</comment>
<function><type><name>XLogRecPtr</name></type>
<name>flush_local_wal</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>location</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>length</name> <init>= <expr><name>local_wal_buffer_offset</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>location</name> <operator>=</operator> <call><name>log_logical_wal_container</name><argument_list>(<argument><expr><name>local_wal_buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GET_CUR_PROCDATA</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>commitInProgressXlogLocation</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_type</name> <operator>=</operator> <name>oIndexInvalid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local_oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local_oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>local_oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

	<return>return <expr><name>location</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>flush_local_wal_if_needed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>required_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>is_recovery_process</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>local_wal_buffer_offset</name> <operator>+</operator> <name>required_length</name> <operator>&gt;</operator> <name>LOCAL_WAL_BUFFER_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>log_logical_wal_container</name><argument_list>(<argument><expr><name>local_wal_buffer</name></expr></argument>, <argument><expr><name>local_wal_buffer_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>local_wal_buffer_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>local_type</name> <operator>=</operator> <name>oIndexInvalid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>local_oids</name><operator>.</operator><name>datoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>local_oids</name><operator>.</operator><name>reloid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>local_oids</name><operator>.</operator><name>relnode</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>log_logical_wal_container</name><parameter_list>(<parameter><decl><type><name>Pointer</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>LogLogicalMessage</name><argument_list>(<argument><expr><name>ORIOLEDB_WAL_PREFIX</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Makes WAL insert record.
 */</comment>
<function><type><name>void</name></type>
<name>o_wal_insert</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>wal_record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>call_pfree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>wal_record</name> <operator>=</operator> <call><name>recovery_rec_insert</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_pfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_INSERT</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>wal_record</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>call_pfree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>wal_record</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Makes WAL update record.
 */</comment>
<function><type><name>void</name></type>
<name>o_wal_update</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>wal_record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>call_pfree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>wal_record</name> <operator>=</operator> <call><name>recovery_rec_update</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_pfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_UPDATE</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>wal_record</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>call_pfree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>wal_record</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Makes WAL delete record.
 */</comment>
<function><type><name>void</name></type>
<name>o_wal_delete</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>wal_record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>call_pfree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>wal_record</name> <operator>=</operator> <call><name>recovery_rec_delete</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_pfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_DELETE</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>wal_record</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>call_pfree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>wal_record</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>o_wal_delete_key</name><parameter_list>(<parameter><decl><type><name>BTreeDescr</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>OTuple</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OTuple</name></type>		<name>wal_record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>call_pfree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>wal_record</name> <operator>=</operator> <call><name>recovery_rec_delete_key</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>call_pfree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_modify_wal_record</name><argument_list>(<argument><expr><name>WAL_REC_DELETE</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>wal_record</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>call_pfree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>wal_record</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
