<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/Zip/inftrees.c"><comment type="block">/* inftrees.c -- generate Huffman trees for efficient decoding
 * Copyright (C) 1995-2013 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"inftrees.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXBITS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>inflate_copyright</name><index>[]</index></name> <init>=
   <expr><literal type="string">" inflate 1.2.8 Copyright 1995-2013 Mark Adler "</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*
  If you use the zlib library in a product, an acknowledgment is welcome
  in the documentation of your product. If for some reason you cannot
  include such an acknowledgment, I would appreciate that you keep this
  copyright string in the executable of your product.
 */</comment>

<comment type="block">/*
   Build a set of tables to decode the provided canonical Huffman code.
   The code lengths are lens[0..codes-1].  The result starts at *table,
   whose indices are 0..2^bits-1.  work is a writable array of at least
   lens shorts, which is used as a work area.  type is the type of code
   to be generated, CODES, LENS, or DISTS.  On return, zero is success,
   -1 is an invalid code, and +1 means that ENOUGH isn't enough.  table
   on return points to the next available entry's address.  bits is the
   requested root table index bits, and on return it is the actual root
   table index bits.  It will differ if the request is greater than the
   longest code or if it is less than the shortest code.
 */</comment>
<function><type><name>int</name> <name>ZLIB_INTERNAL</name></type> <name>inflate_table</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>lens</name></type></decl></parameter>, <parameter><decl><type><name>codes</name></type></decl></parameter>, <parameter><decl><type><name>table</name></type></decl></parameter>, <parameter><decl><type><name>bits</name></type></decl></parameter>, <parameter><decl><type><name>work</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>codetype</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>lens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>codes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>code</name> <name>FAR</name> <modifier>*</modifier> <name>FAR</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>FAR</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>work</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>               <comment type="block">/* a code's length in bits */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>sym</name></decl>;</decl_stmt>               <comment type="block">/* index of code symbols */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>          <comment type="block">/* minimum and maximum code lengths */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>root</name></decl>;</decl_stmt>              <comment type="block">/* number of index bits for root table */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>curr</name></decl>;</decl_stmt>              <comment type="block">/* number of index bits for current table */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>drop</name></decl>;</decl_stmt>              <comment type="block">/* code bits to drop for sub-table */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt>                   <comment type="block">/* number of prefix codes available */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>used</name></decl>;</decl_stmt>              <comment type="block">/* code entries in table used */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>huff</name></decl>;</decl_stmt>              <comment type="block">/* Huffman code */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>incr</name></decl>;</decl_stmt>              <comment type="block">/* for incrementing code, index */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>fill</name></decl>;</decl_stmt>              <comment type="block">/* index for replicating entries */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>low</name></decl>;</decl_stmt>               <comment type="block">/* low bits for current root entry */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name></decl>;</decl_stmt>              <comment type="block">/* mask for low root bits */</comment>
    <decl_stmt><decl><type><name>code</name></type> <name>here</name></decl>;</decl_stmt>                  <comment type="block">/* table entry for duplication */</comment>
    <decl_stmt><decl><type><name>code</name> <name>FAR</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>             <comment type="block">/* next available space in table */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>     <comment type="block">/* base value table to use */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name> <name>FAR</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>    <comment type="block">/* extra bits table to use */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>                    <comment type="block">/* use base and extra for symbol &gt; end */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>count</name><index>[<expr><name>MAXBITS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* number of codes of each length */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>offs</name><index>[<expr><name>MAXBITS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>     <comment type="block">/* offsets in table for each length */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>lbase</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{ <comment type="block">/* Length codes 257..285 base */</comment>
        <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>,
        <expr><literal type="number">35</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>lext</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{ <comment type="block">/* Length codes 257..285 extra */</comment>
        <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,
        <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">78</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>dbase</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <comment type="block">/* Distance codes 0..29 base */</comment>
        <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">193</literal></expr>,
        <expr><literal type="number">257</literal></expr>, <expr><literal type="number">385</literal></expr>, <expr><literal type="number">513</literal></expr>, <expr><literal type="number">769</literal></expr>, <expr><literal type="number">1025</literal></expr>, <expr><literal type="number">1537</literal></expr>, <expr><literal type="number">2049</literal></expr>, <expr><literal type="number">3073</literal></expr>, <expr><literal type="number">4097</literal></expr>, <expr><literal type="number">6145</literal></expr>,
        <expr><literal type="number">8193</literal></expr>, <expr><literal type="number">12289</literal></expr>, <expr><literal type="number">16385</literal></expr>, <expr><literal type="number">24577</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>dext</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <comment type="block">/* Distance codes 0..29 extra */</comment>
        <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>,
        <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
        <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
     */</comment>

    <comment type="block">/* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */</comment>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>MAXBITS</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>count</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>codes</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>lens</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* bound code lengths, force root to be within code lengths */</comment>
    <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>*</operator><name>bits</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>max</name> <operator>=</operator> <name>MAXBITS</name></expr>;</init> <condition><expr><name>max</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>max</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>max</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>root</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>                     <comment type="block">/* no symbols to code at all */</comment>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">64</literal></expr>;</expr_stmt>    <comment type="block">/* invalid code marker */</comment>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>here</name></expr>;</expr_stmt>             <comment type="block">/* make a table to force an error */</comment>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><operator>++</operator> <operator>=</operator> <name>here</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>     <comment type="block">/* no symbols, but wait for decoding to report error */</comment>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>min</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>min</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>min</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>root</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* check for an over-subscribed or incomplete set of lengths */</comment>
    <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>MAXBITS</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>left</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>        <comment type="block">/* over-subscribed */</comment>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>CODES</name> <operator>||</operator> <name>max</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>                      <comment type="block">/* incomplete set */</comment>

    <comment type="block">/* generate offsets into symbol table for each length for sorting */</comment>
    <expr_stmt><expr><name><name>offs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>MAXBITS</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>offs</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>offs</name><index>[<expr><name>len</name></expr>]</index></name> <operator>+</operator> <name><name>count</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* sort symbols by length, by symbol order within each length */</comment>
    <for>for <control>(<init><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sym</name> <operator>&lt;</operator> <name>codes</name></expr>;</condition> <incr><expr><name>sym</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>lens</name><index>[<expr><name>sym</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>work</name><index>[<expr><name><name>offs</name><index>[<expr><name><name>lens</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>sym</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <comment type="block">/*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
     */</comment>

    <comment type="block">/* set up for code type */</comment>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CODES</name></expr>:</case>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <name>extra</name> <operator>=</operator> <name>work</name></expr>;</expr_stmt>    <comment type="block">/* dummy value--not used */</comment>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>LENS</name></expr>:</case>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <name>lbase</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>base</name> <operator>-=</operator> <literal type="number">257</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>extra</name> <operator>=</operator> <name>lext</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>extra</name> <operator>-=</operator> <literal type="number">257</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
        <break>break;</break>
    <default>default:</default>            <comment type="block">/* DISTS */</comment>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <name>dbase</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>extra</name> <operator>=</operator> <name>dext</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="block">/* initialize state for loop */</comment>
    <expr_stmt><expr><name>huff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                   <comment type="block">/* starting code */</comment>
    <expr_stmt><expr><name>sym</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                    <comment type="block">/* starting code symbol */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>                  <comment type="block">/* starting code length */</comment>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><name>table</name></expr>;</expr_stmt>              <comment type="block">/* current table to fill in */</comment>
    <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>                <comment type="block">/* current table index bits */</comment>
    <expr_stmt><expr><name>drop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                   <comment type="block">/* current bits to drop from code for index */</comment>
    <expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>       <comment type="block">/* trigger new sub-table when len &gt; root */</comment>
    <expr_stmt><expr><name>used</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>root</name></expr>;</expr_stmt>          <comment type="block">/* use root table entries */</comment>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>used</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>            <comment type="block">/* mask for comparing low */</comment>

    <comment type="block">/* check available table space */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>LENS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_LENS</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>type</name> <operator>==</operator> <name>DISTS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_DISTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* process all codes and make table entries */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <comment type="block">/* create table entry */</comment>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>drop</name><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>extra</name><index>[<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>base</name><index>[<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>         <comment type="block">/* end of block */</comment>
            <expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* replicate for those indices with low len bits equal to huff */</comment>
        <expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>drop</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>curr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>                 <comment type="block">/* save offset to next table */</comment>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>fill</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>next</name><index>[<expr><operator>(</operator><name>huff</name> <operator>&gt;&gt;</operator> <name>drop</name><operator>)</operator> <operator>+</operator> <name>fill</name></expr>]</index></name> <operator>=</operator> <name>here</name></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>fill</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

        <comment type="block">/* backwards increment the len-bit code huff */</comment>
        <expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>huff</name> <operator>&amp;</operator> <name>incr</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>incr</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><name>incr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>huff</name> <operator>&amp;=</operator> <name>incr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>huff</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>huff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/* go to next symbol, update count, len */</comment>
        <expr_stmt><expr><name>sym</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>--</operator><operator>(</operator><name><name>count</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>lens</name><index>[<expr><name><name>work</name><index>[<expr><name>sym</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* create new sub-table if needed */</comment>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>root</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>huff</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name>low</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* if first time, transition to sub-tables */</comment>
            <if_stmt><if>if <condition>(<expr><name>drop</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>drop</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block">/* increment past last table */</comment>
            <expr_stmt><expr><name>next</name> <operator>+=</operator> <name>min</name></expr>;</expr_stmt>            <comment type="block">/* here min is 1 &lt;&lt; curr */</comment>

            <comment type="block">/* determine length of next table */</comment>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>drop</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>curr</name><operator>)</operator></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>curr</name> <operator>+</operator> <name>drop</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>left</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>curr</name> <operator>+</operator> <name>drop</name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="block">/* check for enough space */</comment>
            <expr_stmt><expr><name>used</name> <operator>+=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>curr</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>LENS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_LENS</name><operator>)</operator> <operator>||</operator>
                <operator>(</operator><name>type</name> <operator>==</operator> <name>DISTS</name> <operator>&amp;&amp;</operator> <name>used</name> <operator>&gt;</operator> <name>ENOUGH_DISTS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block">/* point entry in root table to sub-table */</comment>
            <expr_stmt><expr><name>low</name> <operator>=</operator> <name>huff</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><index>[<expr><name>low</name></expr>]</index><operator>.</operator><name>op</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>curr</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><index>[<expr><name>low</name></expr>]</index><operator>.</operator><name>bits</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>root</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>table</name><operator>)</operator><index>[<expr><name>low</name></expr>]</index><operator>.</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name>next</name> <operator>-</operator> <operator>*</operator><name>table</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */</comment>
    <if_stmt><if>if <condition>(<expr><name>huff</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">64</literal></expr>;</expr_stmt>            <comment type="block">/* invalid code marker */</comment>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>drop</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>here</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><index>[<expr><name>huff</name></expr>]</index></name> <operator>=</operator> <name>here</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* set return parameters */</comment>
    <expr_stmt><expr><operator>*</operator><name>table</name> <operator>+=</operator> <name>used</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
