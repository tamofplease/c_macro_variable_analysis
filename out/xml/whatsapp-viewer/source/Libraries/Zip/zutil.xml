<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/Zip/zutil.c"><comment type="block">/* zutil.c -- target dependent utility functions for the compression library
 * Copyright (C) 1995-2005, 2010, 2011, 2012 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */</comment>

<comment type="block">/* @(#) $Id$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Z_SOLO</name></cpp:ifndef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"gzguts.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_DUMMY_DECL</name></cpp:ifndef>
<struct>struct <name>internal_state</name>      <block>{<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>}</block>;</struct> <comment type="block">/* for buggy compilers */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>z_const</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>z_errmsg</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"need dictionary"</literal></expr>,     <comment type="block">/* Z_NEED_DICT       2  */</comment>
<expr><literal type="string">"stream end"</literal></expr>,          <comment type="block">/* Z_STREAM_END      1  */</comment>
<expr><literal type="string">""</literal></expr>,                    <comment type="block">/* Z_OK              0  */</comment>
<expr><literal type="string">"file error"</literal></expr>,          <comment type="block">/* Z_ERRNO         (-1) */</comment>
<expr><literal type="string">"stream error"</literal></expr>,        <comment type="block">/* Z_STREAM_ERROR  (-2) */</comment>
<expr><literal type="string">"data error"</literal></expr>,          <comment type="block">/* Z_DATA_ERROR    (-3) */</comment>
<expr><literal type="string">"insufficient memory"</literal></expr>, <comment type="block">/* Z_MEM_ERROR     (-4) */</comment>
<expr><literal type="string">"buffer error"</literal></expr>,        <comment type="block">/* Z_BUF_ERROR     (-5) */</comment>
<expr><literal type="string">"incompatible version"</literal></expr>,<comment type="block">/* Z_VERSION_ERROR (-6) */</comment>
<expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>ZEXPORT</name></type> <name>zlibVersion</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>ZLIB_VERSION</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>zlibCompileFlags</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uLong</name></type> <name>flags</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uInt</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>     <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><literal type="number">8</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>     <break>break;</break>
    <default>default:</default>    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uLong</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>     <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><literal type="number">8</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>        <break>break;</break>
    <default>default:</default>    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>voidpf</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>     <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><literal type="number">8</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>        <break>break;</break>
    <default>default:</default>    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>z_off_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>     <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><literal type="number">8</literal></expr>:</case>     <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>        <break>break;</break>
    <default>default:</default>    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    </block_content>}</block></switch>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASMV</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ASMINF</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZLIB_WINAPI</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUILDFIXED</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DYNAMIC_CRC_TABLE</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_GZCOMPRESS</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_GZIP</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PKZIP_BUG_WORKAROUND</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FASTEST</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>Z_HAVE_STDARG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>NO_vsnprintf</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_vsprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_vsnprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>NO_snprintf</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal></expr>;</expr_stmt>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_sprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>HAS_snprintf_void</name></cpp:ifdef>
    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal></expr>;</expr_stmt>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>verbose</name></cpp:ifndef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>verbose</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name> <name>ZLIB_INTERNAL</name></type> <name>z_verbose</name> <init>= <expr><name>verbose</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>z_error</name> <parameter_list>(<parameter><decl><type><name>m</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* exported to allow conversion of error code to string for compress() and
 * uncompress()
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>ZEXPORT</name></type> <name>zError</name><parameter_list>(<parameter><decl><type><name>err</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<block>{<block_content>
    <return>return <expr><call><name>ERR_MSG</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* The Microsoft C Run-Time Library for Windows CE doesn't have
     * errno.  We define it as a global variable to simplify porting.
     * Its value is always 0 and should not be used.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>errno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_MEMCPY</name></cpp:ifndef>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>zmemcpy</name><parameter_list>(<parameter><decl><type><name>dest</name></type></decl></parameter>, <parameter><decl><type><name>source</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>Bytef</name><modifier>*</modifier></type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type>  <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>source</name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* ??? to be unrolled */</comment>
    </block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>int</name> <name>ZLIB_INTERNAL</name></type> <name>zmemcmp</name><parameter_list>(<parameter><decl><type><name>s1</name></type></decl></parameter>, <parameter><decl><type><name>s2</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type> <name>s1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name><modifier>*</modifier></type> <name>s2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type>  <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>uInt</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>zmemzero</name><parameter_list>(<parameter><decl><type><name>dest</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>Bytef</name><modifier>*</modifier></type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type>  <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <do>do <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* ??? to be unrolled */</comment>
    </block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Z_SOLO</name></cpp:ifndef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYS16BIT</name></cpp:ifdef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TURBOC__</name></cpp:ifdef>
<comment type="block">/* Turbo C in 16-bit mode */</comment>

<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MY_ZCALLOC</name></cpp:macro></cpp:define>

<comment type="block">/* Turbo C malloc() does not allow dynamic allocation of 64K bytes
 * and farmalloc(64K) returns a pointer with an offset of 8, so we
 * must fix the pointer. Warning: the pointer must be put back to its
 * original form in order to free it, use zcfree().
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PTR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<comment type="block">/* 10*64K = 640K */</comment>

<decl_stmt><decl><type><name>local</name> <name>int</name></type> <name>next_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ptr_table_s</name> <block>{
    <decl_stmt><decl><type><name>voidpf</name></type> <name>org_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>new_ptr</name></decl>;</decl_stmt>
}</block></struct></type> <name>ptr_table</name>;</typedef>

<decl_stmt><decl><type><name>local</name> <name>ptr_table</name></type> <name><name>table</name><index>[<expr><name>MAX_PTR</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="block">/* This table is used to remember the original form of pointers
 * to large buffers (64K). Such pointers are normalized with a zero offset.
 * Since MSDOS is not a preemptive multitasking OS, this table is not
 * protected from concurrent access. This hack doesn't work anyway on
 * a protected system like OS/2. Use Microsoft C instead.
 */</comment>

<function><type><name>voidpf</name> <name>ZLIB_INTERNAL</name></type> <name>zcalloc</name> <parameter_list>(<parameter><decl><type><name>voidpf</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>items</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>buf</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt> <comment type="block">/* just to make some compilers happy */</comment>
    <decl_stmt><decl><type><name>ulg</name></type> <name>bsize</name> <init>= <expr><operator>(</operator><name>ulg</name><operator>)</operator><name>items</name><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If we allocate less than 65520 bytes, we assume that farmalloc
     * will return a usable pointer which doesn't have to be normalized.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&lt;</operator> <literal type="number">65520L</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>farmalloc</name><argument_list>(<argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>ush</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>buf</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>farmalloc</name><argument_list>(<argument><expr><name>bsize</name> <operator>+</operator> <literal type="number">16L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>next_ptr</name> <operator>&gt;=</operator> <name>MAX_PTR</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>table</name><index>[<expr><name>next_ptr</name></expr>]</index></name><operator>.</operator><name>org_ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

    <comment type="block">/* Normalize the pointer to seg:0 */</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>ush</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>ush</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uch</name><operator>*</operator><operator>)</operator><name>buf</name><operator>-</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>ush</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><index>[<expr><name>next_ptr</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>new_ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>zcfree</name> <parameter_list>(<parameter><decl><type><name>voidpf</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>voidpf</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>ush</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* object &lt; 64K */</comment>
        <expr_stmt><expr><call><name>farfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Find the original pointer */</comment>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>next_ptr</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name><name>table</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>new_ptr</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>farfree</name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>org_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>++</operator><name>n</name> <operator>&lt;</operator> <name>next_ptr</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>table</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>table</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>next_ptr</name><operator>--</operator></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></for>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt> <comment type="block">/* just to make some compilers happy */</comment>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"zcfree: ptr not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __TURBOC__ */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>M_I86</name></cpp:ifdef>
<comment type="block">/* Microsoft C in 16-bit mode */</comment>

<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MY_ZCALLOC</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">600</literal><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_halloc</name></cpp:macro>  <cpp:value>halloc</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_hfree</name></cpp:macro>   <cpp:value>hfree</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>voidpf</name> <name>ZLIB_INTERNAL</name></type> <name>zcalloc</name> <parameter_list>(<parameter><decl><type><name>voidpf</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>uInt</name></type> <name>items</name></decl></parameter>, <parameter><decl><type><name>uInt</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opaque</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* to make compiler happy */</comment>
    <return>return <expr><call><name>_halloc</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>zcfree</name> <parameter_list>(<parameter><decl><type><name>voidpf</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>voidpf</name></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opaque</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* to make compiler happy */</comment>
    <expr_stmt><expr><call><name>_hfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* M_I86 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SYS16BIT */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MY_ZCALLOC</name></cpp:ifndef> <comment type="block">/* Any system without a special alloc function */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STDC</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>voidp</name>  <name>malloc</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uInt</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>voidp</name>  <name>calloc</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uInt</name> <name>items</name><operator>,</operator> <name>uInt</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name>   <name>free</name></type>   <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>voidpf</name> <name>ptr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>voidpf</name> <name>ZLIB_INTERNAL</name></type> <name>zcalloc</name> <parameter_list>(<parameter><decl><type><name>opaque</name></type></decl></parameter>, <parameter><decl><type><name>items</name></type></decl></parameter>, <parameter><decl><type><name>size</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>opaque</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>items</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>items</name> <operator>+=</operator> <name>size</name> <operator>-</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* make compiler happy */</comment>
    <return>return <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uInt</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator><name>voidpf</name><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>items</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr> </then><else>:
                              <expr><operator>(</operator><name>voidpf</name><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>ZLIB_INTERNAL</name></type> <name>zcfree</name> <parameter_list>(<parameter><decl><type><name>opaque</name></type></decl></parameter>, <parameter><decl><type><name>ptr</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>opaque</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>voidpf</name></type> <name>ptr</name></decl>;</decl_stmt>
<block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>opaque</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* make compiler happy */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MY_ZCALLOC */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !Z_SOLO */</comment>
</unit>
