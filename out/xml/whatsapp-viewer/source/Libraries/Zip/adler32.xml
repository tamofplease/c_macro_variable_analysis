<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/Zip/adler32.c"><comment type="block">/* adler32.c -- compute the Adler-32 checksum of a data stream
 * Copyright (C) 1995-2011 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 */</comment>

<comment type="block">/* @(#) $Id$ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zutil.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<decl_stmt><decl><type><name>local</name> <name>uLong</name> <name>adler32_combine_</name></type> <name>OF</name><argument_list>(<argument><expr><operator>(</operator><name>uLong</name> <name>adler1</name><operator>,</operator> <name>uLong</name> <name>adler2</name><operator>,</operator> <name>z_off64_t</name> <name>len2</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>65521</cpp:value></cpp:define>      <comment type="block">/* largest prime smaller than 65536 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMAX</name></cpp:macro> <cpp:value>5552</cpp:value></cpp:define>
<comment type="block">/* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) &lt;= 2^32-1 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>{adler += (buf)[i]; sum2 += adler;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>DO1(buf,i); DO1(buf,i+1);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO4</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>DO2(buf,i); DO2(buf,i+2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO8</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>DO4(buf,i); DO4(buf,i+4);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO16</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>DO8(buf,0); DO8(buf,8);</cpp:value></cpp:define>

<comment type="block">/* use NO_DIVIDE if your processor does not do division in hardware --
   try it both ways to see which is faster */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_DIVIDE</name></cpp:ifdef>
<comment type="block">/* note that this assumes BASE is 65521, where 65536 % 65521 == 15
   (thank you to John Reiser for pointing this out) */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CHOP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { \
        unsigned long tmp = a &gt;&gt; 16; \
        a &amp;= 0xffffUL; \
        a += (tmp &lt;&lt; 4) - tmp; \
    } while (0)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MOD28</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { \
        CHOP(a); \
        if (a &gt;= BASE) a -= BASE; \
    } while (0)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { \
        CHOP(a); \
        MOD28(a); \
    } while (0)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MOD63</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { <comment type="block">/* this assumes a is not negative */</comment> \
        z_off64_t tmp = a &gt;&gt; 32; \
        a &amp;= 0xffffffffL; \
        a += (tmp &lt;&lt; 8) - (tmp &lt;&lt; 5) + tmp; \
        tmp = a &gt;&gt; 16; \
        a &amp;= 0xffffL; \
        a += (tmp &lt;&lt; 4) - tmp; \
        tmp = a &gt;&gt; 16; \
        a &amp;= 0xffffL; \
        a += (tmp &lt;&lt; 4) - tmp; \
        if (a &gt;= BASE) a -= BASE; \
    } while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a %= BASE</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MOD28</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a %= BASE</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>MOD63</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a %= BASE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ========================================================================= */</comment>
<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>adler32</name><parameter_list>(<parameter><decl><type><name>adler</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Bytef</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uInt</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

    <comment type="block">/* split Adler-32 into component sums */</comment>
    <expr_stmt><expr><name>sum2</name> <operator>=</operator> <operator>(</operator><name>adler</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>adler</name> <operator>&amp;=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

    <comment type="block">/* in case user likes doing a byte at a time, keep it fast */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>adler</name> <operator>+=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>adler</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>adler</name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name>adler</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sum2</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sum2</name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>adler</name> <operator>|</operator> <operator>(</operator><name>sum2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* initial Adler-32 value (deferred check for len == 1 speed) */</comment>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>Z_NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1L</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* in case short lengths are provided, keep it somewhat fast */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>adler</name> <operator>+=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name>adler</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>adler</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>adler</name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>MOD28</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="block">/* only added so many BASE's */</comment>
        <return>return <expr><name>adler</name> <operator>|</operator> <operator>(</operator><name>sum2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* do length NMAX blocks -- requires just one modulo operation */</comment>
    <while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>NMAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>NMAX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>NMAX</name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>          <comment type="block">/* NMAX is divisible by 16 */</comment>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>DO16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* 16 sums unrolled */</comment>
            <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name></expr>)</condition>;</do>
        <expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>adler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* do remaining bytes (less than NMAX, still just one modulo) */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>                  <comment type="block">/* avoid modulos if none remaining */</comment>
        <while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>DO16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>adler</name> <operator>+=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <name>adler</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>adler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* return recombined sums */</comment>
    <return>return <expr><name>adler</name> <operator>|</operator> <operator>(</operator><name>sum2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ========================================================================= */</comment>
<function><type><name>local</name> <name>uLong</name></type> <name>adler32_combine_</name><parameter_list>(<parameter><decl><type><name>adler1</name></type></decl></parameter>, <parameter><decl><type><name>adler2</name></type></decl></parameter>, <parameter><decl><type><name>len2</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_off64_t</name></type> <name>len2</name></decl>;</decl_stmt>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>rem</name></decl>;</decl_stmt>

    <comment type="block">/* for negative len, return invalid adler32 as a clue for debugging */</comment>
    <if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0xffffffffUL</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* the derivation of this formula is left as an exercise for the reader */</comment>
    <expr_stmt><expr><call><name>MOD63</name><argument_list>(<argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="block">/* assumes len2 &gt;= 0 */</comment>
    <expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>len2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum1</name> <operator>=</operator> <name>adler1</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum2</name> <operator>=</operator> <name>rem</name> <operator>*</operator> <name>sum1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MOD</name><argument_list>(<argument><expr><name>sum2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum1</name> <operator>+=</operator> <operator>(</operator><name>adler2</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>BASE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>adler1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>adler2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>BASE</name> <operator>-</operator> <name>rem</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sum1</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum1</name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sum1</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum1</name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sum2</name> <operator>&gt;=</operator> <operator>(</operator><name>BASE</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum2</name> <operator>-=</operator> <operator>(</operator><name>BASE</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>sum2</name> <operator>&gt;=</operator> <name>BASE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sum2</name> <operator>-=</operator> <name>BASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>sum1</name> <operator>|</operator> <operator>(</operator><name>sum2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ========================================================================= */</comment>
<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>adler32_combine</name><parameter_list>(<parameter><decl><type><name>adler1</name></type></decl></parameter>, <parameter><decl><type><name>adler2</name></type></decl></parameter>, <parameter><decl><type><name>len2</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_off_t</name></type> <name>len2</name></decl>;</decl_stmt>
<block>{<block_content>
    <return>return <expr><call><name>adler32_combine_</name><argument_list>(<argument><expr><name>adler1</name></expr></argument>, <argument><expr><name>adler2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uLong</name> <name>ZEXPORT</name></type> <name>adler32_combine64</name><parameter_list>(<parameter><decl><type><name>adler1</name></type></decl></parameter>, <parameter><decl><type><name>adler2</name></type></decl></parameter>, <parameter><decl><type><name>len2</name></type></decl></parameter>)</parameter_list>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uLong</name></type> <name>adler2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>z_off64_t</name></type> <name>len2</name></decl>;</decl_stmt>
<block>{<block_content>
    <return>return <expr><call><name>adler32_combine_</name><argument_list>(<argument><expr><name>adler1</name></expr></argument>, <argument><expr><name>adler2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
