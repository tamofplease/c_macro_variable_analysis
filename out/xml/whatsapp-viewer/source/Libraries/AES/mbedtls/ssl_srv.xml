<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ssl_srv.c"><comment type="block">/*
 *  SSLv3/TLSv1 server-side functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>      <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecp.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform_time.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_set_client_transport_id</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
                                 <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id_len</name></name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_dtls_cookies</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_ssl_cookie_write_t</name> <modifier>*</modifier></type><name>f_cookie_write</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_ssl_cookie_check_t</name> <modifier>*</modifier></type><name>f_cookie_check</name></decl></parameter>,
                           <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cookie</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_cookie_write</name></name> <operator>=</operator> <name>f_cookie_write</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_cookie_check</name></name> <operator>=</operator> <name>f_cookie_check</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_cookie</name></name>       <operator>=</operator> <name>p_cookie</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_HELLO_VERIFY */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_servername_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                     <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>servername_list_size</name></decl>, <decl><type ref="prev"/><name>hostname_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"parse ServerName extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>servername_list_size</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>servername_list_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>!=</operator> <name>len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>servername_list_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>hostname_len</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>hostname_len</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>servername_list_size</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_sni</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_sni</name></name></expr></argument>,
                                    <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_sni_wrapper"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>servername_list_size</name> <operator>-=</operator> <name>hostname_len</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>hostname_len</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>servername_list_size</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_renegotiation_info</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Check verify-data in constant-time. The length OTOH is no secret */</comment>
        <if_stmt><if>if<condition>( <expr><name>len</name>    <operator>!=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>||</operator>
            <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator>     <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>||</operator>
            <call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>peer_verify_data</name></name></expr></argument>,
                          <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"non-matching renegotiation info"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"non-zero length renegotiation info"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_signature_algorithms_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                               <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sig_alg_list_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>md_cur</name></decl>;</decl_stmt>


    <expr_stmt><expr><name>sig_alg_list_size</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>sig_alg_list_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>!=</operator> <name>len</name> <operator>||</operator>
        <name>sig_alg_list_size</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * For now, ignore the SignatureAlgorithm part and rely on offered
     * ciphersuites only for that part. To be fixed later.
     *
     * So, just look at the HashAlgorithm part.
     */</comment>
    <for>for<control>( <init><expr><name>md_cur</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name></expr>;</init> <condition><expr><operator>*</operator><name>md_cur</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</condition> <incr><expr><name>md_cur</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
        <for>for<control>( <init><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control> <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>*</operator><name>md_cur</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>mbedtls_ssl_md_alg_from_hash</name><argument_list>( <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sig_alg</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <goto>goto <name>have_sig_alg</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="block">/* Some key echanges do not need signatures at all */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no signature_algorithm in common"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>

<label><name>have_sig_alg</name>:</label>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v3, signature_algorithm ext: %d"</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sig_alg</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 &amp;&amp;
          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_supported_elliptic_curves</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                                <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>list_size</name></decl>, <decl><type ref="prev"/><name>our_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_curve_info</name> <modifier>*</modifier></type><name>curve_info</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>curves</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>list_size</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>list_size</name> <operator>+</operator> <literal type="number">2</literal> <operator>!=</operator> <name>len</name> <operator>||</operator>
        <name>list_size</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Should never happen unless client duplicates the extension */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>curves</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Don't allow our peer to make us allocate too much memory,
     * and leave room for a final 0 */</comment>
    <expr_stmt><expr><name>our_size</name> <operator>=</operator> <name>list_size</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>our_size</name> <operator>&gt;</operator> <name>MBEDTLS_ECP_DP_MAX</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>our_size</name> <operator>=</operator> <name>MBEDTLS_ECP_DP_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>curves</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><name>our_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>curves</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>curves</name></name> <operator>=</operator> <name>curves</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>list_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>our_size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>curve_info</name> <operator>=</operator> <call><name>mbedtls_ecp_curve_info_from_tls_id</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>curve_info</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>curves</name><operator>++</operator> <operator>=</operator> <name>curve_info</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>our_size</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_supported_point_formats</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                              <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>list_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>list_size</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>list_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>list_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_ECP_PF_UNCOMPRESSED</name> <operator>||</operator>
            <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_ECP_PF_COMPRESSED</name></expr> )</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>point_format</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name><operator>.</operator><name>point_format</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"point format selected: %d"</literal><operator>,</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list_size</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||
          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_ecjpake_kkpp</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ecjpake_check</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"skip ecjpake kkpp extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_read_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                                <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_read_round_one"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Only mark the extension as OK when we're sure it is */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cli_exts</name></name> <operator>|=</operator> <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_max_fragment_length_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                              <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MAX_FRAG_LEN_INVALID</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>mfl_code</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_truncated_hmac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_ENABLED</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>=</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_ENABLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_encrypt_then_mac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                      <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ETM_ENABLED</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>=</operator> <name>MBEDTLS_SSL_ETM_ENABLED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_extended_ms_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                      <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>==</operator> <name>MBEDTLS_SSL_EXTENDED_MS_ENABLED</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>=</operator> <name>MBEDTLS_SSL_EXTENDED_MS_ENABLED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_session_ticket_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_session</name></type> <name>session</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_session_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>session</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_ticket_parse</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_ticket_write</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Remember the client asked us to send a new ticket */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket length: %d"</literal><operator>,</operator> <name>len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket rejected: renegotiating"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

    <comment type="block">/*
     * Failures are ok: just ignore the ticket and proceed.
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_ticket_parse</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_ticket</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>,
                                           <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>session</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket is not authentic"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket is expired"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_ticket_parse"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Keep the session ID sent by the client, since we MUST send it back to
     * inform them we're accepting the ticket  (RFC 5077 section 3.4)
     */</comment>
    <expr_stmt><expr><name><name>session</name><operator>.</operator><name>id_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>session</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>id_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Zeroize instead of free as we copied the content */</comment>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"session successfully restored from ticket"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Don't send a new ticket after all, this one is OK */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_alpn_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>list_len</name></decl>, <decl><type ref="prev"/><name>cur_len</name></decl>, <decl><type ref="prev"/><name>ours_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>theirs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ours</name></decl>;</decl_stmt>

    <comment type="block">/* If ALPN not configured, just ignore the extension */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * opaque ProtocolName&lt;1..2^8-1&gt;;
     *
     * struct {
     *     ProtocolName protocol_name_list&lt;2..2^16-1&gt;
     * } ProtocolNameList;
     */</comment>

    <comment type="block">/* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */</comment>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>list_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>list_len</name> <operator>!=</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Use our order of preference
     */</comment>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>ours</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>ours</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ours</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ours_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>ours</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <for>for<control>( <init><expr><name>theirs</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>theirs</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>theirs</name> <operator>+=</operator> <name>cur_len</name></expr></incr> )</control>
        <block>{<block_content>
            <comment type="block">/* If the list is well formed, we should get equality first */</comment>
            <if_stmt><if>if<condition>( <expr><name>theirs</name> <operator>&gt;</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>cur_len</name> <operator>=</operator> <operator>*</operator><name>theirs</name><operator>++</operator></expr>;</expr_stmt>

            <comment type="block">/* Empty strings MUST NOT be included */</comment>
            <if_stmt><if>if<condition>( <expr><name>cur_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>cur_len</name> <operator>==</operator> <name>ours_len</name> <operator>&amp;&amp;</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>theirs</name></expr></argument>, <argument><expr><operator>*</operator><name>ours</name></expr></argument>, <argument><expr><name>cur_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name> <operator>=</operator> <operator>*</operator><name>ours</name></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="block">/* If we get there, no match was found */</comment>
    <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                            <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALPN */</comment>

<comment type="block">/*
 * Auxiliary functions for ServerHello parsing and related actions
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Return 0 if the given key uses one of the acceptable curves, -1 otherwise
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_check_key_curve</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_curve_info</name> <modifier>*</modifier><modifier>*</modifier></type><name>curves</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_curve_info</name> <modifier>*</modifier><modifier>*</modifier></type><name>crv</name> <init>= <expr><name>curves</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_group_id</name></type> <name>grp_id</name> <init>= <expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><name>pk</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>grp</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>crv</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>crv</name><operator>)</operator><operator>-&gt;</operator><name>grp_id</name></name> <operator>==</operator> <name>grp_id</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>crv</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_C */</comment>

<comment type="block">/*
 * Try picking a certificate for this ciphersuite,
 * return 0 on success and -1 on failure.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_pick_cert</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type> <name>ciphersuite_info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fallback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name> <init>= <expr><call><name>mbedtls_ssl_get_ciphersuite_sig_pk_alg</name><argument_list>( <argument><expr><name>ciphersuite_info</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_key_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_key_cert</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>key_cert</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_NONE</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite requires certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>list</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server has no certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_CRT</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"candidate certificate chain, certificate"</literal></expr></argument>,
                          <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>pk_alg</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate mismatch: key type"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * This avoids sending the client a cert it'll reject based on
         * keyUsage or other extensions.
         *
         * It also allows the user to provision different certificates for
         * different uses based on keyUsage, eg if they want to avoid signing
         * and decrypting with the same RSA key.
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_check_cert_usage</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>cert</name></name></expr></argument>, <argument><expr><name>ciphersuite_info</name></expr></argument>,
                                  <argument><expr><name>MBEDTLS_SSL_IS_SERVER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate mismatch: "</literal>
                                <literal type="string">"(extended) key usage extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>&amp;&amp;</operator>
            <call><name>ssl_check_key_curve</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>curves</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate mismatch: elliptic curve"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/*
         * Try to select a SHA-1 certificate for pre-1.2 clients, but still
         * present them a SHA-higher cert rather than failing if it's the only
         * one we got that satisfies the other conditions.
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name> <operator>&amp;&amp;</operator>
            <name><name>cur</name><operator>-&gt;</operator><name>cert</name><operator>-&gt;</operator><name>sig_md</name></name> <operator>!=</operator> <name>MBEDTLS_MD_SHA1</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>fallback</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>fallback</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate not preferred: "</literal>
                                    <literal type="string">"sha-2 with pre-TLS 1.2 client"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
            </block_content>}</block>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* If we get there, we got a winner */</comment>
        <break>break;</break>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>fallback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Do not update ssl-&gt;handshake-&gt;key_cert unless there is a match */</comment>
    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>key_cert</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_CRT</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"selected certificate chain, certificate"</literal></expr></argument>,
                          <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>key_cert</name><operator>-&gt;</operator><name>cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<comment type="block">/*
 * Check if a given ciphersuite is suitable for use with our config/keys/etc
 * Sets ciphersuite_info only if the suite matches.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ciphersuite_match</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>suite_id</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ciphersuite_info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>suite_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>suite_info</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><name>suite_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>suite_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"trying ciphersuite: %s"</literal><operator>,</operator> <name><name>suite_info</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>suite_info</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>||</operator>
        <name><name>suite_info</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite mismatch: version"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>suite_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MBEDTLS_CIPHERSUITE_NODTLS</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>arc4_disabled</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ARC4_DISABLED</name> <operator>&amp;&amp;</operator>
            <name><name>suite_info</name><operator>-&gt;</operator><name>cipher</name></name> <operator>==</operator> <name>MBEDTLS_CIPHER_ARC4_128</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite mismatch: rc4"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>suite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cli_exts</name></name> <operator>&amp;</operator> <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite mismatch: ecjpake "</literal>
                                    <literal type="string">"not configured or ext missing"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_ciphersuite_uses_ec</name><argument_list>( <argument><expr><name>suite_info</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>curves</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
          <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>curves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite mismatch: "</literal>
                            <literal type="string">"no common elliptic curve"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* If the ciphersuite requires a pre-shared key and we don't
     * have one, skip it now rather than failing later */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_ciphersuite_uses_psk</name><argument_list>( <argument><expr><name>suite_info</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_psk</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
          <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite mismatch: no pre-shared key"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * Final check: if ciphersuite requires us to have a
     * certificate/key of a particular type:
     * - select the appropriate certificate if we have one, or
     * - try the next ciphersuite if we don't
     * This must be done last since we modify the key_cert list.
     */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>ssl_pick_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>suite_info</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite mismatch: "</literal>
                            <literal type="string">"no suitable certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><operator>*</operator><name>ciphersuite_info</name> <operator>=</operator> <name>suite_info</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_client_hello_v2</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>got_common_suite</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ciph_len</name></decl>, <decl><type ref="prev"/><name>sess_len</name></decl>, <decl><type ref="prev"/><name>chal_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ciphersuites</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse client hello v2"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v2 illegal for renegotiation"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"record header"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v2, message type: %d"</literal><operator>,</operator>
                   <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v2, message len.: %d"</literal><operator>,</operator>
                   <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v2, max. version: [%d:%d]"</literal><operator>,</operator>
                   <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>,</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * SSLv2 Client Hello
     *
     * Record layer:
     *     0  .   1   message length
     *
     * SSL layer:
     *     2  .   2   message type
     *     3  .   4   protocol version
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_CLIENT_HELLO</name> <operator>||</operator>
        <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">17</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">512</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>)</operator></expr>
                     ?</condition><then> <expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>  </then><else>: <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client only supports ssl smaller than minimum"</literal>
                            <literal type="string">" [%d:%d] &lt; [%d:%d]"</literal><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                     <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_fetch_input</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>n</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_fetch_input"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

    <comment type="block">/*
     *    0  .   1   ciphersuitelist length
     *    2  .   3   session id length
     *    4  .   5   challenge length
     *    6  .  ..   ciphersuitelist
     *   ..  .  ..   session id
     *   ..  .  ..   challenge
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"record contents"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ciph_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sess_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>chal_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciph_len: %d, sess_len: %d, chal_len: %d"</literal><operator>,</operator>
                   <name>ciph_len</name><operator>,</operator> <name>sess_len</name><operator>,</operator> <name>chal_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Make sure each parameter length is valid
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>ciph_len</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator> <name>ciph_len</name> <operator>%</operator> <literal type="number">3</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>sess_len</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>chal_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>chal_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>!=</operator> <literal type="number">6</literal> <operator>+</operator> <name>ciph_len</name> <operator>+</operator> <name>sess_len</name> <operator>+</operator> <name>chal_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, ciphersuitelist"</literal></expr></argument>,
                   <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>ciph_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, session id"</literal></expr></argument>,
                   <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>ciph_len</name></expr></argument>, <argument><expr><name>sess_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, challenge"</literal></expr></argument>,
                   <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>ciph_len</name> <operator>+</operator> <name>sess_len</name></expr></argument>, <argument><expr><name>chal_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>ciph_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>sess_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>sess_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name> <operator>+</operator> <literal type="number">32</literal> <operator>-</operator> <name>chal_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>chal_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received TLS_EMPTY_RENEGOTIATION_INFO "</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received RENEGOTIATION SCSV "</literal>
                                    <literal type="string">"during renegotiation"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_FALLBACK_SCSV</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_SSL_FALLBACK_SCSV_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
            <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_SSL_FALLBACK_SCSV_VALUE</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received FALLBACK_SCSV"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"inapropriate fallback"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                        <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_FALLBACK_SCSV */</comment>

    <expr_stmt><expr><name>got_common_suite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ciphersuites</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ciphersuite_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator> <operator>(</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>||</operator>
                <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator> <operator>(</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>got_common_suite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_ciphersuite_match</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                               <argument><expr><operator>&amp;</operator><name>ciphersuite_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>ciphersuite_info</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <goto>goto <name>have_ciphersuite_v2</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>got_common_suite</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got ciphersuites in common, "</literal>
                            <literal type="string">"but none of them usable"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no ciphersuites in common"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>have_ciphersuite_v2</name>:</label>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"selected ciphersuite: %s"</literal><operator>,</operator> <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name> <operator>=</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name> <operator>=</operator> <name>ciphersuite_info</name></expr>;</expr_stmt>

    <comment type="block">/*
     * SSLv2 Client Hello relevant renegotiation security checks
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"legacy renegotiation, breaking off handshake"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse client hello v2"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_client_hello</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>got_common_suite</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ciph_offset</name></decl>, <decl><type ref="prev"/><name>comp_offset</name></decl>, <decl><type ref="prev"/><name>ext_offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msg_len</name></decl>, <decl><type ref="prev"/><name>ciph_len</name></decl>, <decl><type ref="prev"/><name>sess_len</name></decl>, <decl><type ref="prev"/><name>comp_len</name></decl>, <decl><type ref="prev"/><name>ext_len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cookie_offset</name></decl>, <decl><type ref="prev"/><name>cookie_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>renegotiation_info_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>handshake_failure</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ciphersuites</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse client hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>read_record_header</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/*
     * If renegotiating, then the input was read with mbedtls_ssl_read_record(),
     * otherwise read it ourselves manually in order to support SSLv2
     * ClientHello, which doesn't use the same record layer format.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_fetch_input</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_fetch_input"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_STREAM</name></expr> )</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>ssl_parse_client_hello_v2</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"record header"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * SSLv3/TLS Client Hello
     *
     * Record layer:
     *     0  .   0   message type
     *     1  .   2   protocol version
     *     3  .   11  DTLS: epoch + record sequence number
     *     3  .   4   message length
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v3, message type: %d"</literal><operator>,</operator>
                   <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v3, message len.: %d"</literal><operator>,</operator>
                   <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v3, protocol version: [%d:%d]"</literal><operator>,</operator>
                   <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_read_version</name><argument_list>( <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* According to RFC 5246 Appendix E.1, the version here is typically
     * "{03,00}, the lowest version number supported by the client, [or] the
     * value of ClientHello.client_version", so the only meaningful check here
     * is the major version shouldn't be less than 3 */</comment>
    <if_stmt><if>if<condition>( <expr><name>major</name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* For DTLS if this is the initial handshake, remember the client sequence
     * number to use it in our next message (RFC 6347 4.2.1) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        )</condition>
    <block>{<block_content>
        <comment type="block">/* Epoch should be 0 for initial handshakes */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_dtls_replay_check</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"replayed record, discarding"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <goto>goto <name>read_record_header</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* No MAC to check yet, so we can update right now */</comment>
        <expr_stmt><expr><call><name>mbedtls_ssl_dtls_replay_update</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

    <expr_stmt><expr><name>msg_len</name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Set by mbedtls_ssl_read_record() */</comment>
        <expr_stmt><expr><name>msg_len</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>msg_len</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_fetch_input</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>msg_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_fetch_input"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

    <comment type="block">/* Done reading this record, get ready for the next one */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <name>msg_len</name> <operator>+</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"record contents"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>msg_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Handshake layer:
     *     0  .   0   handshake type
     *     1  .   3   handshake length
     *     4  .   5   DTLS only: message seqence number
     *     6  .   8   DTLS only: fragment offset
     *     9  .  11   DTLS only: fragment length
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>msg_len</name> <operator>&lt;</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v3, handshake type: %d"</literal><operator>,</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_CLIENT_HELLO</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello v3, handshake len.: %d"</literal><operator>,</operator>
                   <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We don't support fragmentation of ClientHello (yet?) */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name>msg_len</name> <operator>!=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Copy the client's handshake message_seq on initial handshakes,
         * check sequence number on renego.
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* This couldn't be done in ssl_prepare_handshake_record() */</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cli_msg_seq</name> <init>= <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>
                                         <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if<condition>( <expr><name>cli_msg_seq</name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message_seq: "</literal>
                                    <literal type="string">"%d (expected %d)"</literal><operator>,</operator> <name>cli_msg_seq</name><operator>,</operator>
                                    <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cli_msg_seq</name> <init>= <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>
                                         <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>out_msg_seq</name></name> <operator>=</operator> <name>cli_msg_seq</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name>  <operator>=</operator> <name>cli_msg_seq</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         * For now we don't support fragmentation, so make sure
         * fragment_offset == 0 and fragment_length == length
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ClientHello fragmentation not supported"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>msg_len</name> <operator>-=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * ClientHello layer:
     *     0  .   1   protocol version
     *     2  .  33   random bytes (starting with 4 bytes of Unix time)
     *    34  .  35   session id length (1 byte)
     *    35  . 34+x  session id
     *   35+x . 35+x  DTLS only: cookie length (1 byte)
     *   36+x .  ..   DTLS only: cookie
     *    ..  .  ..   ciphersuite list length (2 bytes)
     *    ..  .  ..   ciphersuite list
     *    ..  .  ..   compression alg. list length (1 byte)
     *    ..  .  ..   compression alg. list
     *    ..  .  ..   extensions length (2 bytes, optional)
     *    ..  .  ..   extensions (optional)
     */</comment>

    <comment type="block">/*
     * Minimal length (with everything empty and extensions ommitted) is
     * 2 + 32 + 1 + 2 + 1 = 38 bytes. Check that first, so that we can
     * read at least up to session id length without worrying.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>msg_len</name> <operator>&lt;</operator> <literal type="number">38</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Check and save the protocol version
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, version"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_read_version</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client only supports ssl smaller than minimum"</literal>
                            <literal type="string">" [%d:%d] &lt; [%d:%d]"</literal><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                     <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Save client random (inc. Unix time)
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, random bytes"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check the session ID length and save session ID
     */</comment>
    <expr_stmt><expr><name>sess_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>sess_len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></sizeof> <operator>||</operator>
        <name>sess_len</name> <operator>+</operator> <literal type="number">34</literal> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>msg_len</name></expr> )</condition> <comment type="block">/* 2 for cipherlist length field */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, session id"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><name>sess_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>sess_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>,
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check the cookie length and content
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cookie_offset</name> <operator>=</operator> <literal type="number">35</literal> <operator>+</operator> <name>sess_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cookie_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>cookie_offset</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>cookie_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cookie_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>msg_len</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, cookie"</literal></expr></argument>,
                       <argument><expr><name>buf</name> <operator>+</operator> <name>cookie_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cookie_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_cookie_check</name></name> <operator>!=</operator> <name>NULL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_cookie_check</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_cookie</name></name></expr></argument>,
                                     <argument><expr><name>buf</name> <operator>+</operator> <name>cookie_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cookie_len</name></expr></argument>,
                                     <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id_len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"cookie verification failed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"cookie verification passed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_HELLO_VERIFY */</comment>
        <block>{<block_content>
            <comment type="block">/* We know we didn't send a cookie, so it should be empty */</comment>
            <if_stmt><if>if<condition>( <expr><name>cookie_len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"cookie verification skipped"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Check the ciphersuitelist length (will be parsed later)
     */</comment>
        <expr_stmt><expr><name>ciph_offset</name> <operator>=</operator> <name>cookie_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cookie_len</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>
        <expr_stmt><expr><name>ciph_offset</name> <operator>=</operator> <literal type="number">35</literal> <operator>+</operator> <name>sess_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>ciph_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><name>ciph_offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator>
             <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><name>ciph_offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>      <operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciph_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator>
        <name>ciph_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ciph_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> &gt;</argument_list></name> <name>msg_len</name> <operator>||</operator> <comment type="block">/* 1 for comp. alg. len */</comment>
        <operator>(</operator> <name>ciph_len</name> <operator>%</operator> <literal type="number">2</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, ciphersuitelist"</literal></expr></argument>,
                   <argument><expr><name>buf</name> <operator>+</operator> <name>ciph_offset</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,  <argument><expr><name>ciph_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check the compression algorithms length and pick one
     */</comment>
    <expr_stmt><expr><name>comp_offset</name> <operator>=</operator> <name>ciph_offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ciph_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>comp_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>comp_offset</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>comp_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator>
        <name>comp_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal> <operator>||</operator>
        <name>comp_len</name> <operator>+</operator> <name>comp_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>msg_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, compression"</literal></expr></argument>,
                      <argument><expr><name>buf</name> <operator>+</operator> <name>comp_offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>comp_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>comp_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><name>comp_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* See comments in ssl_write_client_hello() */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Do not parse the extensions if the protocol is SSLv3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="block">/*
         * Check the extension length
         */</comment>
        <expr_stmt><expr><name>ext_offset</name> <operator>=</operator> <name>comp_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>comp_len</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>msg_len</name> <operator>&gt;</operator> <name>ext_offset</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>msg_len</name> <operator>&lt;</operator> <name>ext_offset</name> <operator>+</operator> <literal type="number">2</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>ext_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><name>ext_offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator>
                    <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><name>ext_offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>      <operator>)</operator></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ext_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ext_len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>||</operator>
                <name>msg_len</name> <operator>!=</operator> <name>ext_offset</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>ext_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>ext</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>ext_offset</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello extensions"</literal></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>ext_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <while>while<condition>( <expr><name>ext_len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ext_id</name>   <init>= <expr><operator>(</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
                                    <operator>|</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ext_size</name> <init>= <expr><operator>(</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
                                    <operator>|</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if<condition>( <expr><name>ext_size</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>ext_len</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <switch>switch<condition>( <expr><name>ext_id</name></expr> )</condition>
            <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_SERVERNAME</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found ServerName extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_sni</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_servername_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>

            <case>case <expr><name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found renegotiation extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><name>renegotiation_info_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_renegotiation_info</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_SIG_ALG</name></expr>:</case>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found signature_algorithms extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_signature_algorithms_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 &amp;&amp;
          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found supported elliptic curves extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_supported_elliptic_curves</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>

            <case>case <expr><name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found supported point formats extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cli_exts</name></name> <operator>|=</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_supported_point_formats</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||
          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found ecjpake kkpp extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_ecjpake_kkpp</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found max fragment length extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_max_fragment_length_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found truncated hmac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_truncated_hmac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found encrypt then mac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_encrypt_then_mac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found extended master secret extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_extended_ms_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_SESSION_TICKET</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found session ticket extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_session_ticket_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <case>case <expr><name>MBEDTLS_TLS_EXT_ALPN</name></expr>:</case>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found alpn extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_alpn_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

            <default>default:</default>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"unknown extension found: %d (ignoring)"</literal><operator>,</operator>
                               <name>ext_id</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>

            <expr_stmt><expr><name>ext_len</name> <operator>-=</operator> <literal type="number">4</literal> <operator>+</operator> <name>ext_size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ext</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>ext_size</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ext_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ext_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_FALLBACK_SCSV</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">41</literal> <operator>+</operator> <name>sess_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_SSL_FALLBACK_SCSV_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
            <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_SSL_FALLBACK_SCSV_VALUE</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received FALLBACK_SCSV"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"inapropriate fallback"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                        <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_FALLBACK_SCSV */</comment>

    <comment type="block">/*
     * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>ciph_offset</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received TLS_EMPTY_RENEGOTIATION_INFO "</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received RENEGOTIATION SCSV during renegotiation"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Renegotiation security checks
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"legacy renegotiation, breaking off handshake"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
             <name>renegotiation_info_seen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"renegotiation_info extension missing (secure)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"legacy renegotiation not allowed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
             <name>renegotiation_info_seen</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"renegotiation_info extension present (legacy)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

    <if_stmt><if>if<condition>( <expr><name>handshake_failure</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Search for a matching ciphersuite
     * (At the end because we need information from the EC-based extensions
     * and certificate from the SNI callback triggered by the SNI extension.)
     */</comment>
    <expr_stmt><expr><name>got_common_suite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ciphersuites</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ciphersuite_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>ciph_offset</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>ciph_offset</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ciph_len</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator> <operator>(</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>||</operator>
                <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator> <operator>(</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>got_common_suite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_ciphersuite_match</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                               <argument><expr><operator>&amp;</operator><name>ciphersuite_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>ciphersuite_info</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <goto>goto <name>have_ciphersuite</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>got_common_suite</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got ciphersuites in common, "</literal>
                            <literal type="string">"but none of them usable"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no ciphersuites in common"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>have_ciphersuite</name>:</label>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"selected ciphersuite: %s"</literal><operator>,</operator> <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name> <operator>=</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name> <operator>=</operator> <name>ciphersuite_info</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_recv_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse client hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_truncated_hmac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_DISABLED</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, adding truncated hmac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_encrypt_then_mac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                            <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                            <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>suite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_EXTENDED_MS_DISABLED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * RFC 7366: "If a server receives an encrypt-then-MAC request extension
     * from a client and then selects a stream or Authenticated Encryption
     * with Associated Data (AEAD) ciphersuite, it MUST NOT send an
     * encrypt-then-MAC response extension back to the client."
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>suite</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>(
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <operator>(</operator> <name>cipher</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name><name>suite</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>cipher</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MBEDTLS_MODE_CBC</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, adding encrypt then mac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_extended_ms_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>==</operator> <name>MBEDTLS_SSL_EXTENDED_MS_DISABLED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, adding extended master secret "</literal>
                        <literal type="string">"extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_session_ticket_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, adding session ticket extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SESSION_TICKET</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SESSION_TICKET</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_renegotiation_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, secure renegotiation extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>peer_verify_data</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>own_verify_data</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_max_fragment_length_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                               <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>mfl_code</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MAX_FRAG_LEN_NONE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, max_fragment_length extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>mfl_code</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_supported_point_formats_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cli_exts</name></name> <operator>&amp;</operator>
          <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, supported_point_formats extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ECP_PF_UNCOMPRESSED</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_ecjpake_kkpp_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                        <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>kkpp_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Skip costly computation if not needed */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>!=</operator>
        <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, ecjpake kkpp extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_write_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                        <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kkpp_len</name></expr></argument>,
                                        <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="string">"mbedtls_ecjpake_write_round_one"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>kkpp_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>kkpp_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>kkpp_len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument> )</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_alpn_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, adding alpn extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * 0 . 1    ext identifier
     * 2 . 3    ext length
     * 4 . 5    protocol list length
     * 6 . 6    protocol name length
     * 7 . 7+n  protocol name
     */</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ALPN</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ALPN</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">7</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">7</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name></expr></argument>, <argument><expr><operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_hello_verify_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cookie_len_byte</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write hello verify request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * struct {
     *   ProtocolVersion server_version;
     *   opaque cookie&lt;0..2^8-1&gt;;
     * } HelloVerifyRequest;
     */</comment>

    <comment type="block">/* The RFC is not clear on this point, but sending the actual negotiated
     * version looks like the most interoperable thing to do. */</comment>
    <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"server version"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <comment type="block">/* If we get here, f_cookie_check is not null */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_cookie_write</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"inconsistent cookie callbacks"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Skip length byte until we know the length */</comment>
    <expr_stmt><expr><name>cookie_len_byte</name> <operator>=</operator> <name>p</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_cookie_write</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_cookie</name></name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument>,
                                     <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id_len</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"f_cookie_write"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>cookie_len_byte</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>p</name> <operator>-</operator> <operator>(</operator> <name>cookie_len_byte</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"cookie sent"</literal></expr></argument>, <argument><expr><name>cookie_len_byte</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>cookie_len_byte</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write hello verify request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_HELLO_VERIFY */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_server_hello</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_time_t</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>ext_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write server hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello was not authenticated"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write server hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <call><name>ssl_write_hello_verify_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_HELLO_VERIFY */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no RNG provided"</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_RNG</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     *     0  .   0   handshake type
     *     1  .   3   handshake length
     *     4  .   5   protocol version
     *     6  .   9   UNIX time()
     *    10  .  37   random bytes
     */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, chosen version: [%d:%d]"</literal><operator>,</operator>
                        <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>,</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name>       <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, current time: %lu"</literal><operator>,</operator> <name>t</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"server hello, random bytes"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Resume is 0  by default, see ssl_handshake_init().
     * It may be already set to 1 by ssl_parse_session_ticket_ext().
     * If not, try looking up session ID in our cache.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_get_cache</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_get_cache</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_cache</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"session successfully restored from cache"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * New session, create a new session id,
         * unless we're about to issue a session ticket
         */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
                                    <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * Resuming a session
         */</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_derive_keys</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_derive_keys"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     *    38  .  38     session id length
     *    39  . 38+n    session id
     *   39+n . 40+n    chosen ciphersuite
     *   41+n . 41+n    chosen compression alg.
     *   42+n . 43+n    extensions length
     *   44+n . 43+n+m  extensions
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, session id len.: %d"</literal><operator>,</operator> <name>n</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>,   <argument><expr><literal type="string">"server hello, session id"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">39</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"%s session has been resumed"</literal><operator>,</operator>
                   <ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name>      <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name>      <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, chosen ciphersuite: %s"</literal><operator>,</operator>
           <call><name>mbedtls_ssl_get_ciphersuite_name</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, compress alg.: 0x%02X"</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Do not write the extensions if the protocol is SSLv3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>!=</operator> <literal type="number">3</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     *  First write extensions, then the total length
     */</comment>
    <expr_stmt><expr><call><name>ssl_write_renegotiation_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_max_fragment_length_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_truncated_hmac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_encrypt_then_mac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_extended_ms_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_session_ticket_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_supported_point_formats_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_ecjpake_kkpp_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_alpn_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, total extension length: %d"</literal><operator>,</operator> <name>ext_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ext_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>ext_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>ext_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ext_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_SERVER_HELLO</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write server hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call>       <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call>   <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_certificate_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_certificate_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>dn_size</name></decl>, <decl><type ref="prev"/><name>total_dn_size</name></decl>;</decl_stmt> <comment type="block">/* excluding length bytes */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ct_len</name></decl>, <decl><type ref="prev"/><name>sa_len</name></decl>;</decl_stmt> <comment type="block">/* including length bytes */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>authmode</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_authmode</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_VERIFY_UNSET</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>authmode</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_authmode</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>authmode</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>authmode</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name> <operator>||</operator>
        <name>authmode</name> <operator>==</operator> <name>MBEDTLS_SSL_VERIFY_NONE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     *     0  .   0   handshake type
     *     1  .   3   handshake length
     *     4  .   4   cert type count
     *     5  .. m-1  cert types
     *     m  .. m+1  sig alg length (TLS 1.2 only)
     *    m+1 .. n-1  SignatureAndHashAlgorithms (TLS 1.2 only)
     *     n  .. n+1  length of all DNs
     *    n+2 .. n+3  length of DN 1
     *    n+4 .. ...  Distinguished Name #1
     *    ... .. ...  length of DN 2, etc.
     */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Supported certificate types
     *
     *     ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
     *     enum { (255) } ClientCertificateType;
     */</comment>
    <expr_stmt><expr><name>ct_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ct_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_CERT_TYPE_RSA_SIGN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>ct_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ct_len</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ct_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>sa_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * Add signature_algorithms for verify (TLS 1.2)
     *
     *     SignatureAndHashAlgorithm supported_signature_algorithms&lt;2..2^16-2&gt;;
     *
     *     struct {
     *           HashAlgorithm hash;
     *           SignatureAlgorithm signature;
     *     } SignatureAndHashAlgorithm;
     *
     *     enum { (255) } HashAlgorithm;
     *     enum { (255) } SignatureAlgorithm;
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Supported signature algorithms
         */</comment>
        <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cur</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>hash</name> <init>= <expr><call><name>mbedtls_ssl_hash_from_md_alg</name><argument_list>( <argument><expr><operator>*</operator><name>cur</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if<condition>( <expr><name>MBEDTLS_SSL_HASH_NONE</name> <operator>==</operator> <name>hash</name> <operator>||</operator> <call><name>mbedtls_ssl_set_calc_verify_md</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>sa_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>sa_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_SIG_RSA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>sa_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>sa_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_SIG_ECDSA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>sa_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>sa_len</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>sa_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>sa_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

    <comment type="block">/*
     * DistinguishedName certificate_authorities&lt;0..2^16-1&gt;;
     * opaque DistinguishedName&lt;1..2^16-1&gt;;
     */</comment>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_chain</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_chain</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ca_chain</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>total_dn_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>crt</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>dn_size</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator>
            <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>dn_size</name> <operator>||</operator>
            <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <name>dn_size</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"skipping CAs: buffer too short"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>dn_size</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>dn_size</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>dn_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>dn_size</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"requested DN"</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>dn_size</name></expr></argument>, <argument><expr><name>dn_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>total_dn_size</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>dn_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE_REQUEST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>ct_len</name> <operator>+</operator> <name>sa_len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>total_dn_size</name>  <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>ct_len</name> <operator>+</operator> <name>sa_len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>total_dn_size</name>       <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_get_ecdh_params_from_cert</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>MBEDTLS_PK_ECKEY</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server key not ECDH capable"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_get_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                 <argument><expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>,
                                 <argument><expr><name>MBEDTLS_ECDH_OURS</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ecdh_get_params"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_server_key_exchange</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>=
                            <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dig_signed</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>dig_signed_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>dig_signed</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>dig_signed_len</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                           \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                           \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ssl_get_ecdh_params_from_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>jlen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_write_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jlen</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_write_round_two"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>jlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>jlen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Note: we don't support identity hints, until someone asks
         * for them. */</comment>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>dhm_P</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>dhm_G</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no DH parameters set"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Ephemeral DH parameters:
         *
         * struct {
         *     opaque dh_p&lt;1..2^16-1&gt;;
         *     opaque dh_g&lt;1..2^16-1&gt;;
         *     opaque dh_Ys&lt;1..2^16-1&gt;;
         * } ServerDHParams;
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>P</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>dhm_P</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>G</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>dhm_G</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_mpi_copy"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_make_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>,
                        <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mbedtls_mpi_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>P</name></name></expr></argument> )</argument_list></call></expr></argument>,
                        <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_make_params"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>dig_signed</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dig_signed_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: X "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>X</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: P "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>P</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: G "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>G</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: GX"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>GX</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Ephemeral ECDH parameters:
         *
         * struct {
         *     ECParameters curve_params;
         *     ECPoint      public;
         * } ServerECDHParams;
         */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_curve_info</name> <modifier>*</modifier><modifier>*</modifier></type><name>curve</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group_id</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>

        <comment type="block">/* Match our preference list against the offered curves */</comment>
        <for>for<control>( <init><expr><name>gid</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>gid</name> <operator>!=</operator> <name>MBEDTLS_ECP_DP_NONE</name></expr>;</condition> <incr><expr><name>gid</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <for>for<control>( <init><expr><name>curve</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>curves</name></name></expr>;</init> <condition><expr><operator>*</operator><name>curve</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>curve</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>curve</name><operator>)</operator><operator>-&gt;</operator><name>grp_id</name></name> <operator>==</operator> <operator>*</operator><name>gid</name></expr> )</condition><block type="pseudo"><block_content>
                    <goto>goto <name>curve_matching_done</name>;</goto></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<label><name>curve_matching_done</name>:</label>
        <if_stmt><if>if<condition>( <expr><name>curve</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>curve</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no matching curve for ECDHE"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ECDHE curve: %s"</literal><operator>,</operator> <name><operator>(</operator><operator>*</operator><name>curve</name><operator>)</operator><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecp_group_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>grp</name></name></expr></argument>,
                                       <argument><expr><name><operator>(</operator><operator>*</operator><name>curve</name><operator>)</operator><operator>-&gt;</operator><name>grp_id</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecp_group_load"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_make_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                                      <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>-</operator> <name>n</name></expr></argument>,
                                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_make_params"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>dig_signed</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dig_signed_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_ECP</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: Q "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>Q</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>signature_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name> <init>= <expr><name>MBEDTLS_MD_NONE</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Choose hash algorithm. NONE means MD5 + SHA1 here.
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <call><name>mbedtls_ssl_md_alg_from_hash</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sig_alg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>md_alg</name> <operator>==</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator>
                  <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         * Compute the hash to be signed
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>md_alg</name> <operator>==</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>mbedtls_md5</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>mbedtls_sha1</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * digitally-signed struct {
             *     opaque md5_hash[16];
             *     opaque sha_hash[20];
             * };
             *
             * md5_hash
             *     MD5(ClientHello.random + ServerHello.random
             *                            + ServerParams);
             * sha_hash
             *     SHA(ClientHello.random + ServerHello.random
             *                            + ServerParams);
             */</comment>
            <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>,  <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>, <argument><expr><name>dig_signed</name></expr></argument>, <argument><expr><name>dig_signed_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>,  <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument>, <argument><expr><name>dig_signed</name></expr></argument>, <argument><expr><name>dig_signed_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name>md_alg</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name> <init>= <expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Info from md_alg will be used instead */</comment>
            <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <comment type="block">/*
             * digitally-signed struct {
             *     opaque client_random[32];
             *     opaque server_random[32];
             *     ServerDHParams params;
             * };
             */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_md_setup"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>dig_signed</name></expr></argument>, <argument><expr><name>dig_signed_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"parameters hash"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hashlen</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>hashlen</name></expr> </then><else>:
            <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Make the signature
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no private key"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sig_alg</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <call><name>mbedtls_ssl_sig_from_pk</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_sign</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>,
                        <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>signature_len</name></expr></argument>,
                        <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_pk_sign"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>signature_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>signature_len</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"my signature"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>signature_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>signature_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_server_hello_done</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write server hello done"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_SERVER_HELLO_DONE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_send_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write server hello done"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_client_dh_public</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Receive G^Y mod P, premaster = (G^Y)^X mod P
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_read_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_read_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: GY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>GY</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                           \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_encrypted_pms</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>pms_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>mbedtls_pk_get_len</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pms</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name> <operator>+</operator> <name>pms_offset</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>fake_pms</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>peer_pms</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>peer_pmslen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>diff</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>MBEDTLS_PK_RSA</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no RSA private key"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Decrypt the premaster using own private RSA key
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <operator>(</operator> <operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>||</operator>
            <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <operator>(</operator> <operator>(</operator> <name>len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <name>len</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>max_major_ver</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Protection against Bleichenbacher's attack: invalid PKCS#1 v1.5 padding
     * must not cause the connection to end immediately; instead, send a
     * bad_record_mac later in the handshake.
     * Also, avoid data-dependant branches here to protect against
     * timing-based variants.
     */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>fake_pms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>fake_pms</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_decrypt</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                      <argument><expr><name>peer_pms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer_pmslen</name></expr></argument>,
                      <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>peer_pms</name></expr></argument> )</argument_list></sizeof></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>diff</name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>ret</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name>peer_pmslen</name> <operator>^</operator> <literal type="number">48</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name><name>peer_pms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name><name>peer_pms</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DEBUG_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument> )</argument_list></sizeof> <operator>&lt;</operator> <name>pms_offset</name> <operator>||</operator>
        <sizeof>sizeof<argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>pms_offset</name> <operator>&lt;</operator> <literal type="number">48</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

    <comment type="block">/* mask = diff ? 0xff : 0x00 using bit operations to avoid branches */</comment>
    <comment type="block">/* MSVC has a warning about unary minus on unsigned, but this is
     * well-defined and precisely what we want to do here */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>push</name> <name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>disable</name> <name>:</name> <name>4146</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>-</operator> <operator>(</operator> <operator>(</operator> <name>diff</name> <operator>|</operator> <operator>-</operator> <name>diff</name> <operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> sizeof<operator>(</operator> <name>unsigned</name> <name>int</name> <operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>pop</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>mask</name> <operator>&amp;</operator> <name><name>fake_pms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator> <operator>&amp;</operator> <name><name>peer_pms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_client_psk_identity</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_psk</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
          <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no pre-shared key"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Receive client pre-shared key identity name
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">65535</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_psk</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_psk</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_psk</name></name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Identity is not a big secret since clients send it in the clear,
         * but treat it carefully anyway, just in case */</comment>
        <if_stmt><if>if<condition>( <expr><name>n</name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name> <operator>||</operator>
            <call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Unknown PSK identity"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                              <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                              <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_client_key_exchange</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ciphersuite_info</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_dh_public</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_client_dh_public"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_calc_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>,
                                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_PREMASTER_SIZE</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_calc_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: K "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>K</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                      \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_read_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                      <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_read_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_ECP</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: Qp "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>Qp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_calc_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_MPI_MAX_SIZE</name></expr></argument>,
                                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_calc_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: z  "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>z</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_psk_identity</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_client_psk_identity"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_psk_derive_premaster</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_psk_derive_premaster"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_psk_identity</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_client_psk_identity"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_encrypted_pms</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_encrypted_pms"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_psk_derive_premaster</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_psk_derive_premaster"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_psk_identity</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_client_psk_identity"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_dh_public</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_client_dh_public"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_psk_derive_premaster</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_psk_derive_premaster"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_psk_identity</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_client_psk_identity"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_read_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                       <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_read_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_ECP</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: Qp "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>Qp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_psk_derive_premaster</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_psk_derive_premaster"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_encrypted_pms</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ssl_parse_parse_encrypted_pms_secret"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_read_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                              <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_read_round_two"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_derive_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_derive_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_derive_keys</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_derive_keys"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call>       <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call>   <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_certificate_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_certificate_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sig_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_start</name> <init>= <expr><name>hash</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>hashlen</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Read the message without adding it to the checksum */</comment>
    <do>do <block>{<block_content>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record_layer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ssl_read_record_layer"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handle_message_type</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition>( <expr><name>MBEDTLS_ERR_SSL_NON_FATAL</name> <operator>==</operator> <name>ret</name></expr> )</condition>;</do>

    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <name>ret</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ssl_handle_message_type"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Process the message contents */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE_VERIFY</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate verify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     *  struct {
     *     SignatureAndHashAlgorithm algorithm; -- TLS 1.2 only
     *     opaque signature&lt;0..2^16-1&gt;;
     *  } DigitallySigned;
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>

        <comment type="block">/* For ECDSA, use SHA-1, not MD-5 + SHA-1 */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                        <argument><expr><name>MBEDTLS_PK_ECDSA</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>hash_start</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>hashlen</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 ||
          MBEDTLS_SSL_PROTO_TLS1_1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate verify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Hash
         */</comment>
        <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <call><name>mbedtls_ssl_md_alg_from_hash</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>md_alg</name> <operator>==</operator> <name>MBEDTLS_MD_NONE</name> <operator>||</operator> <call><name>mbedtls_ssl_set_calc_verify_md</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"peer not adhering to requested sig_alg"</literal>
                                <literal type="string">" for verify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MD_SHA1</name> <operator>==</operator> <name>md_alg</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>hash_start</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* Info from md_alg will be used instead */</comment>
        <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/*
         * Signature
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>pk_alg</name> <operator>=</operator> <call><name>mbedtls_ssl_pk_alg_from_sig</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>)</operator>
                        <operator>==</operator> <name>MBEDTLS_PK_NONE</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"peer not adhering to requested sig_alg"</literal>
                                <literal type="string">" for verify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Check the certificate's key type matches the signature alg
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>, <argument><expr><name>pk_alg</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"sig_alg doesn't match cert key"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate verify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sig_len</name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <name>sig_len</name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate verify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Calculate hash and verify signature */</comment>
    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_verify</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                           <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash_start</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>,
                           <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_pk_verify"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_update_handshake_status</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_new_session_ticket</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>tlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lifetime</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write new session ticket"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_NEW_SESSION_TICKET</name></expr>;</expr_stmt>

    <comment type="block">/*
     * struct {
     *     uint32 ticket_lifetime_hint;
     *     opaque ticket&lt;0..2^16-1&gt;;
     * } NewSessionTicket;
     *
     * 4  .  7   ticket_lifetime_hint (0 = unspecified)
     * 8  .  9   ticket_len (n)
     * 10 .  9+n ticket content
     */</comment>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_ticket_write</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_ticket</name></name></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>tlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lifetime</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_ticket_write"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>lifetime</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>lifetime</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>lifetime</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>lifetime</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>tlen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>tlen</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <name>tlen</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Morally equivalent to updating ssl-&gt;state, but NewSessionTicket and
     * ChangeCipherSpec share the same state.
     */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write new session ticket"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<comment type="block">/*
 * SSL handshake -- server side -- single step
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_handshake_server_step</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server state: %d"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_resend</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_SSL_HELLO_REQUEST</name></expr>:</case>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CLIENT_HELLO</name></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/*
         *  &lt;==   ClientHello
         */</comment>
        <case>case <expr><name>MBEDTLS_SSL_CLIENT_HELLO</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_hello</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/*
         *  ==&gt;   ServerHello
         *        Certificate
         *      ( ServerKeyExchange  )
         *      ( CertificateRequest )
         *        ServerHelloDone
         */</comment>
        <case>case <expr><name>MBEDTLS_SSL_SERVER_HELLO</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_server_hello</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_SERVER_CERTIFICATE</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_certificate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_SERVER_KEY_EXCHANGE</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_server_key_exchange</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_CERTIFICATE_REQUEST</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_certificate_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_SERVER_HELLO_DONE</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_server_hello_done</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/*
         *  &lt;== ( Certificate/Alert  )
         *        ClientKeyExchange
         *      ( CertificateVerify  )
         *        ChangeCipherSpec
         *        Finished
         */</comment>
        <case>case <expr><name>MBEDTLS_SSL_CLIENT_CERTIFICATE</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_parse_certificate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_CLIENT_KEY_EXCHANGE</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_client_key_exchange</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_CERTIFICATE_VERIFY</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_certificate_verify</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_parse_change_cipher_spec</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_CLIENT_FINISHED</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_parse_finished</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="block">/*
         *  ==&gt; ( NewSessionTicket )
         *        ChangeCipherSpec
         *        Finished
         */</comment>
        <case>case <expr><name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_new_session_ticket</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_change_cipher_spec</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_SERVER_FINISHED</name></expr>:</case>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_finished</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_FLUSH_BUFFERS</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake: done"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_ssl_handshake_wrapup</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"invalid state %d"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>
</unit>
