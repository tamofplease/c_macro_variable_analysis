<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ripemd160.c"><comment type="block">/*
 *  RIPE MD-160 implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 *  The RIPEMD-160 algorithm was designed by RIPE in 1996
 *  http://homes.esat.kuleuven.be/~bosselae/mbedtls_ripemd160.html
 *  http://ehash.iaik.tugraz.at/wiki/RIPEMD-160
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ripemd160.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<comment type="block">/*
 * 32-bit integer manipulation macros (little endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_LE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_LE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ]       )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 3] &lt;&lt; 24 );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_LE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_LE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                                    \
<cpp:value>{                                                               \
    (b)[(i)    ] = (unsigned char) ( ( (n)       ) &amp; 0xFF );    \
    (b)[(i) + 1] = (unsigned char) ( ( (n) &gt;&gt;  8 ) &amp; 0xFF );    \
    (b)[(i) + 2] = (unsigned char) ( ( (n) &gt;&gt; 16 ) &amp; 0xFF );    \
    (b)[(i) + 3] = (unsigned char) ( ( (n) &gt;&gt; 24 ) &amp; 0xFF );    \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ripemd160_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ripemd160_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ripemd160_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ripemd160_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ripemd160_clone</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RIPEMD-160 context setup
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ripemd160_starts</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC3D2E1F0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Process one block
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ripemd160_process</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>Ap</name></decl>, <decl><type ref="prev"/><name>Bp</name></decl>, <decl><type ref="prev"/><name>Cp</name></decl>, <decl><type ref="prev"/><name>Dp</name></decl>, <decl><type ref="prev"/><name>Ep</name></decl>, <decl><type ref="prev"/><name><name>X</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>Ap</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <name>Bp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>Cp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D</name> <operator>=</operator> <name>Dp</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>E</name> <operator>=</operator> <name>Ep</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro>   <cpp:value>( x ^ y ^ z )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro>   <cpp:value>( ( x &amp; y ) | ( ~x &amp; z ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F3</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro>   <cpp:value>( ( x | ~y ) ^ z )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F4</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro>   <cpp:value>( ( x &amp; z ) | ( y &amp; ~z ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F5</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter> )</parameter_list></cpp:macro>   <cpp:value>( x ^ ( y | ~z ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ( x &lt;&lt; n ) | ( x &gt;&gt; (32 - n) ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>k</name></type></parameter> )</parameter_list></cpp:macro>      \
    <cpp:value>a += f( b, c, d ) + X[r] + k;           \
    a = S( a, s ) + e;                      \
    c = S( c, 10 );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P2</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>rp</name></type></parameter>, <parameter><type><name>sp</name></type></parameter> )</parameter_list></cpp:macro>   \
    <cpp:value>P( a, b, c, d, e, r, s, F, K );         \
    P( a ## p, b ## p, c ## p, d ## p, e ## p, rp, sp, Fp, Kp );</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>   <cpp:value>F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name></cpp:macro>   <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fp</name></cpp:macro>  <cpp:value>F5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kp</name></cpp:macro>  <cpp:value>0x50A28BE6</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>K</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Fp</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Kp</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>   <cpp:value>F2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name></cpp:macro>   <cpp:value>0x5A827999</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fp</name></cpp:macro>  <cpp:value>F4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kp</name></cpp:macro>  <cpp:value>0x5C4DD124</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>K</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Fp</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Kp</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>   <cpp:value>F3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name></cpp:macro>   <cpp:value>0x6ED9EBA1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fp</name></cpp:macro>  <cpp:value>F3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kp</name></cpp:macro>  <cpp:value>0x6D703EF3</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>K</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Fp</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Kp</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>   <cpp:value>F4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name></cpp:macro>   <cpp:value>0x8F1BBCDC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fp</name></cpp:macro>  <cpp:value>F2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kp</name></cpp:macro>  <cpp:value>0x7A6D76E9</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>K</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Fp</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Kp</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>   <cpp:value>F5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name></cpp:macro>   <cpp:value>0xA953FD4E</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fp</name></cpp:macro>  <cpp:value>F1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kp</name></cpp:macro>  <cpp:value>0x00000000</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P2</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>K</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Fp</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Kp</name></cpp:undef>

    <expr_stmt><expr><name>C</name>             <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>+</operator> <name>Dp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>D</name> <operator>+</operator> <name>Ep</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>E</name> <operator>+</operator> <name>Ap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>A</name> <operator>+</operator> <name>Bp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>B</name> <operator>+</operator> <name>Cp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>C</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_RIPEMD160_PROCESS_ALT */</comment>

<comment type="block">/*
 * RIPEMD-160 process buffer
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ripemd160_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>fill</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ilen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ilen</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>left</name> <operator>&amp;&amp;</operator> <name>ilen</name> <operator>&gt;=</operator> <name>fill</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>fill</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ripemd160_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>ilen</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ripemd160_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ripemd160_padding</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
 <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * RIPEMD-160 final digest
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ripemd160_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_ripemd160_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>padn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>msglen</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">29</literal> <operator>)</operator>
         <operator>|</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>low</name>  <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>low</name></expr></argument>,  <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>high</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>padn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>last</name> <operator>&lt;</operator> <literal type="number">56</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator> <literal type="number">56</literal> <operator>-</operator> <name>last</name> <operator>)</operator></expr> </then><else>: <expr><operator>(</operator> <literal type="number">120</literal> <operator>-</operator> <name>last</name> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ripemd160_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ripemd160_padding</name></expr></argument>, <argument><expr><name>padn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * output = RIPEMD-160( input buffer )
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ripemd160</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ripemd160_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ripemd160_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Test vectors from the RIPEMD-160 paper and
 * http://homes.esat.kuleuven.be/~bosselae/mbedtls_ripemd160.html#HMAC
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTS</name></cpp:macro>   <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYS</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ripemd160_test_input</name><index>[<expr><name>TESTS</name></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">""</literal></expr>,
    <expr><literal type="string">"a"</literal></expr>,
    <expr><literal type="string">"abc"</literal></expr>,
    <expr><literal type="string">"message digest"</literal></expr>,
    <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr>,
    <expr><literal type="string">"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"</literal></expr>,
    <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</literal></expr>,
    <expr><literal type="string">"1234567890123456789012345678901234567890"</literal>
        <literal type="string">"1234567890123456789012345678901234567890"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ripemd160_test_md</name><index>[<expr><name>TESTS</name></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
      <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x31</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xae</literal></expr>,
      <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xfe</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
      <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xfc</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,
      <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x36</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xbb</literal></expr>,
      <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xbc</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
      <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x2b</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xed</literal></expr>,
      <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xdb</literal></expr>,
      <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xfb</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ripemd160_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>output</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  RIPEMD-160 test #%d: "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_ripemd160</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ripemd160_test_input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                   <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>ripemd160_test_input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument>,
                   <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ripemd160_test_md</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RIPEMD160_C */</comment>
</unit>
