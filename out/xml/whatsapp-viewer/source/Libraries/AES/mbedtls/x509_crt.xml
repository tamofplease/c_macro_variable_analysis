<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/x509_crt.c"><comment type="block">/*
 *  X.509 certificate parsing and verification
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The ITU-T X.509 standard defines a certificate format for PKI.
 *
 *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
 *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
 *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
 *
 *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
 *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509_crt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_snprintf</name></cpp:macro>   <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !_WIN32 || EFIX64 || EFI32 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Default profile
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name></type> <name>mbedtls_x509_crt_profile_default</name> <init>=
<expr><block>{
    <comment type="block">/* Hashes from SHA-1 and above */</comment>
    <expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_RIPEMD160</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA224</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA384</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA512</name></expr></argument> )</argument_list></call></expr>,
    <expr><literal type="number">0xFFFFFFF</literal></expr>, <comment type="block">/* Any PK alg    */</comment>
    <expr><literal type="number">0xFFFFFFF</literal></expr>, <comment type="block">/* Any curve     */</comment>
    <expr><literal type="number">2048</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Next-default profile
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name></type> <name>mbedtls_x509_crt_profile_next</name> <init>=
<expr><block>{
    <comment type="block">/* Hashes from SHA-256 and above */</comment>
    <expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA384</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA512</name></expr></argument> )</argument_list></call></expr>,
    <expr><literal type="number">0xFFFFFFF</literal></expr>, <comment type="block">/* Any PK alg    */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Curves at or above 128-bit security level */</comment>
    <expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_SECP384R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_SECP521R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_BP256R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_BP384R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_BP512R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_SECP256K1</name></expr></argument> )</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><literal type="number">2048</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * NSA Suite B Profile
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name></type> <name>mbedtls_x509_crt_profile_suiteb</name> <init>=
<expr><block>{
    <comment type="block">/* Only SHA-256 and 384 */</comment>
    <expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA384</name></expr></argument> )</argument_list></call></expr>,
    <comment type="block">/* Only ECDSA */</comment>
    <expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_PK_ECDSA</name></expr></argument> )</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Only NIST P-256 and P-384 */</comment>
    <expr><call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr></argument> )</argument_list></call> <operator>|</operator>
    <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>MBEDTLS_ECP_DP_SECP384R1</name></expr></argument> )</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Check md_alg against profile
 * Return 0 if md_alg acceptable for this profile, -1 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_profile_check_md_alg</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>,
                                      <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>profile</name><operator>-&gt;</operator><name>allowed_mds</name></name> <operator>&amp;</operator> <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check pk_alg against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_profile_check_pk_alg</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>,
                                      <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>profile</name><operator>-&gt;</operator><name>allowed_pks</name></name> <operator>&amp;</operator> <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>pk_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_profile_check_key</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>,
                                   <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_RSA</name> <operator>||</operator> <name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_RSASSA_PSS</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_get_bitlen</name><argument_list>( <argument><expr><name>pk</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <name><name>profile</name><operator>-&gt;</operator><name>rsa_min_bitlen</name></name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>||</operator>
        <name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name> <operator>||</operator>
        <name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY_DH</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_ecp_group_id</name></type> <name>gid</name> <init>= <expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><name>pk</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>grp</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>profile</name><operator>-&gt;</operator><name>allowed_curves</name></name> <operator>&amp;</operator> <call><name>MBEDTLS_X509_ID_FLAG</name><argument_list>( <argument><expr><name>gid</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_version</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ver</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ver</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>ver</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_VERSION</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_VERSION</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  Validity ::= SEQUENCE {
 *       notBefore      Time,
 *       notAfter       Time }
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_dates</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>to</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_time</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>from</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_time</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>to</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * X.509 v2/v3 unique identifier (not parsed)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_uid</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                         <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>uid</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uid</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>n</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>uid</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>uid</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_basic_constraints</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ca_istrue</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>max_pathlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <comment type="block">/*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>ca_istrue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* DEFAULT FALSE */</comment>
    <expr_stmt><expr><operator>*</operator><name>max_pathlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* endless */</comment>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_bool</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>ca_istrue</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>ca_istrue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>ca_istrue</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>ca_istrue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>max_pathlen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>max_pathlen</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_ns_cert_type</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ns_cert_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_bitstring</name></type> <name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_bitstring</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Get actual bitstring */</comment>
    <expr_stmt><expr><operator>*</operator><name>ns_cert_type</name> <operator>=</operator> <operator>*</operator><name><name>bs</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_key_usage</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>key_usage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_bitstring</name></type> <name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_bitstring</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Get actual bitstring */</comment>
    <expr_stmt><expr><operator>*</operator><name>key_usage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bs</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> sizeof<operator>(</operator> <name>unsigned</name> <name>int</name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>key_usage</name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>bs</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
 *
 * KeyPurposeId ::= OBJECT IDENTIFIER
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_ext_key_usage</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>ext_key_usage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_sequence_of</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>ext_key_usage</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OID</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Sequence length must be &gt;= 1 */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ext_key_usage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SubjectAltName ::= GeneralNames
 *
 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
 *
 * GeneralName ::= CHOICE {
 *      otherName                       [0]     OtherName,
 *      rfc822Name                      [1]     IA5String,
 *      dNSName                         [2]     IA5String,
 *      x400Address                     [3]     ORAddress,
 *      directoryName                   [4]     Name,
 *      ediPartyName                    [5]     EDIPartyName,
 *      uniformResourceIdentifier       [6]     IA5String,
 *      iPAddress                       [7]     OCTET STRING,
 *      registeredID                    [8]     OBJECT IDENTIFIER }
 *
 * OtherName ::= SEQUENCE {
 *      type-id    OBJECT IDENTIFIER,
 *      value      [0] EXPLICIT ANY DEFINED BY type-id }
 *
 * EDIPartyName ::= SEQUENCE {
 *      nameAssigner            [0]     DirectoryString OPTIONAL,
 *      partyName               [1]     DirectoryString }
 *
 * NOTE: we only parse and use dNSName at this point.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_subject_alt_name</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                      <parameter><decl><type><name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>subject_alt_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>tag_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_sequence</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>subject_alt_name</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Get main sequence tag */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>+</operator> <name>len</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>tag</name> <operator>&amp;</operator> <name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>)</operator> <operator>!=</operator> <name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Skip everything but DNS name */</comment>
        <if_stmt><if>if<condition>( <expr><name>tag</name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <literal type="number">2</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>tag_len</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Allocate and assign next pointer */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_asn1_sequence</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                        <name>MBEDTLS_ERR_ASN1_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>tag_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Set final sequence entry's next pointer to NULL */</comment>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * X.509 v3 extensions
 *
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_crt_ext</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end_ext_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end_ext_octet</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_ext</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>v3_ext</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */</comment>
        <decl_stmt><decl><type><name>mbedtls_x509_buf</name></type> <name>extn_oid</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_critical</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* DEFAULT FALSE */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ext_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>end_ext_data</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

        <comment type="block">/* Get extension ID */</comment>
        <expr_stmt><expr><name><name>extn_oid</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>extn_oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OID</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>extn_oid</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>extn_oid</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Get optional critical */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_bool</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_critical</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator> <name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Data should be octet string type */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                <argument><expr><name>MBEDTLS_ASN1_OCTET_STRING</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>end_ext_octet</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>end_ext_octet</name> <operator>!=</operator> <name>end_ext_data</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Detect supported extensions
         */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_x509_ext_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>extn_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* No parser found, skip extension */</comment>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>end_ext_octet</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name>is_critical</name></expr> )</condition>
            <block>{<block_content>
                <comment type="block">/* Data is marked as critical: fail */</comment>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                        <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Forbid repeated extensions */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>ext_type</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>|=</operator> <name>ext_type</name></expr>;</expr_stmt>

        <switch>switch<condition>( <expr><name>ext_type</name></expr> )</condition>
        <block>{<block_content>
        <case>case <expr><name>MBEDTLS_X509_EXT_BASIC_CONSTRAINTS</name></expr>:</case>
            <comment type="block">/* Parse basic constraints */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_basic_constraints</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_octet</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>ca_istrue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>max_pathlen</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_X509_EXT_KEY_USAGE</name></expr>:</case>
            <comment type="block">/* Parse key usage */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_key_usage</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_octet</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>key_usage</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE</name></expr>:</case>
            <comment type="block">/* Parse extended key usage */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_ext_key_usage</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_octet</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>ext_key_usage</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_X509_EXT_SUBJECT_ALT_NAME</name></expr>:</case>
            <comment type="block">/* Parse subject alt name */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_subject_alt_name</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_octet</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject_alt_names</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_X509_EXT_NS_CERT_TYPE</name></expr>:</case>
            <comment type="block">/* Parse netscape certificate type */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_ns_cert_type</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_ext_octet</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>ns_cert_type</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
            <break>break;</break>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse and fill a single X.509 certificate in DER format
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_crt_parse_der_core</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>crt_end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_buf</name></type> <name>sig_params1</name></decl>, <decl><type ref="prev"/><name>sig_params2</name></decl>, <decl><type ref="prev"/><name>sig_oid2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_params1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_params2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_oid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check for valid input
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>crt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Use the original buffer until we figure out actual length</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>crt_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <comment type="line">// Create and populate a new buffer for the raw field</comment>
    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>crt_end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Direct pointers to the new buffer </comment>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>crt_end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <comment type="block">/*
     * TBSCertificate  ::=  SEQUENCE  {
     */</comment>
    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>crt</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_version</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>version</name></name></expr></argument>  )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_serial</name><argument_list>(   <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>serial</name></name></expr></argument>   )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_alg</name><argument_list>(      <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig_oid</name></name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name>sig_params1</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_UNKNOWN_VERSION</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_sig_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_params1</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * issuer               Name
     */</comment>
    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_name</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>crt</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_dates</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * subject              Name
     */</comment>
    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_name</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>crt</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * SubjectPublicKeyInfo
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_parse_subpubkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     *  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_get_uid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>issuer_id</name></name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_get_uid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject_id</name></name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_get_crt_ext</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>crt_end</name></expr>;</expr_stmt>

    <comment type="block">/*
     *  }
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_oid2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_params2</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>sig_oid</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>sig_oid2</name><operator>.</operator><name>len</name></name> <operator>||</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>sig_oid</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sig_oid2</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>sig_oid</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>sig_params1</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>sig_params2</name><operator>.</operator><name>len</name></name> <operator>||</operator>
        <operator>(</operator> <name><name>sig_params1</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <call><name>memcmp</name><argument_list>( <argument><expr><name><name>sig_params1</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sig_params2</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sig_params1</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_SIG_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_sig</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_parse_der</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                        <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name> <init>= <expr><name>chain</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Check for valid input
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>crt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>crt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/*
     * Add new certificate on the end of the chain if needed.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>crt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>crt</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_crt_parse_der_core</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>prev</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>crt</name> <operator>!=</operator> <name>chain</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_parse</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>success</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>first_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total_failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>buf_format</name> <init>= <expr><name>MBEDTLS_X509_FORMAT_DER</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Check for valid input
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
        <call><name>strstr</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><literal type="string">"-----BEGIN CERTIFICATE-----"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>buf_format</name> <operator>=</operator> <name>MBEDTLS_X509_FORMAT_PEM</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>buf_format</name> <operator>==</operator> <name>MBEDTLS_X509_FORMAT_DER</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>mbedtls_x509_crt_parse_der</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name>mbedtls_x509_crt_parse_der</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>buf_format</name> <operator>==</operator> <name>MBEDTLS_X509_FORMAT_PEM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mbedtls_pem_context</name></type> <name>pem</name></decl>;</decl_stmt>

        <comment type="block">/* 1 rather than 0 since the terminating NULL byte is counted in */</comment>
        <while>while<condition>( <expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>mbedtls_pem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If we get there, we know the string is null-terminated */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_pem_read_buffer</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument>,
                           <argument><expr><literal type="string">"-----BEGIN CERTIFICATE-----"</literal></expr></argument>,
                           <argument><expr><literal type="string">"-----END CERTIFICATE-----"</literal></expr></argument>,
                           <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * Was PEM encoded
                 */</comment>
                <expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_PEM_BAD_INPUT_DATA</name></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mbedtls_pem_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/*
                 * PEM header and footer were found
                 */</comment>
                <expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>

                <if_stmt><if>if<condition>( <expr><name>first_error</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>first_error</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>total_failed</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <break>break;</break></block_content></block></else></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_der</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>pem</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pem</name><operator>.</operator><name>buflen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_pem_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <comment type="block">/*
                 * Quit parsing on a memory error
                 */</comment>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt><if>if<condition>( <expr><name>first_error</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>first_error</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>total_failed</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>success</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>total_failed</name> <operator>)</operator></expr>;</return></block_content></block></if>
    <if type="elseif">else if<condition>( <expr><name>first_error</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>first_error</name> <operator>)</operator></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_PARSE_C */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Load one or more certificates and add them to the chained list
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_parse_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_load_file</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_crt_parse_path</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>w_ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WCHAR</name></type> <name><name>szDir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>file_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hFind</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <name>MAX_PATH</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>szDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szDir</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filename</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>filename</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filename</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>w_ret</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>( <argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>szDir</name></expr></argument>,
                                 <argument><expr><name>MAX_PATH</name> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>w_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>hFind</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>( <argument><expr><name>szDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>hFind</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>MAX_PATH</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>file_data</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>w_ret</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>( <argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>file_data</name><operator>.</operator><name>cFileName</name></name></expr></argument>,
                                     <argument><expr><call><name>lstrlenW</name><argument_list>( <argument><expr><name><name>file_data</name><operator>.</operator><name>cFileName</name></name></expr></argument> )</argument_list></call></expr></argument>,
                                     <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>w_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>w_ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_file</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>w_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>w_ret</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>
    while<condition>( <expr><call><name>FindNextFileW</name><argument_list>( <argument><expr><name>hFind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_data</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>;</do>

    <if_stmt><if>if<condition>( <expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_NO_MORE_FILES</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FindClose</name><argument_list>( <argument><expr><name>hFind</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* _WIN32 */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>t_ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>snp_ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>entry_name</name><index>[<expr><name>MBEDTLS_X509_MAX_FILE_PATH_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><call><name>opendir</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>dir</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_readdir_mutex</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>closedir</name><argument_list>( <argument><expr><name>dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <while>while<condition>( <expr><operator>(</operator> <name>entry</name> <operator>=</operator> <call><name>readdir</name><argument_list>( <argument><expr><name>dir</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>snp_ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>entry_name</name></expr></argument>, <argument><expr><sizeof>sizeof <name>entry_name</name></sizeof></expr></argument>,
                                    <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>snp_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>snp_ret</name> <operator>&gt;=</operator> <sizeof>sizeof <name>entry_name</name></sizeof></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_X509_BUFFER_TOO_SMALL</name></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><call><name>stat</name><argument_list>( <argument><expr><name>entry_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>S_ISREG</name><argument_list>( <argument><expr><name><name>sb</name><operator>.</operator><name>st_mode</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// Ignore parse errors</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><name>t_ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_file</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>entry_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>t_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>t_ret</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>closedir</name><argument_list>( <argument><expr><name>dir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_readdir_mutex</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_FS_IO */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_info_subject_alt_name</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>subject_alt_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>subject_alt_name</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sep_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>sep_len</name> <operator>&gt;=</operator> <name>n</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>n</name> <operator>-=</operator> <name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name>sep_len</name></expr>;</expr_stmt>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sep_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>sep</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sep_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_ITEM</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                           \
    <cpp:value>{                                           \
        ret = mbedtls_snprintf( p, n, "%s" i, sep );    \
        MBEDTLS_X509_SAFE_SNPRINTF;                        \
        sep = ", ";                             \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CERT_TYPE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                    \
    <cpp:value>if( ns_cert_type &amp; type )                   \
        PRINT_ITEM( name );</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_info_cert_type</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ns_cert_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT</name></expr></argument>,         <argument><expr><literal type="string">"SSL Client"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER</name></expr></argument>,         <argument><expr><literal type="string">"SSL Server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_EMAIL</name></expr></argument>,              <argument><expr><literal type="string">"Email"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING</name></expr></argument>,     <argument><expr><literal type="string">"Object Signing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_RESERVED</name></expr></argument>,           <argument><expr><literal type="string">"Reserved"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_SSL_CA</name></expr></argument>,             <argument><expr><literal type="string">"SSL CA"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA</name></expr></argument>,           <argument><expr><literal type="string">"Email CA"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CERT_TYPE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA</name></expr></argument>,  <argument><expr><literal type="string">"Object Signing CA"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_USAGE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>    \
    <cpp:value>if( key_usage &amp; code )      \
        PRINT_ITEM( name );</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_info_key_usage</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_usage</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_DIGITAL_SIGNATURE</name></expr></argument>,    <argument><expr><literal type="string">"Digital Signature"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_NON_REPUDIATION</name></expr></argument>,      <argument><expr><literal type="string">"Non Repudiation"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_KEY_ENCIPHERMENT</name></expr></argument>,     <argument><expr><literal type="string">"Key Encipherment"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_DATA_ENCIPHERMENT</name></expr></argument>,    <argument><expr><literal type="string">"Data Encipherment"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_KEY_AGREEMENT</name></expr></argument>,        <argument><expr><literal type="string">"Key Agreement"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_KEY_CERT_SIGN</name></expr></argument>,        <argument><expr><literal type="string">"Key Cert Sign"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_CRL_SIGN</name></expr></argument>,             <argument><expr><literal type="string">"CRL Sign"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_ENCIPHER_ONLY</name></expr></argument>,        <argument><expr><literal type="string">"Encipher Only"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>KEY_USAGE</name><argument_list>( <argument><expr><name>MBEDTLS_X509_KU_DECIPHER_ONLY</name></expr></argument>,        <argument><expr><literal type="string">"Decipher Only"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_info_ext_key_usage</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>extended_key_usage</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>extended_key_usage</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_oid_get_extended_key_usage</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>desc</name> <operator>=</operator> <literal type="string">"???"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return an informational string about the certificate.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEFORE_COLON</name></cpp:macro>    <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC</name></cpp:macro>              <cpp:value>"18"</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_info</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>key_size_str</name><index>[<expr><name>BEFORE_COLON</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>crt</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\nCertificate is uninitialised!\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%scert. version     : %d\n"</literal></expr></argument>,
                               <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%sserial number     : "</literal></expr></argument>,
                               <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_serial_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>serial</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sissuer name       : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_dn_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%ssubject name      : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_dn_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sissued  on        : "</literal> \
                   <literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                   <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name><operator>.</operator><name>mon</name></name></expr></argument>,
                   <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name><operator>.</operator><name>day</name></name></expr></argument>,  <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name><operator>.</operator><name>hour</name></name></expr></argument>,
                   <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name><operator>.</operator><name>min</name></name></expr></argument>,  <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_from</name><operator>.</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sexpires on        : "</literal> \
                   <literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                   <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name><operator>.</operator><name>mon</name></name></expr></argument>,
                   <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name><operator>.</operator><name>day</name></name></expr></argument>,  <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name><operator>.</operator><name>hour</name></name></expr></argument>,
                   <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name><operator>.</operator><name>min</name></name></expr></argument>,  <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>valid_to</name><operator>.</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%ssigned using      : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_sig_alg_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>sig_oid</name></name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>,
                             <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <comment type="block">/* Key size */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_key_size_helper</name><argument_list>( <argument><expr><name>key_size_str</name></expr></argument>, <argument><expr><name>BEFORE_COLON</name></expr></argument>,
                                      <argument><expr><call><name>mbedtls_pk_get_name</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%s%-"</literal> <name>BC</name> <literal type="string">"s: %d bits"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>key_size_str</name></expr></argument>,
                          <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mbedtls_pk_get_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Optional extensions
     */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_BASIC_CONSTRAINTS</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sbasic constraints : CA=%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                        <argument><expr><ternary><condition><expr><name><name>crt</name><operator>-&gt;</operator><name>ca_istrue</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>max_pathlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">", max_pathlen=%d"</literal></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>max_pathlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_SUBJECT_ALT_NAME</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%ssubject alt name  : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_info_subject_alt_name</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject_alt_names</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_NS_CERT_TYPE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%scert. type        : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_info_cert_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>ns_cert_type</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_KEY_USAGE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%skey usage         : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_info_key_usage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>key_usage</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sext key usage     : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_info_ext_key_usage</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>ext_key_usage</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>x509_crt_verify_string</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>x509_crt_verify_string</name></name></type> <name><name>x509_crt_verify_strings</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_EXPIRED</name></expr>,       <expr><literal type="string">"The certificate validity has expired"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_REVOKED</name></expr>,       <expr><literal type="string">"The certificate has been revoked (is on a CRL)"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_CN_MISMATCH</name></expr>,   <expr><literal type="string">"The certificate Common Name (CN) does not match with the expected CN"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>,   <expr><literal type="string">"The certificate is not correctly signed by the trusted CA"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCRL_NOT_TRUSTED</name></expr>,    <expr><literal type="string">"The CRL is not correctly signed by the trusted CA"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCRL_EXPIRED</name></expr>,        <expr><literal type="string">"The CRL is expired"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_MISSING</name></expr>,       <expr><literal type="string">"Certificate was missing"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_SKIP_VERIFY</name></expr>,   <expr><literal type="string">"Certificate verification was skipped"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_OTHER</name></expr>,         <expr><literal type="string">"Other reason (can be used by verify callback)"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_FUTURE</name></expr>,        <expr><literal type="string">"The certificate validity starts in the future"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCRL_FUTURE</name></expr>,         <expr><literal type="string">"The CRL is from the future"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_KEY_USAGE</name></expr>,     <expr><literal type="string">"Usage does not match the keyUsage extension"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_EXT_KEY_USAGE</name></expr>, <expr><literal type="string">"Usage does not match the extendedKeyUsage extension"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_NS_CERT_TYPE</name></expr>,  <expr><literal type="string">"Usage does not match the nsCertType extension"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_BAD_MD</name></expr>,        <expr><literal type="string">"The certificate is signed with an unacceptable hash."</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_BAD_PK</name></expr>,        <expr><literal type="string">"The certificate is signed with an unacceptable PK alg (eg RSA vs ECDSA)."</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCERT_BAD_KEY</name></expr>,       <expr><literal type="string">"The certificate is signed with an unacceptable key (eg bad curve, RSA too short)."</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCRL_BAD_MD</name></expr>,         <expr><literal type="string">"The CRL is signed with an unacceptable hash."</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCRL_BAD_PK</name></expr>,         <expr><literal type="string">"The CRL is signed with an unacceptable PK alg (eg RSA vs ECDSA)."</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_X509_BADCRL_BAD_KEY</name></expr>,        <expr><literal type="string">"The CRL is signed with an unacceptable key (eg bad curve, RSA too short)."</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mbedtls_x509_crt_verify_info</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
                          <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>x509_crt_verify_string</name></name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name>x509_crt_verify_strings</name></expr>;</init> <condition><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>flags</name> <operator>&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>code</name></name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>^=</operator> <name><name>cur</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%sUnknown reason "</literal>
                                       <literal type="string">"(this should not happen)\n"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_check_key_usage</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>,
                                      <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>usage</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>usage_must</name></decl>, <decl><type ref="prev"/><name>usage_may</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>may_mask</name> <init>= <expr><name>MBEDTLS_X509_KU_ENCIPHER_ONLY</name>
                          <operator>|</operator> <name>MBEDTLS_X509_KU_DECIPHER_ONLY</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_KEY_USAGE</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>usage_must</name> <operator>=</operator> <name>usage</name> <operator>&amp;</operator> <operator>~</operator><name>may_mask</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name><name>crt</name><operator>-&gt;</operator><name>key_usage</name></name> <operator>&amp;</operator> <operator>~</operator><name>may_mask</name> <operator>)</operator> <operator>&amp;</operator> <name>usage_must</name> <operator>)</operator> <operator>!=</operator> <name>usage_must</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>usage_may</name> <operator>=</operator> <name>usage</name> <operator>&amp;</operator> <name>may_mask</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name><name>crt</name><operator>-&gt;</operator><name>key_usage</name></name> <operator>&amp;</operator> <name>may_mask</name> <operator>)</operator> <operator>|</operator> <name>usage_may</name> <operator>)</operator> <operator>!=</operator> <name>usage_may</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_check_extended_key_usage</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usage_oid</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>usage_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <comment type="block">/* Extension is not mandatory, absent means no restriction */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Look for the requested usage (or wildcard ANY) in our list
     */</comment>
    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>ext_key_usage</name></name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>cur_oid</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>cur_oid</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>usage_len</name> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>cur_oid</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>usage_oid</name></expr></argument>, <argument><expr><name>usage_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>MBEDTLS_OID_CMP</name><argument_list>( <argument><expr><name>MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE</name></expr></argument>, <argument><expr><name>cur_oid</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRL_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_is_revoked</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crl_entry</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cur</name><operator>-&gt;</operator><name>serial</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>serial</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>cur</name><operator>-&gt;</operator><name>serial</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>serial</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>serial</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>serial</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_past</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>revocation_date</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check that the given certificate is not revoked according to the CRL.
 * Skip validation is no CRL for the given CA is present.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_crt_verifycrl</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>ca</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl_list</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ca</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>flags</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><name>crl_list</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>crl_list</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <name><name>crl_list</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>ca</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>ca</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                    <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>crl_list</name> <operator>=</operator> <name><name>crl_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Check if the CA is configured to sign CRLs
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_crt_check_key_usage</name><argument_list>( <argument><expr><name>ca</name></expr></argument>, <argument><expr><name>MBEDTLS_X509_KU_CRL_SIGN</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_NOT_TRUSTED</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/*
         * Check if CRL is correctly signed by the trusted CA
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_md_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_BAD_MD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_pk_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_BAD_PK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>md_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Cannot check 'unknown' hash
             */</comment>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_NOT_TRUSTED</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_md</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_key</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ca</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_verify_ext</name><argument_list>( <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ca</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                           <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr></argument>,
                           <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>crl_list</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_NOT_TRUSTED</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Check for validity of CRL (Do not drop out)
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_past</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crl_list</name><operator>-&gt;</operator><name>next_update</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_EXPIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_future</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crl_list</name><operator>-&gt;</operator><name>this_update</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCRL_FUTURE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Check if certificate is revoked
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_crt_is_revoked</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>crl_list</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_REVOKED</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>crl_list</name> <operator>=</operator> <name><name>crl_list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <name>flags</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRL_PARSE_C */</comment>

<comment type="block">/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_memcasecmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>diff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><name>s1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n2</name> <init>= <expr><name>s2</name></expr></init></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>n1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>n2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>diff</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>diff</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator> <operator>(</operator> <name><name>n1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>n1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'z'</literal> <operator>)</operator> <operator>||</operator>
              <operator>(</operator> <name><name>n1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>n1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return 0 if name matches wildcard, -1 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_check_wildcard</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cn</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cn_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cn_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>cn</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>name</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>||</operator> <name><name>name</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cn_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cn_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>cn_idx</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>cn_len</name> <operator>-</operator> <name>cn_idx</name> <operator>==</operator> <name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
        <call><name>x509_memcasecmp</name><argument_list>( <argument><expr><name><name>name</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cn</name> <operator>+</operator> <name>cn_idx</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare two X.509 strings, case-insensitive, and allowing for some encoding
 * variations (but not all).
 *
 * Return 0 if equal, -1 otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_string_cmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>tag</name></name> <operator>&amp;&amp;</operator>
        <name><name>a</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>MBEDTLS_ASN1_UTF8_STRING</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>MBEDTLS_ASN1_PRINTABLE_STRING</name> <operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>b</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>MBEDTLS_ASN1_UTF8_STRING</name> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>MBEDTLS_ASN1_PRINTABLE_STRING</name> <operator>)</operator> <operator>&amp;&amp;</operator>
        <name><name>a</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
        <call><name>x509_memcasecmp</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare two X.509 Names (aka rdnSequence).
 *
 * See RFC 5280 section 7.1, though we don't implement the whole algorithm:
 * we sometimes return unequal when the full algorithm would return equal,
 * but never the other way. (In particular, we don't do Unicode normalisation
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_name_cmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* Avoid recursion, it might not be optimised by the compiler */</comment>
    <while>while<condition>( <expr><name>a</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>b</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* type */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>tag</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>tag</name></name> <operator>||</operator>
            <name><name>a</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>a</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* value */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>x509_string_cmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* structure of the list of sets */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>a</name><operator>-&gt;</operator><name>next_merged</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>next_merged</name></name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* a == NULL == b */</comment>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if 'parent' is a suitable parent (signing CA) for 'child'.
 * Return 0 if yes, -1 if not.
 *
 * top means parent is a locally-trusted certificate
 * bottom means child is the end entity cert
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_crt_check_parent</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>child</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
                                  <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>need_ca_bit</name></decl>;</decl_stmt>

    <comment type="block">/* Parent must be the issuer */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>x509_name_cmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>subject</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Parent must have the basicConstraints CA bit set as a general rule */</comment>
    <expr_stmt><expr><name>need_ca_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Exception: v1/v2 certificates that are locally trusted. */</comment>
    <if_stmt><if>if<condition>( <expr><name>top</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>need_ca_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Exception: self-signed end-entity certs that are locally trusted. */</comment>
    <if_stmt><if>if<condition>( <expr><name>top</name> <operator>&amp;&amp;</operator> <name>bottom</name> <operator>&amp;&amp;</operator>
        <name><name>child</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>need_ca_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>need_ca_bit</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>parent</name><operator>-&gt;</operator><name>ca_istrue</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>need_ca_bit</name> <operator>&amp;&amp;</operator>
        <call><name>mbedtls_x509_crt_check_key_usage</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>MBEDTLS_X509_KU_KEY_CERT_SIGN</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_crt_verify_top</name><parameter_list>(
                <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>trust_ca</name></decl></parameter>,
                <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>path_cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>self_cnt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
                <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_vrfy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_vrfy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ca_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>check_path_cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_past</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>valid_to</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_EXPIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_future</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>valid_from</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_FUTURE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_md_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_MD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_pk_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_PK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Child is the top of the chain. Check against the trust_ca list.
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>md_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Cannot check 'unknown', no need to try any CA
         */</comment>
        <expr_stmt><expr><name>trust_ca</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_md</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for>for<control>( <comment type="block">/* trust_ca */</comment> <init>;</init> <condition><expr><name>trust_ca</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>trust_ca</name> <operator>=</operator> <name><name>trust_ca</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>x509_crt_check_parent</name><argument_list>( <argument><expr><name>child</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>path_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>check_path_cnt</name> <operator>=</operator> <name>path_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="block">/*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>child</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>trust_ca</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>trust_ca</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                            <argument><expr><name><name>child</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>check_path_cnt</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Self signed certificates do not count towards the limit */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>trust_ca</name><operator>-&gt;</operator><name>max_pathlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>trust_ca</name><operator>-&gt;</operator><name>max_pathlen</name></name> <operator>&lt;</operator> <name>check_path_cnt</name> <operator>-</operator> <name>self_cnt</name></expr> )</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_past</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>trust_ca</name><operator>-&gt;</operator><name>valid_to</name></name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_future</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>trust_ca</name><operator>-&gt;</operator><name>valid_from</name></name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_verify_ext</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trust_ca</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                           <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr></argument>,
                           <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Top of chain is signed by a trusted CA
         */</comment>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_key</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>trust_ca</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break>break;</break>
    </block_content>}</block></for>

    <comment type="block">/*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>trust_ca</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>child</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>trust_ca</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>len</name></name> <operator>||</operator>
          <call><name>memcmp</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>trust_ca</name><operator>-&gt;</operator><name>subject_raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                            <argument><expr><name><name>child</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRL_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* Check trusted CA's CRL for the chain's top crt */</comment>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <call><name>x509_crt_verifycrl</name><argument_list>( <argument><expr><name>child</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ca_crl</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>!=</operator> <name>f_vrfy</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>f_vrfy</name><argument_list>( <argument><expr><name>p_vrfy</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>path_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>ca_flags</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Call callback on top cert */</comment>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>!=</operator> <name>f_vrfy</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>f_vrfy</name><argument_list>( <argument><expr><name>p_vrfy</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>path_cnt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>ca_flags</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_crt_verify_child</name><parameter_list>(
                <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
                <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>trust_ca</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>path_cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>self_cnt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
                <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_vrfy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_vrfy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>parent_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>grandparent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>

    <comment type="block">/* Counting intermediate self signed certificates */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>path_cnt</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>x509_name_cmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>subject</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>self_cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* path_cnt is 0 for the first intermediate CA */</comment>
    <if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>+</operator> <name>path_cnt</name> <operator>&gt;</operator> <name>MBEDTLS_X509_MAX_INTERMEDIATE_CA</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_past</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>valid_to</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_EXPIRED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_time_is_future</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>valid_from</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_FUTURE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_md_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_MD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_pk_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_PK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>md_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Cannot check 'unknown' hash
         */</comment>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_md</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_key</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_verify_ext</name><argument_list>( <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                           <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr></argument>,
                           <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>sig</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_NOT_TRUSTED</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRL_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* Check trusted CA's CRL for the given crt */</comment>
    <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <call><name>x509_crt_verifycrl</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Look for a grandparent in trusted CAs */</comment>
    <for>for<control>( <init><expr><name>grandparent</name> <operator>=</operator> <name>trust_ca</name></expr>;</init>
         <condition><expr><name>grandparent</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
         <incr><expr><name>grandparent</name> <operator>=</operator> <name><name>grandparent</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>x509_crt_check_parent</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>grandparent</name></expr></argument>,
                                   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>grandparent</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_crt_verify_top</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>grandparent</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>,
                                <argument><expr><name>path_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>self_cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent_flags</name></expr></argument>, <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Look for a grandparent upwards the chain */</comment>
        <for>for<control>( <init><expr><name>grandparent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</init>
             <condition><expr><name>grandparent</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
             <incr><expr><name>grandparent</name> <operator>=</operator> <name><name>grandparent</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
        <block>{<block_content>
            <comment type="block">/* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */</comment>
            <if_stmt><if>if<condition>( <expr><name><name>grandparent</name><operator>-&gt;</operator><name>max_pathlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>grandparent</name><operator>-&gt;</operator><name>max_pathlen</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <name>path_cnt</name> <operator>-</operator> <name>self_cnt</name></expr> )</condition>
            <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>x509_crt_check_parent</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>grandparent</name></expr></argument>,
                                       <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/* Is our parent part of the chain or at the top? */</comment>
        <if_stmt><if>if<condition>( <expr><name>grandparent</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_crt_verify_child</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>grandparent</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>,
                                         <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>path_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>self_cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent_flags</name></expr></argument>,
                                         <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_crt_verify_top</name><argument_list>( <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>,
                                       <argument><expr><name>path_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>self_cnt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parent_flags</name></expr></argument>,
                                       <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* child is verified to be a child of the parent, call verify callback */</comment>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>!=</operator> <name>f_vrfy</name></expr> )</condition><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>f_vrfy</name><argument_list>( <argument><expr><name>p_vrfy</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>path_cnt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>parent_flags</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Verify the certificate validity
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>,
                     <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>trust_ca</name></decl></parameter>,
                     <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
                     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_vrfy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_vrfy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_x509_crt_verify_with_profile</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>mbedtls_x509_crt_profile_default</name></expr></argument>, <argument><expr><name>cn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Verify the certificate validity, with profile
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crt_verify_with_profile</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter>,
                     <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>trust_ca</name></decl></parameter>,
                     <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>,
                     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_vrfy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_vrfy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cn_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pathlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>selfsigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_type</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>profile</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>cn</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cn_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>cn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>crt</name><operator>-&gt;</operator><name>ext_types</name></name> <operator>&amp;</operator> <name>MBEDTLS_X509_EXT_SUBJECT_ALT_NAME</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>subject_alt_names</name></name></expr>;</expr_stmt>

            <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>cn_len</name> <operator>&amp;&amp;</operator>
                    <call><name>x509_memcasecmp</name><argument_list>( <argument><expr><name>cn</name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>cn_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>

                <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
                    <call><name>memcmp</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"*."</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                    <call><name>x509_check_wildcard</name><argument_list>( <argument><expr><name>cn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_CN_MISMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <while>while<condition>( <expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><call><name>MBEDTLS_OID_CMP</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_CN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><operator>-&gt;</operator><name>oid</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name><name>name</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>cn_len</name> <operator>&amp;&amp;</operator>
                        <call><name>x509_memcasecmp</name><argument_list>( <argument><expr><name><name>name</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>cn</name></expr></argument>, <argument><expr><name>cn_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>

                    <if_stmt><if>if<condition>( <expr><name><name>name</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
                        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>name</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="string">"*."</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                        <call><name>x509_check_wildcard</name><argument_list>( <argument><expr><name>cn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><operator>-&gt;</operator><name>val</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if<condition>( <expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_CN_MISMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check the type and size of the key */</comment>
    <expr_stmt><expr><name>pk_type</name> <operator>=</operator> <call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_pk_alg</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>pk_type</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_PK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_profile_check_key</name><argument_list>( <argument><expr><name>profile</name></expr></argument>, <argument><expr><name>pk_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_BAD_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Look for a parent in trusted CAs */</comment>
    <for>for<control>( <init><expr><name>parent</name> <operator>=</operator> <name>trust_ca</name></expr>;</init> <condition><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>x509_crt_check_parent</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pathlen</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_crt_verify_top</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>,
                                   <argument><expr><name>pathlen</name></expr></argument>, <argument><expr><name>selfsigned</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Look for a parent upwards the chain */</comment>
        <for>for<control>( <init><expr><name>parent</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><call><name>x509_crt_check_parent</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pathlen</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <comment type="block">/* Are we part of the chain or at the top? */</comment>
        <if_stmt><if>if<condition>( <expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_crt_verify_child</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>,
                                         <argument><expr><name>pathlen</name></expr></argument>, <argument><expr><name>selfsigned</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_crt_verify_top</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><name>trust_ca</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>, <argument><expr><name>profile</name></expr></argument>,
                                       <argument><expr><name>pathlen</name></expr></argument>, <argument><expr><name>selfsigned</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>f_vrfy</name></expr></argument>, <argument><expr><name>p_vrfy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a certificate chain
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_x509_crt_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>crt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509_crt</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Unallocate all certificate data
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_x509_crt_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>cert_cur</name> <init>= <expr><name>crt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>cert_prv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>name_cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>name_prv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>seq_cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_sequence</name> <modifier>*</modifier></type><name>seq_prv</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>crt</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <do>do
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_pk_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cert_cur</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_RSASSA_PSS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>cert_cur</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>name_cur</name> <operator>=</operator> <name><name>cert_cur</name><operator>-&gt;</operator><name>issuer</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>name_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>name_prv</name> <operator>=</operator> <name>name_cur</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name_cur</name> <operator>=</operator> <name><name>name_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>name_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_name</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>name_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>name_cur</name> <operator>=</operator> <name><name>cert_cur</name><operator>-&gt;</operator><name>subject</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>name_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>name_prv</name> <operator>=</operator> <name>name_cur</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name_cur</name> <operator>=</operator> <name><name>name_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>name_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_name</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>name_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>seq_cur</name> <operator>=</operator> <name><name>cert_cur</name><operator>-&gt;</operator><name>ext_key_usage</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>seq_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>seq_prv</name> <operator>=</operator> <name>seq_cur</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>seq_cur</name> <operator>=</operator> <name><name>seq_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>seq_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_sequence</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>seq_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>seq_cur</name> <operator>=</operator> <name><name>cert_cur</name><operator>-&gt;</operator><name>subject_alt_names</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>seq_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>seq_prv</name> <operator>=</operator> <name>seq_cur</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>seq_cur</name> <operator>=</operator> <name><name>seq_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>seq_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_sequence</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>seq_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if<condition>( <expr><name><name>cert_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>cert_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>cert_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>cert_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>cert_cur</name> <operator>=</operator> <name><name>cert_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block>
    while<condition>( <expr><name>cert_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>;</do>

    <expr_stmt><expr><name>cert_cur</name> <operator>=</operator> <name>crt</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
        <expr_stmt><expr><name>cert_prv</name> <operator>=</operator> <name>cert_cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cert_cur</name> <operator>=</operator> <name><name>cert_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>cert_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>cert_prv</name> <operator>!=</operator> <name>crt</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>cert_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    while<condition>( <expr><name>cert_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>;</do>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>
</unit>
