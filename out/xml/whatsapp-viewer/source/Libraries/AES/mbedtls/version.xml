<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/version.c"><comment type="block">/*
 *  Version information
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_VERSION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>unsigned</name> <name>int</name></type> <name>mbedtls_version_get_number</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_VERSION_NUMBER</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_version_get_string</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>string</name></expr></argument>, <argument><expr><name>MBEDTLS_VERSION_STRING</name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MBEDTLS_VERSION_STRING</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_version_get_string_full</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>string</name></expr></argument>, <argument><expr><name>MBEDTLS_VERSION_STRING_FULL</name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MBEDTLS_VERSION_STRING_FULL</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_VERSION_C */</comment>
</unit>
