<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/debug.c"><comment type="block">/*
 *  Debugging routines
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>      <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>        <cpp:value>free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_time_t</name></cpp:macro>      <cpp:value>time_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_snprintf</name></cpp:macro>    <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>inline</specifier></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_BUF_SIZE</name></cpp:macro>      <cpp:value>512</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>debug_threshold</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mbedtls_debug_set_threshold</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>debug_threshold</name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * All calls to f_dbg must be made via this function
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>debug_send_line</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * If in a threaded environment, we need a thread identifier.
     * Since there is no portable way to get one, use the address of the ssl
     * context instead, as it shouldn't be shared between threads.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name></type> <name><name>idstr</name><index>[<expr><literal type="number">20</literal> <operator>+</operator> <name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* 0x + 16 nibbles + ': ' */</comment>
    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>idstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>idstr</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p: %s"</literal></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_dbg</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_dbg</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_debug_print_msg</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ssl</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>debug_threshold</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TRUNCATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_vsnprintf_s</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>DEBUG_BUF_SIZE</name></expr></argument>, <argument><expr><name>_TRUNCATE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_vsnprintf</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>DEBUG_BUF_SIZE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>ret</name> <operator>==</operator> <name>DEBUG_BUF_SIZE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>DEBUG_BUF_SIZE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;</operator> <name>DEBUG_BUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>ret</name></expr>]</index></name>     <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>ret</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_debug_print_ret</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>debug_threshold</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * With non-blocking I/O and examples that just retry immediately,
     * the logs would be quickly flooded with WANT_READ, so ignore that.
     * Don't ignore WANT_WRITE however, since is is usually rare.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s() returned %d (-0x%04x)\n"</literal></expr></argument>,
              <argument><expr><name>text</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>-</operator><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_debug_print_buf</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>txt</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>debug_threshold</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"dumping '%s' (%u bytes)\n"</literal></expr></argument>,
              <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"  %s\n"</literal></expr></argument>, <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"%04x: "</literal></expr></argument>,
                             <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txt</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">127</literal> <operator>)</operator></expr> ?</condition><then> <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <for>for<control>( <comment type="block">/* i = i */</comment><init>;</init> <condition><expr><name>i</name> <operator>%</operator> <literal type="number">16</literal> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"   "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"  %s\n"</literal></expr></argument>, <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_debug_print_ecp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>debug_threshold</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s(X)"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_debug_print_mpi</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>X</name><operator>-&gt;</operator><name>X</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s(Y)"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_debug_print_mpi</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>X</name><operator>-&gt;</operator><name>Y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_debug_print_mpi</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>zeros</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>X</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>debug_threshold</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>n</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <operator>(</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_mpi_uint</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"value of '%s' (%d bits) is:\n"</literal></expr></argument>,
              <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <operator>(</operator> <name>n</name> <operator>*</operator> <operator>(</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_mpi_uint</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>)</operator> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>zeros</name> <operator>&amp;&amp;</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>zeros</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator> <name>k</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>j</name> <operator>%</operator> <literal type="number">16</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator>
                             <operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator> <name>k</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>zeros</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">" 00"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BIGNUM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_print_pk</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pk_debug_item</name></type> <name><name>items</name><index>[<expr><name>MBEDTLS_PK_DEBUG_MAX_ITEMS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>items</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>items</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_debug</name><argument_list>( <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>items</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
                          <argument><expr><literal type="string">"invalid PK context\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MBEDTLS_PK_DEBUG_MAX_ITEMS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>MBEDTLS_PK_DEBUG_NONE</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>name</name><index>[<expr><sizeof>sizeof<argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>MBEDTLS_PK_DEBUG_MPI</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_debug_print_mpi</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>MBEDTLS_PK_DEBUG_ECP</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_debug_print_ecp</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
                              <argument><expr><literal type="string">"should not happen\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_print_line_by_line</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name>text</name></expr>;</init> <condition><expr><operator>*</operator><name>cur</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>cur</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>cur</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <name>DEBUG_BUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <name>DEBUG_BUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_debug_print_crt</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>DEBUG_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>crt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>level</name> <operator>&gt;</operator> <name>debug_threshold</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><name>crt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s #%d:\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>debug_send_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_x509_crt_info</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>crt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>debug_print_line_by_line</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>debug_print_pk</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"crt-&gt;"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crt</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DEBUG_C */</comment>
</unit>
