<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/des.c"><comment type="block">/*
 *  FIPS-46-3 compliant Triple-DES implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  DES, on which TDES is based, was originally designed by Horst Feistel
 *  at IBM in 1974, and was adopted as a standard by NIST (formerly NBS).
 *
 *  http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"des.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * 32-bit integer manipulation macros (big endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ] &lt;&lt; 24 )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 3]       );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Expanded DES S-boxes
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x01010400</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x01010404</literal></expr>,
    <expr><literal type="number">0x01010004</literal></expr>, <expr><literal type="number">0x00010404</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>,
    <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x01010400</literal></expr>, <expr><literal type="number">0x01010404</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>,
    <expr><literal type="number">0x01000404</literal></expr>, <expr><literal type="number">0x01010004</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>,
    <expr><literal type="number">0x00000404</literal></expr>, <expr><literal type="number">0x01000400</literal></expr>, <expr><literal type="number">0x01000400</literal></expr>, <expr><literal type="number">0x00010400</literal></expr>,
    <expr><literal type="number">0x00010400</literal></expr>, <expr><literal type="number">0x01010000</literal></expr>, <expr><literal type="number">0x01010000</literal></expr>, <expr><literal type="number">0x01000404</literal></expr>,
    <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x01000004</literal></expr>, <expr><literal type="number">0x01000004</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000404</literal></expr>, <expr><literal type="number">0x00010404</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>,
    <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x01010404</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x01010000</literal></expr>,
    <expr><literal type="number">0x01010400</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>,
    <expr><literal type="number">0x01010004</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x00010400</literal></expr>, <expr><literal type="number">0x01000004</literal></expr>,
    <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x01000404</literal></expr>, <expr><literal type="number">0x00010404</literal></expr>,
    <expr><literal type="number">0x01010404</literal></expr>, <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x01010000</literal></expr>, <expr><literal type="number">0x01000404</literal></expr>,
    <expr><literal type="number">0x01000004</literal></expr>, <expr><literal type="number">0x00000404</literal></expr>, <expr><literal type="number">0x00010404</literal></expr>, <expr><literal type="number">0x01010400</literal></expr>,
    <expr><literal type="number">0x00000404</literal></expr>, <expr><literal type="number">0x01000400</literal></expr>, <expr><literal type="number">0x01000400</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x00010004</literal></expr>, <expr><literal type="number">0x00010400</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x01010004</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x80108020</literal></expr>, <expr><literal type="number">0x80008000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00108020</literal></expr>,
    <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x80100020</literal></expr>, <expr><literal type="number">0x80008020</literal></expr>,
    <expr><literal type="number">0x80000020</literal></expr>, <expr><literal type="number">0x80108020</literal></expr>, <expr><literal type="number">0x80108000</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>,
    <expr><literal type="number">0x80008000</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x80100020</literal></expr>,
    <expr><literal type="number">0x00108000</literal></expr>, <expr><literal type="number">0x00100020</literal></expr>, <expr><literal type="number">0x80008020</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00108020</literal></expr>, <expr><literal type="number">0x80100000</literal></expr>,
    <expr><literal type="number">0x00100020</literal></expr>, <expr><literal type="number">0x80000020</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00108000</literal></expr>,
    <expr><literal type="number">0x00008020</literal></expr>, <expr><literal type="number">0x80108000</literal></expr>, <expr><literal type="number">0x80100000</literal></expr>, <expr><literal type="number">0x00008020</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00108020</literal></expr>, <expr><literal type="number">0x80100020</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>,
    <expr><literal type="number">0x80008020</literal></expr>, <expr><literal type="number">0x80100000</literal></expr>, <expr><literal type="number">0x80108000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>,
    <expr><literal type="number">0x80100000</literal></expr>, <expr><literal type="number">0x80008000</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x80108020</literal></expr>,
    <expr><literal type="number">0x00108020</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x80000000</literal></expr>,
    <expr><literal type="number">0x00008020</literal></expr>, <expr><literal type="number">0x80108000</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>, <expr><literal type="number">0x80000020</literal></expr>,
    <expr><literal type="number">0x00100020</literal></expr>, <expr><literal type="number">0x80008020</literal></expr>, <expr><literal type="number">0x80000020</literal></expr>, <expr><literal type="number">0x00100020</literal></expr>,
    <expr><literal type="number">0x00108000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x80008000</literal></expr>, <expr><literal type="number">0x00008020</literal></expr>,
    <expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x80100020</literal></expr>, <expr><literal type="number">0x80108020</literal></expr>, <expr><literal type="number">0x00108000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB3</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00000208</literal></expr>, <expr><literal type="number">0x08020200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x08020008</literal></expr>,
    <expr><literal type="number">0x08000200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00020208</literal></expr>, <expr><literal type="number">0x08000200</literal></expr>,
    <expr><literal type="number">0x00020008</literal></expr>, <expr><literal type="number">0x08000008</literal></expr>, <expr><literal type="number">0x08000008</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>,
    <expr><literal type="number">0x08020208</literal></expr>, <expr><literal type="number">0x00020008</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x00000208</literal></expr>,
    <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x08020200</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>,
    <expr><literal type="number">0x00020200</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08020008</literal></expr>, <expr><literal type="number">0x00020208</literal></expr>,
    <expr><literal type="number">0x08000208</literal></expr>, <expr><literal type="number">0x00020200</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08000208</literal></expr>,
    <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x08020208</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>,
    <expr><literal type="number">0x08020200</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x00020008</literal></expr>, <expr><literal type="number">0x00000208</literal></expr>,
    <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08020200</literal></expr>, <expr><literal type="number">0x08000200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00020008</literal></expr>, <expr><literal type="number">0x08020208</literal></expr>, <expr><literal type="number">0x08000200</literal></expr>,
    <expr><literal type="number">0x08000008</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x08020008</literal></expr>,
    <expr><literal type="number">0x08000208</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x08020208</literal></expr>,
    <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x00020208</literal></expr>, <expr><literal type="number">0x00020200</literal></expr>, <expr><literal type="number">0x08000008</literal></expr>,
    <expr><literal type="number">0x08020000</literal></expr>, <expr><literal type="number">0x08000208</literal></expr>, <expr><literal type="number">0x00000208</literal></expr>, <expr><literal type="number">0x08020000</literal></expr>,
    <expr><literal type="number">0x00020208</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x08020008</literal></expr>, <expr><literal type="number">0x00020200</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB4</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00802001</literal></expr>, <expr><literal type="number">0x00002081</literal></expr>, <expr><literal type="number">0x00002081</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>,
    <expr><literal type="number">0x00802080</literal></expr>, <expr><literal type="number">0x00800081</literal></expr>, <expr><literal type="number">0x00800001</literal></expr>, <expr><literal type="number">0x00002001</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00802000</literal></expr>, <expr><literal type="number">0x00802000</literal></expr>, <expr><literal type="number">0x00802081</literal></expr>,
    <expr><literal type="number">0x00000081</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00800080</literal></expr>, <expr><literal type="number">0x00800001</literal></expr>,
    <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00802001</literal></expr>,
    <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00002001</literal></expr>, <expr><literal type="number">0x00002080</literal></expr>,
    <expr><literal type="number">0x00800081</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00002080</literal></expr>, <expr><literal type="number">0x00800080</literal></expr>,
    <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00802080</literal></expr>, <expr><literal type="number">0x00802081</literal></expr>, <expr><literal type="number">0x00000081</literal></expr>,
    <expr><literal type="number">0x00800080</literal></expr>, <expr><literal type="number">0x00800001</literal></expr>, <expr><literal type="number">0x00802000</literal></expr>, <expr><literal type="number">0x00802081</literal></expr>,
    <expr><literal type="number">0x00000081</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00802000</literal></expr>,
    <expr><literal type="number">0x00002080</literal></expr>, <expr><literal type="number">0x00800080</literal></expr>, <expr><literal type="number">0x00800081</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>,
    <expr><literal type="number">0x00802001</literal></expr>, <expr><literal type="number">0x00002081</literal></expr>, <expr><literal type="number">0x00002081</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>,
    <expr><literal type="number">0x00802081</literal></expr>, <expr><literal type="number">0x00000081</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>,
    <expr><literal type="number">0x00800001</literal></expr>, <expr><literal type="number">0x00002001</literal></expr>, <expr><literal type="number">0x00802080</literal></expr>, <expr><literal type="number">0x00800081</literal></expr>,
    <expr><literal type="number">0x00002001</literal></expr>, <expr><literal type="number">0x00002080</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00802001</literal></expr>,
    <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00802080</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB5</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x02080100</literal></expr>, <expr><literal type="number">0x02080000</literal></expr>, <expr><literal type="number">0x42000100</literal></expr>,
    <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x02080000</literal></expr>,
    <expr><literal type="number">0x40080100</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x02000100</literal></expr>, <expr><literal type="number">0x40080100</literal></expr>,
    <expr><literal type="number">0x42000100</literal></expr>, <expr><literal type="number">0x42080000</literal></expr>, <expr><literal type="number">0x00080100</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>,
    <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x40000100</literal></expr>, <expr><literal type="number">0x42080100</literal></expr>, <expr><literal type="number">0x42080100</literal></expr>, <expr><literal type="number">0x02000100</literal></expr>,
    <expr><literal type="number">0x42080000</literal></expr>, <expr><literal type="number">0x40000100</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x42000000</literal></expr>,
    <expr><literal type="number">0x02080100</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x42000000</literal></expr>, <expr><literal type="number">0x00080100</literal></expr>,
    <expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x42000100</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>,
    <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x02080000</literal></expr>, <expr><literal type="number">0x42000100</literal></expr>, <expr><literal type="number">0x40080100</literal></expr>,
    <expr><literal type="number">0x02000100</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x42080000</literal></expr>, <expr><literal type="number">0x02080100</literal></expr>,
    <expr><literal type="number">0x40080100</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x42080000</literal></expr>,
    <expr><literal type="number">0x42080100</literal></expr>, <expr><literal type="number">0x00080100</literal></expr>, <expr><literal type="number">0x42000000</literal></expr>, <expr><literal type="number">0x42080100</literal></expr>,
    <expr><literal type="number">0x02080000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x42000000</literal></expr>,
    <expr><literal type="number">0x00080100</literal></expr>, <expr><literal type="number">0x02000100</literal></expr>, <expr><literal type="number">0x40000100</literal></expr>, <expr><literal type="number">0x00080000</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x40080000</literal></expr>, <expr><literal type="number">0x02080100</literal></expr>, <expr><literal type="number">0x40000100</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB6</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x20000010</literal></expr>, <expr><literal type="number">0x20400000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x20404010</literal></expr>,
    <expr><literal type="number">0x20400000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x20404010</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>,
    <expr><literal type="number">0x20004000</literal></expr>, <expr><literal type="number">0x00404010</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x20000010</literal></expr>,
    <expr><literal type="number">0x00400010</literal></expr>, <expr><literal type="number">0x20004000</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00400010</literal></expr>, <expr><literal type="number">0x20004010</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>,
    <expr><literal type="number">0x00404000</literal></expr>, <expr><literal type="number">0x20004010</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x20400010</literal></expr>,
    <expr><literal type="number">0x20400010</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00404010</literal></expr>, <expr><literal type="number">0x20404000</literal></expr>,
    <expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x00404000</literal></expr>, <expr><literal type="number">0x20404000</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>,
    <expr><literal type="number">0x20004000</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x20400010</literal></expr>, <expr><literal type="number">0x00404000</literal></expr>,
    <expr><literal type="number">0x20404010</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>, <expr><literal type="number">0x20000010</literal></expr>,
    <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x20004000</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x00004010</literal></expr>,
    <expr><literal type="number">0x20000010</literal></expr>, <expr><literal type="number">0x20404010</literal></expr>, <expr><literal type="number">0x00404000</literal></expr>, <expr><literal type="number">0x20400000</literal></expr>,
    <expr><literal type="number">0x00404010</literal></expr>, <expr><literal type="number">0x20404000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x20400010</literal></expr>,
    <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x20400000</literal></expr>, <expr><literal type="number">0x00404010</literal></expr>,
    <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x00400010</literal></expr>, <expr><literal type="number">0x20004010</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x20404000</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x00400010</literal></expr>, <expr><literal type="number">0x20004010</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB7</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x04200002</literal></expr>, <expr><literal type="number">0x04000802</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x04000802</literal></expr>, <expr><literal type="number">0x00200802</literal></expr>, <expr><literal type="number">0x04200800</literal></expr>,
    <expr><literal type="number">0x04200802</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x04000002</literal></expr>,
    <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x04200002</literal></expr>, <expr><literal type="number">0x00000802</literal></expr>,
    <expr><literal type="number">0x04000800</literal></expr>, <expr><literal type="number">0x00200802</literal></expr>, <expr><literal type="number">0x00200002</literal></expr>, <expr><literal type="number">0x04000800</literal></expr>,
    <expr><literal type="number">0x04000002</literal></expr>, <expr><literal type="number">0x04200000</literal></expr>, <expr><literal type="number">0x04200800</literal></expr>, <expr><literal type="number">0x00200002</literal></expr>,
    <expr><literal type="number">0x04200000</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00000802</literal></expr>, <expr><literal type="number">0x04200802</literal></expr>,
    <expr><literal type="number">0x00200800</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00200800</literal></expr>,
    <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x00200800</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x04000802</literal></expr>,
    <expr><literal type="number">0x04000802</literal></expr>, <expr><literal type="number">0x04200002</literal></expr>, <expr><literal type="number">0x04200002</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>,
    <expr><literal type="number">0x00200002</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x04000800</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>,
    <expr><literal type="number">0x04200800</literal></expr>, <expr><literal type="number">0x00000802</literal></expr>, <expr><literal type="number">0x00200802</literal></expr>, <expr><literal type="number">0x04200800</literal></expr>,
    <expr><literal type="number">0x00000802</literal></expr>, <expr><literal type="number">0x04000002</literal></expr>, <expr><literal type="number">0x04200802</literal></expr>, <expr><literal type="number">0x04200000</literal></expr>,
    <expr><literal type="number">0x00200800</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x04200802</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00200802</literal></expr>, <expr><literal type="number">0x04200000</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>,
    <expr><literal type="number">0x04000002</literal></expr>, <expr><literal type="number">0x04000800</literal></expr>, <expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00200002</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>SB8</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x10001040</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x10041040</literal></expr>,
    <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x10001040</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>,
    <expr><literal type="number">0x00040040</literal></expr>, <expr><literal type="number">0x10040000</literal></expr>, <expr><literal type="number">0x10041040</literal></expr>, <expr><literal type="number">0x00041000</literal></expr>,
    <expr><literal type="number">0x10041000</literal></expr>, <expr><literal type="number">0x00041040</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>,
    <expr><literal type="number">0x10040000</literal></expr>, <expr><literal type="number">0x10000040</literal></expr>, <expr><literal type="number">0x10001000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>,
    <expr><literal type="number">0x00041000</literal></expr>, <expr><literal type="number">0x00040040</literal></expr>, <expr><literal type="number">0x10040040</literal></expr>, <expr><literal type="number">0x10041000</literal></expr>,
    <expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x10040040</literal></expr>,
    <expr><literal type="number">0x10000040</literal></expr>, <expr><literal type="number">0x10001000</literal></expr>, <expr><literal type="number">0x00041040</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>,
    <expr><literal type="number">0x00041040</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x10041000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>,
    <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x10040040</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>, <expr><literal type="number">0x00041040</literal></expr>,
    <expr><literal type="number">0x10001000</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x10000040</literal></expr>, <expr><literal type="number">0x10040000</literal></expr>,
    <expr><literal type="number">0x10040040</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x10001040</literal></expr>,
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x10041040</literal></expr>, <expr><literal type="number">0x00040040</literal></expr>, <expr><literal type="number">0x10000040</literal></expr>,
    <expr><literal type="number">0x10040000</literal></expr>, <expr><literal type="number">0x10001000</literal></expr>, <expr><literal type="number">0x10001040</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>,
    <expr><literal type="number">0x10041040</literal></expr>, <expr><literal type="number">0x00041000</literal></expr>, <expr><literal type="number">0x00041000</literal></expr>, <expr><literal type="number">0x00001040</literal></expr>,
    <expr><literal type="number">0x00001040</literal></expr>, <expr><literal type="number">0x00040040</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x10041000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * PC1: left and right halves bit-swap
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>LHs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x00000101</literal></expr>,
    <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x00010001</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x00010101</literal></expr>,
    <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x01000001</literal></expr>, <expr><literal type="number">0x01000100</literal></expr>, <expr><literal type="number">0x01000101</literal></expr>,
    <expr><literal type="number">0x01010000</literal></expr>, <expr><literal type="number">0x01010001</literal></expr>, <expr><literal type="number">0x01010100</literal></expr>, <expr><literal type="number">0x01010101</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>RHs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>, <expr><literal type="number">0x01010000</literal></expr>,
    <expr><literal type="number">0x00000100</literal></expr>, <expr><literal type="number">0x01000100</literal></expr>, <expr><literal type="number">0x00010100</literal></expr>, <expr><literal type="number">0x01010100</literal></expr>,
    <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x01000001</literal></expr>, <expr><literal type="number">0x00010001</literal></expr>, <expr><literal type="number">0x01010001</literal></expr>,
    <expr><literal type="number">0x00000101</literal></expr>, <expr><literal type="number">0x01000101</literal></expr>, <expr><literal type="number">0x00010101</literal></expr>, <expr><literal type="number">0x01010101</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initial Permutation macro
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_IP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro>                                             \
<cpp:value>{                                                               \
    T = ((X &gt;&gt;  4) ^ Y) &amp; 0x0F0F0F0F; Y ^= T; X ^= (T &lt;&lt;  4);   \
    T = ((X &gt;&gt; 16) ^ Y) &amp; 0x0000FFFF; Y ^= T; X ^= (T &lt;&lt; 16);   \
    T = ((Y &gt;&gt;  2) ^ X) &amp; 0x33333333; X ^= T; Y ^= (T &lt;&lt;  2);   \
    T = ((Y &gt;&gt;  8) ^ X) &amp; 0x00FF00FF; X ^= T; Y ^= (T &lt;&lt;  8);   \
    Y = ((Y &lt;&lt; 1) | (Y &gt;&gt; 31)) &amp; 0xFFFFFFFF;                    \
    T = (X ^ Y) &amp; 0xAAAAAAAA; Y ^= T; X ^= T;                   \
    X = ((X &lt;&lt; 1) | (X &gt;&gt; 31)) &amp; 0xFFFFFFFF;                    \
}</cpp:value></cpp:define>

<comment type="block">/*
 * Final Permutation macro
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_FP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro>                                             \
<cpp:value>{                                                               \
    X = ((X &lt;&lt; 31) | (X &gt;&gt; 1)) &amp; 0xFFFFFFFF;                    \
    T = (X ^ Y) &amp; 0xAAAAAAAA; X ^= T; Y ^= T;                   \
    Y = ((Y &lt;&lt; 31) | (Y &gt;&gt; 1)) &amp; 0xFFFFFFFF;                    \
    T = ((Y &gt;&gt;  8) ^ X) &amp; 0x00FF00FF; X ^= T; Y ^= (T &lt;&lt;  8);   \
    T = ((Y &gt;&gt;  2) ^ X) &amp; 0x33333333; X ^= T; Y ^= (T &lt;&lt;  2);   \
    T = ((X &gt;&gt; 16) ^ Y) &amp; 0x0000FFFF; Y ^= T; X ^= (T &lt;&lt; 16);   \
    T = ((X &gt;&gt;  4) ^ Y) &amp; 0x0F0F0F0F; Y ^= T; X ^= (T &lt;&lt;  4);   \
}</cpp:value></cpp:define>

<comment type="block">/*
 * DES round macro
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DES_ROUND</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro>                          \
<cpp:value>{                                               \
    T = *SK++ ^ X;                              \
    Y ^= SB8[ (T      ) &amp; 0x3F ] ^              \
         SB6[ (T &gt;&gt;  8) &amp; 0x3F ] ^              \
         SB4[ (T &gt;&gt; 16) &amp; 0x3F ] ^              \
         SB2[ (T &gt;&gt; 24) &amp; 0x3F ];               \
                                                \
    T = *SK++ ^ ((X &lt;&lt; 28) | (X &gt;&gt; 4));         \
    Y ^= SB7[ (T      ) &amp; 0x3F ] ^              \
         SB5[ (T &gt;&gt;  8) &amp; 0x3F ] ^              \
         SB3[ (T &gt;&gt; 16) &amp; 0x3F ] ^              \
         SB1[ (T &gt;&gt; 24) &amp; 0x3F ];               \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ uint32_t t = a; a = b; b = t; t = 0; }</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mbedtls_des_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_des_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_des_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_des_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_des3_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_des3_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_des3_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_des3_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>odd_parity_table</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,
        <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>,
        <expr><literal type="number">47</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">81</literal></expr>,
        <expr><literal type="number">82</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">112</literal></expr>,
        <expr><literal type="number">115</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">140</literal></expr>,
        <expr><literal type="number">143</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">168</literal></expr>,
        <expr><literal type="number">171</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">196</literal></expr>,
        <expr><literal type="number">199</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">224</literal></expr>,
        <expr><literal type="number">227</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">253</literal></expr>,
        <expr><literal type="number">254</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mbedtls_des_key_set_parity</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MBEDTLS_DES_KEY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>odd_parity_table</name><index>[<expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Check the given key's parity, returns 1 on failure, 0 on SUCCESS
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des_key_check_key_parity</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MBEDTLS_DES_KEY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>odd_parity_table</name><index>[<expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Table of weak and semi-weak keys
 *
 * Source: http://en.wikipedia.org/wiki/Weak_key
 *
 * Weak:
 * Alternating ones + zeros (0x0101010101010101)
 * Alternating 'F' + 'E' (0xFEFEFEFEFEFEFEFE)
 * '0xE0E0E0E0F1F1F1F1'
 * '0x1F1F1F1F0E0E0E0E'
 *
 * Semi-weak:
 * 0x011F011F010E010E and 0x1F011F010E010E01
 * 0x01E001E001F101F1 and 0xE001E001F101F101
 * 0x01FE01FE01FE01FE and 0xFE01FE01FE01FE01
 * 0x1FE01FE00EF10EF1 and 0xE01FE01FF10EF10E
 * 0x1FFE1FFE0EFE0EFE and 0xFE1FFE1FFE0EFE0E
 * 0xE0FEE0FEF1FEF1FE and 0xFEE0FEE0FEF1FEF1
 *
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEAK_KEY_COUNT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>weak_key_table</name><index>[<expr><name>WEAK_KEY_COUNT</name></expr>]</index><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xFE</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF1</literal></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xF1</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xF1</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x0E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xFE</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x0E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xFE</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mbedtls_des_key_check_weak</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WEAK_KEY_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>weak_key_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>MBEDTLS_DES_KEY_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_SETKEY_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_des_setkey</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name><name>SK</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Permuted Choice 1
     */</comment>
    <expr_stmt><expr><name>T</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <name>X</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F0F0F0F</literal></expr>;</expr_stmt>  <expr_stmt><expr><name>X</name> <operator>^=</operator> <name>T</name></expr>;</expr_stmt> <expr_stmt><expr><name>Y</name> <operator>^=</operator> <operator>(</operator><name>T</name> <operator>&lt;&lt;</operator>  <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator>  <operator>(</operator><operator>(</operator><name>Y</name>      <operator>)</operator> <operator>^</operator> <name>X</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10101010</literal></expr>;</expr_stmt>  <expr_stmt><expr><name>X</name> <operator>^=</operator> <name>T</name></expr>;</expr_stmt> <expr_stmt><expr><name>Y</name> <operator>^=</operator> <operator>(</operator><name>T</name>      <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X</name> <operator>=</operator>   <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
        <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name>     <operator>)</operator>
        <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator>  <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
        <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>LHs</name><index>[ <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>Y</name> <operator>=</operator>   <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
        <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name>     <operator>)</operator>
        <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
        <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>RHs</name><index>[ <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>Y</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * calculate subkeys
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">15</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&lt;&lt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>Y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&lt;&lt;</operator>  <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0FFFFFFF</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>SK</name><operator>++</operator> <operator>=</operator>   <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x24000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10000000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x08000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x02080000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00200000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00100000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00040000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00020000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00010000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00002000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00001000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&lt;&lt;</operator>  <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000800</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000400</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000200</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000100</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>SK</name><operator>++</operator> <operator>=</operator>   <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10000000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x08000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x04000000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator>  <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x02000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01000000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00200000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00100000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00080000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator>  <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00040000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00020000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator>  <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00010000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00002000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00001000</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000808</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000400</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000200</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&lt;&lt;</operator>  <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000100</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator>  <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000011</literal><operator>)</operator>
                <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&lt;&lt;</operator>  <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_DES_SETKEY_ALT */</comment>

<comment type="block">/*
 * DES key schedule (56-bit, encryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des_setkey_enc</name><parameter_list>( <parameter><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DES key schedule (56-bit, decryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des_setkey_dec</name><parameter_list>( <parameter><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SWAP</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><index>[<expr><name>i</name></expr>    ]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SWAP</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>des3_set2key</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name><name>esk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl></parameter>,
                          <parameter><decl><type><name>uint32_t</name></type> <name><name>dsk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name>esk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name>dsk</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name></expr>     ]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator>  <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>dsk</name><index>[<expr><literal type="number">62</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name><name>dsk</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><name>i</name></expr>    ]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">65</literal></expr>]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <name><name>dsk</name><index>[<expr><name>i</name></expr>    ]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">65</literal></expr>]</index></name> <operator>=</operator> <name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Triple-DES key schedule (112-bit, encryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des3_set2key_enc</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>des3_set2key</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>sk</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sk</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Triple-DES key schedule (112-bit, decryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des3_set2key_dec</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>des3_set2key</name><argument_list>( <argument><expr><name>sk</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>sk</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sk</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>des3_set3key</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name><name>esk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl></parameter>,
                          <parameter><decl><type><name>uint32_t</name></type> <name><name>dsk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name>esk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name>dsk</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>key</name> <operator>+</operator>  <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des_setkey</name><argument_list>( <argument><expr><name>esk</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name></expr>     ]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><literal type="number">94</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator>  <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><literal type="number">95</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>dsk</name><index>[<expr><literal type="number">62</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>esk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name><name>dsk</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dsk</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">65</literal></expr>]</index></name> <operator>=</operator> <name><name>esk</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Triple-DES key schedule (168-bit, encryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des3_set3key_enc</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>des3_set3key</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>sk</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sk</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Triple-DES key schedule (168-bit, decryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des3_set3key_dec</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_DES_KEY_SIZE</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sk</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>des3_set3key</name><argument_list>( <argument><expr><name>sk</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>sk</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sk</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DES-ECB block encryption/decryption
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_CRYPT_ECB_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_des_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>SK</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>SK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DES_IP</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>DES_FP</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_DES_CRYPT_ECB_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * DES-CBC buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des_crypt_cbc</name><parameter_list>( <parameter><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>length</name> <operator>%</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_DES_ENCRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>mbedtls_des_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else <comment type="block">/* MBEDTLS_DES_DECRYPT */</comment>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_des_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<comment type="block">/*
 * 3DES-ECB block encryption/decryption
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES3_CRYPT_ECB_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_des3_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>SK</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>SK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sk</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DES_IP</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DES_ROUND</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>DES_FP</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_DES3_CRYPT_ECB_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * 3DES-CBC buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des3_crypt_cbc</name><parameter_list>( <parameter><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                     <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>length</name> <operator>%</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_DES_ENCRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>mbedtls_des3_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else <comment type="block">/* MBEDTLS_DES_DECRYPT */</comment>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_des3_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_DES_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * DES and 3DES test vectors from:
 *
 * http://csrc.nist.gov/groups/STM/cavp/documents/des/tripledes-vectors.zip
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_keys</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr>,
    <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
    <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x74</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_ecb_dec</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x5D</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xEB</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x0A</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_ecb_enc</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x4B</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x42</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x32</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_cbc_dec</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x4C</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_test_cbc_enc</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x4D</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x39</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_des_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_des_context</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_des3_context</name></type> <name>ctx3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>prv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_des_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des3_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * ECB mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  DES%c-ECB-%3d (%s): "</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>u</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'3'</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">56</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">56</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_DES_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>des3_test_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <switch>switch<condition>( <expr><name>i</name></expr> )</condition>
        <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set2key_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set2key_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set3key_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">5</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set3key_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></switch>

        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_des_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_des3_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_DES_DECRYPT</name> <operator>&amp;&amp;</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>des3_test_ecb_dec</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator>
            <operator>(</operator> <name>v</name> <operator>!=</operator> <name>MBEDTLS_DES_DECRYPT</name> <operator>&amp;&amp;</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>des3_test_ecb_enc</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * CBC mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  DES%c-CBC-%3d (%s): "</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>u</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'3'</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">56</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">56</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_DES_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>,  <argument><expr><name>des3_test_iv</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>prv</name></expr></argument>, <argument><expr><name>des3_test_iv</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>des3_test_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <switch>switch<condition>( <expr><name>i</name></expr> )</condition>
        <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set2key_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set2key_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set3key_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">5</literal></expr>:</case>
            <expr_stmt><expr><call><name>mbedtls_des3_set3key_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>des3_test_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></switch>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_DES_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_des_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_des3_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

                <if_stmt><if>if<condition>( <expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_des_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_des3_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>prv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>prv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>prv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_DES_DECRYPT</name> <operator>&amp;&amp;</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>des3_test_cbc_dec</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator>
            <operator>(</operator> <name>v</name> <operator>!=</operator> <name>MBEDTLS_DES_DECRYPT</name> <operator>&amp;&amp;</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>des3_test_cbc_enc</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_des_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des3_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>
</unit>
