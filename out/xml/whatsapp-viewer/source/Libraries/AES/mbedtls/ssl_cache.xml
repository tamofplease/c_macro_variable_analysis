<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ssl_cache.c"><comment type="block">/*
 *  SSL session cache implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 * These session callbacks use a simple chained list
 * to store and retrieve the session information.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CACHE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>      <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>mbedtls_ssl_cache_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_cache_context</name> <modifier>*</modifier></type><name>cache</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_cache_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>max_entries</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_cache_get</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_time_t</name></type> <name>t</name> <init>= <expr><call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>mbedtls_ssl_cache_context</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>mbedtls_ssl_cache_context</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_cache_entry</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>t</name> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>)</operator> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>ciphersuite</name></name> <operator>!=</operator> <name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>ciphersuite</name></name> <operator>||</operator>
            <name><name>session</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>compression</name></name> <operator>||</operator>
            <name><name>session</name><operator>-&gt;</operator><name>id_len</name></name> <operator>!=</operator> <name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>id_len</name></name></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>id</name></name></expr></argument>,
                    <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>id_len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>verify_result</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * Restore peer certificate (without rest of the original chain)
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>entry</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,
                                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509_crt</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_crt_parse</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name></expr></argument>,
                                <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></while>

<label><name>exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_cache_set</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_time_t</name></type> <name>t</name> <init>= <expr><call><name>time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>oldest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_cache_entry</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>mbedtls_ssl_cache_context</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>mbedtls_ssl_cache_context</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_cache_entry</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>prv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>t</name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>)</operator> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
            <break>break;</break> <comment type="block">/* expired, reuse this slot, update timestamp */</comment>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>id_len</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* client reconnected, keep timestamp for session id */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>oldest</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;</operator> <name>oldest</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>oldest</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>old</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>prv</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * Reuse oldest entry if max_entries reached
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_entries</name></name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>old</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>
        <comment type="block">/*
         * Reuse first entry in chain if max_entries reached,
         * but move to last place
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_entries</name></name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>cache</name><operator>-&gt;</operator><name>chain</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>prv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>
        <else>else
        <block>{<block_content>
            <comment type="block">/*
             * max_entries not reached, create new entry
             */</comment>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_cache_entry</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>prv</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>prv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * If we're reusing an entry, free its certificate first
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509_buf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Store peer certificate
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>session</name><operator>.</operator><name>peer_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_cache_set_timeout</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_cache_context</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>

<function><type><name>void</name></type> <name>mbedtls_ssl_cache_set_max_entries</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_cache_context</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>max</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>max_entries</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_cache_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_cache_context</name> <modifier>*</modifier></type><name>cache</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_cache_entry</name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>prv</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>prv</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>prv</name><operator>-&gt;</operator><name>peer_cert</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CACHE_C */</comment>
</unit>
