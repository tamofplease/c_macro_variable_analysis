<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/havege.c"><comment type="block" format="doxygen">/**
 *  \brief HAVEGE: HArdware Volatile Entropy Gathering and Expansion
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The HAVEGE RNG was designed by Andre Seznec in 2002.
 *
 *  http://www.irisa.fr/caps/projects/hipsor/publi.php
 *
 *  Contact: seznec(at)irisa_dot_fr - orocheco(at)irisa_dot_fr
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVEGE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"havege.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timing.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------------------
 * On average, one iteration accesses two 8-word blocks in the havege WALK
 * table, and generates 16 words in the RES array.
 *
 * The data read in the WALK table is updated and permuted after each use.
 * The result of the hardware clock counter read is used  for this update.
 *
 * 25 conditional tests are present.  The conditional tests are grouped in
 * two nested  groups of 12 conditional tests and 1 test that controls the
 * permutation; on average, there should be 6 tests executed and 3 of them
 * should be mispredicted.
 * ------------------------------------------------------------------------
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int *T = X; X = Y; Y = T; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TST1_ENTER</name></cpp:macro> <cpp:value>if( PTEST &amp; 1 ) { PTEST ^= 3; PTEST &gt;&gt;= 1;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TST2_ENTER</name></cpp:macro> <cpp:value>if( PTEST &amp; 1 ) { PTEST ^= 3; PTEST &gt;&gt;= 1;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TST1_LEAVE</name></cpp:macro> <cpp:value>U1++; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TST2_LEAVE</name></cpp:macro> <cpp:value>U2++; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_ITERATION</name></cpp:macro>                                   \
                                                        \
    <cpp:value>PTEST = PT1 &gt;&gt; 20;                                  \
                                                        \
    TST1_ENTER  TST1_ENTER  TST1_ENTER  TST1_ENTER      \
    TST1_ENTER  TST1_ENTER  TST1_ENTER  TST1_ENTER      \
    TST1_ENTER  TST1_ENTER  TST1_ENTER  TST1_ENTER      \
                                                        \
    TST1_LEAVE  TST1_LEAVE  TST1_LEAVE  TST1_LEAVE      \
    TST1_LEAVE  TST1_LEAVE  TST1_LEAVE  TST1_LEAVE      \
    TST1_LEAVE  TST1_LEAVE  TST1_LEAVE  TST1_LEAVE      \
                                                        \
    PTX = (PT1 &gt;&gt; 18) &amp; 7;                              \
    PT1 &amp;= 0x1FFF;                                      \
    PT2 &amp;= 0x1FFF;                                      \
    CLK = (int) mbedtls_timing_hardclock();                            \
                                                        \
    i = 0;                                              \
    A = &amp;WALK[PT1    ]; RES[i++] ^= *A;                 \
    B = &amp;WALK[PT2    ]; RES[i++] ^= *B;                 \
    C = &amp;WALK[PT1 ^ 1]; RES[i++] ^= *C;                 \
    D = &amp;WALK[PT2 ^ 4]; RES[i++] ^= *D;                 \
                                                        \
    IN = (*A &gt;&gt; (1)) ^ (*A &lt;&lt; (31)) ^ CLK;              \
    *A = (*B &gt;&gt; (2)) ^ (*B &lt;&lt; (30)) ^ CLK;              \
    *B = IN ^ U1;                                       \
    *C = (*C &gt;&gt; (3)) ^ (*C &lt;&lt; (29)) ^ CLK;              \
    *D = (*D &gt;&gt; (4)) ^ (*D &lt;&lt; (28)) ^ CLK;              \
                                                        \
    A = &amp;WALK[PT1 ^ 2]; RES[i++] ^= *A;                 \
    B = &amp;WALK[PT2 ^ 2]; RES[i++] ^= *B;                 \
    C = &amp;WALK[PT1 ^ 3]; RES[i++] ^= *C;                 \
    D = &amp;WALK[PT2 ^ 6]; RES[i++] ^= *D;                 \
                                                        \
    if( PTEST &amp; 1 ) SWAP( A, C );                       \
                                                        \
    IN = (*A &gt;&gt; (5)) ^ (*A &lt;&lt; (27)) ^ CLK;              \
    *A = (*B &gt;&gt; (6)) ^ (*B &lt;&lt; (26)) ^ CLK;              \
    *B = IN; CLK = (int) mbedtls_timing_hardclock();                   \
    *C = (*C &gt;&gt; (7)) ^ (*C &lt;&lt; (25)) ^ CLK;              \
    *D = (*D &gt;&gt; (8)) ^ (*D &lt;&lt; (24)) ^ CLK;              \
                                                        \
    A = &amp;WALK[PT1 ^ 4];                                 \
    B = &amp;WALK[PT2 ^ 1];                                 \
                                                        \
    PTEST = PT2 &gt;&gt; 1;                                   \
                                                        \
    PT2 = (RES[(i - 8) ^ PTY] ^ WALK[PT2 ^ PTY ^ 7]);   \
    PT2 = ((PT2 &amp; 0x1FFF) &amp; (~8)) ^ ((PT1 ^ 8) &amp; 0x8);  \
    PTY = (PT2 &gt;&gt; 10) &amp; 7;                              \
                                                        \
    TST2_ENTER  TST2_ENTER  TST2_ENTER  TST2_ENTER      \
    TST2_ENTER  TST2_ENTER  TST2_ENTER  TST2_ENTER      \
    TST2_ENTER  TST2_ENTER  TST2_ENTER  TST2_ENTER      \
                                                        \
    TST2_LEAVE  TST2_LEAVE  TST2_LEAVE  TST2_LEAVE      \
    TST2_LEAVE  TST2_LEAVE  TST2_LEAVE  TST2_LEAVE      \
    TST2_LEAVE  TST2_LEAVE  TST2_LEAVE  TST2_LEAVE      \
                                                        \
    C = &amp;WALK[PT1 ^ 5];                                 \
    D = &amp;WALK[PT2 ^ 5];                                 \
                                                        \
    RES[i++] ^= *A;                                     \
    RES[i++] ^= *B;                                     \
    RES[i++] ^= *C;                                     \
    RES[i++] ^= *D;                                     \
                                                        \
    IN = (*A &gt;&gt; ( 9)) ^ (*A &lt;&lt; (23)) ^ CLK;             \
    *A = (*B &gt;&gt; (10)) ^ (*B &lt;&lt; (22)) ^ CLK;             \
    *B = IN ^ U2;                                       \
    *C = (*C &gt;&gt; (11)) ^ (*C &lt;&lt; (21)) ^ CLK;             \
    *D = (*D &gt;&gt; (12)) ^ (*D &lt;&lt; (20)) ^ CLK;             \
                                                        \
    A = &amp;WALK[PT1 ^ 6]; RES[i++] ^= *A;                 \
    B = &amp;WALK[PT2 ^ 3]; RES[i++] ^= *B;                 \
    C = &amp;WALK[PT1 ^ 7]; RES[i++] ^= *C;                 \
    D = &amp;WALK[PT2 ^ 7]; RES[i++] ^= *D;                 \
                                                        \
    IN = (*A &gt;&gt; (13)) ^ (*A &lt;&lt; (19)) ^ CLK;             \
    *A = (*B &gt;&gt; (14)) ^ (*B &lt;&lt; (18)) ^ CLK;             \
    *B = IN;                                            \
    *C = (*C &gt;&gt; (15)) ^ (*C &lt;&lt; (17)) ^ CLK;             \
    *D = (*D &gt;&gt; (16)) ^ (*D &lt;&lt; (16)) ^ CLK;             \
                                                        \
    PT1 = ( RES[( i - 8 ) ^ PTX] ^                      \
            WALK[PT1 ^ PTX ^ 7] ) &amp; (~1);               \
    PT1 ^= (PT2 ^ 0x10) &amp; 0x10;                         \
                                                        \
    for( n++, i = 0; i &lt; 16; i++ )                      \
        hs-&gt;pool[n % MBEDTLS_HAVEGE_COLLECT_SIZE] ^= RES[i];</cpp:value></cpp:define>

<comment type="block">/*
 * Entropy gathering function
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>havege_fill</name><parameter_list>( <parameter><decl><type><name>mbedtls_havege_state</name> <modifier>*</modifier></type><name>hs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>U1</name></decl>,  <decl><type ref="prev"/><name>U2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>A</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>B</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>C</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>D</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>PT1</name></decl>, <decl><type ref="prev"/><name>PT2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>WALK</name></decl>, <decl><type ref="prev"/><name><name>RES</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>PTX</name></decl>, <decl><type ref="prev"/><name>PTY</name></decl>, <decl><type ref="prev"/><name>CLK</name></decl>, <decl><type ref="prev"/><name>PTEST</name></decl>, <decl><type ref="prev"/><name>IN</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>WALK</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>WALK</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>PT1</name>  <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>PT1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>PT2</name>  <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>PT2</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>PTX</name>  <operator>=</operator> <name>U1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>PTY</name>  <operator>=</operator> <name>U2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>PTX</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>RES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>RES</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>n</name> <operator>&lt;</operator> <name>MBEDTLS_HAVEGE_COLLECT_SIZE</name> <operator>*</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ONE_ITERATION</name>
        <name>ONE_ITERATION</name>
        <name>ONE_ITERATION</name>
        <name>ONE_ITERATION</name></expr></expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>PT1</name></name> <operator>=</operator> <name>PT1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>PT2</name></name> <operator>=</operator> <name>PT2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_HAVEGE_COLLECT_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * HAVEGE initialization
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_havege_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_havege_state</name> <modifier>*</modifier></type><name>hs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_havege_state</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>havege_fill</name><argument_list>( <argument><expr><name>hs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_havege_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_havege_state</name> <modifier>*</modifier></type><name>hs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>hs</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>hs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_havege_state</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * HAVEGE rand function
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_havege_random</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_havege_state</name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator><name>mbedtls_havege_state</name> <operator>*</operator><operator>)</operator> <name>p_rng</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>use_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>hs</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name>MBEDTLS_HAVEGE_COLLECT_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>havege_fill</name><argument_list>( <argument><expr><name>hs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>val</name>  <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name><name>hs</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>^=</operator> <name><name>hs</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name><name>hs</name><operator>-&gt;</operator><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVEGE_C */</comment>
</unit>
