<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/x509write_csr.c"><comment type="block">/*
 *  X.509 Certificate Signing Request writing
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 * References:
 * - CSRs: PKCS#10 v1.7 aka RFC 2986
 * - attributes: PKCS#9 v2.0 aka RFC 2985
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CSR_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509_csr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1write.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_x509write_csr_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509write_csr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_x509write_csr_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_asn1_free_named_data_list</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>subject</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_asn1_free_named_data_list</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509write_csr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_x509write_csr_set_md_alg</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_alg</name></name> <operator>=</operator> <name>md_alg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_x509write_csr_set_key</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509write_csr_set_subject_name</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subject_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_x509_string_to_names</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>, <argument><expr><name>subject_name</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509write_csr_set_extension</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oid_len</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>val_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_x509_set_extension</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_len</name></expr></argument>,
                               <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509write_csr_set_key_usage</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>key_usage</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_write_bitstring</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_usage</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509write_csr_set_extension</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_OID_KEY_USAGE</name></expr></argument>,
                                       <argument><expr><call><name>MBEDTLS_OID_SIZE</name><argument_list>( <argument><expr><name>MBEDTLS_OID_KEY_USAGE</name></expr></argument> )</argument_list></call></expr></argument>,
                                       <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509write_csr_set_ns_cert_type</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ns_cert_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_write_bitstring</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns_cert_type</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509write_csr_set_extension</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_OID_NS_CERT_TYPE</name></expr></argument>,
                                       <argument><expr><call><name>MBEDTLS_OID_SIZE</name><argument_list>( <argument><expr><name>MBEDTLS_OID_NS_CERT_TYPE</name></expr></argument> )</argument_list></call></expr></argument>,
                                       <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509write_csr_der</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                       <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                       <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sig_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sig_oid_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sig</name><index>[<expr><name>MBEDTLS_MPI_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp_buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pub_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sig_and_oid_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sig_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Prepare data to be signed in tmp_buf
     */</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>tmp_buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>tmp_buf</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_x509_write_extensions</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>extensions</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                        <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                        <name>MBEDTLS_ASN1_SET</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_oid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>MBEDTLS_OID_PKCS9_CSR_EXT_REQ</name></expr></argument>,
                                          <argument><expr><call><name>MBEDTLS_OID_SIZE</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS9_CSR_EXT_REQ</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                        <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                    <name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>pub_len</name></expr></argument>, <argument><expr><call><name>mbedtls_pk_write_pubkey_der</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
                                                <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>tmp_buf</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>-=</operator> <name>pub_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>pub_len</name></expr>;</expr_stmt>

    <comment type="block">/*
     *  Subject  ::=  Name
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_x509_write_names</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>subject</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>tmp_buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                    <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare signature
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_md</name><argument_list>( <argument><expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_alg</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pk_alg</name> <operator>=</operator> <call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>pk_alg</name> <operator>=</operator> <name>MBEDTLS_PK_ECDSA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_sign</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_alg</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_len</name></expr></argument>,
                         <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_oid_by_sig_alg</name><argument_list>( <argument><expr><name>pk_alg</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_alg</name></name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>sig_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_oid_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Write data to output buffer
     */</comment>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>sig_and_oid_len</name></expr></argument>, <argument><expr><call><name>mbedtls_x509_write_sig</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
                                        <argument><expr><name>sig_oid</name></expr></argument>, <argument><expr><name>sig_oid_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>c2</name> <operator>-</operator> <name>buf</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>c2</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>sig_and_oid_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                 <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_BEGIN_CSR</name></cpp:macro>           <cpp:value>"-----BEGIN CERTIFICATE REQUEST-----\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_END_CSR</name></cpp:macro>             <cpp:value>"-----END CERTIFICATE REQUEST-----\n"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_x509write_csr_pem</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509write_csr</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                       <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                       <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509write_csr_der</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                   <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pem_write_buffer</name><argument_list>( <argument><expr><name>PEM_BEGIN_CSR</name></expr></argument>, <argument><expr><name>PEM_END_CSR</name></expr></argument>,
                                  <argument><expr><name>output_buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>output_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>ret</name></expr></argument>,
                                  <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_WRITE_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CSR_WRITE_C */</comment>
</unit>
