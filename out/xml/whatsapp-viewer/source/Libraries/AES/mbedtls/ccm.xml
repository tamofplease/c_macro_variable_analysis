<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ccm.c"><comment type="block">/*
 *  NIST SP800-38C compliant CCM implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 * Definition of CCM:
 * http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C_updated-July20_2007.pdf
 * RFC 3610 "Counter with CBC-MAC (CCM)"
 *
 * Related:
 * RFC 5116 "An Interface and Algorithms for Authenticated Encryption"
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ccm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST &amp;&amp; MBEDTLS_AES_C */</comment>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCM_ENCRYPT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CCM_DECRYPT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*
 * Initialize context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ccm_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ccm_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ccm_setkey</name><parameter_list>( <parameter><decl><type><name>mbedtls_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                        <parameter><decl><type><name>mbedtls_cipher_id_t</name></type> <name>cipher</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_values</name><argument_list>( <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>, <argument><expr><name>MBEDTLS_MODE_ECB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>,
                               <argument><expr><name>MBEDTLS_ENCRYPT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ccm_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ccm_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Macros for common operations.
 * Results in smaller compiled code than static inline functions.
 */</comment>

<comment type="block">/*
 * Update the CBC-MAC state in y using a block in b
 * (Always using b as the source helps the compiler optimise a bit better.)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPDATE_CBC_MAC</name></cpp:macro>                                                      \
    <cpp:value>for( i = 0; i &lt; 16; i++ )                                               \
        y[i] ^= b[i];                                                       \
                                                                            \
    if( ( ret = mbedtls_cipher_update( &amp;ctx-&gt;cipher_ctx, y, 16, y, &amp;olen ) ) != 0 ) \
        return( ret );</cpp:value></cpp:define>

<comment type="block">/*
 * Encrypt or decrypt a partial block with CTR
 * Warning: using b for temporary storage! src and dst must not be b!
 * This avoids allocating one more 16 bytes buffer while allowing src == dst.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTR_CRYPT</name><parameter_list>( <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>len</name></type></parameter>  )</parameter_list></cpp:macro>                                            \
    <cpp:value>if( ( ret = mbedtls_cipher_update( &amp;ctx-&gt;cipher_ctx, ctr, 16, b, &amp;olen ) ) != 0 )  \
        return( ret );                                                         \
                                                                               \
    for( i = 0; i &lt; len; i++ )                                                 \
        dst[i] = src[i] ^ b[i];</cpp:value></cpp:define>

<comment type="block">/*
 * Authenticated encryption or decryption
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ccm_auth_crypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len_left</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>y</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ctr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Check length requirements: SP800-38C A.1
     * Additional requirement: a &lt; 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>tag_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>tag_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal> <operator>||</operator> <name>tag_len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Also implies q is within bounds */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>iv_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">7</literal> <operator>||</operator> <name>iv_len</name></expr></argument> &gt;</argument_list></name> <literal type="number">13</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <literal type="number">0xFF00</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>iv_len</name></expr>;</expr_stmt>

    <comment type="block">/*
     * First block B_0:
     * 0        .. 0        flags
     * 1        .. iv_len   nonce (aka iv)
     * iv_len+1 .. 15       length
     *
     * With flags as (bits):
     * 7        0
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */</comment>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator> <name>add_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator> <operator>(</operator> <name>tag_len</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>q</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len_left</name> <operator>=</operator> <name>length</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>len_left</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">15</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len_left</name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>len_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


    <comment type="block">/* Start CBC-MAC with first block */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>UPDATE_CBC_MAC</name></expr>;</expr_stmt>

    <comment type="block">/*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>len_left</name> <operator>=</operator> <name>add_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>add_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>add_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><name>len_left</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>len_left</name></expr> </then><else>: <expr><literal type="number">16</literal> <operator>-</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>b</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len_left</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>src</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>UPDATE_CBC_MAC</name></expr>;</expr_stmt>

        <while>while<condition>( <expr><name>len_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><name>len_left</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name>len_left</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>UPDATE_CBC_MAC</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>len_left</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>src</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Prepare counter block for encryption:
     * 0        .. 0        flags
     * 1        .. iv_len   nonce (aka iv)
     * iv_len+1 .. 15       counter (initially 1)
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */</comment>
    <expr_stmt><expr><name><name>ctr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ctr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctr</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>iv_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctr</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Authenticate and {en,de}crypt the message.
     *
     * The only difference between encryption and decryption is
     * the respective order of authentication and {en,de}cryption.
     */</comment>
    <expr_stmt><expr><name>len_left</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>src</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dst</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>len_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name> <init>= <expr><ternary><condition><expr><name>len_left</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name>len_left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>CCM_ENCRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>UPDATE_CBC_MAC</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>CTR_CRYPT</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>CCM_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>UPDATE_CBC_MAC</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>src</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len_left</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ctr</name><index>[<expr><literal type="number">15</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></while>

    <comment type="block">/*
     * Authentication: reset counter and crypt/mask internal tag
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctr</name><index>[<expr><literal type="number">15</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>CTR_CRYPT</name><argument_list>( <argument><expr><name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Authenticated encryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ccm_encrypt_and_tag</name><parameter_list>( <parameter><decl><type><name>mbedtls_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>ccm_auth_crypt</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CCM_ENCRYPT</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>,
                            <argument><expr><name>add</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Authenticated decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ccm_auth_decrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_ccm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>check_tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ccm_auth_crypt</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CCM_DECRYPT</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument>,
                                <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>check_tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check tag in "constant-time" */</comment>
    <for>for<control>( <init><expr><name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tag_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>check_tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CCM_AUTH_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Examples 1 to 3 from SP800-38C Appendix C
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_TESTS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/*
 * The data is the same for all tests, only the used length changes
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>,
    <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x4f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
    <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ad</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
    <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>msg</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
    <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,
    <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x37</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>iv_len</name> <index>[<expr><name>NB_TESTS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">12</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>add_len</name><index>[<expr><name>NB_TESTS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>msg_len</name><index>[<expr><name>NB_TESTS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>tag_len</name><index>[<expr><name>NB_TESTS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">8</literal></expr>  }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>res</name><index>[<expr><name>NB_TESTS</name></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{   <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x5d</literal></expr> }</block></expr>,
    <expr><block>{   <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
        <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,
        <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xcd</literal></expr> }</block></expr>,
    <expr><block>{   <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x7a</literal></expr>,
        <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
        <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xa5</literal></expr>,
        <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x51</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mbedtls_ccm_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ccm_context</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ccm_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ccm_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CIPHER_ID_AES</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <name>key</name></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CCM: setup failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CCM-AES #%u: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ccm_encrypt_and_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>msg_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>iv_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name><name>add_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                   <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>out</name></expr></argument>,
                                   <argument><expr><name>out</name> <operator>+</operator> <name><name>msg_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tag_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>msg_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>tag_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ccm_auth_decrypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>msg_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>iv_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name><name>add_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                <argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>,
                                <argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>msg_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tag_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>msg_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>mbedtls_ccm_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST &amp;&amp; MBEDTLS_AES_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
</unit>
