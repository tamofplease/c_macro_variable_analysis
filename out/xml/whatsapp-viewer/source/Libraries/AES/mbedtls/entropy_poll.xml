<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/entropy_poll.c"><comment type="block">/*
 *  Platform-specific and custom entropy polling functions
 *
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entropy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entropy_poll.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_TIMING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timing.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVEGE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"havege.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_NV_SEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NO_PLATFORM_ENTROPY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>unix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__unix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Platform entropy sources only work on Unix and Windows, see MBEDTLS_NO_PLATFORM_ENTROPY in config.h"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>mbedtls_platform_entropy_poll</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                           <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HCRYPTPROV</name></type> <name>provider</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>CryptAcquireContext</name><argument_list>( <argument><expr><operator>&amp;</operator><name>provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>PROV_RSA_FULL</name></expr></argument>, <argument><expr><name>CRYPT_VERIFYCONTEXT</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>FALSE</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>CryptGenRandom</name><argument_list>( <argument><expr><name>provider</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>FALSE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>( <argument><expr><name>provider</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CryptReleaseContext</name><argument_list>( <argument><expr><name>provider</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* _WIN32 &amp;&amp; !EFIX64 &amp;&amp; !EFI32 */</comment>

<comment type="block">/*
 * Test for Linux getrandom() support.
 * Since there is no wrapper in the libc yet, use the generic syscall wrapper
 * available in GNU libc and compatible libc's (eg uClibc).
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYS_getrandom</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GETRANDOM</name></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getrandom_wrapper</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* MemSan cannot understand that the syscall writes to the buffer */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_feature</name><argument_list>(<argument><expr><name>memory_sanitizer</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <call><name>syscall</name><argument_list>( <argument><expr><name>SYS_getrandom</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<comment type="block">/* Check if version is at least 3.17.0 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_version_3_17_plus</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>un</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ver</name></decl>;</decl_stmt>

    <comment type="block">/* Get version information */</comment>
    <expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>un</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ver</name> <operator>=</operator> <name><name>un</name><operator>.</operator><name>release</name></name></expr>;</expr_stmt>

    <comment type="block">/* Check major version; assume a single digit */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'3'</literal> <operator>||</operator> <name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>||</operator> <name><name>ver</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Ok, so now we know major == 3, check minor.
     * Assume 1 or 2 digits. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>minor</name> <operator>=</operator> <name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ver</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>ver</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>minor</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>minor</name> <operator>+</operator> <name><name>ver</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ver</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>minor</name> <operator>&lt;</operator> <literal type="number">17</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>has_getrandom</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SYS_getrandom */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __linux__ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>mbedtls_platform_entropy_poll</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>read_len</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETRANDOM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>has_getrandom</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>has_getrandom</name> <operator>=</operator> <operator>(</operator> <call><name>check_version_3_17_plus</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>has_getrandom</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>getrandom_wrapper</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_GETRANDOM */</comment>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>file</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>read_len</name> <operator>=</operator> <call><name>fread</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>read_len</name> <operator>!=</operator> <name>len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 &amp;&amp; !EFIX64 &amp;&amp; !EFI32 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_NO_PLATFORM_ENTROPY */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_TEST_NULL_ENTROPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_null_entropy_poll</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>output</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_TIMING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_hardclock_poll</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>timer</name> <init>= <expr><call><name>mbedtls_timing_hardclock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_TIMING_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVEGE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_havege_poll</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_havege_state</name> <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator><name>mbedtls_havege_state</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_havege_random</name><argument_list>( <argument><expr><name>hs</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVEGE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_NV_SEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_nv_seed_poll</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MBEDTLS_ENTROPY_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name> <init>= <expr><name>MBEDTLS_ENTROPY_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_ENTROPY_BLOCK_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_nv_seed_read</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ENTROPY_BLOCK_SIZE</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
      <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <name>use_len</name></expr> )</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>use_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>use_len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_NV_SEED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_C */</comment>
</unit>
