<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/pk_wrap.c"><comment type="block">/*
 *  Public Key abstraction layer: wrapper functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pk_internal.h"</cpp:file></cpp:include>

<comment type="block">/* Even if RSA not activated, for the sake of RSA-alt */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecp.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecdsa.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_RSA_ALT_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_can_do</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_RSA</name> <operator>||</operator>
            <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_RSASSA_PSS</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rsa_get_bitlen</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_verify_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>sig_len</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_VERIFY_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_rsa_pkcs1_verify</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>MBEDTLS_RSA_PUBLIC</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>,
                                  <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>hash_len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sig</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>sig_len</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_sign_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sig_len</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sig_len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_rsa_pkcs1_sign</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument>, <argument><expr><name>MBEDTLS_RSA_PRIVATE</name></expr></argument>,
                <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>hash_len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sig</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_decrypt_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>,
                    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_rsa_pkcs1_decrypt</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument>,
                <argument><expr><name>MBEDTLS_RSA_PRIVATE</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>osize</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_encrypt_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>,
                    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>olen</name> <operator>&gt;</operator> <name>osize</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_rsa_pkcs1_encrypt</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>,
                <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument>, <argument><expr><name>MBEDTLS_RSA_PUBLIC</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_check_pair_wrap</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>prv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_rsa_check_pub_priv</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>pub</name></expr></argument>,
                                <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>prv</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rsa_alloc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_rsa_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_rsa_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rsa_free_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_rsa_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rsa_debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_pk_debug_item</name> <modifier>*</modifier></type><name>items</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MBEDTLS_PK_DEBUG_MPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"rsa.N"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>N</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>items</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MBEDTLS_PK_DEBUG_MPI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"rsa.E"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>mbedtls_rsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>E</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name></type> <name>mbedtls_rsa_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_PK_RSA</name></expr>,
    <expr><literal type="string">"RSA"</literal></expr>,
    <expr><name>rsa_get_bitlen</name></expr>,
    <expr><name>rsa_can_do</name></expr>,
    <expr><name>rsa_verify_wrap</name></expr>,
    <expr><name>rsa_sign_wrap</name></expr>,
    <expr><name>rsa_decrypt_wrap</name></expr>,
    <expr><name>rsa_encrypt_wrap</name></expr>,
    <expr><name>rsa_check_pair_wrap</name></expr>,
    <expr><name>rsa_alloc_wrap</name></expr>,
    <expr><name>rsa_free_wrap</name></expr>,
    <expr><name>rsa_debug</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Generic EC key
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>eckey_can_do</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name> <operator>||</operator>
            <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY_DH</name> <operator>||</operator>
            <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>eckey_get_bitlen</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <operator>(</operator><operator>(</operator><name>mbedtls_ecp_keypair</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name><name>grp</name><operator>.</operator><name>pbits</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Forward declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecdsa_verify_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecdsa_sign_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sig_len</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eckey_verify_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecdsa_context</name></type> <name>ecdsa</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecdsa_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdsa_from_keypair</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ecdsa_verify_wrap</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecdsa_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eckey_sign_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sig_len</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecdsa_context</name></type> <name>ecdsa</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecdsa_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdsa_from_keypair</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ecdsa_sign_wrap</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>,
                               <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecdsa_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ecdsa</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_C */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>eckey_check_pair</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>prv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_ecp_check_pub_priv</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_ecp_keypair</name> <operator>*</operator><operator>)</operator> <name>pub</name></expr></argument>,
                                <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_ecp_keypair</name> <operator>*</operator><operator>)</operator> <name>prv</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>eckey_alloc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ecp_keypair</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ecp_keypair_init</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eckey_free_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ecp_keypair_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecp_keypair</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eckey_debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_pk_debug_item</name> <modifier>*</modifier></type><name>items</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MBEDTLS_PK_DEBUG_ECP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"eckey.Q"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>mbedtls_ecp_keypair</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>Q</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name></type> <name>mbedtls_eckey_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_PK_ECKEY</name></expr>,
    <expr><literal type="string">"EC"</literal></expr>,
    <expr><name>eckey_get_bitlen</name></expr>,
    <expr><name>eckey_can_do</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>eckey_verify_wrap</name></expr>,
    <expr><name>eckey_sign_wrap</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>eckey_check_pair</name></expr>,
    <expr><name>eckey_alloc_wrap</name></expr>,
    <expr><name>eckey_free_wrap</name></expr>,
    <expr><name>eckey_debug</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * EC key restricted to ECDH
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>eckeydh_can_do</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name> <operator>||</operator>
            <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_ECKEY_DH</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name></type> <name>mbedtls_eckeydh_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_PK_ECKEY_DH</name></expr>,
    <expr><literal type="string">"EC_DH"</literal></expr>,
    <expr><name>eckey_get_bitlen</name></expr>,         <comment type="block">/* Same underlying key structure */</comment>
    <expr><name>eckeydh_can_do</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>eckey_check_pair</name></expr>,
    <expr><name>eckey_alloc_wrap</name></expr>,       <comment type="block">/* Same underlying key structure */</comment>
    <expr><name>eckey_free_wrap</name></expr>,        <comment type="block">/* Same underlying key structure */</comment>
    <expr><name>eckey_debug</name></expr>,            <comment type="block">/* Same underlying key structure */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecdsa_can_do</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ecdsa_verify_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>md_alg</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdsa_read_signature</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecdsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>,
                                <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ecdsa_sign_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sig_len</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_ecdsa_write_signature</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecdsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>,
                <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ecdsa_alloc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ecdsa_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ecdsa_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecdsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ecdsa_free_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ecdsa_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecdsa_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name></type> <name>mbedtls_ecdsa_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_PK_ECDSA</name></expr>,
    <expr><literal type="string">"ECDSA"</literal></expr>,
    <expr><name>eckey_get_bitlen</name></expr>,     <comment type="block">/* Compatible key structures */</comment>
    <expr><name>ecdsa_can_do</name></expr>,
    <expr><name>ecdsa_verify_wrap</name></expr>,
    <expr><name>ecdsa_sign_wrap</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>eckey_check_pair</name></expr>,   <comment type="block">/* Compatible key structures */</comment>
    <expr><name>ecdsa_alloc_wrap</name></expr>,
    <expr><name>ecdsa_free_wrap</name></expr>,
    <expr><name>eckey_debug</name></expr>,        <comment type="block">/* Compatible key structures */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_RSA_ALT_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Support for alternative RSA-private implementations
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_alt_can_do</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>type</name> <operator>==</operator> <name>MBEDTLS_PK_RSA</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rsa_alt_get_bitlen</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_rsa_alt_context</name> <modifier>*</modifier></type><name>rsa_alt</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_rsa_alt_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">8</literal> <operator>*</operator> <call><name><name>rsa_alt</name><operator>-&gt;</operator><name>key_len_func</name></name><argument_list>( <argument><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_alt_sign_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sig_len</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_rsa_alt_context</name> <modifier>*</modifier></type><name>rsa_alt</name> <init>= <expr><operator>(</operator><name>mbedtls_rsa_alt_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>sig_len</name> <operator>=</operator> <call><name><name>rsa_alt</name><operator>-&gt;</operator><name>key_len_func</name></name><argument_list>( <argument><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>rsa_alt</name><operator>-&gt;</operator><name>sign_func</name></name><argument_list>( <argument><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument>, <argument><expr><name>MBEDTLS_RSA_PRIVATE</name></expr></argument>,
                <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>hash_len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sig</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_alt_decrypt_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>,
                    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_rsa_alt_context</name> <modifier>*</modifier></type><name>rsa_alt</name> <init>= <expr><operator>(</operator><name>mbedtls_rsa_alt_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>f_rng</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>p_rng</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>!=</operator> <call><name><name>rsa_alt</name><operator>-&gt;</operator><name>key_len_func</name></name><argument_list>( <argument><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>rsa_alt</name><operator>-&gt;</operator><name>decrypt_func</name></name><argument_list>( <argument><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
                <argument><expr><name>MBEDTLS_RSA_PRIVATE</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>osize</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_alt_check_pair</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>prv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sig</name><index>[<expr><name>MBEDTLS_MPI_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>rsa_alt_get_bitlen</name><argument_list>( <argument><expr><name>prv</name></expr></argument> )</argument_list></call> <operator>!=</operator> <call><name>rsa_get_bitlen</name><argument_list>( <argument><expr><name>pub</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_KEY_CHECK_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0x2a</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hash</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>rsa_alt_sign_wrap</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>prv</name></expr></argument>, <argument><expr><name>MBEDTLS_MD_NONE</name></expr></argument>,
                                   <argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hash</name></expr></argument> )</argument_list></sizeof></expr></argument>,
                                   <argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>rsa_verify_wrap</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pub</name></expr></argument>, <argument><expr><name>MBEDTLS_MD_NONE</name></expr></argument>,
                         <argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hash</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_KEY_CHECK_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>rsa_alt_alloc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_rsa_alt_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_rsa_alt_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rsa_alt_free_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_rsa_alt_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name></type> <name>mbedtls_rsa_alt_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_PK_RSA_ALT</name></expr>,
    <expr><literal type="string">"RSA-alt"</literal></expr>,
    <expr><name>rsa_alt_get_bitlen</name></expr>,
    <expr><name>rsa_alt_can_do</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr><name>rsa_alt_sign_wrap</name></expr>,
    <expr><name>rsa_alt_decrypt_wrap</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>rsa_alt_check_pair</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>rsa_alt_alloc_wrap</name></expr>,
    <expr><name>rsa_alt_free_wrap</name></expr>,
    <expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_RSA_ALT_SUPPORT */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_C */</comment>
</unit>
