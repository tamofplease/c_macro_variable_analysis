<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/oid.c"><comment type="block" format="doxygen">/**
 * \file oid.c
 *
 * \brief Object Identifier (OID) database
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_OID_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsa.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_snprintf</name></cpp:macro> <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_USE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CREATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Macro to automatically add the size of #define'd OIDs
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_LEN</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>s, MBEDTLS_OID_SIZE(s)</cpp:value></cpp:define>

<comment type="block">/*
 * Macro to generate an internal function for oid_XXX_from_asn1() (used by
 * the other functions)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_OID_TYPED_FROM_ASN1</name><parameter_list>( <parameter><type><name>TYPE_T</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter> )</parameter_list></cpp:macro>                        \
<cpp:value>static const TYPE_T * oid_ ## NAME ## _from_asn1( const mbedtls_asn1_buf *oid )     \
{                                                                           \
    const TYPE_T *p = LIST;                                                 \
    const mbedtls_oid_descriptor_t *cur = (const mbedtls_oid_descriptor_t *) p;             \
    if( p == NULL || oid == NULL ) return( NULL );                          \
    while( cur-&gt;asn1 != NULL ) {                                            \
        if( cur-&gt;asn1_len == oid-&gt;len &amp;&amp;                                    \
            memcmp( cur-&gt;asn1, oid-&gt;p, oid-&gt;len ) == 0 ) {                  \
            return( p );                                                    \
        }                                                                   \
        p++;                                                                \
        cur = (const mbedtls_oid_descriptor_t *) p;                                 \
    }                                                                       \
    return( NULL );                                                         \
}</cpp:value></cpp:define>

<comment type="block">/*
 * Macro to generate a function for retrieving a single attribute from the
 * descriptor of an mbedtls_oid_descriptor_t wrapper.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_OID_GET_DESCRIPTOR_ATTR1</name><parameter_list>(<parameter><type><name>FN_NAME</name></type></parameter>, <parameter><type><name>TYPE_T</name></type></parameter>, <parameter><type><name>TYPE_NAME</name></type></parameter>, <parameter><type><name>ATTR1_TYPE</name></type></parameter>, <parameter><type><name>ATTR1</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>int FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \
{                                                                       \
    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \
    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \
    *ATTR1 = data-&gt;descriptor.ATTR1;                                    \
    return( 0 );                                                        \
}</cpp:value></cpp:define>

<comment type="block">/*
 * Macro to generate a function for retrieving a single attribute from an
 * mbedtls_oid_descriptor_t wrapper.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_OID_GET_ATTR1</name><parameter_list>(<parameter><type><name>FN_NAME</name></type></parameter>, <parameter><type><name>TYPE_T</name></type></parameter>, <parameter><type><name>TYPE_NAME</name></type></parameter>, <parameter><type><name>ATTR1_TYPE</name></type></parameter>, <parameter><type><name>ATTR1</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>int FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1 )                  \
{                                                                       \
    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );        \
    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );            \
    *ATTR1 = data-&gt;ATTR1;                                               \
    return( 0 );                                                        \
}</cpp:value></cpp:define>

<comment type="block">/*
 * Macro to generate a function for retrieving two attributes from an
 * mbedtls_oid_descriptor_t wrapper.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_OID_GET_ATTR2</name><parameter_list>(<parameter><type><name>FN_NAME</name></type></parameter>, <parameter><type><name>TYPE_T</name></type></parameter>, <parameter><type><name>TYPE_NAME</name></type></parameter>, <parameter><type><name>ATTR1_TYPE</name></type></parameter>, <parameter><type><name>ATTR1</name></type></parameter>,     \
                         <parameter><type><name>ATTR2_TYPE</name></type></parameter>, <parameter><type><name>ATTR2</name></type></parameter>)</parameter_list></cpp:macro>                                 \
<cpp:value>int FN_NAME( const mbedtls_asn1_buf *oid, ATTR1_TYPE * ATTR1, ATTR2_TYPE * ATTR2 )  \
{                                                                           \
    const TYPE_T *data = oid_ ## TYPE_NAME ## _from_asn1( oid );            \
    if( data == NULL ) return( MBEDTLS_ERR_OID_NOT_FOUND );                \
    *ATTR1 = data-&gt;ATTR1;                                                   \
    *ATTR2 = data-&gt;ATTR2;                                                   \
    return( 0 );                                                            \
}</cpp:value></cpp:define>

<comment type="block">/*
 * Macro to generate a function for retrieving the OID based on a single
 * attribute from a mbedtls_oid_descriptor_t wrapper.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_OID_GET_OID_BY_ATTR1</name><parameter_list>(<parameter><type><name>FN_NAME</name></type></parameter>, <parameter><type><name>TYPE_T</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>ATTR1_TYPE</name></type></parameter>, <parameter><type><name>ATTR1</name></type></parameter>)</parameter_list></cpp:macro>   \
<cpp:value>int FN_NAME( ATTR1_TYPE ATTR1, const char **oid, size_t *olen )             \
{                                                                           \
    const TYPE_T *cur = LIST;                                               \
    while( cur-&gt;descriptor.asn1 != NULL ) {                                 \
        if( cur-&gt;ATTR1 == ATTR1 ) {                                         \
            *oid = cur-&gt;descriptor.asn1;                                    \
            *olen = cur-&gt;descriptor.asn1_len;                               \
            return( 0 );                                                    \
        }                                                                   \
        cur++;                                                              \
    }                                                                       \
    return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \
}</cpp:value></cpp:define>

<comment type="block">/*
 * Macro to generate a function for retrieving the OID based on two
 * attributes from a mbedtls_oid_descriptor_t wrapper.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN_OID_GET_OID_BY_ATTR2</name><parameter_list>(<parameter><type><name>FN_NAME</name></type></parameter>, <parameter><type><name>TYPE_T</name></type></parameter>, <parameter><type><name>LIST</name></type></parameter>, <parameter><type><name>ATTR1_TYPE</name></type></parameter>, <parameter><type><name>ATTR1</name></type></parameter>,   \
                                <parameter><type><name>ATTR2_TYPE</name></type></parameter>, <parameter><type><name>ATTR2</name></type></parameter>)</parameter_list></cpp:macro>                          \
<cpp:value>int FN_NAME( ATTR1_TYPE ATTR1, ATTR2_TYPE ATTR2, const char **oid ,         \
             size_t *olen )                                                 \
{                                                                           \
    const TYPE_T *cur = LIST;                                               \
    while( cur-&gt;descriptor.asn1 != NULL ) {                                 \
        if( cur-&gt;ATTR1 == ATTR1 &amp;&amp; cur-&gt;ATTR2 == ATTR2 ) {                  \
            *oid = cur-&gt;descriptor.asn1;                                    \
            *olen = cur-&gt;descriptor.asn1_len;                               \
            return( 0 );                                                    \
        }                                                                   \
        cur++;                                                              \
    }                                                                       \
    return( MBEDTLS_ERR_OID_NOT_FOUND );                                   \
}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_USE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CREATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * For X520 attribute types
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>          <modifier>*</modifier></type><name>short_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_x520_attr_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_x520_attr_t</name></type> <name><name>oid_x520_attr_type</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_CN</name></expr></argument> )</argument_list></call></expr>,          <expr><literal type="string">"id-at-commonName"</literal></expr>,               <expr><literal type="string">"Common Name"</literal></expr> }</block></expr>,
        <expr><literal type="string">"CN"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_COUNTRY</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"id-at-countryName"</literal></expr>,              <expr><literal type="string">"Country"</literal></expr> }</block></expr>,
        <expr><literal type="string">"C"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_LOCALITY</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-at-locality"</literal></expr>,                 <expr><literal type="string">"Locality"</literal></expr> }</block></expr>,
        <expr><literal type="string">"L"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_STATE</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"id-at-state"</literal></expr>,                    <expr><literal type="string">"State"</literal></expr> }</block></expr>,
        <expr><literal type="string">"ST"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_ORGANIZATION</name></expr></argument> )</argument_list></call></expr>,<expr><literal type="string">"id-at-organizationName"</literal></expr>,         <expr><literal type="string">"Organization"</literal></expr> }</block></expr>,
        <expr><literal type="string">"O"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_ORG_UNIT</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-at-organizationalUnitName"</literal></expr>,   <expr><literal type="string">"Org Unit"</literal></expr> }</block></expr>,
        <expr><literal type="string">"OU"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS9_EMAIL</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"emailAddress"</literal></expr>,                   <expr><literal type="string">"E-mail address"</literal></expr> }</block></expr>,
        <expr><literal type="string">"emailAddress"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_SERIAL_NUMBER</name></expr></argument> )</argument_list></call></expr>,<expr><literal type="string">"id-at-serialNumber"</literal></expr>,            <expr><literal type="string">"Serial number"</literal></expr> }</block></expr>,
        <expr><literal type="string">"serialNumber"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_POSTAL_ADDRESS</name></expr></argument> )</argument_list></call></expr>,<expr><literal type="string">"id-at-postalAddress"</literal></expr>,          <expr><literal type="string">"Postal address"</literal></expr> }</block></expr>,
        <expr><literal type="string">"postalAddress"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_POSTAL_CODE</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"id-at-postalCode"</literal></expr>,               <expr><literal type="string">"Postal code"</literal></expr> }</block></expr>,
        <expr><literal type="string">"postalCode"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_SUR_NAME</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-at-surName"</literal></expr>,                  <expr><literal type="string">"Surname"</literal></expr> }</block></expr>,
        <expr><literal type="string">"SN"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_GIVEN_NAME</name></expr></argument> )</argument_list></call></expr>,  <expr><literal type="string">"id-at-givenName"</literal></expr>,                <expr><literal type="string">"Given name"</literal></expr> }</block></expr>,
        <expr><literal type="string">"GN"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_INITIALS</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-at-initials"</literal></expr>,                 <expr><literal type="string">"Initials"</literal></expr> }</block></expr>,
        <expr><literal type="string">"initials"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_GENERATION_QUALIFIER</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"id-at-generationQualifier"</literal></expr>, <expr><literal type="string">"Generation qualifier"</literal></expr> }</block></expr>,
        <expr><literal type="string">"generationQualifier"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_TITLE</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"id-at-title"</literal></expr>,                    <expr><literal type="string">"Title"</literal></expr> }</block></expr>,
        <expr><literal type="string">"title"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_DN_QUALIFIER</name></expr></argument> )</argument_list></call></expr>,<expr><literal type="string">"id-at-dnQualifier"</literal></expr>,              <expr><literal type="string">"Distinguished Name qualifier"</literal></expr> }</block></expr>,
        <expr><literal type="string">"dnQualifier"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_PSEUDONYM</name></expr></argument> )</argument_list></call></expr>,   <expr><literal type="string">"id-at-pseudonym"</literal></expr>,                <expr><literal type="string">"Pseudonym"</literal></expr> }</block></expr>,
        <expr><literal type="string">"pseudonym"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DOMAIN_COMPONENT</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"id-domainComponent"</literal></expr>,           <expr><literal type="string">"Domain component"</literal></expr> }</block></expr>,
        <expr><literal type="string">"DC"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_AT_UNIQUE_IDENTIFIER</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"id-at-uniqueIdentifier"</literal></expr>,    <expr><literal type="string">"Unique Identifier"</literal></expr> }</block></expr>,
        <expr><literal type="string">"uniqueIdentifier"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>NULL</name></expr>,
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_x520_attr_t</argument>, <argument>x520_attr</argument>, <argument>oid_x520_attr_type</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_attr_short_name</argument>, <argument>oid_x520_attr_t</argument>, <argument>x520_attr</argument>, <argument>const char *</argument>, <argument>short_name</argument>)</argument_list></macro>

<comment type="block">/*
 * For X509 extensions
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>ext_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_x509_ext_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_x509_ext_t</name></type> <name><name>oid_x509_ext</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_BASIC_CONSTRAINTS</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-ce-basicConstraints"</literal></expr>,   <expr><literal type="string">"Basic Constraints"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_X509_EXT_BASIC_CONSTRAINTS</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_KEY_USAGE</name></expr></argument> )</argument_list></call></expr>,            <expr><literal type="string">"id-ce-keyUsage"</literal></expr>,           <expr><literal type="string">"Key Usage"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_X509_EXT_KEY_USAGE</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EXTENDED_KEY_USAGE</name></expr></argument> )</argument_list></call></expr>,   <expr><literal type="string">"id-ce-extKeyUsage"</literal></expr>,        <expr><literal type="string">"Extended Key Usage"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_SUBJECT_ALT_NAME</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"id-ce-subjectAltName"</literal></expr>,     <expr><literal type="string">"Subject Alt Name"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_X509_EXT_SUBJECT_ALT_NAME</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_NS_CERT_TYPE</name></expr></argument> )</argument_list></call></expr>,         <expr><literal type="string">"id-netscape-certtype"</literal></expr>,     <expr><literal type="string">"Netscape Certificate Type"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_X509_EXT_NS_CERT_TYPE</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><literal type="number">0</literal></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_x509_ext_t</argument>, <argument>x509_ext</argument>, <argument>oid_x509_ext</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_x509_ext_type</argument>, <argument>oid_x509_ext_t</argument>, <argument>x509_ext</argument>, <argument>int</argument>, <argument>ext_type</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_oid_descriptor_t</name></type> <name><name>oid_ext_key_usage</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_SERVER_AUTH</name></expr></argument> )</argument_list></call></expr>,      <expr><literal type="string">"id-kp-serverAuth"</literal></expr>,      <expr><literal type="string">"TLS Web Server Authentication"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_CLIENT_AUTH</name></expr></argument> )</argument_list></call></expr>,      <expr><literal type="string">"id-kp-clientAuth"</literal></expr>,      <expr><literal type="string">"TLS Web Client Authentication"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_CODE_SIGNING</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"id-kp-codeSigning"</literal></expr>,     <expr><literal type="string">"Code Signing"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EMAIL_PROTECTION</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"id-kp-emailProtection"</literal></expr>, <expr><literal type="string">"E-mail Protection"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_TIME_STAMPING</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-kp-timeStamping"</literal></expr>,    <expr><literal type="string">"Time Stamping"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_OCSP_SIGNING</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"id-kp-OCSPSigning"</literal></expr>,     <expr><literal type="string">"OCSP Signing"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>mbedtls_oid_descriptor_t</argument>, <argument>ext_key_usage</argument>, <argument>oid_ext_key_usage</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_extended_key_usage</argument>, <argument>mbedtls_oid_descriptor_t</argument>, <argument>ext_key_usage</argument>, <argument>const char *</argument>, <argument>description</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * For SignatureAlgorithmIdentifier
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type>           <name>md_alg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type>           <name>pk_alg</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_sig_alg_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_sig_alg_t</name></type> <name><name>oid_sig_alg</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_MD2</name></expr></argument> )</argument_list></call></expr>,        <expr><literal type="string">"md2WithRSAEncryption"</literal></expr>,     <expr><literal type="string">"RSA with MD2"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_MD2</name></expr>,      <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_MD4</name></expr></argument> )</argument_list></call></expr>,        <expr><literal type="string">"md4WithRSAEncryption"</literal></expr>,     <expr><literal type="string">"RSA with MD4"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_MD4</name></expr>,      <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD4_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_MD5</name></expr></argument> )</argument_list></call></expr>,        <expr><literal type="string">"md5WithRSAEncryption"</literal></expr>,     <expr><literal type="string">"RSA with MD5"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_MD5</name></expr>,      <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_SHA1</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"sha-1WithRSAEncryption"</literal></expr>,   <expr><literal type="string">"RSA with SHA1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA1</name></expr>,     <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_SHA224</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"sha224WithRSAEncryption"</literal></expr>,  <expr><literal type="string">"RSA with SHA-224"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA224</name></expr>,   <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_SHA256</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"sha256WithRSAEncryption"</literal></expr>,  <expr><literal type="string">"RSA with SHA-256"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA256</name></expr>,   <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_SHA384</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"sha384WithRSAEncryption"</literal></expr>,  <expr><literal type="string">"RSA with SHA-384"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA384</name></expr>,   <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_SHA512</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"sha512WithRSAEncryption"</literal></expr>,  <expr><literal type="string">"RSA with SHA-512"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA512</name></expr>,   <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_RSA_SHA_OBS</name></expr></argument> )</argument_list></call></expr>,      <expr><literal type="string">"sha-1WithRSAEncryption"</literal></expr>,   <expr><literal type="string">"RSA with SHA1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA1</name></expr>,     <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_ECDSA_SHA1</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"ecdsa-with-SHA1"</literal></expr>,      <expr><literal type="string">"ECDSA with SHA1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA1</name></expr>,     <expr><name>MBEDTLS_PK_ECDSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_ECDSA_SHA224</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"ecdsa-with-SHA224"</literal></expr>,    <expr><literal type="string">"ECDSA with SHA224"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA224</name></expr>,   <expr><name>MBEDTLS_PK_ECDSA</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_ECDSA_SHA256</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"ecdsa-with-SHA256"</literal></expr>,    <expr><literal type="string">"ECDSA with SHA256"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA256</name></expr>,   <expr><name>MBEDTLS_PK_ECDSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_ECDSA_SHA384</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"ecdsa-with-SHA384"</literal></expr>,    <expr><literal type="string">"ECDSA with SHA384"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA384</name></expr>,   <expr><name>MBEDTLS_PK_ECDSA</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_ECDSA_SHA512</name></expr></argument> )</argument_list></call></expr>,     <expr><literal type="string">"ecdsa-with-SHA512"</literal></expr>,    <expr><literal type="string">"ECDSA with SHA512"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA512</name></expr>,   <expr><name>MBEDTLS_PK_ECDSA</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_RSASSA_PSS</name></expr></argument> )</argument_list></call></expr>,        <expr><literal type="string">"RSASSA-PSS"</literal></expr>,           <expr><literal type="string">"RSASSA-PSS"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_NONE</name></expr>,     <expr><name>MBEDTLS_PK_RSASSA_PSS</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_NONE</name></expr>, <expr><name>MBEDTLS_PK_NONE</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_sig_alg_t</argument>, <argument>sig_alg</argument>, <argument>oid_sig_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_DESCRIPTOR_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_sig_alg_desc</argument>, <argument>oid_sig_alg_t</argument>, <argument>sig_alg</argument>, <argument>const char *</argument>, <argument>description</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR2</name><argument_list>(<argument>mbedtls_oid_get_sig_alg</argument>, <argument>oid_sig_alg_t</argument>, <argument>sig_alg</argument>, <argument>mbedtls_md_type_t</argument>, <argument>md_alg</argument>, <argument>mbedtls_pk_type_t</argument>, <argument>pk_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_OID_BY_ATTR2</name><argument_list>(<argument>mbedtls_oid_get_oid_by_sig_alg</argument>, <argument>oid_sig_alg_t</argument>, <argument>oid_sig_alg</argument>, <argument>mbedtls_pk_type_t</argument>, <argument>pk_alg</argument>, <argument>mbedtls_md_type_t</argument>, <argument>md_alg</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD_C */</comment>

<comment type="block">/*
 * For PublicKeyInfo (PKCS1, RFC 5480)
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type>           <name>pk_alg</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_pk_alg_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_pk_alg_t</name></type> <name><name>oid_pk_alg</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS1_RSA</name></expr></argument> )</argument_list></call></expr>,      <expr><literal type="string">"rsaEncryption"</literal></expr>,   <expr><literal type="string">"RSA"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_PK_RSA</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_ALG_UNRESTRICTED</name></expr></argument> )</argument_list></call></expr>,  <expr><literal type="string">"id-ecPublicKey"</literal></expr>,   <expr><literal type="string">"Generic EC key"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_PK_ECKEY</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_ALG_ECDH</name></expr></argument> )</argument_list></call></expr>,          <expr><literal type="string">"id-ecDH"</literal></expr>,          <expr><literal type="string">"EC key for ECDH"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_PK_ECKEY_DH</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>MBEDTLS_PK_NONE</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_pk_alg_t</argument>, <argument>pk_alg</argument>, <argument>oid_pk_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_pk_alg</argument>, <argument>oid_pk_alg_t</argument>, <argument>pk_alg</argument>, <argument>mbedtls_pk_type_t</argument>, <argument>pk_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_OID_BY_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_oid_by_pk_alg</argument>, <argument>oid_pk_alg_t</argument>, <argument>oid_pk_alg</argument>, <argument>mbedtls_pk_type_t</argument>, <argument>pk_alg</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * For namedCurve (RFC 5480)
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_group_id</name></type>        <name>grp_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_ecp_grp_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_ecp_grp_t</name></type> <name><name>oid_ecp_grp</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP192R1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp192r1"</literal></expr>,    <expr><literal type="string">"secp192r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP192R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP224R1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp224r1"</literal></expr>,    <expr><literal type="string">"secp224r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP224R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP256R1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp256r1"</literal></expr>,    <expr><literal type="string">"secp256r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP384R1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp384r1"</literal></expr>,    <expr><literal type="string">"secp384r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP384R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP384R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP521R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP521R1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp521r1"</literal></expr>,    <expr><literal type="string">"secp521r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP521R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP521R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP192K1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp192k1"</literal></expr>,    <expr><literal type="string">"secp192k1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP192K1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192K1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP224K1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp224k1"</literal></expr>,    <expr><literal type="string">"secp224k1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP224K1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224K1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_SECP256K1</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"secp256k1"</literal></expr>,    <expr><literal type="string">"secp256k1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_SECP256K1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256K1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_BP256R1</name></expr></argument> )</argument_list></call></expr>,   <expr><literal type="string">"brainpoolP256r1"</literal></expr>,<expr><literal type="string">"brainpool256r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_BP256R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP256R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_BP384R1</name></expr></argument> )</argument_list></call></expr>,   <expr><literal type="string">"brainpoolP384r1"</literal></expr>,<expr><literal type="string">"brainpool384r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_BP384R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP384R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP512R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_EC_GRP_BP512R1</name></expr></argument> )</argument_list></call></expr>,   <expr><literal type="string">"brainpoolP512r1"</literal></expr>,<expr><literal type="string">"brainpool512r1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_BP512R1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP512R1_ENABLED */</comment>
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>MBEDTLS_ECP_DP_NONE</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_ecp_grp_t</argument>, <argument>grp_id</argument>, <argument>oid_ecp_grp</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_ec_grp</argument>, <argument>oid_ecp_grp_t</argument>, <argument>grp_id</argument>, <argument>mbedtls_ecp_group_id</argument>, <argument>grp_id</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_OID_BY_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_oid_by_ec_grp</argument>, <argument>oid_ecp_grp_t</argument>, <argument>oid_ecp_grp</argument>, <argument>mbedtls_ecp_group_id</argument>, <argument>grp_id</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * For PKCS#5 PBES2 encryption algorithm
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_type_t</name></type>       <name>cipher_alg</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_cipher_alg_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_cipher_alg_t</name></type> <name><name>oid_cipher_alg</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DES_CBC</name></expr></argument> )</argument_list></call></expr>,              <expr><literal type="string">"desCBC"</literal></expr>,       <expr><literal type="string">"DES-CBC"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_CIPHER_DES_CBC</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DES_EDE3_CBC</name></expr></argument> )</argument_list></call></expr>,         <expr><literal type="string">"des-ede3-cbc"</literal></expr>, <expr><literal type="string">"DES-EDE3-CBC"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>MBEDTLS_CIPHER_NONE</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_cipher_alg_t</argument>, <argument>cipher_alg</argument>, <argument>oid_cipher_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_cipher_alg</argument>, <argument>oid_cipher_alg_t</argument>, <argument>cipher_alg</argument>, <argument>mbedtls_cipher_type_t</argument>, <argument>cipher_alg</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * For digestAlgorithm
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type>           <name>md_alg</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_md_alg_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_md_alg_t</name></type> <name><name>oid_md_alg</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_MD2</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"id-md2"</literal></expr>,       <expr><literal type="string">"MD2"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_MD2</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_MD4</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"id-md4"</literal></expr>,       <expr><literal type="string">"MD4"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_MD4</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD4_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_MD5</name></expr></argument> )</argument_list></call></expr>,       <expr><literal type="string">"id-md5"</literal></expr>,       <expr><literal type="string">"MD5"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_MD5</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_SHA1</name></expr></argument> )</argument_list></call></expr>,      <expr><literal type="string">"id-sha1"</literal></expr>,      <expr><literal type="string">"SHA-1"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA1</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_SHA224</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-sha224"</literal></expr>,    <expr><literal type="string">"SHA-224"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA224</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_SHA256</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-sha256"</literal></expr>,    <expr><literal type="string">"SHA-256"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA256</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_SHA384</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-sha384"</literal></expr>,    <expr><literal type="string">"SHA-384"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA384</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_DIGEST_ALG_SHA512</name></expr></argument> )</argument_list></call></expr>,    <expr><literal type="string">"id-sha512"</literal></expr>,    <expr><literal type="string">"SHA-512"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA512</name></expr>,
    }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_NONE</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_md_alg_t</argument>, <argument>md_alg</argument>, <argument>oid_md_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_md_alg</argument>, <argument>oid_md_alg_t</argument>, <argument>md_alg</argument>, <argument>mbedtls_md_type_t</argument>, <argument>md_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_OID_BY_ATTR1</name><argument_list>(<argument>mbedtls_oid_get_oid_by_md</argument>, <argument>oid_md_alg_t</argument>, <argument>oid_md_alg</argument>, <argument>mbedtls_md_type_t</argument>, <argument>md_alg</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS12_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * For PKCS#12 PBEs
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>mbedtls_oid_descriptor_t</name></type>    <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type>           <name>md_alg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_type_t</name></type>       <name>cipher_alg</name></decl>;</decl_stmt>
}</block></struct></type> <name>oid_pkcs12_pbe_alg_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_pkcs12_pbe_alg_t</name></type> <name><name>oid_pkcs12_pbe_alg</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"pbeWithSHAAnd3-KeyTripleDES-CBC"</literal></expr>, <expr><literal type="string">"PBE with SHA1 and 3-Key 3DES"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA1</name></expr>,      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><call><name>ADD_LEN</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC</name></expr></argument> )</argument_list></call></expr>, <expr><literal type="string">"pbeWithSHAAnd2-KeyTripleDES-CBC"</literal></expr>, <expr><literal type="string">"PBE with SHA1 and 2-Key 3DES"</literal></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_SHA1</name></expr>,      <expr><name>MBEDTLS_CIPHER_DES_EDE_CBC</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
        <expr><name>MBEDTLS_MD_NONE</name></expr>, <expr><name>MBEDTLS_CIPHER_NONE</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<macro><name>FN_OID_TYPED_FROM_ASN1</name><argument_list>(<argument>oid_pkcs12_pbe_alg_t</argument>, <argument>pkcs12_pbe_alg</argument>, <argument>oid_pkcs12_pbe_alg</argument>)</argument_list></macro>
<macro><name>FN_OID_GET_ATTR2</name><argument_list>(<argument>mbedtls_oid_get_pkcs12_pbe_alg</argument>, <argument>oid_pkcs12_pbe_alg_t</argument>, <argument>pkcs12_pbe_alg</argument>, <argument>mbedtls_md_type_t</argument>, <argument>md_alg</argument>, <argument>mbedtls_cipher_type_t</argument>, <argument>cipher_alg</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS12_C */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OID_SAFE_SNPRINTF</name></cpp:macro>                               \
    <cpp:value>do {                                                \
        if( ret &lt; 0 || (size_t) ret &gt;= n )              \
            return( MBEDTLS_ERR_OID_BUF_TOO_SMALL );    \
                                                        \
        n -= (size_t) ret;                              \
        p += (size_t) ret;                              \
    } while( 0 )</cpp:value></cpp:define>

<comment type="block">/* Return the x.y.z.... style numeric string for the given OID */</comment>
<function><type><name>int</name></type> <name>mbedtls_oid_get_numeric_string</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>oid</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <comment type="block">/* First byte contains first two dots */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>oid</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name><name>oid</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>OID_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <comment type="block">/* Prevent overflow in value. */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name>value</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>!=</operator> <name>value</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_OID_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>value</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>+=</operator> <name><name>oid</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>oid</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* Last byte */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>OID_SAFE_SNPRINTF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_OID_C */</comment>
</unit>
