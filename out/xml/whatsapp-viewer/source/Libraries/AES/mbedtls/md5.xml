<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/md5.c"><comment type="block">/*
 *  RFC 1321 compliant MD5 implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The MD5 algorithm was designed by Ron Rivest in 1991.
 *
 *  http://www.ietf.org/rfc/rfc1321.txt
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * 32-bit integer manipulation macros (little endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_LE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_LE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ]       )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 3] &lt;&lt; 24 );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_LE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_LE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                                    \
<cpp:value>{                                                               \
    (b)[(i)    ] = (unsigned char) ( ( (n)       ) &amp; 0xFF );    \
    (b)[(i) + 1] = (unsigned char) ( ( (n) &gt;&gt;  8 ) &amp; 0xFF );    \
    (b)[(i) + 2] = (unsigned char) ( ( (n) &gt;&gt; 16 ) &amp; 0xFF );    \
    (b)[(i) + 3] = (unsigned char) ( ( (n) &gt;&gt; 24 ) &amp; 0xFF );    \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>mbedtls_md5_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md5_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_md5_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md5_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_md5_clone</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MD5 context setup
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md5_starts</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_md5_process</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>X</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &lt;&lt; n) | ((x &amp; 0xFFFFFFFF) &gt;&gt; (32 - n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>                                \
<cpp:value>{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}</cpp:value></cpp:define>

    <expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0xD76AA478</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0xE8C7B756</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0x242070DB</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">0xC1BDCEEE</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0xF57C0FAF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0x4787C62A</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0xA8304613</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">0xFD469501</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0x698098D8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0x8B44F7AF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0xFFFF5BB1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">0x895CD7BE</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0x6B901122</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0xFD987193</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">0xA679438E</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">0x49B40821</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y ^ (z &amp; (x ^ y)))</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0xF61E2562</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0xC040B340</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0x265E5A51</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0xE9B6C7AA</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0xD62F105D</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0x02441453</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0xD8A1E681</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0xE7D3FBC8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x21E1CDE6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0xC33707D6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0xF4D50D87</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0x455A14ED</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0xA9E3E905</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0xFCEFA3F8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">0x676F02D9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0x8D2A4C8A</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x ^ y ^ z)</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0xFFFA3942</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0x8771F681</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x6D9D6122</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0xFDE5380C</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0xA4BEEA44</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0x4BDECFA9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0xF6BB4B60</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0xBEBFBC70</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x289B7EC6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0xEAA127FA</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0xD4EF3085</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0x04881D05</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0xD9D4D039</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0xE6DB99E5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x1FA27CF8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0xC4AC5665</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y ^ (x | ~z))</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0xF4292244</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0x432AFF97</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0xAB9423A7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0xFC93A039</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x655B59C3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0x8F0CCC92</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0xFFEFF47D</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0x85845DD1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x6FA87E4F</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0xFE2CE6E0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0xA3014314</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0x4E0811A1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0xF7537E82</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0xBD3AF235</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0x2AD7D2BB</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0xEB86D391</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>F</name></cpp:undef>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>A</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>B</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>C</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>D</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_MD5_PROCESS_ALT */</comment>

<comment type="block">/*
 * MD5 process buffer
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md5_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>fill</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ilen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ilen</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>left</name> <operator>&amp;&amp;</operator> <name>ilen</name> <operator>&gt;=</operator> <name>fill</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>fill</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md5_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>ilen</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_md5_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>md5_padding</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
 <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * MD5 final digest
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md5_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_md5_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>padn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>msglen</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">29</literal> <operator>)</operator>
         <operator>|</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>low</name>  <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>low</name></expr></argument>,  <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>high</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>padn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>last</name> <operator>&lt;</operator> <literal type="number">56</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator> <literal type="number">56</literal> <operator>-</operator> <name>last</name> <operator>)</operator></expr> </then><else>: <expr><operator>(</operator> <literal type="number">120</literal> <operator>-</operator> <name>last</name> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md5_padding</name></expr></argument>, <argument><expr><name>padn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_MD5_ALT */</comment>

<comment type="block">/*
 * output = MD5( input buffer )
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md5</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * RFC 1321 test vectors
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>md5_test_buf</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">81</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="string">""</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"a"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"message digest"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"12345678901234567890123456789012345678901234567890123456789012"</literal> \
      <literal type="string">"345678901234567890"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>md5_test_buflen</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">80</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>md5_test_sum</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
      <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x7E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xA8</literal></expr>,
      <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x61</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xB0</literal></expr>,
      <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x72</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x8D</literal></expr>,
      <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xD0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x3B</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,
      <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
      <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x7A</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_md5_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MD5 test #%d: "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_md5</name><argument_list>( <argument><expr><name><name>md5_test_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>md5_test_buflen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name><name>md5_test_sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C */</comment>
</unit>
