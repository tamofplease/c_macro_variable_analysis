<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/gcm.c"><comment type="block">/*
 *  NIST SP800-38D compliant GCM implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 * http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf
 *
 * See also:
 * [MGV] http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf
 *
 * We use the algorithm described as Shoup's method with 4-bit tables in
 * [MGV] 4.1, pp. 12-13, to enhance speed without using too much memory.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gcm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aesni.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST &amp;&amp; MBEDTLS_AES_C */</comment>

<comment type="block">/*
 * 32-bit integer manipulation macros (big endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ] &lt;&lt; 24 )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 3]       );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_gcm_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_gcm_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Precompute small multiples of H, that is set
 *      HH[i] || HL[i] = H times i,
 * where i is seen as a field element as in [MGV], ie high-order bits
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gcm_gen_table</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>vl</name></decl>, <decl><type ref="prev"/><name>vh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>h</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* pack h as two 64-bits ints, big-endian */</comment>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vh</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name>lo</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>lo</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vl</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name>lo</name></expr>;</expr_stmt>

    <comment type="block">/* 8 = 1000 corresponds to 1 in GF(2^128) */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>vl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>vh</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* With CLMUL support, we need only h, not the rest of the table */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_aesni_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_AESNI_CLMUL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* 0 corresponds to 0 in GF(2^128) */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr> )</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>T</name> <init>= <expr><operator>(</operator> <name>vl</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <literal type="number">0xe1000000U</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>vl</name>  <operator>=</operator> <operator>(</operator> <name>vh</name> <operator>&lt;&lt;</operator> <literal type="number">63</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>vl</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>vh</name>  <operator>=</operator> <operator>(</operator> <name>vh</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>^</operator> <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>T</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>vl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>vh</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr> )</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>HiL</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>HL</name></name> <operator>+</operator> <name>i</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>HiH</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>HH</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>vh</name> <operator>=</operator> <operator>*</operator><name>HiH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vl</name> <operator>=</operator> <operator>*</operator><name>HiL</name></expr>;</expr_stmt>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>HiH</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>vh</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>HiL</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>vl</name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_gcm_setkey</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                        <parameter><decl><type><name>mbedtls_cipher_id_t</name></type> <name>cipher</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_values</name><argument_list>( <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>, <argument><expr><name>MBEDTLS_MODE_ECB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>,
                               <argument><expr><name>MBEDTLS_ENCRYPT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>gcm_gen_table</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Shoup's method for multiplication use this table with
 *      last4[x] = x times P^128
 * where x and last4[x] are seen as elements of GF(2^128) as in [MGV]
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>last4</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x1c20</literal></expr>, <expr><literal type="number">0x3840</literal></expr>, <expr><literal type="number">0x2460</literal></expr>,
    <expr><literal type="number">0x7080</literal></expr>, <expr><literal type="number">0x6ca0</literal></expr>, <expr><literal type="number">0x48c0</literal></expr>, <expr><literal type="number">0x54e0</literal></expr>,
    <expr><literal type="number">0xe100</literal></expr>, <expr><literal type="number">0xfd20</literal></expr>, <expr><literal type="number">0xd940</literal></expr>, <expr><literal type="number">0xc560</literal></expr>,
    <expr><literal type="number">0x9180</literal></expr>, <expr><literal type="number">0x8da0</literal></expr>, <expr><literal type="number">0xa9c0</literal></expr>, <expr><literal type="number">0xb5e0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gcm_mult</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                      <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>zh</name></decl>, <decl><type ref="prev"/><name>zl</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_aesni_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_AESNI_CLMUL</name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>h</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,       <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>,       <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_aesni_gcm_mult</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AESNI_C &amp;&amp; MBEDTLS_HAVE_X86_64 */</comment>

    <expr_stmt><expr><name>lo</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>zh</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><name>lo</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zl</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><name>lo</name></expr>]</index></name></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>lo</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <literal type="number">15</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>zl</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>zl</name> <operator>=</operator> <operator>(</operator> <name>zh</name> <operator>&lt;&lt;</operator> <literal type="number">60</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>zl</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>zh</name> <operator>=</operator> <operator>(</operator> <name>zh</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>zh</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>last4</name><index>[<expr><name>rem</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>zh</name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><name>lo</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>zl</name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><name>lo</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>rem</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>zl</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>=</operator> <operator>(</operator> <name>zh</name> <operator>&lt;&lt;</operator> <literal type="number">60</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>zl</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>zh</name> <operator>=</operator> <operator>(</operator> <name>zh</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>zh</name> <operator>^=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>last4</name><index>[<expr><name>rem</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zh</name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HH</name><index>[<expr><name>hi</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>zl</name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>HL</name><index>[<expr><name>hi</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>zh</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>zh</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>zl</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>zl</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_gcm_starts</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
                <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>add</name></decl></parameter>,
                <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>work_buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>, <decl><type ref="prev"/><name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* IV and AD are limited to 2^64 bits, so 2^61 bytes */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>iv_len</name>  <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">61</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>add_len</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">61</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_BAD_INPUT</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iv_len</name> <operator>==</operator> <literal type="number">12</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>iv_len</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>iv_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>iv_len</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>iv_len</name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>use_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>gcm_mult</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>iv_len</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>work_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>gcm_mult</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>base_ectr</name></name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_len</name></name> <operator>=</operator> <name>add_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>add_len</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>add_len</name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>use_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>gcm_mult</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>add_len</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_gcm_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ectr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out_p</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>, <decl><type ref="prev"/><name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>output</name> <operator>&gt;</operator> <name>input</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator> <name>output</name> <operator>-</operator> <name>input</name> <operator>)</operator> <operator>&lt;</operator> <name>length</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name><name>length</name> <argument_list type="generic">&lt; <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator>
        <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>length</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xFFFFFFFE0ull</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_BAD_INPUT</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>length</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>length</name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ectr</name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>use_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_GCM_DECRYPT</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>out_p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ectr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_GCM_ENCRYPT</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>out_p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>gcm_mult</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>length</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>out_p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_gcm_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
                <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>work_buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>orig_len</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>orig_add_len</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>add_len</name></name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>tag_len</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator> <name>tag_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_BAD_INPUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>base_ectr</name></name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>orig_len</name> <operator>||</operator> <name>orig_add_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><operator>(</operator> <name>orig_add_len</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>)</operator></expr></argument>, <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><operator>(</operator> <name>orig_add_len</name>       <operator>)</operator></expr></argument>, <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><operator>(</operator> <name>orig_len</name>     <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>)</operator></expr></argument>, <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><operator>(</operator> <name>orig_len</name>           <operator>)</operator></expr></argument>, <argument><expr><name>work_buf</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>work_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>gcm_mult</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tag_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_gcm_crypt_and_tag</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>add</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_starts</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_finish</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_gcm_auth_decrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>add</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>check_tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_crypt_and_tag</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_GCM_DECRYPT</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                   <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument>,
                                   <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>, <argument><expr><name>check_tag</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check tag in "constant-time" */</comment>
    <for>for<control>( <init><expr><name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tag_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>check_tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_GCM_AUTH_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_gcm_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_gcm_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_gcm_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES-GCM test vectors from:
 *
 * http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TESTS</name></cpp:macro>   <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>key_index</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x1c</literal></expr>,
      <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
      <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x1c</literal></expr>,
      <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x08</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>iv_len</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>iv_index</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xad</literal></expr>,
      <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
      <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xaa</literal></expr>,
      <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xa1</literal></expr>,
      <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
      <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
      <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
      <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
      <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x9b</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>add_len</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>add_index</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>additional</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
      <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
      <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xd2</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>pt_len</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pt_index</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pt</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
      <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,
      <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xda</literal></expr>,
      <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
      <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
      <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
      <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
      <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x55</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[<expr><name>MAX_TESTS</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
      <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x78</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x24</literal></expr>,
      <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x9c</literal></expr>,
      <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,
      <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
      <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x1c</literal></expr>,
      <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
      <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
      <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x24</literal></expr>,
      <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x9c</literal></expr>,
      <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,
      <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
      <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x1c</literal></expr>,
      <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
      <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
      <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x91</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x4a</literal></expr>,
      <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
      <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
      <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
      <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb2</literal></expr>,
      <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x42</literal></expr>,
      <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x98</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xb6</literal></expr>,
      <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
      <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xa8</literal></expr>,
      <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,
      <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x90</literal></expr>,
      <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,
      <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
      <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xe5</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
      <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
      <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
      <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
      <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x9c</literal></expr>,
      <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
      <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x47</literal></expr>,
      <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xd9</literal></expr>,
      <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x56</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
      <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
      <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
      <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x9c</literal></expr>,
      <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
      <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x47</literal></expr>,
      <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xd9</literal></expr>,
      <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
      <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,
      <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x4f</literal></expr>,
      <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
      <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x75</literal></expr>,
      <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xc9</literal></expr>,
      <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
      <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xf7</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x3c</literal></expr>,
      <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
      <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
      <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x45</literal></expr>,
      <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xd9</literal></expr>,
      <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xb3</literal></expr>,
      <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xe7</literal></expr>,
      <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x3b</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6e</literal></expr>,
      <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x18</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x7d</literal></expr>,
      <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc9</literal></expr>,
      <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xaa</literal></expr>,
      <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,
      <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
      <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
      <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xad</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x7d</literal></expr>,
      <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc9</literal></expr>,
      <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xaa</literal></expr>,
      <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,
      <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
      <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
      <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x62</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x32</literal></expr>,
      <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xcb</literal></expr>,
      <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xfa</literal></expr>,
      <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,
      <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
      <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
      <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x99</literal></expr>,
      <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xf1</literal></expr>,
      <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
      <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x19</literal></expr>,
      <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xf4</literal></expr>,
      <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>,
      <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
      <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
      <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x3f</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tag</name><index>[<expr><name>MAX_TESTS</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
      <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xbd</literal></expr>,
      <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xdf</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xa6</literal></expr>,
      <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xb4</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xdb</literal></expr>,
      <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x47</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
      <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xcb</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xfa</literal></expr>,
      <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x50</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x4b</literal></expr>,
      <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x35</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xab</literal></expr>,
      <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xfb</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xbf</literal></expr>,
      <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x14</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,
      <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x8c</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x24</literal></expr>,
      <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xf8</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xbb</literal></expr>,
      <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd9</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xb9</literal></expr>,
      <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x8b</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
      <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x19</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xbd</literal></expr>,
      <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x6c</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x68</literal></expr>,
      <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1b</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xc4</literal></expr>,
      <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xf2</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xb0</literal></expr>,
      <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x9a</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mbedtls_gcm_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_gcm_context</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tag_buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_id_t</name></type> <name>cipher</name> <init>= <expr><name>MBEDTLS_CIPHER_ID_AES</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_gcm_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>key_len</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <name>j</name></expr></init></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-GCM-%3d #%d (%s): "</literal></expr></argument>,
                                 <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"enc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><name><name>key_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_crypt_and_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_GCM_ENCRYPT</name></expr></argument>,
                                     <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>iv</name><index>[<expr><name><name>iv_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iv_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>additional</name><index>[<expr><name><name>add_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>add_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>pt</name><index>[<expr><name><name>pt_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tag_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ct</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>tag_buf</name></expr></argument>, <argument><expr><name><name>tag</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-GCM-%3d #%d (%s): "</literal></expr></argument>,
                                 <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"dec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><name><name>key_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_crypt_and_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_GCM_DECRYPT</name></expr></argument>,
                                     <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>iv</name><index>[<expr><name><name>iv_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iv_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>additional</name><index>[<expr><name><name>add_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>add_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>ct</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tag_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pt</name><index>[<expr><name><name>pt_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>tag_buf</name></expr></argument>, <argument><expr><name><name>tag</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-GCM-%3d #%d split (%s): "</literal></expr></argument>,
                                 <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"enc"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><name><name>key_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_GCM_ENCRYPT</name></expr></argument>,
                              <argument><expr><name><name>iv</name><index>[<expr><name><name>iv_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iv_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                              <argument><expr><name><name>additional</name><index>[<expr><name><name>add_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>add_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal></expr> )</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>rest_len</name> <init>= <expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>pt</name><index>[<expr><name><name>pt_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rest_len</name></expr></argument>, <argument><expr><name><name>pt</name><index>[<expr><name><name>pt_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>,
                                  <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pt</name><index>[<expr><name><name>pt_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>tag_buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ct</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>tag_buf</name></expr></argument>, <argument><expr><name><name>tag</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-GCM-%3d #%d split (%s): "</literal></expr></argument>,
                                 <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"dec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><name><name>key_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_GCM_DECRYPT</name></expr></argument>,
                              <argument><expr><name><name>iv</name><index>[<expr><name><name>iv_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>iv_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                              <argument><expr><name><name>additional</name><index>[<expr><name><name>add_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>add_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal></expr> )</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>rest_len</name> <init>= <expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>ct</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>rest_len</name></expr></argument>, <argument><expr><name><name>ct</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>,
                                  <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ct</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>tag_buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pt</name><index>[<expr><name><name>pt_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pt_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
                <call><name>memcmp</name><argument_list>( <argument><expr><name>tag_buf</name></expr></argument>, <argument><expr><name><name>tag</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_gcm_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST &amp;&amp; MBEDTLS_AES_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
</unit>
