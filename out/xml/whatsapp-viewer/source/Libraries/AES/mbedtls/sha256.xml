<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/sha256.c"><comment type="block">/*
 *  FIPS-180-2 compliant SHA-256 implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The SHA-256 Secure Hash Standard was published by NIST in 2002.
 *
 *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha256.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * 32-bit integer manipulation macros (big endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>do {                                                    \
    (n) = ( (uint32_t) (b)[(i)    ] &lt;&lt; 24 )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 3]       );            \
} while( 0 )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>do {                                                    \
    (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>mbedtls_sha256_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_sha256_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_sha256_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_sha256_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_sha256_clone</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SHA-256 context setup
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_sha256_starts</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is224</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>is224</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* SHA-256 */</comment>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6A09E667</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBB67AE85</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3C6EF372</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xA54FF53A</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x510E527F</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x9B05688C</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x1F83D9AB</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5BE0CD19</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* SHA-224 */</comment>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC1059ED8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x367CD507</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3070DD17</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF70E5939</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFC00B31</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x68581511</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x64F98FA7</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xBEFA4FA4</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is224</name></name> <operator>=</operator> <name>is224</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>K</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x428A2F98</literal></expr>, <expr><literal type="number">0x71374491</literal></expr>, <expr><literal type="number">0xB5C0FBCF</literal></expr>, <expr><literal type="number">0xE9B5DBA5</literal></expr>,
    <expr><literal type="number">0x3956C25B</literal></expr>, <expr><literal type="number">0x59F111F1</literal></expr>, <expr><literal type="number">0x923F82A4</literal></expr>, <expr><literal type="number">0xAB1C5ED5</literal></expr>,
    <expr><literal type="number">0xD807AA98</literal></expr>, <expr><literal type="number">0x12835B01</literal></expr>, <expr><literal type="number">0x243185BE</literal></expr>, <expr><literal type="number">0x550C7DC3</literal></expr>,
    <expr><literal type="number">0x72BE5D74</literal></expr>, <expr><literal type="number">0x80DEB1FE</literal></expr>, <expr><literal type="number">0x9BDC06A7</literal></expr>, <expr><literal type="number">0xC19BF174</literal></expr>,
    <expr><literal type="number">0xE49B69C1</literal></expr>, <expr><literal type="number">0xEFBE4786</literal></expr>, <expr><literal type="number">0x0FC19DC6</literal></expr>, <expr><literal type="number">0x240CA1CC</literal></expr>,
    <expr><literal type="number">0x2DE92C6F</literal></expr>, <expr><literal type="number">0x4A7484AA</literal></expr>, <expr><literal type="number">0x5CB0A9DC</literal></expr>, <expr><literal type="number">0x76F988DA</literal></expr>,
    <expr><literal type="number">0x983E5152</literal></expr>, <expr><literal type="number">0xA831C66D</literal></expr>, <expr><literal type="number">0xB00327C8</literal></expr>, <expr><literal type="number">0xBF597FC7</literal></expr>,
    <expr><literal type="number">0xC6E00BF3</literal></expr>, <expr><literal type="number">0xD5A79147</literal></expr>, <expr><literal type="number">0x06CA6351</literal></expr>, <expr><literal type="number">0x14292967</literal></expr>,
    <expr><literal type="number">0x27B70A85</literal></expr>, <expr><literal type="number">0x2E1B2138</literal></expr>, <expr><literal type="number">0x4D2C6DFC</literal></expr>, <expr><literal type="number">0x53380D13</literal></expr>,
    <expr><literal type="number">0x650A7354</literal></expr>, <expr><literal type="number">0x766A0ABB</literal></expr>, <expr><literal type="number">0x81C2C92E</literal></expr>, <expr><literal type="number">0x92722C85</literal></expr>,
    <expr><literal type="number">0xA2BFE8A1</literal></expr>, <expr><literal type="number">0xA81A664B</literal></expr>, <expr><literal type="number">0xC24B8B70</literal></expr>, <expr><literal type="number">0xC76C51A3</literal></expr>,
    <expr><literal type="number">0xD192E819</literal></expr>, <expr><literal type="number">0xD6990624</literal></expr>, <expr><literal type="number">0xF40E3585</literal></expr>, <expr><literal type="number">0x106AA070</literal></expr>,
    <expr><literal type="number">0x19A4C116</literal></expr>, <expr><literal type="number">0x1E376C08</literal></expr>, <expr><literal type="number">0x2748774C</literal></expr>, <expr><literal type="number">0x34B0BCB5</literal></expr>,
    <expr><literal type="number">0x391C0CB3</literal></expr>, <expr><literal type="number">0x4ED8AA4A</literal></expr>, <expr><literal type="number">0x5B9CCA4F</literal></expr>, <expr><literal type="number">0x682E6FF3</literal></expr>,
    <expr><literal type="number">0x748F82EE</literal></expr>, <expr><literal type="number">0x78A5636F</literal></expr>, <expr><literal type="number">0x84C87814</literal></expr>, <expr><literal type="number">0x8CC70208</literal></expr>,
    <expr><literal type="number">0x90BEFFFA</literal></expr>, <expr><literal type="number">0xA4506CEB</literal></expr>, <expr><literal type="number">0xBEF9A3F7</literal></expr>, <expr><literal type="number">0xC67178F2</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>SHR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; 0xFFFFFFFF) &gt;&gt; n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SHR(x,n) | (x &lt;&lt; (32 - n)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; y) | (z &amp; (x | y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>                                    \
<cpp:value>(                                               \
    W[t] = S1(W[t -  2]) + W[t -  7] +          \
           S0(W[t - 15]) + W[t - 16]            \
)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>K</name></type></parameter>)</parameter_list></cpp:macro>                  \
<cpp:value>{                                               \
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mbedtls_sha256_process</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>A</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_SMALLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>R</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>temp1</name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>temp1</name></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_SHA256_SMALLER */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>P</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>K</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_SMALLER */</comment>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_SHA256_PROCESS_ALT */</comment>

<comment type="block">/*
 * SHA-256 process buffer
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_sha256_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                    <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>fill</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>left</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ilen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>ilen</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>left</name> <operator>&amp;&amp;</operator> <name>ilen</name> <operator>&gt;=</operator> <name>fill</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>fill</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_sha256_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>ilen</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_sha256_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>left</name><operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha256_padding</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
 <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * SHA-256 final digest
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_sha256_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_sha256_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>padn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>msglen</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">29</literal> <operator>)</operator>
         <operator>|</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>low</name>  <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>high</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>low</name></expr></argument>,  <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>total</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>padn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>last</name> <operator>&lt;</operator> <literal type="number">56</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator> <literal type="number">56</literal> <operator>-</operator> <name>last</name> <operator>)</operator></expr> </then><else>: <expr><operator>(</operator> <literal type="number">120</literal> <operator>-</operator> <name>last</name> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sha256_padding</name></expr></argument>, <argument><expr><name>padn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>is224</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_SHA256_ALT */</comment>

<comment type="block">/*
 * output = SHA-256( input buffer )
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_sha256</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
             <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is224</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_sha256_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>is224</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * FIPS-180-2 test vectors
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha256_test_buf</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">57</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">""</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sha256_test_buflen</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">3</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">1000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha256_test_sum</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
    <comment type="block">/*
     * SHA-224 test vectors
     */</comment>
    <expr><block>{ <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
      <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xB3</literal></expr>,
      <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xF7</literal></expr>,
      <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xCC</literal></expr>,
      <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x50</literal></expr>,
      <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x19</literal></expr>,
      <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x25</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xD8</literal></expr>,
      <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x4B</literal></expr>,
      <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xEE</literal></expr>,
      <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x67</literal></expr> }</block></expr>,

    <comment type="block">/*
     * SHA-256 test vectors
     */</comment>
    <expr><block>{ <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xEA</literal></expr>,
      <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
      <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x9C</literal></expr>,
      <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xB8</literal></expr>,
      <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
      <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
      <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xC1</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
      <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
      <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
      <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xD0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_sha256_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>buflen</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha256sum</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha256_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>buf</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"Buffer allocation failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  SHA-%d test #%d: "</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>-</operator> <name>k</name> <operator>*</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>j</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>buflen</name> <operator>=</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>sha256_test_buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
                                 <argument><expr><name><name>sha256_test_buflen</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_sha256_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>sha256sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>sha256sum</name></expr></argument>, <argument><expr><name><name>sha256_test_sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <name>k</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_sha256_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
</unit>
