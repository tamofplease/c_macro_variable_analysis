<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/pkcs11.c"><comment type="block" format="doxygen">/**
 * \file pkcs11.c
 *
 * \brief Wrapper for PKCS#11 library libpkcs11-helper
 *
 * \author Adriaan de Jong &lt;dejong@fox-it.com&gt;
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkcs11.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS11_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509_crt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>mbedtls_pkcs11_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_pkcs11_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_pkcs11_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pkcs11_x509_cert_bind</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>, <parameter><decl><type><name>pkcs11h_certificate_t</name></type> <name>pkcs11_cert</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cert_blob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cert_blob_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>cert</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>pkcs11h_certificate_getCertificateBlob</name><argument_list>( <argument><expr><name>pkcs11_cert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                <argument><expr><operator>&amp;</operator><name>cert_blob_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>CKR_OK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cert_blob</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cert_blob_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>cert_blob</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>pkcs11h_certificate_getCertificateBlob</name><argument_list>( <argument><expr><name>pkcs11_cert</name></expr></argument>, <argument><expr><name>cert_blob</name></expr></argument>,
                                                <argument><expr><operator>&amp;</operator><name>cert_blob_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>CKR_OK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>mbedtls_x509_crt_parse</name><argument_list>( <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>cert_blob</name></expr></argument>, <argument><expr><name>cert_blob_size</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>!=</operator> <name>cert_blob</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>cert_blob</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>mbedtls_pkcs11_priv_key_bind</name><parameter_list>( <parameter><decl><type><name>mbedtls_pkcs11_context</name> <modifier>*</modifier></type><name>priv_key</name></decl></parameter>,
        <parameter><decl><type><name>pkcs11h_certificate_t</name></type> <name>pkcs11_cert</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>cert</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>priv_key</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>mbedtls_pkcs11_x509_cert_bind</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument>, <argument><expr><name>pkcs11_cert</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>priv_key</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>mbedtls_pk_get_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cert</name><operator>.</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv_key</name><operator>-&gt;</operator><name>pkcs11h_cert</name></name> <operator>=</operator> <name>pkcs11_cert</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cert</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_pkcs11_priv_key_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_pkcs11_context</name> <modifier>*</modifier></type><name>priv_key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>!=</operator> <name>priv_key</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pkcs11h_certificate_freeCertificate</name><argument_list>( <argument><expr><name><name>priv_key</name><operator>-&gt;</operator><name>pkcs11h_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pkcs11_decrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_pkcs11_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>output_max_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>input_len</name></decl>, <decl><type ref="prev"/><name>output_len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_RSA_PRIVATE</name> <operator>!=</operator> <name>mode</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>output_len</name> <operator>=</operator> <name>input_len</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>input_len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>input_len</name></expr></argument> &gt;</argument_list></name> <name>output_max_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Determine size of output buffer */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>pkcs11h_certificate_decryptAny</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pkcs11h_cert</name></name></expr></argument>, <argument><expr><name>CKM_RSA_PKCS</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
            <argument><expr><name>input_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>CKR_OK</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>output_len</name> <operator>&gt;</operator> <name>output_max_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>pkcs11h_certificate_decryptAny</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pkcs11h_cert</name></name></expr></argument>, <argument><expr><name>CKM_RSA_PKCS</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
            <argument><expr><name>input_len</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>CKR_OK</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>output_len</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pkcs11_sign</name><parameter_list>( <parameter><decl><type><name>mbedtls_pkcs11_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hashlen</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>asn_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>oid_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>sig</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_RSA_PRIVATE</name> <operator>!=</operator> <name>mode</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>md_alg</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name> <init>= <expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>md_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_oid_get_oid_by_md</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>asn_len</name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <name>oid_size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sig_len</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>hashlen</name> <operator>&gt;</operator> <name>sig_len</name> <operator>||</operator> <name>asn_len</name> <operator>&gt;</operator> <name>sig_len</name> <operator>||</operator>
        <name>hashlen</name> <operator>+</operator> <name>asn_len</name> <operator>&gt;</operator> <name>sig_len</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>md_alg</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * DigestInfo ::= SEQUENCE {
         *   digestAlgorithm DigestAlgorithmIdentifier,
         *   digest Digest }
         *
         * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
         *
         * Digest ::= OCTET STRING
         */</comment>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ASN1_SEQUENCE</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator> <literal type="number">0x08</literal> <operator>+</operator> <name>oid_size</name> <operator>+</operator> <name>hashlen</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ASN1_SEQUENCE</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator> <literal type="number">0x04</literal> <operator>+</operator> <name>oid_size</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ASN1_OID</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>oid_size</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>oid_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ASN1_NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ASN1_OCTET_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>hashlen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>pkcs11h_certificate_signAny</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pkcs11h_cert</name></name></expr></argument>, <argument><expr><name>CKM_RSA_PKCS</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>,
            <argument><expr><name>asn_len</name> <operator>+</operator> <name>hashlen</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>CKR_OK</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(MBEDTLS_PKCS11_C) */</comment>
</unit>
