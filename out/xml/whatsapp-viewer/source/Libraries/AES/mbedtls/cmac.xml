<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/cmac.c"><comment type="block">/*
 * \file cmac.c
 *
 * \brief NIST SP800-38B compliant CMAC implementation for AES and 3DES
 *
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 * References:
 *
 * - NIST SP 800-38B Recommendation for Block Cipher Modes of Operation: The
 *      CMAC Mode for Authentication
 *   http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38b.pdf
 *
 * - RFC 4493 - The AES-CMAC Algorithm
 *   https://tools.ietf.org/html/rfc4493
 *
 * - RFC 4615 - The Advanced Encryption Standard-Cipher-based Message
 *      Authentication Code-Pseudo-Random Function-128 (AES-CMAC-PRF-128)
 *      Algorithm for the Internet Key Exchange Protocol (IKE)
 *   https://tools.ietf.org/html/rfc4615
 *
 *   Additional test vectors: ISO/IEC 9797-1
 *
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CMAC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>     <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro>     <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST &amp;&amp; MBEDTLS_AES_C || MBEDTLS_DES_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Multiplication by u in the Galois field of GF(2^n)
 *
 * As explained in NIST SP 800-38B, this can be computed:
 *
 *   If MSB(p) = 0, then p = (p &lt;&lt; 1)
 *   If MSB(p) = 1, then p = (p &lt;&lt; 1) ^ R_n
 *   with R_64 = 0x1B and  R_128 = 0x87
 *
 * Input and output MUST NOT point to the same buffer
 * Block size must be 8 byes or 16 bytes - the block sizes for DES and AES.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmac_multiply_by_u</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                               <parameter><decl><type><name>size_t</name></type> <name>blocksize</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>R_128</name> <init>= <expr><literal type="number">0x87</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>R_64</name> <init>= <expr><literal type="number">0x1B</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>R_n</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>overflow</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>blocksize</name> <operator>==</operator> <name>MBEDTLS_AES_BLOCK_SIZE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>R_n</name> <operator>=</operator> <name>R_128</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>blocksize</name> <operator>==</operator> <name>MBEDTLS_DES3_BLOCK_SIZE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>R_n</name> <operator>=</operator> <name>R_64</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>blocksize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name>overflow</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>overflow</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* mask = ( input[0] &gt;&gt; 7 ) ? 0xff : 0x00
     * using bit operations to avoid branches */</comment>

    <comment type="block">/* MSVC has a warning about unary minus on unsigned, but this is
     * well-defined and precisely what we want to do here */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>push</name> <name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>disable</name> <name>:</name> <name>4146</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>-</operator> <operator>(</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name> <name>pop</name> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>output</name><index>[ <expr><name>blocksize</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>^=</operator> <name>R_n</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate subkeys
 *
 * - as specified by RFC 4493, section 2.3 Subkey Generation Algorithm
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmac_generate_subkeys</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                  <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>K1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>K2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>L</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>block_size</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

    <comment type="block">/* Calculate Ek(0) */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Generate K1 and K2
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_multiply_by_u</name><argument_list>( <argument><expr><name>K1</name></expr></argument>, <argument><expr><name>L</name></expr></argument> , <argument><expr><name>block_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_multiply_by_u</name><argument_list>( <argument><expr><name>K2</name></expr></argument>, <argument><expr><name>K1</name></expr></argument> , <argument><expr><name>block_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>L</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmac_xor_block</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input1</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input2</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>block_size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>index</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>block_size</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>output</name><index>[ <expr><name>index</name></expr> ]</index></name> <operator>=</operator> <name><name>input1</name><index>[ <expr><name>index</name></expr> ]</index></name> <operator>^</operator> <name><name>input2</name><index>[ <expr><name>index</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Create padded last block from (partial) last block.
 *
 * We can't use the padding option from the cipher layer, as it only works for
 * CBC and we use ECB mode, and anyway we need to XOR K1 or K2 in addition.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cmac_pad</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padded_block</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>padded_block_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>last_block</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>last_block_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>padded_block_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&lt;</operator> <name>last_block_len</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>padded_block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>last_block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><name>j</name> <operator>==</operator> <name>last_block_len</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>padded_block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>padded_block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_cmac_starts</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_cipher_type_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cmac_context_t</name> <modifier>*</modifier></type><name>cmac_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>retval</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>,
                                          <argument><expr><name>MBEDTLS_ENCRYPT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>retval</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

    <switch>switch<condition>( <expr><name>type</name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_CIPHER_AES_128_ECB</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_CIPHER_AES_192_ECB</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_CIPHER_AES_256_ECB</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr>:</case>
            <break>break;</break>
        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <comment type="block">/* Allocated and initialise in the cipher context memory for the CMAC
     * context */</comment>
    <expr_stmt><expr><name>cmac_ctx</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_cmac_context_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cmac_ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name> <operator>=</operator> <name>cmac_ctx</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_cmac_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_cmac_context_t</name><modifier>*</modifier></type> <name>cmac_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>block_size</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>input</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cmac_ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

    <comment type="block">/* Is there data still to process from the last call, that's greater in
     * size than a block? */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>ilen</name> <operator>&gt;</operator> <name>block_size</name> <operator>-</operator> <name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name><index>[<expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>]</index></name></expr></argument>,
                <argument><expr><name>input</name></expr></argument>,
                <argument><expr><name>block_size</name> <operator>-</operator> <name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cmac_xor_block</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>state</name></expr></argument>,
                                           <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
           <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>block_size</name> <operator>-</operator> <name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name> <operator>-=</operator> <name>block_size</name> <operator>-</operator> <name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* n is the number of blocks including any final partial block */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>ilen</name> <operator>+</operator> <name>block_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name>block_size</name></expr>;</expr_stmt>

   <comment type="block">/* Iterate across the input data in block sized chunks */</comment>
    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cmac_xor_block</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>state</name></expr></argument>,
                                           <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
           <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ilen</name> <operator>-=</operator> <name>block_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* If there is data left over that wasn't aligned to a block */</comment>
    <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name><index>[<expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>]</index></name></expr></argument>,
                <argument><expr><name>input</name></expr></argument>,
                <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>+=</operator> <name>ilen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_cmac_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_cmac_context_t</name><modifier>*</modifier></type> <name>cmac_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>state</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K1</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K2</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>M_last</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name></decl>, <decl><type ref="prev"/><name>block_size</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>output</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cmac_ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>block_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>cmac_ctx</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>K1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>K1</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>K2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>K2</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cmac_generate_subkeys</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><name>K2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>last_block</name> <operator>=</operator> <name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name></name></expr>;</expr_stmt>

    <comment type="block">/* Calculate last block */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>&lt;</operator> <name>block_size</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cmac_pad</name><argument_list>( <argument><expr><name>M_last</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>last_block</name></expr></argument>, <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cmac_xor_block</name><argument_list>( <argument><expr><name>M_last</name></expr></argument>, <argument><expr><name>M_last</name></expr></argument>, <argument><expr><name>K2</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Last block is complete block */</comment>
        <expr_stmt><expr><call><name>cmac_xor_block</name><argument_list>( <argument><expr><name>M_last</name></expr></argument>, <argument><expr><name>last_block</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>


    <expr_stmt><expr><call><name>cmac_xor_block</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>M_last</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name>state</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <comment type="block">/* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */</comment>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>K1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>K1</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>K2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>K2</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name></name></expr></argument>,
                     <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>state</name></expr></argument>, <argument><expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_cmac_reset</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_cmac_context_t</name><modifier>*</modifier></type> <name>cmac_ctx</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cmac_ctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name></expr>;</expr_stmt>

    <comment type="block">/* Reset the internal state */</comment>
    <expr_stmt><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name></name></expr></argument>,
                     <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>unprocessed_block</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
                     <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>cmac_ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_cmac</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_cipher_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>input</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>output</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_cipher_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_cmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_cmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_cmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Implementation of AES-CMAC-PRF-128 defined in RFC 4615
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_cmac_prf_128</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_length</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zero_key</name><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>int_key</name><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>input</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>output</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name>MBEDTLS_CIPHER_AES_128_ECB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Failing at this point must be due to a build issue */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>key_length</name> <operator>==</operator> <name>MBEDTLS_AES_BLOCK_SIZE</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Use key as is */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>int_key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>zero_key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_cmac</name><argument_list>( <argument><expr><name>cipher_info</name></expr></argument>, <argument><expr><name>zero_key</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                                   <argument><expr><name>key_length</name></expr></argument>, <argument><expr><name>int_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_cmac</name><argument_list>( <argument><expr><name>cipher_info</name></expr></argument>, <argument><expr><name>int_key</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>,
                               <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>int_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>int_key</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * CMAC test data from SP800-38B Appendix D.1 (corrected)
 * http://csrc.nist.gov/publications/nistpubs/800-38B/Updated_CMAC_Examples.pdf
 *
 * AES-CMAC-PRF-128 test data from RFC 4615
 * https://tools.ietf.org/html/rfc4615#page-4
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_CMAC_TESTS_PER_KEY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PRF_TESTS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* All CMAC test inputs are truncated from the same 64 byte buffer. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>test_message</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
    <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x2a</literal></expr>,
    <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x9c</literal></expr>,
    <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
    <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
    <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
    <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
    <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C || MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Truncation point of message for AES CMAC tests  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier>  <name>unsigned</name> <name>int</name></type>  <name><name>aes_message_lengths</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">40</literal></expr>,
    <expr><literal type="number">64</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* AES 128 CMAC Test Data */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_128_key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xa6</literal></expr>,
    <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x3c</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_128_subkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
        <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xde</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xcc</literal></expr>,
        <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x3b</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_128_expected_result</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
        <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x46</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
        <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x7c</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
        <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x27</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
        <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xfe</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* AES 192 CMAC Test Data */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_192_key</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x52</literal></expr>,
    <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
    <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x7b</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_192_subkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
        <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x96</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4e</literal></expr>,
        <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x2c</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_192_expected_result</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
        <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x67</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x90</literal></expr>,
        <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x84</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xad</literal></expr>,
        <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x0e</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
        <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x11</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* AES 256 CMAC Test Data */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_256_key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xbe</literal></expr>,
    <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
    <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xd7</literal></expr>,
    <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xf4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_256_subkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xac</literal></expr>,
        <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x2f</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
        <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd9</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_256_expected_result</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x9e</literal></expr>,
        <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x83</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
        <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x5c</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xc2</literal></expr>,
        <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xe6</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xd5</literal></expr>,
        <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x10</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Truncation point of message for 3DES CMAC tests  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>des3_message_lengths</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">20</literal></expr>,
    <expr><literal type="number">32</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* 3DES 2 Key CMAC Test Data */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_2key_key</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xd5</literal></expr>,
    <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
    <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xd5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_2key_subkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xef</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xc5</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_2key_expected_result</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index><index>[<expr><name>MBEDTLS_DES3_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x61</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x83</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x4e</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xb8</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* 3DES 3 Key CMAC Test Data */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_3key_key</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
    <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
    <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xb5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_3key_subkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x5f</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xa5</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>des3_3key_expected_result</name><index>[<expr><name>NB_CMAC_TESTS_PER_KEY</name></expr>]</index><index>[<expr><name>MBEDTLS_DES3_BLOCK_SIZE</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x95</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x97</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xed</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xe5</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* AES AES-CMAC-PRF-128 Test Data */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PRFK</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
    <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xcb</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Sizes in bytes */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>PRFKlen</name><index>[<expr><name>NB_PRF_TESTS</name></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">18</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* PRF M */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PRFM</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
    <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PRFT</name><index>[<expr><name>NB_PRF_TESTS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{
        <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x5b</literal></expr>,
        <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x9a</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x52</literal></expr>,
        <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xee</literal></expr>,
        <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x3d</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmac_test_subkeys</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>testname</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>keybits</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>subkeys</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_cipher_type_t</name></type> <name>cipher_type</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>num_tests</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K1</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K2</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name>cipher_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Failing at this point must be due to a build issue */</comment>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tests</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  %s CMAC subkey #%u: "</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_cipher_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"test execution failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_ENCRYPT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"test execution failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cmac_generate_subkeys</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>K1</name></expr></argument>, <argument><expr><name>K2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
           <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>K1</name></expr></argument>, <argument><expr><name>subkeys</name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal>  <operator>||</operator>
            <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>K2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>subkeys</name><index>[<expr><name>block_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <goto>goto <name>exit</name>;</goto>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmac_test_wth_cipher</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>testname</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>keybits</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>messages</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>message_lengths</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>expected_result</name></decl></parameter>,
                                 <parameter><decl><type><name>mbedtls_cipher_type_t</name></type> <name>cipher_type</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>block_size</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>num_tests</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><name>MBEDTLS_CIPHER_BLKSIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name>cipher_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Failing at this point must be due to a build issue */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_tests</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  %s CMAC #%u: "</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_cmac</name><argument_list>( <argument><expr><name>cipher_info</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument>, <argument><expr><name>messages</name></expr></argument>,
                                         <argument><expr><name><name>message_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>expected_result</name><index>[<expr><name>i</name> <operator>*</operator> <name>block_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>block_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

<label><name>exit</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>test_aes128_cmac_prf</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_PRF_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES CMAC 128 PRF #%u: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_aes_cmac_prf_128</name><argument_list>( <argument><expr><name>PRFK</name></expr></argument>, <argument><expr><name><name>PRFKlen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PRFM</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>PRFT</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>

            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<function><type><name>int</name></type> <name>mbedtls_cmac_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* AES-128 */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_subkeys</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                   <argument><expr><literal type="string">"AES 128"</literal></expr></argument>,
                                   <argument><expr><name>aes_128_key</name></expr></argument>,
                                   <argument><expr><literal type="number">128</literal></expr></argument>,
                                   <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aes_128_subkeys</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_CIPHER_AES_128_ECB</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument>,
                                   <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_wth_cipher</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                      <argument><expr><literal type="string">"AES 128"</literal></expr></argument>,
                                      <argument><expr><name>aes_128_key</name></expr></argument>,
                                      <argument><expr><literal type="number">128</literal></expr></argument>,
                                      <argument><expr><name>test_message</name></expr></argument>,
                                      <argument><expr><name>aes_message_lengths</name></expr></argument>,
                                      <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aes_128_expected_result</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_CIPHER_AES_128_ECB</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument>,
                                      <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* AES-192 */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_subkeys</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                   <argument><expr><literal type="string">"AES 192"</literal></expr></argument>,
                                   <argument><expr><name>aes_192_key</name></expr></argument>,
                                   <argument><expr><literal type="number">192</literal></expr></argument>,
                                   <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aes_192_subkeys</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_CIPHER_AES_192_ECB</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument>,
                                   <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_wth_cipher</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                      <argument><expr><literal type="string">"AES 192"</literal></expr></argument>,
                                      <argument><expr><name>aes_192_key</name></expr></argument>,
                                      <argument><expr><literal type="number">192</literal></expr></argument>,
                                      <argument><expr><name>test_message</name></expr></argument>,
                                      <argument><expr><name>aes_message_lengths</name></expr></argument>,
                                      <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aes_192_expected_result</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_CIPHER_AES_192_ECB</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument>,
                                      <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* AES-256 */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_subkeys</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                   <argument><expr><literal type="string">"AES 256"</literal></expr></argument>,
                                   <argument><expr><name>aes_256_key</name></expr></argument>,
                                   <argument><expr><literal type="number">256</literal></expr></argument>,
                                   <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aes_256_subkeys</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_CIPHER_AES_256_ECB</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument>,
                                   <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_wth_cipher</name> <argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                       <argument><expr><literal type="string">"AES 256"</literal></expr></argument>,
                                       <argument><expr><name>aes_256_key</name></expr></argument>,
                                       <argument><expr><literal type="number">256</literal></expr></argument>,
                                       <argument><expr><name>test_message</name></expr></argument>,
                                       <argument><expr><name>aes_message_lengths</name></expr></argument>,
                                       <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aes_256_expected_result</name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_CIPHER_AES_256_ECB</name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_AES_BLOCK_SIZE</name></expr></argument>,
                                       <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* 3DES 2 key */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_subkeys</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                   <argument><expr><literal type="string">"3DES 2 key"</literal></expr></argument>,
                                   <argument><expr><name>des3_2key_key</name></expr></argument>,
                                   <argument><expr><literal type="number">192</literal></expr></argument>,
                                   <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>des3_2key_subkeys</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_DES3_BLOCK_SIZE</name></expr></argument>,
                                   <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_wth_cipher</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                      <argument><expr><literal type="string">"3DES 2 key"</literal></expr></argument>,
                                      <argument><expr><name>des3_2key_key</name></expr></argument>,
                                      <argument><expr><literal type="number">192</literal></expr></argument>,
                                      <argument><expr><name>test_message</name></expr></argument>,
                                      <argument><expr><name>des3_message_lengths</name></expr></argument>,
                                      <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>des3_2key_expected_result</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_DES3_BLOCK_SIZE</name></expr></argument>,
                                      <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 3DES 3 key */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_subkeys</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                   <argument><expr><literal type="string">"3DES 3 key"</literal></expr></argument>,
                                   <argument><expr><name>des3_3key_key</name></expr></argument>,
                                   <argument><expr><literal type="number">192</literal></expr></argument>,
                                   <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>des3_3key_subkeys</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_DES3_BLOCK_SIZE</name></expr></argument>,
                                   <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>cmac_test_wth_cipher</name><argument_list>( <argument><expr><name>verbose</name></expr></argument>,
                                      <argument><expr><literal type="string">"3DES 3 key"</literal></expr></argument>,
                                      <argument><expr><name>des3_3key_key</name></expr></argument>,
                                      <argument><expr><literal type="number">192</literal></expr></argument>,
                                      <argument><expr><name>test_message</name></expr></argument>,
                                      <argument><expr><name>des3_message_lengths</name></expr></argument>,
                                      <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>des3_3key_expected_result</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_DES3_BLOCK_SIZE</name></expr></argument>,
                                      <argument><expr><name>NB_CMAC_TESTS_PER_KEY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>test_aes128_cmac_prf</name><argument_list>( <argument><expr><name>verbose</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CMAC_C */</comment>
</unit>
