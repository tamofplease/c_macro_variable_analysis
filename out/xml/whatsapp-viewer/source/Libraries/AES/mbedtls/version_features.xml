<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/version_features.c"><comment type="block">/*
 *  Version feature information
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_VERSION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>features</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_VERSION_FEATURES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_HAVE_ASM"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_ASM */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_HAVE_SSE2"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_SSE2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_HAVE_TIME"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_HAVE_TIME_DATE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME_DATE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_MEMORY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_MEMORY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_NO_STD_FUNCTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_NO_STD_FUNCTIONS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_NO_STD_FUNCTIONS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_EXIT_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_EXIT_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_EXIT_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_TIME_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_TIME_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_TIME_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_FPRINTF_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_FPRINTF_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_FPRINTF_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_PRINTF_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_PRINTF_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_PRINTF_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_SNPRINTF_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_SNPRINTF_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_SNPRINTF_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_NV_SEED_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_NV_SEED_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_NV_SEED_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEPRECATED_WARNING</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DEPRECATED_WARNING"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DEPRECATED_WARNING */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEPRECATED_REMOVED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DEPRECATED_REMOVED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DEPRECATED_REMOVED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_TIMING_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_TIMING_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_TIMING_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ARC4_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_BLOWFISH_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BLOWFISH_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CAMELLIA_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DES_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_XTEA_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_XTEA_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_XTEA_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD2_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD4_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD4_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD5_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_RIPEMD160_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RIPEMD160_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA1_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA256_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA512_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD2_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD4_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD4_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD5_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_RIPEMD160_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RIPEMD160_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA1_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA256_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA512_PROCESS_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_PROCESS_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_SETKEY_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DES_SETKEY_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_SETKEY_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_CRYPT_ECB_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DES_CRYPT_ECB_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_CRYPT_ECB_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES3_CRYPT_ECB_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DES3_CRYPT_ECB_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES3_CRYPT_ECB_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_SETKEY_ENC_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_SETKEY_ENC_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_SETKEY_ENC_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_SETKEY_DEC_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_SETKEY_DEC_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_SETKEY_DEC_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ENCRYPT_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_ENCRYPT_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_ENCRYPT_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_DECRYPT_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_DECRYPT_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_DECRYPT_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_TEST_NULL_ENTROPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_TEST_NULL_ENTROPY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_TEST_NULL_ENTROPY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_HARDWARE_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ENTROPY_HARDWARE_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_HARDWARE_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ROM_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_ROM_TABLES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_ROM_TABLES */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_SMALL_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CAMELLIA_SMALL_MEMORY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_SMALL_MEMORY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_MODE_CBC"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_MODE_CFB"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_MODE_CTR"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_NULL_CIPHER"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_PKCS7</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_PADDING_PKCS7"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_PKCS7 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ZEROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_PADDING_ZEROS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_ZEROS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENABLE_WEAK_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ENABLE_WEAK_CIPHERSUITES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENABLE_WEAK_CIPHERSUITES */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_REMOVE_ARC4_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_REMOVE_ARC4_CIPHERSUITES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_REMOVE_ARC4_CIPHERSUITES */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP192R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP224R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP256R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP384R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP384R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP521R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP521R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP521R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP192K1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192K1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP224K1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224K1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_SECP256K1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256K1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_BP256R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP256R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_BP384R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP384R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP512R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_BP512R1_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP512R1_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_CURVE25519_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_DP_CURVE25519_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_CURVE25519_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_NIST_OPTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_NIST_OPTIM"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_NIST_OPTIM */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_DETERMINISTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECDSA_DETERMINISTIC"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_DETERMINISTIC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_PSK_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_RSA_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_PARSE_EC_EXTENDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PK_PARSE_EC_EXTENDED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_PARSE_EC_EXTENDED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_STRERROR_DUMMY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ERROR_STRERROR_DUMMY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ERROR_STRERROR_DUMMY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GENPRIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_GENPRIME"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GENPRIME */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_FS_IO"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_FS_IO */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NO_PLATFORM_ENTROPY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_NO_PLATFORM_ENTROPY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_NO_PLATFORM_ENTROPY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_FORCE_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ENTROPY_FORCE_SHA256"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_FORCE_SHA256 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_NV_SEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ENTROPY_NV_SEED"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_NV_SEED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MEMORY_DEBUG"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MEMORY_DEBUG */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MEMORY_BACKTRACE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MEMORY_BACKTRACE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_RSA_ALT_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PK_RSA_ALT_SUPPORT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_RSA_ALT_SUPPORT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS1_V15</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PKCS1_V15"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS1_V15 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS1_V21</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PKCS1_V21"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS1_V21 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_NO_CRT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_RSA_NO_CRT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_NO_CRT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SELF_TEST"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_SMALLER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA256_SMALLER"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_SMALLER */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALL_ALERT_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_ALL_ALERT_MESSAGES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALL_ALERT_MESSAGES */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DEBUG_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_DEBUG_ALL"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DEBUG_ALL */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_ENCRYPT_THEN_MAC"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_EXTENDED_MASTER_SECRET"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_FALLBACK_SCSV</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_FALLBACK_SCSV"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_FALLBACK_SCSV */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_HW_RECORD_ACCEL"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_HW_RECORD_ACCEL */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CBC_RECORD_SPLITTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_CBC_RECORD_SPLITTING"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CBC_RECORD_SPLITTING */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_RENEGOTIATION"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_MAX_FRAGMENT_LENGTH"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_PROTO_SSL3"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_PROTO_TLS1"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_PROTO_TLS1_1"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_PROTO_TLS1_2"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_PROTO_DTLS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_ALPN"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALPN */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_DTLS_ANTI_REPLAY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_ANTI_REPLAY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_DTLS_HELLO_VERIFY"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_HELLO_VERIFY */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_BADMAC_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_DTLS_BADMAC_LIMIT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_BADMAC_LIMIT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_SESSION_TICKETS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXPORT_KEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_EXPORT_KEYS"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXPORT_KEYS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_SERVER_NAME_INDICATION"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_TRUNCATED_HMAC"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_THREADING_ALT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_ALT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_THREADING_PTHREAD"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_PTHREAD */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_VERSION_FEATURES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_VERSION_FEATURES"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_VERSION_FEATURES */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CHECK_KEY_USAGE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CHECK_KEY_USAGE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_RSASSA_PSS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_RSASSA_PSS_SUPPORT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_RSASSA_PSS_SUPPORT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ZLIB_SUPPORT"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ZLIB_SUPPORT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AESNI_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AESNI_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_AES_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ARC4_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ASN1_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ASN1_PARSE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ASN1_PARSE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ASN1_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ASN1_WRITE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ASN1_WRITE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BASE64_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_BASE64_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BASE64_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_BIGNUM_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BIGNUM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_BLOWFISH_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BLOWFISH_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CAMELLIA_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CCM_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CERTS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CERTS_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CERTS_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CIPHER_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CMAC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CMAC_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CMAC_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CTR_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_CTR_DRBG_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CTR_DRBG_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DEBUG_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DEBUG_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DES_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_DHM_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DHM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECDH_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECDSA_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECJPAKE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECJPAKE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECJPAKE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ECP_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ENTROPY_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_ERROR_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ERROR_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_GCM_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVEGE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_HAVEGE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVEGE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HMAC_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_HMAC_DRBG_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HMAC_DRBG_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD2_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD4_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD4_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MD5_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BUFFER_ALLOC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_MEMORY_BUFFER_ALLOC_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MEMORY_BUFFER_ALLOC_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NET_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_NET_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_NET_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_OID_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_OID_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_OID_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PADLOCK_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PADLOCK_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PEM_PARSE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_PARSE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PEM_WRITE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_WRITE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PK_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PK_PARSE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_PARSE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PK_WRITE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_WRITE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PKCS5_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS5_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS11_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PKCS11_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS11_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS12_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PKCS12_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS12_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_PLATFORM_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_RIPEMD160_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RIPEMD160_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_RSA_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA1_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA256_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SHA512_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CACHE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_CACHE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CACHE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_COOKIE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_COOKIE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_COOKIE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TICKET_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_TICKET_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TICKET_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_CLI_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_SRV_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TLS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_SSL_TLS_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TLS_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_THREADING_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_TIMING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_TIMING_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_TIMING_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_VERSION_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_VERSION_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_VERSION_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_USE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_USE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_USE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CRT_PARSE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRL_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CRL_PARSE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRL_PARSE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CSR_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CSR_PARSE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CSR_PARSE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CREATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CREATE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CREATE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CRT_WRITE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_WRITE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CSR_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_X509_CSR_WRITE_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CSR_WRITE_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_XTEA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><literal type="string">"MBEDTLS_XTEA_C"</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_XTEA_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_VERSION_FEATURES */</comment>
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mbedtls_version_check_feature</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>feature</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>idx</name> <init>= <expr><name>features</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>idx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">2</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>feature</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>idx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><operator>*</operator><name>idx</name></expr></argument>, <argument><expr><name>feature</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_VERSION_C */</comment>
</unit>
