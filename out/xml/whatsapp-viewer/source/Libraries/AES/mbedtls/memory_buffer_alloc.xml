<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/memory_buffer_alloc.c"><comment type="block">/*
 *  Buffer-based memory allocator
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BUFFER_ALLOC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"memory_buffer_alloc.h"</cpp:file></cpp:include>

<comment type="block">/* No need for the header guard as MBEDTLS_MEMORY_BUFFER_ALLOC_C
   is dependent upon MBEDTLS_PLATFORM_C */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC1</name></cpp:macro>       <cpp:value>0xFF00AA55</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC2</name></cpp:macro>       <cpp:value>0xEE119966</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BT</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>_memory_header</name></name></type> <name>memory_header</name>;</typedef>
<struct>struct <name>_memory_header</name>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type>          <name>magic1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>alloc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>memory_header</name>   <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>memory_header</name>   <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>memory_header</name>   <modifier>*</modifier></type><name>prev_free</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>memory_header</name>   <modifier>*</modifier></type><name>next_free</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier><modifier>*</modifier></type><name>trace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>trace_count</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>magic2</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name>   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>memory_header</name>   <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>memory_header</name>   <modifier>*</modifier></type><name>first_free</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>verify</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>alloc_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>free_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>total_used</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>maximum_used</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>header_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>          <name>maximum_header_count</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_threading_mutex_t</name></type>   <name>mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type>
<name>buffer_alloc_ctx</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>buffer_alloc_ctx</name></type> <name>heap</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_header</name><parameter_list>( <parameter><decl><type><name>memory_header</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"HDR:  PTR(%10zu), PREV(%10zu), NEXT(%10zu), "</literal>
                              <literal type="string">"ALLOC(%zu), SIZE(%10zu)\n"</literal></expr></argument>,
                      <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>hdr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name></name></expr></argument>,
                      <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"      FPREV(%10zu), FNEXT(%10zu)\n"</literal></expr></argument>,
                      <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TRACE: \n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>trace_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debug_chain</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>memory_header</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>heap</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nBlock list\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>debug_header</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Free list\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>first_free</name></name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>debug_header</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MEMORY_DEBUG */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_header</name><parameter_list>( <parameter><decl><type><name>memory_header</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>magic1</name></name> <operator>!=</operator> <name>MAGIC1</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: MAGIC1 mismatch\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>magic2</name></name> <operator>!=</operator> <name>MAGIC2</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: MAGIC2 mismatch\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>alloc</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: alloc has illegal value\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name></name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: prev == next\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>==</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: prev_free == next_free\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_chain</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>memory_header</name> <modifier>*</modifier></type><name>prv</name> <init>= <expr><name><name>heap</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>heap</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>verify_header</name><argument_list>( <argument><expr><name><name>heap</name><operator>.</operator><name>first</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: verification of first header "</literal>
                                  <literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: verification failed: "</literal>
                                  <literal type="string">"first-&gt;prev != NULL\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>verify_header</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: verification of header "</literal>
                                      <literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>prv</name></expr> )</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: verification failed: "</literal>
                                      <literal type="string">"cur-&gt;prev != prv\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>prv</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer_alloc_calloc</name><parameter_list>( <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>memory_header</name> <modifier>*</modifier></type><name>new</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>heap</name><operator>.</operator><name>first_free</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>original_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>trace_buffer</name><index>[<expr><name>MAX_BT</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>trace_cnt</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>heap</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>original_len</name> <operator>=</operator> <name>len</name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>size</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>/</operator> <name>n</name> <operator>!=</operator> <name>size</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>%</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>len</name> <operator>%</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Find block that fits</comment>
    <comment type="line">//</comment>
    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>len</name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>alloc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: block in free_list but allocated "</literal>
                                  <literal type="string">"data\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>alloc_count</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Found location, split block if &gt; memory_header + 4 room left</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                          <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// Remove from free_list</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>prev_free</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next_free</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>prev_free</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>total_used</name></name> <operator>+=</operator> <name><name>cur</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>total_used</name></name> <operator>&gt;</operator> <name><name>heap</name><operator>.</operator><name>maximum_used</name></name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>maximum_used</name></name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>total_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name>trace_cnt</name> <operator>=</operator> <call><name>backtrace</name><argument_list>( <argument><expr><name>trace_buffer</name></expr></argument>, <argument><expr><name>MAX_BT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <call><name>backtrace_symbols</name><argument_list>( <argument><expr><name>trace_buffer</name></expr></argument>, <argument><expr><name>trace_cnt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>trace_count</name></name> <operator>=</operator> <name>trace_cnt</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>heap</name><operator>.</operator><name>verify</name></name> <operator>&amp;</operator> <name>MBEDTLS_MEMORY_VERIFY_ALLOC</name> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>verify_chain</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>cur</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>memory_header</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>original_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>cur</name> <operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>new</name> <operator>=</operator> <operator>(</operator><name>memory_header</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>trace_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>magic1</name></name> <operator>=</operator> <name>MAGIC1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>magic2</name></name> <operator>=</operator> <name>MAGIC2</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Replace cur with new in free_list</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>prev_free</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>new</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prev_free</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>new</name><operator>-&gt;</operator><name>next_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next_free</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>header_count</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>header_count</name></name> <operator>&gt;</operator> <name><name>heap</name><operator>.</operator><name>maximum_header_count</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>maximum_header_count</name></name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>header_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>total_used</name></name> <operator>+=</operator> <name><name>cur</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>total_used</name></name> <operator>&gt;</operator> <name><name>heap</name><operator>.</operator><name>maximum_used</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>maximum_used</name></name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>total_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>trace_cnt</name> <operator>=</operator> <call><name>backtrace</name><argument_list>( <argument><expr><name>trace_buffer</name></expr></argument>, <argument><expr><name>MAX_BT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <call><name>backtrace_symbols</name><argument_list>( <argument><expr><name>trace_buffer</name></expr></argument>, <argument><expr><name>trace_cnt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>trace_count</name></name> <operator>=</operator> <name>trace_cnt</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>heap</name><operator>.</operator><name>verify</name></name> <operator>&amp;</operator> <name>MBEDTLS_MEMORY_VERIFY_ALLOC</name> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>verify_chain</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>cur</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>memory_header</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>original_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buffer_alloc_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>memory_header</name> <modifier>*</modifier></type><name>hdr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>heap</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>||</operator> <name>p</name></expr></argument> &gt;</argument_list></name> <name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>heap</name><operator>.</operator><name>len</name></name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: mbedtls_free() outside of managed "</literal>
                                  <literal type="string">"space\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>memory_header</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>verify_header</name><argument_list>( <argument><expr><name>hdr</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>alloc</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"FATAL: mbedtls_free() on unallocated "</literal>
                                  <literal type="string">"data\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>free_count</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>total_used</name></name> <operator>-=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_BACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>trace</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>trace_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Regroup with block before</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>alloc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>header_count</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>old</name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hdr</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Regroup with block after</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>alloc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>header_count</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next_free</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>prev_free</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>prev_free</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next_free</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>hdr</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Prepend to free_list if we have not merged</comment>
    <comment type="line">// (Does not have to stay in same order as prev / next list)</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><name>old</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>first_free</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name><operator>-&gt;</operator><name>prev_free</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>heap</name><operator>.</operator><name>verify</name></name> <operator>&amp;</operator> <name>MBEDTLS_MEMORY_VERIFY_FREE</name> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>verify_chain</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_exit</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_memory_buffer_set_verify</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verify</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>verify</name></name> <operator>=</operator> <name>verify</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_memory_buffer_alloc_verify</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>verify_chain</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_memory_buffer_alloc_status</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>,
                      <argument><expr><literal type="string">"Current use: %zu blocks / %zu bytes, max: %zu blocks / "</literal>
                      <literal type="string">"%zu bytes (total %zu bytes), alloc / free: %zu / %zu\n"</literal></expr></argument>,
                      <argument><expr><name><name>heap</name><operator>.</operator><name>header_count</name></name></expr></argument>, <argument><expr><name><name>heap</name><operator>.</operator><name>total_used</name></name></expr></argument>,
                      <argument><expr><name><name>heap</name><operator>.</operator><name>maximum_header_count</name></name></expr></argument>, <argument><expr><name><name>heap</name><operator>.</operator><name>maximum_used</name></name></expr></argument>,
                      <argument><expr><name><name>heap</name><operator>.</operator><name>maximum_header_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>memory_header</name></expr></argument> )</argument_list></sizeof>
                      <operator>+</operator> <name><name>heap</name><operator>.</operator><name>maximum_used</name></name></expr></argument>,
                      <argument><expr><name><name>heap</name><operator>.</operator><name>alloc_count</name></name></expr></argument>, <argument><expr><name><name>heap</name><operator>.</operator><name>free_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>heap</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"All memory de-allocated in stack buffer\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Memory currently allocated:\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>debug_chain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_memory_buffer_alloc_max_get</name><parameter_list>( <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>max_used</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>max_blocks</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>max_used</name>   <operator>=</operator> <name><name>heap</name><operator>.</operator><name>maximum_used</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>max_blocks</name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>maximum_header_count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_memory_buffer_alloc_max_reset</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>maximum_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>maximum_header_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_memory_buffer_alloc_cur_get</name><parameter_list>( <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>cur_used</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>cur_blocks</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>cur_used</name>   <operator>=</operator> <name><name>heap</name><operator>.</operator><name>total_used</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>cur_blocks</name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>header_count</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MEMORY_DEBUG */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer_alloc_calloc_mutexed</name><parameter_list>( <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>heap</name><operator>.</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>buffer_alloc_calloc</name><argument_list>( <argument><expr><name>n</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>heap</name><operator>.</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <return>return<expr><operator>(</operator> <name>buf</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buffer_alloc_free_mutexed</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* We have to good option here, but corrupting the heap seems
     * worse than loosing memory. */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>heap</name><operator>.</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>buffer_alloc_free</name><argument_list>( <argument><expr><name>ptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>heap</name><operator>.</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_C */</comment>

<function><type><name>void</name></type> <name>mbedtls_memory_buffer_alloc_init</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer_alloc_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>heap</name><operator>.</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_platform_set_calloc_free</name><argument_list>( <argument><expr><name>buffer_alloc_calloc_mutexed</name></expr></argument>,
                              <argument><expr><name>buffer_alloc_free_mutexed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>mbedtls_platform_set_calloc_free</name><argument_list>( <argument><expr><name>buffer_alloc_calloc</name></expr></argument>, <argument><expr><name>buffer_alloc_free</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>buf</name> <operator>%</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Adjust len first since buf is used in the computation */</comment>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name>
             <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>buf</name> <operator>%</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name>
             <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>buf</name> <operator>%</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first</name></name> <operator>=</operator> <operator>(</operator><name>memory_header</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memory_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>magic1</name></name> <operator>=</operator> <name>MAGIC1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>magic2</name></name> <operator>=</operator> <name>MAGIC2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_memory_buffer_alloc_free</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>heap</name><operator>.</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>heap</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer_alloc_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pointer</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>p</name> <operator>%</operator> <name>MBEDTLS_MEMORY_ALIGN_MULTIPLE</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_all_free</name><parameter_list>( )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MEMORY_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><name><name>heap</name><operator>.</operator><name>total_used</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <name><name>heap</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name><name>heap</name><operator>.</operator><name>first_free</name></name> <operator>||</operator>
        <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>heap</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>heap</name><operator>.</operator><name>buf</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ASSERT</name><parameter_list>( <parameter><type><name>condition</name></type></parameter> )</parameter_list></cpp:macro>            \
    <cpp:value>if( ! (condition) )                     \
    {                                       \
        if( verbose != 0 )                  \
            mbedtls_printf( "failed\n" );  \
                                            \
        ret = 1;                            \
        goto cleanup;                       \
    }</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>mbedtls_memory_buffer_alloc_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MBA test #1 (basic alloc-free cycle): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_init</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_pointer</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                 <call><name>check_pointer</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                 <call><name>check_pointer</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_all_free</name><argument_list>( )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Memorize end to compare with the next test */</comment>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>heap</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_free</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MBA test #2 (buf not aligned): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_init</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><name><name>heap</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>heap</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_pointer</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                 <call><name>check_pointer</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                 <call><name>check_pointer</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_all_free</name><argument_list>( )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_free</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MBA test #3 (full): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_init</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>memory_header</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_pointer</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>memory_header</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_pointer</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>check_pointer</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>q</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>check_all_free</name><argument_list>( )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_free</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_memory_buffer_alloc_free</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MEMORY_BUFFER_ALLOC_C */</comment>
</unit>
