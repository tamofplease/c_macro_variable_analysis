<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/threading.c"><comment type="block">/*
 *  Threading abstraction layer
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>threading_mutex_init_pthread</name><parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>mutex</name><operator>-&gt;</operator><name>is_valid</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>is_valid</name></name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>threading_mutex_free_pthread</name><parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>mutex</name><operator>-&gt;</operator><name>is_valid</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_mutex_destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>is_valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>threading_mutex_lock_pthread</name><parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator> <name><name>mutex</name><operator>-&gt;</operator><name>is_valid</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>pthread_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>threading_mutex_unlock_pthread</name><parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>mutex</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator> <name><name>mutex</name><operator>-&gt;</operator><name>is_valid</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>pthread_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mbedtls_mutex_init</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_init_pthread</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mbedtls_mutex_free</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_free_pthread</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_mutex_lock</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_lock_pthread</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_mutex_unlock</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_unlock_pthread</name></expr></init>;</function_decl>

<comment type="block">/*
 * With phtreads we can statically initialize mutexes
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_INIT</name></cpp:macro>  <cpp:value>= { PTHREAD_MUTEX_INITIALIZER, 1 }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_PTHREAD */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>threading_mutex_fail</name><parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>mutex</name> <operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>threading_mutex_dummy</name><parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>mutex</name> <operator>)</operator></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mbedtls_mutex_init</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_dummy</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mbedtls_mutex_free</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_dummy</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_mutex_lock</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_fail</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_mutex_unlock</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>threading_mutex_fail</name></expr></init>;</function_decl>

<comment type="block">/*
 * Set functions pointers and initialize global mutexes
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_threading_set_alt</name><parameter_list>( <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mutex_init</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,
                       <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mutex_free</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,
                       <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mutex_lock</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,
                       <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mutex_unlock</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_threading_mutex_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_mutex_init</name> <operator>=</operator> <name>mutex_init</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mbedtls_mutex_free</name> <operator>=</operator> <name>mutex_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mbedtls_mutex_lock</name> <operator>=</operator> <name>mutex_lock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mbedtls_mutex_unlock</name> <operator>=</operator> <name>mutex_unlock</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_readdir_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_gmtime_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free global mutexes
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_threading_free_alt</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_readdir_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_gmtime_mutex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_ALT */</comment>

<comment type="block">/*
 * Define global mutexes
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MUTEX_INIT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_INIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>mbedtls_threading_mutex_t</name> <name>mbedtls_threading_readdir_mutex</name></type> <name>MUTEX_INIT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mbedtls_threading_mutex_t</name> <name>mbedtls_threading_gmtime_mutex</name></type> <name>MUTEX_INIT</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_C */</comment>
</unit>
