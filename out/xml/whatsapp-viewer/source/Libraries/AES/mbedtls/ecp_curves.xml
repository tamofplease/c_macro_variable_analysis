<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ecp_curves.c"><comment type="block">/*
 *  Elliptic curves over GF(p): curve-specific data and functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARMCC_VERSION</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><specifier>inline</specifier></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro> <cpp:value>__inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Conversion macros for embedded constants:
 * build lists of mbedtls_mpi_uint's from lists of unsigned char's grouped by 8, 4 or 2
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_INT32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_T_UINT_4</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro>             \
    <cpp:value>( (mbedtls_mpi_uint) a &lt;&lt;  0 ) |                          \
    ( (mbedtls_mpi_uint) b &lt;&lt;  8 ) |                          \
    ( (mbedtls_mpi_uint) c &lt;&lt; 16 ) |                          \
    ( (mbedtls_mpi_uint) d &lt;&lt; 24 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_T_UINT_2</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro>                   \
    <cpp:value>BYTES_TO_T_UINT_4( a, b, 0, 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_T_UINT_8</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter> )</parameter_list></cpp:macro> \
    <cpp:value>BYTES_TO_T_UINT_4( a, b, c, d ),                \
    BYTES_TO_T_UINT_4( e, f, g, h )</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* 64-bits */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_T_UINT_8</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter> )</parameter_list></cpp:macro> \
    <cpp:value>( (mbedtls_mpi_uint) a &lt;&lt;  0 ) |                          \
    ( (mbedtls_mpi_uint) b &lt;&lt;  8 ) |                          \
    ( (mbedtls_mpi_uint) c &lt;&lt; 16 ) |                          \
    ( (mbedtls_mpi_uint) d &lt;&lt; 24 ) |                          \
    ( (mbedtls_mpi_uint) e &lt;&lt; 32 ) |                          \
    ( (mbedtls_mpi_uint) f &lt;&lt; 40 ) |                          \
    ( (mbedtls_mpi_uint) g &lt;&lt; 48 ) |                          \
    ( (mbedtls_mpi_uint) h &lt;&lt; 56 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_T_UINT_4</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter> )</parameter_list></cpp:macro>             \
    <cpp:value>BYTES_TO_T_UINT_8( a, b, c, d, 0, 0, 0, 0 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_TO_T_UINT_2</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro>                   \
    <cpp:value>BYTES_TO_T_UINT_8( a, b, 0, 0, 0, 0, 0, 0 )</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* bits in mbedtls_mpi_uint */</comment>

<comment type="block">/*
 * Note: the constants are in little-endian order
 * to be directly usable in MPIs
 */</comment>

<comment type="block">/*
 * Domain parameters for secp192r1
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x49</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0xAB</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0x64</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x12</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0xFD</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0x43</literal></expr></argument>, <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0x7C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF6</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x79</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x73</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD5</literal></expr></argument>, <argument><expr><literal type="number">0xCD</literal></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x78</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0xC8</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0x2B</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192R1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for secp224r1
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0x43</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0x0B</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBA</literal></expr></argument>, <argument><expr><literal type="number">0xD8</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0xD7</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0xF5</literal></expr></argument>, <argument><expr><literal type="number">0xAB</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0x0C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0xD6</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0xD3</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0x0C</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xD5</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0x5A</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0x75</literal></expr></argument>, <argument><expr><literal type="number">0x43</literal></expr></argument>, <argument><expr><literal type="number">0xCD</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0xDF</literal></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0x4C</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0x37</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x3D</literal></expr></argument>, <argument><expr><literal type="number">0x2A</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0xE0</literal></expr></argument>, <argument><expr><literal type="number">0xA2</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224R1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for secp256r1
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0x3C</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF6</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0x53</literal></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x65</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0x76</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><literal type="number">0xD8</literal></expr></argument>, <argument><expr><literal type="number">0x35</literal></expr></argument>, <argument><expr><literal type="number">0xC6</literal></expr></argument>, <argument><expr><literal type="number">0x5A</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0xD8</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0xA4</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument>, <argument><expr><literal type="number">0xE1</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0xD1</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF5</literal></expr></argument>, <argument><expr><literal type="number">0x51</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0x37</literal></expr></argument>, <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><literal type="number">0xCB</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x2B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0x9E</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">0x7C</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument>, <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0x1A</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">0xE3</literal></expr></argument>, <argument><expr><literal type="number">0x4F</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x51</literal></expr></argument>, <argument><expr><literal type="number">0x25</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0xF3</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><literal type="number">0x9E</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0xAD</literal></expr></argument>, <argument><expr><literal type="number">0xFA</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0xBC</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256R1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for secp384r1
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp384r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp384r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xEF</literal></expr></argument>, <argument><expr><literal type="number">0x2A</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0xD3</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0xC8</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0x2A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0xD1</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument>, <argument><expr><literal type="number">0x8A</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0xC6</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x5A</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x8F</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x12</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0x6E</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument>, <argument><expr><literal type="number">0xE3</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE4</literal></expr></argument>, <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp384r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0x76</literal></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x6C</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x2A</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0xE0</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument>, <argument><expr><literal type="number">0x62</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x6E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x74</literal></expr></argument>, <argument><expr><literal type="number">0xAD</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0xF3</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x37</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument>, <argument><expr><literal type="number">0xBE</literal></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp384r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x5F</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xEA</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x7C</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x43</literal></expr></argument>, <argument><expr><literal type="number">0x7A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x7C</literal></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0x9E</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x6F</literal></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp384r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x73</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0xC5</literal></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>, <argument><expr><literal type="number">0x6A</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x7A</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0xB2</literal></expr></argument>, <argument><expr><literal type="number">0x0D</literal></expr></argument>, <argument><expr><literal type="number">0x1A</literal></expr></argument>, <argument><expr><literal type="number">0x58</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xDF</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0x37</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x4D</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP384R1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for secp521r1
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP521R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp521r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp521r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x3F</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0x1F</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF1</literal></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument>, <argument><expr><literal type="number">0x3D</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0xDF</literal></expr></argument>, <argument><expr><literal type="number">0x73</literal></expr></argument>, <argument><expr><literal type="number">0x35</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="number">0x52</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x7B</literal></expr></argument>, <argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0x51</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE1</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0xF1</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x89</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF3</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0x5B</literal></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0xA2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0x92</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x1F</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0x1C</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x51</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp521r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">0x6A</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xA2</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument>, <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBA</literal></expr></argument>, <argument><expr><literal type="number">0x3D</literal></expr></argument>, <argument><expr><literal type="number">0x4D</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x3F</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0xCB</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0x9E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xCD</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0xC6</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp521r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0xD1</literal></expr></argument>, <argument><expr><literal type="number">0x9F</literal></expr></argument>, <argument><expr><literal type="number">0x76</literal></expr></argument>, <argument><expr><literal type="number">0x94</literal></expr></argument>, <argument><expr><literal type="number">0xBE</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0xA2</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><literal type="number">0x3C</literal></expr></argument>, <argument><expr><literal type="number">0x35</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0xAD</literal></expr></argument>, <argument><expr><literal type="number">0x3F</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0xC5</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="number">0x97</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x2C</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0x49</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0xF5</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0x1B</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0x5F</literal></expr></argument>, <argument><expr><literal type="number">0x8A</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument>, <argument><expr><literal type="number">0x6A</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp521r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x6F</literal></expr></argument>, <argument><expr><literal type="number">0xBB</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x89</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD0</literal></expr></argument>, <argument><expr><literal type="number">0xA5</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0x83</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0x51</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFA</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP521R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192k1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x37</literal></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192k1_a</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192k1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192k1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x7D</literal></expr></argument>, <argument><expr><literal type="number">0x6C</literal></expr></argument>, <argument><expr><literal type="number">0xE0</literal></expr></argument>, <argument><expr><literal type="number">0xEA</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0xD1</literal></expr></argument>, <argument><expr><literal type="number">0xA5</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xF1</literal></expr></argument>, <argument><expr><literal type="number">0x4F</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192k1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0xBE</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="number">0xD0</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x84</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x6D</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x9B</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp192k1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0xFD</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0x74</literal></expr></argument>, <argument><expr><literal type="number">0x6A</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224k1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x6D</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224k1_a</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224k1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224k1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0xA4</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0x75</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><literal type="number">0xE4</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0x67</literal></expr></argument>, <argument><expr><literal type="number">0xA4</literal></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xDF</literal></expr></argument>, <argument><expr><literal type="number">0x99</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0x4D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0x5B</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224k1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA5</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0x6D</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x59</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xB0</literal></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0xE3</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD6</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0xBA</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_4</name><argument_list>( <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x9F</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp224k1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x9F</literal></expr></argument>, <argument><expr><literal type="number">0x76</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0xE8</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256k1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256k1_a</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256k1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_2</name><argument_list>( <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256k1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0x5B</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0x0B</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0x62</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xAC</literal></expr></argument>, <argument><expr><literal type="number">0xBB</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0xBE</literal></expr></argument>, <argument><expr><literal type="number">0x79</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256k1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument>, <argument><expr><literal type="number">0x8F</literal></expr></argument>, <argument><expr><literal type="number">0xD0</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0xA6</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0xFD</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument>, <argument><expr><literal type="number">0xA4</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><literal type="number">0xC4</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>secp256k1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">0xD0</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0xBA</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256K1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for brainpoolP256r1 (RFC 5639 3.4)
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP256r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0x53</literal></expr></argument>, <argument><expr><literal type="number">0x6E</literal></expr></argument>, <argument><expr><literal type="number">0x1F</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0xD5</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0xF6</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0x6E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x83</literal></expr></argument>, <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP256r1_a</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xF3</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x6C</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x7A</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x75</literal></expr></argument>, <argument><expr><literal type="number">0xF6</literal></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0x75</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0x5A</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP256r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0xCC</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0xE1</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0x84</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0x7C</literal></expr></argument>, <argument><expr><literal type="number">0xD7</literal></expr></argument>, <argument><expr><literal type="number">0xBB</literal></expr></argument>, <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xF3</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0x6C</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP256r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x62</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0x53</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xE3</literal></expr></argument>, <argument><expr><literal type="number">0xE1</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0x2C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xCB</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0xCB</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP256r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x97</literal></expr></argument>, <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0x14</literal></expr></argument>, <argument><expr><literal type="number">0x1A</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument>, <argument><expr><literal type="number">0x97</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFD</literal></expr></argument>, <argument><expr><literal type="number">0xC4</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0xC3</literal></expr></argument>, <argument><expr><literal type="number">0x35</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP256r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x97</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0xA6</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0x7A</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x83</literal></expr></argument>, <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0x66</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><literal type="number">0xFB</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP256R1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for brainpoolP384r1 (RFC 5639 3.6)
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP384r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x53</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0x1A</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0x90</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0xD3</literal></expr></argument>, <argument><expr><literal type="number">0xAC</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x12</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xDF</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x6F</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0x6D</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP384r1_a</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xA5</literal></expr></argument>, <argument><expr><literal type="number">0x8A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0xBA</literal></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument>, <argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x13</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0xB2</literal></expr></argument>, <argument><expr><literal type="number">0x4F</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0xA2</literal></expr></argument>, <argument><expr><literal type="number">0xBE</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA0</literal></expr></argument>, <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x72</literal></expr></argument>, <argument><expr><literal type="number">0x3C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x0C</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument>, <argument><expr><literal type="number">0x3D</literal></expr></argument>, <argument><expr><literal type="number">0xC6</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0xC3</literal></expr></argument>, <argument><expr><literal type="number">0x7B</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP384r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x4C</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0xFA</literal></expr></argument>, <argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x94</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument>, <argument><expr><literal type="number">0x7C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xD5</literal></expr></argument>, <argument><expr><literal type="number">0x62</literal></expr></argument>, <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0xA5</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA6</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0xE1</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x7C</literal></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x39</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0xCE</literal></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP384r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument>, <argument><expr><literal type="number">0xB2</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0xEF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0xD6</literal></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0xE0</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0xE8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE8</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0x0C</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE3</literal></expr></argument>, <argument><expr><literal type="number">0x4F</literal></expr></argument>, <argument><expr><literal type="number">0xF1</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0x3F</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0xA6</literal></expr></argument>, <argument><expr><literal type="number">0xA2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0xCF</literal></expr></argument>, <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><literal type="number">0x1C</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP384r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x15</literal></expr></argument>, <argument><expr><literal type="number">0x53</literal></expr></argument>, <argument><expr><literal type="number">0x3C</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument>, <argument><expr><literal type="number">0x0E</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0x91</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x4F</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0xE1</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><literal type="number">0x58</literal></expr></argument>, <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><literal type="number">0x29</literal></expr></argument>, <argument><expr><literal type="number">0x0B</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x62</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x52</literal></expr></argument>, <argument><expr><literal type="number">0xD5</literal></expr></argument>, <argument><expr><literal type="number">0xCF</literal></expr></argument>, <argument><expr><literal type="number">0x95</literal></expr></argument>, <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0xEB</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA4</literal></expr></argument>, <argument><expr><literal type="number">0xC2</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x75</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument>, <argument><expr><literal type="number">0xBE</literal></expr></argument>, <argument><expr><literal type="number">0x8A</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP384r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0xC3</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0x6B</literal></expr></argument>, <argument><expr><literal type="number">0xAF</literal></expr></argument>, <argument><expr><literal type="number">0xB6</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0xCF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x25</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">0xAC</literal></expr></argument>, <argument><expr><literal type="number">0x6C</literal></expr></argument>, <argument><expr><literal type="number">0x6E</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0x1F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x15</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xDF</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x7E</literal></expr></argument>, <argument><expr><literal type="number">0x6F</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x28</literal></expr></argument>, <argument><expr><literal type="number">0x6D</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x8C</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP384R1_ENABLED */</comment>

<comment type="block">/*
 * Domain parameters for brainpoolP512r1 (RFC 5639 3.7)
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP512R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP512r1_p</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xF3</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0x58</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x85</literal></expr></argument>, <argument><expr><literal type="number">0xC6</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0x2A</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0xCD</literal></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0xC6</literal></expr></argument>, <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x9B</literal></expr></argument>, <argument><expr><literal type="number">0x4D</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0xD6</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xCB</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0x3F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x8B</literal></expr></argument>, <argument><expr><literal type="number">0xC4</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP512r1_a</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x94</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><literal type="number">0x4D</literal></expr></argument>, <argument><expr><literal type="number">0xAC</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0xE7</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0x2B</literal></expr></argument>, <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0xC8</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0xF1</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0x25</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x5A</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0xEA</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x3D</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xCB</literal></expr></argument>, <argument><expr><literal type="number">0x94</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xC5</literal></expr></argument>, <argument><expr><literal type="number">0x4C</literal></expr></argument>, <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0xAC</literal></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x89</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0x60</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument>, <argument><expr><literal type="number">0x31</literal></expr></argument>, <argument><expr><literal type="number">0xA3</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP512r1_b</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x23</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>, <argument><expr><literal type="number">0xBA</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0xB7</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x67</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x94</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x4D</literal></expr></argument>, <argument><expr><literal type="number">0xAC</literal></expr></argument>, <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0xE7</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument>, <argument><expr><literal type="number">0x2B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xA7</literal></expr></argument>, <argument><expr><literal type="number">0x17</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0xC8</literal></expr></argument>, <argument><expr><literal type="number">0x9A</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0xF1</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument>, <argument><expr><literal type="number">0x0A</literal></expr></argument>, <argument><expr><literal type="number">0xA1</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0x25</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x5A</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x2D</literal></expr></argument>, <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0x98</literal></expr></argument>, <argument><expr><literal type="number">0xEA</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0xF9</literal></expr></argument>, <argument><expr><literal type="number">0x3D</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP512r1_gx</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0xF8</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0xBC</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0x35</literal></expr></argument>, <argument><expr><literal type="number">0x8B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0x6A</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>, <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument>, <argument><expr><literal type="number">0x6D</literal></expr></argument>, <argument><expr><literal type="number">0x7C</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x5F</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument>, <argument><expr><literal type="number">0xB9</literal></expr></argument>, <argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><literal type="number">0x7B</literal></expr></argument>, <argument><expr><literal type="number">0x68</literal></expr></argument>, <argument><expr><literal type="number">0xD1</literal></expr></argument>, <argument><expr><literal type="number">0x50</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0xD0</literal></expr></argument>, <argument><expr><literal type="number">0xE2</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument>, <argument><expr><literal type="number">0x1F</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x8E</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0xD0</literal></expr></argument>, <argument><expr><literal type="number">0xF4</literal></expr></argument>, <argument><expr><literal type="number">0xEE</literal></expr></argument>, <argument><expr><literal type="number">0x62</literal></expr></argument>, <argument><expr><literal type="number">0x3B</literal></expr></argument>, <argument><expr><literal type="number">0xB4</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xC1</literal></expr></argument>, <argument><expr><literal type="number">0x16</literal></expr></argument>, <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><literal type="number">0x9F</literal></expr></argument>, <argument><expr><literal type="number">0xED</literal></expr></argument>, <argument><expr><literal type="number">0x85</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x93</literal></expr></argument>, <argument><expr><literal type="number">0x6A</literal></expr></argument>, <argument><expr><literal type="number">0x4C</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument>, <argument><expr><literal type="number">0x5A</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x64</literal></expr></argument>, <argument><expr><literal type="number">0xD9</literal></expr></argument>, <argument><expr><literal type="number">0x2E</literal></expr></argument>, <argument><expr><literal type="number">0xD8</literal></expr></argument>, <argument><expr><literal type="number">0xBD</literal></expr></argument>, <argument><expr><literal type="number">0xE4</literal></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP512r1_gy</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x92</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0xD8</literal></expr></argument>, <argument><expr><literal type="number">0x3A</literal></expr></argument>, <argument><expr><literal type="number">0x0F</literal></expr></argument>, <argument><expr><literal type="number">0x1E</literal></expr></argument>, <argument><expr><literal type="number">0xCD</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><literal type="number">0x54</literal></expr></argument>, <argument><expr><literal type="number">0xF0</literal></expr></argument>, <argument><expr><literal type="number">0xA8</literal></expr></argument>, <argument><expr><literal type="number">0x2F</literal></expr></argument>, <argument><expr><literal type="number">0x2B</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0xD1</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0x27</literal></expr></argument>, <argument><expr><literal type="number">0x8A</literal></expr></argument>, <argument><expr><literal type="number">0xD8</literal></expr></argument>, <argument><expr><literal type="number">0x4B</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x5B</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x5E</literal></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><literal type="number">0x5F</literal></expr></argument>, <argument><expr><literal type="number">0x4A</literal></expr></argument>, <argument><expr><literal type="number">0x49</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0xDC</literal></expr></argument>, <argument><expr><literal type="number">0xB2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x11</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0x1F</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument>, <argument><expr><literal type="number">0x5B</literal></expr></argument>, <argument><expr><literal type="number">0xC5</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xA0</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x1A</literal></expr></argument>, <argument><expr><literal type="number">0x7B</literal></expr></argument>, <argument><expr><literal type="number">0xA5</literal></expr></argument>, <argument><expr><literal type="number">0x24</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xF7</literal></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><literal type="number">0xF2</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xFD</literal></expr></argument>, <argument><expr><literal type="number">0x22</literal></expr></argument>, <argument><expr><literal type="number">0x78</literal></expr></argument>, <argument><expr><literal type="number">0xCF</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0xBF</literal></expr></argument>, <argument><expr><literal type="number">0xEA</literal></expr></argument>, <argument><expr><literal type="number">0xC0</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xEC</literal></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0x38</literal></expr></argument>, <argument><expr><literal type="number">0xDE</literal></expr></argument>, <argument><expr><literal type="number">0x7D</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>brainpoolP512r1_n</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x69</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument>, <argument><expr><literal type="number">0x96</literal></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xDA</literal></expr></argument>, <argument><expr><literal type="number">0x5D</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">0xD3</literal></expr></argument>, <argument><expr><literal type="number">0xB1</literal></expr></argument>, <argument><expr><literal type="number">0x1D</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x47</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>, <argument><expr><literal type="number">0xAC</literal></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument>, <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument>, <argument><expr><literal type="number">0x86</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x19</literal></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument>, <argument><expr><literal type="number">0xA9</literal></expr></argument>, <argument><expr><literal type="number">0x4C</literal></expr></argument>, <argument><expr><literal type="number">0x41</literal></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">0x3E</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0x70</literal></expr></argument>, <argument><expr><literal type="number">0xCA</literal></expr></argument>, <argument><expr><literal type="number">0x9C</literal></expr></argument>, <argument><expr><literal type="number">0x63</literal></expr></argument>, <argument><expr><literal type="number">0xD6</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><literal type="number">0xD2</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0xB3</literal></expr></argument>, <argument><expr><literal type="number">0x8D</literal></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0xCB</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x07</literal></expr></argument>, <argument><expr><literal type="number">0xFC</literal></expr></argument>, <argument><expr><literal type="number">0xC9</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0xAE</literal></expr></argument>, <argument><expr><literal type="number">0xE6</literal></expr></argument>, <argument><expr><literal type="number">0xD4</literal></expr></argument>, <argument><expr><literal type="number">0x3F</literal></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><expr><literal type="number">0x8B</literal></expr></argument>, <argument><expr><literal type="number">0xC4</literal></expr></argument>, <argument><expr><literal type="number">0xE9</literal></expr></argument>, <argument><expr><literal type="number">0xDB</literal></expr></argument>, <argument><expr><literal type="number">0xB8</literal></expr></argument>, <argument><expr><literal type="number">0x9D</literal></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><literal type="number">0xAA</literal></expr></argument> )</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP512R1_ENABLED */</comment>

<comment type="block">/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ecp_mpi_load</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set an MPI to static value 1
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ecp_mpi_set1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>one</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>one</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Make group available from embedded constants
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_group_load</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>alen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>gx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>gxlen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>gy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>gylen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>nlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ecp_mpi_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ecp_mpi_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>A</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>alen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ecp_mpi_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>B</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>blen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ecp_mpi_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ecp_mpi_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gxlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ecp_mpi_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name><operator>.</operator><name>Y</name></name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>gylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ecp_mpi_set1</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name><operator>.</operator><name>Z</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>pbits</name></name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_NIST_OPTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Forward declarations */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p192</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p224</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p256</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p384</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP521R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p521</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIST_MODP</name><parameter_list>( <parameter><type><name>P</name></type></parameter> )</parameter_list></cpp:macro>      <cpp:value>grp-&gt;modp = ecp_mod_ ## P;</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIST_MODP</name><parameter_list>( <parameter><type><name>P</name></type></parameter> )</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_NIST_OPTIM */</comment>

<comment type="block">/* Additional forward declarations */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_CURVE25519_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p255</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p192k1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p224k1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p256k1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_GROUP_A</name><parameter_list>( <parameter><type><name>G</name></type></parameter> )</parameter_list></cpp:macro>   <cpp:value>ecp_group_load( grp,            \
                            G ## _p,  sizeof( G ## _p  ),   \
                            G ## _a,  sizeof( G ## _a  ),   \
                            G ## _b,  sizeof( G ## _b  ),   \
                            G ## _gx, sizeof( G ## _gx ),   \
                            G ## _gy, sizeof( G ## _gy ),   \
                            G ## _n,  sizeof( G ## _n  ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_GROUP</name><parameter_list>( <parameter><type><name>G</name></type></parameter> )</parameter_list></cpp:macro>     <cpp:value>ecp_group_load( grp,            \
                            G ## _p,  sizeof( G ## _p  ),   \
                            NULL,     0,                    \
                            G ## _b,  sizeof( G ## _b  ),   \
                            G ## _gx, sizeof( G ## _gx ),   \
                            G ## _gy, sizeof( G ## _gy ),   \
                            G ## _n,  sizeof( G ## _n  ) )</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_CURVE25519_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Specialized function for creating the Curve25519 group
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_use_curve25519</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="block">/* Actually ( A + 2 ) / 4 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>A</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"01DB42"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* P = 2^255 - 19 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>pbits</name></name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>P</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Y intentionaly not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name><operator>.</operator><name>Z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name><operator>.</operator><name>Y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Actually, the required msb for private keys */</comment>
    <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name> <operator>=</operator> <literal type="number">254</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ecp_group_free</name><argument_list>( <argument><expr><name>grp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_CURVE25519_ENABLED */</comment>

<comment type="block">/*
 * Set a group using well-known domain parameters
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecp_group_load</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>mbedtls_ecp_group_id</name></type> <name>id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ecp_group_free</name><argument_list>( <argument><expr><name>grp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

    <switch>switch<condition>( <expr><name>id</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP192R1</name></expr>:</case>
            <expr_stmt><expr><call><name>NIST_MODP</name><argument_list>( <argument><expr><name>p192</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP</name><argument_list>( <argument><expr><name>secp192r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP224R1</name></expr>:</case>
            <expr_stmt><expr><call><name>NIST_MODP</name><argument_list>( <argument><expr><name>p224</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP</name><argument_list>( <argument><expr><name>secp224r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr>:</case>
            <expr_stmt><expr><call><name>NIST_MODP</name><argument_list>( <argument><expr><name>p256</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP</name><argument_list>( <argument><expr><name>secp256r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP384R1</name></expr>:</case>
            <expr_stmt><expr><call><name>NIST_MODP</name><argument_list>( <argument><expr><name>p384</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP</name><argument_list>( <argument><expr><name>secp384r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP384R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP521R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP521R1</name></expr>:</case>
            <expr_stmt><expr><call><name>NIST_MODP</name><argument_list>( <argument><expr><name>p521</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP</name><argument_list>( <argument><expr><name>secp521r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP521R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP192K1</name></expr>:</case>
            <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>modp</name></name> <operator>=</operator> <name>ecp_mod_p192k1</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP_A</name><argument_list>( <argument><expr><name>secp192k1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP224K1</name></expr>:</case>
            <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>modp</name></name> <operator>=</operator> <name>ecp_mod_p224k1</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP_A</name><argument_list>( <argument><expr><name>secp224k1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_SECP256K1</name></expr>:</case>
            <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>modp</name></name> <operator>=</operator> <name>ecp_mod_p256k1</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP_A</name><argument_list>( <argument><expr><name>secp256k1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_BP256R1</name></expr>:</case>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP_A</name><argument_list>( <argument><expr><name>brainpoolP256r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP256R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_BP384R1</name></expr>:</case>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP_A</name><argument_list>( <argument><expr><name>brainpoolP384r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP384R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_BP512R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_BP512R1</name></expr>:</case>
            <return>return<expr><operator>(</operator> <call><name>LOAD_GROUP_A</name><argument_list>( <argument><expr><name>brainpoolP512r1</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_BP512R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_CURVE25519_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_ECP_DP_CURVE25519</name></expr>:</case>
            <expr_stmt><expr><name><name>grp</name><operator>-&gt;</operator><name>modp</name></name> <operator>=</operator> <name>ecp_mod_p255</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>ecp_use_curve25519</name><argument_list>( <argument><expr><name>grp</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_CURVE25519_ENABLED */</comment>

        <default>default:</default>
            <expr_stmt><expr><call><name>mbedtls_ecp_group_free</name><argument_list>( <argument><expr><name>grp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_NIST_OPTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast reduction modulo the primes used by the NIST curves.
 *
 * These functions are critical for speed, but not needed for correct
 * operations. So, we make the choice to heavily rely on the internals of our
 * bignum library, which creates a tight coupling between these functions and
 * our MPI implementation.  However, the coupling between the ECP module and
 * MPI remains loose, since these functions can be deactivated at will.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Compared to the way things are presented in FIPS 186-3 D.2,
 * we proceed in columns, from right (least significant chunk) to left,
 * adding chunks to N in place, and keeping a carry for the next chunk.
 * This avoids moving things around in memory, and uselessly adding zeros,
 * compared to the more straightforward, line-oriented approach.
 *
 * For this prime we need to handle data in chunks of 64 bits.
 * Since this is always a multiple of our basic mbedtls_mpi_uint, we can
 * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.
 */</comment>

<comment type="block">/* Add 64-bit chunks (dst += src) and update carry */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add64</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>carry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr><operator>,</operator> <expr><name>src</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>      <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator> <operator>*</operator><name>dst</name> <operator>&lt;</operator> <name>c</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>+=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>   <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator> <operator>*</operator><name>dst</name> <operator>&lt;</operator> <operator>*</operator><name>src</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>carry</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Add carry to a 64-bit chunk and update carry */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>carry64</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>carry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>+=</operator> <operator>*</operator><name>carry</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>carry</name>  <operator>=</operator> <operator>(</operator> <operator>*</operator><name>dst</name> <operator>&lt;</operator> <operator>*</operator><name>carry</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro>       <cpp:value>8 / sizeof( mbedtls_mpi_uint )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>( <parameter><type><name>i</name></type></parameter> )</parameter_list></cpp:macro>      <cpp:value>N-&gt;p + i * WIDTH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>( <parameter><type><name>i</name></type></parameter> )</parameter_list></cpp:macro>    <cpp:value>add64( p, A( i ), &amp;c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name></cpp:macro>        <cpp:value>p += WIDTH; carry64( p, &amp;c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST</name></cpp:macro>        <cpp:value>p += WIDTH; *p = c; while( ++p &lt; end ) *p = 0</cpp:value></cpp:define>

<comment type="block">/*
 * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p192</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure we have enough blocks so that A(5) is legal */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <name>WIDTH</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>             <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A0 += A3 + A5</comment>
    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A1 += A3 + A4 + A5</comment>
    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>             <expr_stmt><expr><name>LAST</name></expr>;</expr_stmt> <comment type="line">// A2 += A4 + A5</comment>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WIDTH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEXT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LAST</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * The reader is advised to first understand ecp_mod_p192() since the same
 * general structure is used here, but with additional complications:
 * (1) chunks of 32 bits, and (2) subtractions.
 */</comment>

<comment type="block">/*
 * For these primes, we need to handle data in chunks of 32 bits.
 * This makes it more complicated if we use 64 bits limbs in MPI,
 * which prevents us from using a uniform access method as for p192.
 *
 * So, we define a mini abstraction layer to access 32 bit chunks,
 * load them in 'cur' for work, and store them back from 'cur' when done.
 *
 * While at it, also define the size of N in terms of 32-bit chunks.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD32</name></cpp:macro>      <cpp:value>cur = A( i );</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_INT32</name></expr></argument>)</argument_list></call></expr></cpp:if>  <comment type="block">/* 32 bit */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX32</name></cpp:macro>       <cpp:value>N-&gt;n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>( <parameter><type><name>j</name></type></parameter> )</parameter_list></cpp:macro>      <cpp:value>N-&gt;p[j]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE32</name></cpp:macro>     <cpp:value>N-&gt;p[i] = cur;</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>                               <comment type="block">/* 64-bit */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX32</name></cpp:macro>       <cpp:value>N-&gt;n * 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>( <parameter><type><name>j</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>j % 2 ? (uint32_t)( N-&gt;p[j/2] &gt;&gt; 32 ) : (uint32_t)( N-&gt;p[j/2] )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE32</name></cpp:macro>                                   \
    <cpp:value>if( i % 2 ) {                                 \
        N-&gt;p[i/2] &amp;= 0x00000000FFFFFFFF;          \
        N-&gt;p[i/2] |= ((mbedtls_mpi_uint) cur) &lt;&lt; 32;        \
    } else {                                      \
        N-&gt;p[i/2] &amp;= 0xFFFFFFFF00000000;          \
        N-&gt;p[i/2] |= (mbedtls_mpi_uint) cur;                \
    }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sizeof( mbedtls_mpi_uint ) */</comment>

<comment type="block">/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>add32</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>carry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>+=</operator> <name>src</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>carry</name> <operator>+=</operator> <operator>(</operator> <operator>*</operator><name>dst</name> <operator>&lt;</operator> <name>src</name> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sub32</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>carry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>carry</name> <operator>-=</operator> <operator>(</operator> <operator>*</operator><name>dst</name> <operator>&lt;</operator> <name>src</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>-=</operator> <name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>( <parameter><type><name>j</name></type></parameter> )</parameter_list></cpp:macro>    <cpp:value>add32( &amp;cur, A( j ), &amp;c );</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name><parameter_list>( <parameter><type><name>j</name></type></parameter> )</parameter_list></cpp:macro>    <cpp:value>sub32( &amp;cur, A( j ), &amp;c );</cpp:value></cpp:define>

<comment type="block">/*
 * Helpers for the main 'loop'
 * (see fix_negative for the motivation of C)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name><parameter_list>( <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro>                                           \
    <cpp:value>int ret;                                                \
    signed char c = 0, cc;                                  \
    uint32_t cur;                                           \
    size_t i = 0, bits = b;                                 \
    mbedtls_mpi C;                                                  \
    mbedtls_mpi_uint Cp[ b / 8 / sizeof( mbedtls_mpi_uint) + 1 ];               \
                                                            \
    C.s = 1;                                                \
    C.n = b / 8 / sizeof( mbedtls_mpi_uint) + 1;                      \
    C.p = Cp;                                               \
    memset( Cp, 0, C.n * sizeof( mbedtls_mpi_uint ) );                \
                                                            \
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, b * 2 / 8 / sizeof( mbedtls_mpi_uint ) ) ); \
    LOAD32;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name></cpp:macro>                    \
    <cpp:value>STORE32; i++; LOAD32;       \
    cc = c; c = 0;              \
    if( cc &lt; 0 )                \
        sub32( &amp;cur, -cc, &amp;c ); \
    else                        \
        add32( &amp;cur, cc, &amp;c );  \

#define LAST                                    \
    STORE32; i++;                               \
    cur = c &gt; 0 ? c : 0; STORE32;               \
    cur = 0; while( ++i &lt; MAX32 ) { STORE32; }  \
    if( c &lt; 0 ) fix_negative( N, c, &amp;C, bits );</cpp:value></cpp:define>

<comment type="block">/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>fix_negative</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>signed</name> <name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>C</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="block">/* C = - c * 2^(bits + 32) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><name>bits</name> <operator>==</operator> <literal type="number">224</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name><name>C</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <operator>-</operator><name>c</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name><name>C</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* N = - ( C - N ) */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p224</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>INIT</name><argument_list>( <argument><expr><literal type="number">224</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>               <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A0 += -A7 - A11</comment>
    <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>               <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A1 += -A8 - A12</comment>
    <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>               <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A2 += -A9 - A13</comment>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>(  <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A3 += -A10 + A7 + A11</comment>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>(  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A4 += -A11 + A8 + A12</comment>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A5 += -A12 + A9 + A13</comment>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>               <expr_stmt><expr><name>LAST</name></expr>;</expr_stmt> <comment type="line">// A6 += -A13 + A10</comment>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p256</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>INIT</name><argument_list>( <argument><expr><literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD</name><argument_list>(  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>             <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A0</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>             <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A1</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                        <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A2</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                        <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A3</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                   <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A4</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                   <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A5</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>(  <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                   <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A6</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>             <expr_stmt><expr><name>LAST</name></expr>;</expr_stmt> <comment type="line">// A7</comment>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP384R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p384</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>INIT</name><argument_list>( <argument><expr><literal type="number">384</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A0</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                   <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A2</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                   <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A2</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                        <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A3</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                        <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A4</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A5</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A6</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A7</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A8</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A9</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>NEXT</name></expr>;</expr_stmt> <comment type="line">// A10</comment>

    <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ADD</name><argument_list>( <argument><expr><literal type="number">19</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SUB</name><argument_list>( <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>                                              <expr_stmt><expr><name>LAST</name></expr>;</expr_stmt> <comment type="line">// A11</comment>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP384R1_ENABLED */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INIT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NEXT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LAST</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224R1_ENABLED ||
          MBEDTLS_ECP_DP_SECP256R1_ENABLED ||
          MBEDTLS_ECP_DP_SECP384R1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP521R1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Here we have an actual Mersenne prime, so things are more straightforward.
 * However, chunks are aligned on a 'weird' boundary (521 bits).
 */</comment>

<comment type="block">/* Size of p521 in terms of mbedtls_mpi_uint */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P521_WIDTH</name></cpp:macro>      <cpp:value>( 521 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )</cpp:value></cpp:define>

<comment type="block">/* Bits to keep in the most significant mbedtls_mpi_uint */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P521_MASK</name></cpp:macro>       <cpp:value>0x01FF</cpp:value></cpp:define>

<comment type="block">/*
 * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)
 * Write N as A1 + 2^521 A0, return A0 + A1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p521</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>M</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>Mp</name><index>[<expr><name>P521_WIDTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="block">/* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:
     * we need to hold bits 513 to 1056, which is 34 limbs, that is
     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>P521_WIDTH</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* M = A1 */</comment>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <operator>(</operator> <name>P521_WIDTH</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>P521_WIDTH</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>P521_WIDTH</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>Mp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>P521_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><literal type="number">521</literal> <operator>%</operator> <operator>(</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* N = A0 */</comment>
    <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>P521_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name>P521_MASK</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>P521_WIDTH</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* N = A0 + A1 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_abs</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P521_WIDTH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P521_MASK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP521R1_ENABLED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_NIST_OPTIM */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_CURVE25519_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Size of p255 in terms of mbedtls_mpi_uint */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P255_WIDTH</name></cpp:macro>      <cpp:value>( 255 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )</cpp:value></cpp:define>

<comment type="block">/*
 * Fast quasi-reduction modulo p255 = 2^255 - 19
 * Write N as A0 + 2^255 A1, return A0 + 19 * A1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p255</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>M</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>Mp</name><index>[<expr><name>P255_WIDTH</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>P255_WIDTH</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* M = A1 */</comment>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <operator>(</operator> <name>P255_WIDTH</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>P255_WIDTH</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>P255_WIDTH</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>Mp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>Mp</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>P255_WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><literal type="number">255</literal> <operator>%</operator> <operator>(</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Make room for multiplication by 19 */</comment>

    <comment type="block">/* N = A0 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_set_bit</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>P255_WIDTH</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* N = A0 + 19 * A1 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_abs</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_CURVE25519_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo P = 2^s - R,
 * with R about 33 bits, used by the Koblitz curves.
 *
 * Write N as A0 + 2^224 A1, return A0 + R * A1.
 * Actually do two passes, since R is big.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_KOBLITZ_MAX</name></cpp:macro>   <cpp:value>( 256 / 8 / sizeof( mbedtls_mpi_uint ) )</cpp:value></cpp:define>  <comment type="line">// Max limbs in P</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P_KOBLITZ_R</name></cpp:macro>     <cpp:value>( 8 / sizeof( mbedtls_mpi_uint ) )</cpp:value></cpp:define>        <comment type="line">// Limbs in R</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ecp_mod_koblitz</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>Rp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>p_limbs</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>adjust</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>mask</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>M</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>Mp</name><index>[<expr><name>P_KOBLITZ_MAX</name> <operator>+</operator> <name>P_KOBLITZ_R</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>p_limbs</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Init R */</comment>
    <expr_stmt><expr><name><name>R</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>R</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>Rp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>R</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>P_KOBLITZ_R</name></expr>;</expr_stmt>

    <comment type="block">/* Common setup for M */</comment>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>Mp</name></expr>;</expr_stmt>

    <comment type="block">/* M = A1 */</comment>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <operator>(</operator> <name>p_limbs</name> <operator>-</operator> <name>adjust</name> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>p_limbs</name> <operator>+</operator> <name>adjust</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>p_limbs</name> <operator>+</operator> <name>adjust</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>Mp</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>p_limbs</name> <operator>-</operator> <name>adjust</name></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>shift</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>shift</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <name><name>R</name><operator>.</operator><name>n</name></name> <operator>-</operator> <name>adjust</name></expr>;</expr_stmt> <comment type="block">/* Make room for multiplication by R */</comment>

    <comment type="block">/* N = A0 */</comment>
    <if_stmt><if>if<condition>( <expr><name>mask</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>p_limbs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>p_limbs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* N = A0 + R * A1 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_abs</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Second pass */</comment>

    <comment type="block">/* M = A1 */</comment>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <operator>(</operator> <name>p_limbs</name> <operator>-</operator> <name>adjust</name> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>&gt;</operator> <name>p_limbs</name> <operator>+</operator> <name>adjust</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>p_limbs</name> <operator>+</operator> <name>adjust</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>Mp</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>p_limbs</name> <operator>-</operator> <name>adjust</name></expr></argument>, <argument><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>shift</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>shift</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>M</name><operator>.</operator><name>n</name></name> <operator>+=</operator> <name><name>R</name><operator>.</operator><name>n</name></name> <operator>-</operator> <name>adjust</name></expr>;</expr_stmt> <comment type="block">/* Make room for multiplication by R */</comment>

    <comment type="block">/* N = A0 */</comment>
    <if_stmt><if>if<condition>( <expr><name>mask</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>p_limbs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>p_limbs</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* N = A0 + R * A1 */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_abs</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||
          MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||
          MBEDTLS_ECP_DP_SECP256K1_ENABLED) */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP192K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo p192k1 = 2^192 - R,
 * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p192k1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>Rp</name><index>[]</index></name> <init>= <expr><block>{
        <macro><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><literal type="number">0xC9</literal></argument>, <argument><literal type="number">0x11</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x01</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument> )</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

    <return>return<expr><operator>(</operator> <call><name>ecp_mod_koblitz</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>Rp</name></expr></argument>, <argument><expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP192K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP224K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo p224k1 = 2^224 - R,
 * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p224k1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>Rp</name><index>[]</index></name> <init>= <expr><block>{
        <macro><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><literal type="number">0x93</literal></argument>, <argument><literal type="number">0x1A</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x01</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument> )</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_INT64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return<expr><operator>(</operator> <call><name>ecp_mod_koblitz</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>Rp</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return<expr><operator>(</operator> <call><name>ecp_mod_koblitz</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>Rp</name></expr></argument>, <argument><expr><literal type="number">224</literal> <operator>/</operator> <literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP224K1_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256K1_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecp_mod_p256k1</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>mbedtls_mpi_uint</name></type> <name><name>Rp</name><index>[]</index></name> <init>= <expr><block>{
        <macro><name>BYTES_TO_T_UINT_8</name><argument_list>( <argument><literal type="number">0xD1</literal></argument>, <argument><literal type="number">0x03</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x01</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument>, <argument><literal type="number">0x00</literal></argument> )</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
    <return>return<expr><operator>(</operator> <call><name>ecp_mod_koblitz</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><name>Rp</name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256K1_ENABLED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>
</unit>
