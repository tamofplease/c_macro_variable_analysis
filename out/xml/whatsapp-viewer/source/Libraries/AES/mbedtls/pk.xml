<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/pk.c"><comment type="block">/*
 *  Public Key abstraction layer
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pk_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsa.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecp.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecdsa.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Initialise a mbedtls_pk_context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_pk_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free (the components of) a mbedtls_pk_context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_pk_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>ctx_free_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_pk_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get pk_info structure from type
 */</comment>
<function><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name> <modifier>*</modifier></type> <name>mbedtls_pk_info_from_type</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name>pk_type</name></expr> )</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_PK_RSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <operator>&amp;</operator><name>mbedtls_rsa_info</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_PK_ECKEY</name></expr>:</case>
            <return>return<expr><operator>(</operator> <operator>&amp;</operator><name>mbedtls_eckey_info</name> <operator>)</operator></expr>;</return>
        <case>case <expr><name>MBEDTLS_PK_ECKEY_DH</name></expr>:</case>
            <return>return<expr><operator>(</operator> <operator>&amp;</operator><name>mbedtls_eckeydh_info</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_PK_ECDSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <operator>&amp;</operator><name>mbedtls_ecdsa_info</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="block">/* MBEDTLS_PK_RSA_ALT omitted on purpose */</comment>
        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Initialise context
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_setup</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>ctx_alloc_func</name></name><argument_list>()</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_RSA_ALT_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Initialize an RSA-alt context
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_setup_rsa_alt</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>,
                         <parameter><decl><type><name>mbedtls_pk_rsa_alt_decrypt_func</name></type> <name>decrypt_func</name></decl></parameter>,
                         <parameter><decl><type><name>mbedtls_pk_rsa_alt_sign_func</name></type> <name>sign_func</name></decl></parameter>,
                         <parameter><decl><type><name>mbedtls_pk_rsa_alt_key_len_func</name></type> <name>key_len_func</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_rsa_alt_context</name> <modifier>*</modifier></type><name>rsa_alt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name>mbedtls_rsa_alt_info</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name> <operator>=</operator> <call><name><name>info</name><operator>-&gt;</operator><name>ctx_alloc_func</name></name><argument_list>()</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rsa_alt</name> <operator>=</operator> <operator>(</operator><name>mbedtls_rsa_alt_context</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>decrypt_func</name></name> <operator>=</operator> <name>decrypt_func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>sign_func</name></name> <operator>=</operator> <name>sign_func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsa_alt</name><operator>-&gt;</operator><name>key_len_func</name></name> <operator>=</operator> <name>key_len_func</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_RSA_ALT_SUPPORT */</comment>

<comment type="block">/*
 * Tell if a PK can do the operations of the given type
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_can_do</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* null or NONE context can't do anything */</comment>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>can_do</name></name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper for mbedtls_pk_sign and mbedtls_pk_verify
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>pk_hashlen_helper</name><parameter_list>( <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>hash_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>hash_len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>hash_len</name> <operator>=</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Verify a signature
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <call><name>pk_hashlen_helper</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>verify_func</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>verify_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>,
                                       <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Verify a signature with options
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_verify_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
                   <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sig_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>MBEDTLS_PK_RSASSA_PSS</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS1_V21</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_rsassa_pss_options</name> <modifier>*</modifier></type><name>pss_opts</name></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>options</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>pss_opts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>mbedtls_pk_rsassa_pss_options</name> <operator>*</operator><operator>)</operator> <name>options</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>sig_len</name> <operator>&lt;</operator> <call><name>mbedtls_pk_get_len</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_RSA_VERIFY_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_rsa_rsassa_pss_verify_ext</name><argument_list>( <argument><expr><call><name>mbedtls_pk_rsa</name><argument_list>( <argument><expr><operator>*</operator><name>ctx</name></expr></argument> )</argument_list></call></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MBEDTLS_RSA_PUBLIC</name></expr></argument>,
                <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>hash_len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,
                <argument><expr><name><name>pss_opts</name><operator>-&gt;</operator><name>mgf1_hash_id</name></name></expr></argument>,
                <argument><expr><name><name>pss_opts</name><operator>-&gt;</operator><name>expected_salt_len</name></name></expr></argument>,
                <argument><expr><name>sig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>sig_len</name> <operator>&gt;</operator> <call><name>mbedtls_pk_get_len</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* General case: no options */</comment>
    <if_stmt><if>if<condition>( <expr><name>options</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_pk_verify</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Make a signature
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_sign</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hash_len</name></decl></parameter>,
             <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sig_len</name></decl></parameter>,
             <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <call><name>pk_hashlen_helper</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>sign_func</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>sign_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>,
                                     <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decrypt message
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_decrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>,
                <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>decrypt_func</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>decrypt_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>,
                <argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Encrypt message
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_encrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>osize</name></decl></parameter>,
                <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>encrypt_func</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>encrypt_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>,
                <argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>osize</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check public-private key pair
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_check_pair</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>prv</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pub</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pub</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>prv</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>prv</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>prv</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>check_pair_func</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>prv</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MBEDTLS_PK_RSA_ALT</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pub</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>MBEDTLS_PK_RSA</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pub</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>!=</operator> <name><name>prv</name><operator>-&gt;</operator><name>pk_info</name></name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>prv</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>check_pair_func</name></name><argument_list>( <argument><expr><name><name>pub</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument>, <argument><expr><name><name>prv</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get key size in bits
 */</comment>
<function><type><name>size_t</name></type> <name>mbedtls_pk_get_bitlen</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>get_bitlen</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Export debug information
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_pk_debug</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_pk_debug_item</name> <modifier>*</modifier></type><name>items</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>debug_func</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>debug_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pk_ctx</name></name></expr></argument>, <argument><expr><name>items</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Access the PK type name
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbedtls_pk_get_name</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="string">"invalid PK"</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Access the PK type
 */</comment>
<function><type><name>mbedtls_pk_type_t</name></type> <name>mbedtls_pk_get_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_NONE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pk_info</name><operator>-&gt;</operator><name>type</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_C */</comment>
</unit>
