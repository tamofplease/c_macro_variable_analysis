<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/asn1parse.c"><comment type="block">/*
 *  Generic ASN.1 parsing
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ASN1_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bignum.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * ASN.1 DER decoding routines
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_asn1_get_len</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <switch>switch<condition>( <expr><operator>*</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr> )</condition>
        <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
                   <operator>(</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
                   <operator>(</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>)</operator> <operator>|</operator>           <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_asn1_get_tag</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>tag</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_asn1_get_bool</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_BOOLEAN</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_asn1_get_int</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_INTEGER</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof> <operator>||</operator> <operator>(</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_asn1_get_mpi</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_INTEGER</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BIGNUM_C */</comment>

<function><type><name>int</name></type> <name>mbedtls_asn1_get_bitstring</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                        <parameter><decl><type><name>mbedtls_asn1_bitstring</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="block">/* Certificate type is a single byte bitstring */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bs</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_BIT_STRING</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Check length, subtract one for actual bit string length */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* Get number of unused bits, ensure unused bits &lt;= 7 */</comment>
    <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>unused_bits</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>unused_bits</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Get actual bitstring */</comment>
    <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>bs</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get a bit string without unused bits
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_asn1_get_bitstring_null</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_BIT_STRING</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>--</operator> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_INVALID_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 *  Parses and splits an ASN.1 "SEQUENCE OF &lt;tag&gt;"
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_asn1_get_sequence_of</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                          <parameter><decl><type><name>mbedtls_asn1_sequence</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

    <comment type="block">/* Get main sequence tag */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>+</operator> <name>len</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>cur</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

        <comment type="block">/* Allocate and assign next pointer */</comment>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>mbedtls_asn1_sequence</name><operator>*</operator><operator>)</operator><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,
                                            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_asn1_sequence</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Set final sequence entry's next pointer to NULL */</comment>
    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_asn1_get_alg</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>, <parameter><decl><type><name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>alg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OID</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>alg</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>alg</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>params</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_asn1_buf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>params</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_asn1_get_alg_null</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                       <parameter><decl><type><name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_buf</name></type> <name>params</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_asn1_buf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_alg</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>params</name><operator>.</operator><name>tag</name></name> <operator>!=</operator> <name>MBEDTLS_ASN1_NULL</name> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>tag</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator> <name><name>params</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_INVALID_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_asn1_free_named_data</name><parameter_list>( <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>cur</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>cur</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_asn1_named_data</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_asn1_free_named_data_list</name><parameter_list>( <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <while>while<condition>( <expr><operator>(</operator> <name>cur</name> <operator>=</operator> <operator>*</operator><name>head</name> <operator>)</operator> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_asn1_free_named_data</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>mbedtls_asn1_find_named_data</name><parameter_list>( <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <while>while<condition>( <expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>list</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>list</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <name>list</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ASN1_PARSE_C */</comment>
</unit>
