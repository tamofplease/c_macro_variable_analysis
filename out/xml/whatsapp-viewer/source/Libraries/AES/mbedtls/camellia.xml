<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/camellia.c"><comment type="block">/*
 *  Camellia implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The Camellia block cipher was designed by NTT and Mitsubishi Electric
 *  Corporation.
 *
 *  http://info.isl.ntt.co.jp/crypt/eng/camellia/dl/01espec.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"camellia.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * 32-bit integer manipulation macros (big endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ] &lt;&lt; 24 )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 3]       );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>SIGMA_CHARS</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x8b</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xb2</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xbe</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x1c</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x1d</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xfd</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_SMALL_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">112</literal></expr>,<expr><literal type="number">130</literal></expr>, <expr><literal type="number">44</literal></expr>,<expr><literal type="number">236</literal></expr>,<expr><literal type="number">179</literal></expr>, <expr><literal type="number">39</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">133</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">53</literal></expr>,<expr><literal type="number">234</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">174</literal></expr>, <expr><literal type="number">65</literal></expr>,
     <expr><literal type="number">35</literal></expr>,<expr><literal type="number">239</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">147</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">25</literal></expr>,<expr><literal type="number">165</literal></expr>, <expr><literal type="number">33</literal></expr>,<expr><literal type="number">237</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">29</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">146</literal></expr>,<expr><literal type="number">189</literal></expr>,
    <expr><literal type="number">134</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">175</literal></expr>,<expr><literal type="number">143</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">235</literal></expr>, <expr><literal type="number">31</literal></expr>,<expr><literal type="number">206</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">48</literal></expr>,<expr><literal type="number">220</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">94</literal></expr>,<expr><literal type="number">197</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">26</literal></expr>,
    <expr><literal type="number">166</literal></expr>,<expr><literal type="number">225</literal></expr>, <expr><literal type="number">57</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">213</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">61</literal></expr>,<expr><literal type="number">217</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">90</literal></expr>,<expr><literal type="number">214</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">86</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">77</literal></expr>,
    <expr><literal type="number">139</literal></expr>, <expr><literal type="number">13</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">251</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">176</literal></expr>, <expr><literal type="number">45</literal></expr>,<expr><literal type="number">116</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">32</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">153</literal></expr>,
    <expr><literal type="number">223</literal></expr>, <expr><literal type="number">76</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">194</literal></expr>, <expr><literal type="number">52</literal></expr>,<expr><literal type="number">126</literal></expr>,<expr><literal type="number">118</literal></expr>,  <expr><literal type="number">5</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">169</literal></expr>, <expr><literal type="number">49</literal></expr>,<expr><literal type="number">209</literal></expr>, <expr><literal type="number">23</literal></expr>,  <expr><literal type="number">4</literal></expr>,<expr><literal type="number">215</literal></expr>,
     <expr><literal type="number">20</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">97</literal></expr>,<expr><literal type="number">222</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">15</literal></expr>,<expr><literal type="number">156</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">24</literal></expr>,<expr><literal type="number">242</literal></expr>, <expr><literal type="number">34</literal></expr>,
    <expr><literal type="number">254</literal></expr>, <expr><literal type="number">68</literal></expr>,<expr><literal type="number">207</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">122</literal></expr>,<expr><literal type="number">145</literal></expr>, <expr><literal type="number">36</literal></expr>,  <expr><literal type="number">8</literal></expr>,<expr><literal type="number">232</literal></expr>,<expr><literal type="number">168</literal></expr>, <expr><literal type="number">96</literal></expr>,<expr><literal type="number">252</literal></expr>,<expr><literal type="number">105</literal></expr>, <expr><literal type="number">80</literal></expr>,
    <expr><literal type="number">170</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="number">125</literal></expr>,<expr><literal type="number">161</literal></expr>,<expr><literal type="number">137</literal></expr>, <expr><literal type="number">98</literal></expr>,<expr><literal type="number">151</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">30</literal></expr>,<expr><literal type="number">149</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">210</literal></expr>,
     <expr><literal type="number">16</literal></expr>,<expr><literal type="number">196</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">72</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">247</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">219</literal></expr>,<expr><literal type="number">138</literal></expr>,  <expr><literal type="number">3</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">218</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">63</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">148</literal></expr>,
    <expr><literal type="number">135</literal></expr>, <expr><literal type="number">92</literal></expr>,<expr><literal type="number">131</literal></expr>,  <expr><literal type="number">2</literal></expr>,<expr><literal type="number">205</literal></expr>, <expr><literal type="number">74</literal></expr>,<expr><literal type="number">144</literal></expr>, <expr><literal type="number">51</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">246</literal></expr>,<expr><literal type="number">243</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">191</literal></expr>,<expr><literal type="number">226</literal></expr>,
     <expr><literal type="number">82</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">216</literal></expr>, <expr><literal type="number">38</literal></expr>,<expr><literal type="number">200</literal></expr>, <expr><literal type="number">55</literal></expr>,<expr><literal type="number">198</literal></expr>, <expr><literal type="number">59</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">150</literal></expr>,<expr><literal type="number">111</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">19</literal></expr>,<expr><literal type="number">190</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">46</literal></expr>,
    <expr><literal type="number">233</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">159</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">142</literal></expr>, <expr><literal type="number">41</literal></expr>,<expr><literal type="number">245</literal></expr>,<expr><literal type="number">249</literal></expr>,<expr><literal type="number">182</literal></expr>, <expr><literal type="number">47</literal></expr>,<expr><literal type="number">253</literal></expr>,<expr><literal type="number">180</literal></expr>, <expr><literal type="number">89</literal></expr>,
    <expr><literal type="number">120</literal></expr>,<expr><literal type="number">152</literal></expr>,  <expr><literal type="number">6</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">231</literal></expr>, <expr><literal type="number">70</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">186</literal></expr>,<expr><literal type="number">212</literal></expr>, <expr><literal type="number">37</literal></expr>,<expr><literal type="number">171</literal></expr>, <expr><literal type="number">66</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">250</literal></expr>,
    <expr><literal type="number">114</literal></expr>,  <expr><literal type="number">7</literal></expr>,<expr><literal type="number">185</literal></expr>, <expr><literal type="number">85</literal></expr>,<expr><literal type="number">248</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">172</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">42</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">56</literal></expr>,<expr><literal type="number">241</literal></expr>,<expr><literal type="number">164</literal></expr>,
     <expr><literal type="number">64</literal></expr>, <expr><literal type="number">40</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="number">123</literal></expr>,<expr><literal type="number">187</literal></expr>,<expr><literal type="number">201</literal></expr>, <expr><literal type="number">67</literal></expr>,<expr><literal type="number">193</literal></expr>, <expr><literal type="number">21</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">199</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">158</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSb[(n)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned char)((FSb[(n)] &gt;&gt; 7 ^ FSb[(n)] &lt;&lt; 1) &amp; 0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(unsigned char)((FSb[(n)] &gt;&gt; 1 ^ FSb[(n)] &lt;&lt; 7) &amp; 0xff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSb[((n) &lt;&lt; 1 ^ (n) &gt;&gt; 7) &amp;0xff]</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_CAMELLIA_SMALL_MEMORY */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
 <expr><literal type="number">112</literal></expr>, <expr><literal type="number">130</literal></expr>,  <expr><literal type="number">44</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">179</literal></expr>,  <expr><literal type="number">39</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">87</literal></expr>,  <expr><literal type="number">53</literal></expr>, <expr><literal type="number">234</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">174</literal></expr>,  <expr><literal type="number">65</literal></expr>,
  <expr><literal type="number">35</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">147</literal></expr>,  <expr><literal type="number">69</literal></expr>,  <expr><literal type="number">25</literal></expr>, <expr><literal type="number">165</literal></expr>,  <expr><literal type="number">33</literal></expr>, <expr><literal type="number">237</literal></expr>,  <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">79</literal></expr>,  <expr><literal type="number">78</literal></expr>,  <expr><literal type="number">29</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">189</literal></expr>,
 <expr><literal type="number">134</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">235</literal></expr>,  <expr><literal type="number">31</literal></expr>, <expr><literal type="number">206</literal></expr>,  <expr><literal type="number">62</literal></expr>,  <expr><literal type="number">48</literal></expr>, <expr><literal type="number">220</literal></expr>,  <expr><literal type="number">95</literal></expr>,  <expr><literal type="number">94</literal></expr>, <expr><literal type="number">197</literal></expr>,  <expr><literal type="number">11</literal></expr>,  <expr><literal type="number">26</literal></expr>,
 <expr><literal type="number">166</literal></expr>, <expr><literal type="number">225</literal></expr>,  <expr><literal type="number">57</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">213</literal></expr>,  <expr><literal type="number">71</literal></expr>,  <expr><literal type="number">93</literal></expr>,  <expr><literal type="number">61</literal></expr>, <expr><literal type="number">217</literal></expr>,   <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">90</literal></expr>, <expr><literal type="number">214</literal></expr>,  <expr><literal type="number">81</literal></expr>,  <expr><literal type="number">86</literal></expr>, <expr><literal type="number">108</literal></expr>,  <expr><literal type="number">77</literal></expr>,
 <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">176</literal></expr>,  <expr><literal type="number">45</literal></expr>, <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">18</literal></expr>,  <expr><literal type="number">43</literal></expr>,  <expr><literal type="number">32</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">153</literal></expr>,
 <expr><literal type="number">223</literal></expr>,  <expr><literal type="number">76</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">194</literal></expr>,  <expr><literal type="number">52</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">118</literal></expr>,   <expr><literal type="number">5</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">49</literal></expr>, <expr><literal type="number">209</literal></expr>,  <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">4</literal></expr>, <expr><literal type="number">215</literal></expr>,
  <expr><literal type="number">20</literal></expr>,  <expr><literal type="number">88</literal></expr>,  <expr><literal type="number">58</literal></expr>,  <expr><literal type="number">97</literal></expr>, <expr><literal type="number">222</literal></expr>,  <expr><literal type="number">27</literal></expr>,  <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">50</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">83</literal></expr>,  <expr><literal type="number">24</literal></expr>, <expr><literal type="number">242</literal></expr>,  <expr><literal type="number">34</literal></expr>,
 <expr><literal type="number">254</literal></expr>,  <expr><literal type="number">68</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">145</literal></expr>,  <expr><literal type="number">36</literal></expr>,   <expr><literal type="number">8</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">96</literal></expr>, <expr><literal type="number">252</literal></expr>, <expr><literal type="number">105</literal></expr>,  <expr><literal type="number">80</literal></expr>,
 <expr><literal type="number">170</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">137</literal></expr>,  <expr><literal type="number">98</literal></expr>, <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">84</literal></expr>,  <expr><literal type="number">91</literal></expr>,  <expr><literal type="number">30</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">210</literal></expr>,
  <expr><literal type="number">16</literal></expr>, <expr><literal type="number">196</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">72</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">3</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">218</literal></expr>,   <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">63</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">148</literal></expr>,
 <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">92</literal></expr>, <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">2</literal></expr>, <expr><literal type="number">205</literal></expr>,  <expr><literal type="number">74</literal></expr>, <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">51</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">226</literal></expr>,
  <expr><literal type="number">82</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">216</literal></expr>,  <expr><literal type="number">38</literal></expr>, <expr><literal type="number">200</literal></expr>,  <expr><literal type="number">55</literal></expr>, <expr><literal type="number">198</literal></expr>,  <expr><literal type="number">59</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">75</literal></expr>,  <expr><literal type="number">19</literal></expr>, <expr><literal type="number">190</literal></expr>,  <expr><literal type="number">99</literal></expr>,  <expr><literal type="number">46</literal></expr>,
 <expr><literal type="number">233</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">142</literal></expr>,  <expr><literal type="number">41</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">47</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">180</literal></expr>,  <expr><literal type="number">89</literal></expr>,
 <expr><literal type="number">120</literal></expr>, <expr><literal type="number">152</literal></expr>,   <expr><literal type="number">6</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">231</literal></expr>,  <expr><literal type="number">70</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">212</literal></expr>,  <expr><literal type="number">37</literal></expr>, <expr><literal type="number">171</literal></expr>,  <expr><literal type="number">66</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">250</literal></expr>,
 <expr><literal type="number">114</literal></expr>,   <expr><literal type="number">7</literal></expr>, <expr><literal type="number">185</literal></expr>,  <expr><literal type="number">85</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">10</literal></expr>,  <expr><literal type="number">54</literal></expr>,  <expr><literal type="number">73</literal></expr>,  <expr><literal type="number">42</literal></expr>, <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">60</literal></expr>,  <expr><literal type="number">56</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">164</literal></expr>,
 <expr><literal type="number">64</literal></expr>,  <expr><literal type="number">40</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">201</literal></expr>,  <expr><literal type="number">67</literal></expr>, <expr><literal type="number">193</literal></expr>,  <expr><literal type="number">21</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">158</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
 <expr><literal type="number">224</literal></expr>,   <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">88</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">78</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">201</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">213</literal></expr>,  <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">93</literal></expr>, <expr><literal type="number">130</literal></expr>,
  <expr><literal type="number">70</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">214</literal></expr>,  <expr><literal type="number">39</literal></expr>, <expr><literal type="number">138</literal></expr>,  <expr><literal type="number">50</literal></expr>,  <expr><literal type="number">75</literal></expr>,  <expr><literal type="number">66</literal></expr>, <expr><literal type="number">219</literal></expr>,  <expr><literal type="number">28</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">58</literal></expr>, <expr><literal type="number">202</literal></expr>,  <expr><literal type="number">37</literal></expr>, <expr><literal type="number">123</literal></expr>,
  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">113</literal></expr>,  <expr><literal type="number">95</literal></expr>,  <expr><literal type="number">31</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">215</literal></expr>,  <expr><literal type="number">62</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">96</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">52</literal></expr>,
  <expr><literal type="number">77</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">2</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">216</literal></expr>, <expr><literal type="number">154</literal></expr>,
  <expr><literal type="number">23</literal></expr>,  <expr><literal type="number">26</literal></expr>,  <expr><literal type="number">53</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">153</literal></expr>,  <expr><literal type="number">97</literal></expr>,  <expr><literal type="number">90</literal></expr>, <expr><literal type="number">232</literal></expr>,  <expr><literal type="number">36</literal></expr>,  <expr><literal type="number">86</literal></expr>,  <expr><literal type="number">64</literal></expr>, <expr><literal type="number">225</literal></expr>,  <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">51</literal></expr>,
 <expr><literal type="number">191</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">252</literal></expr>, <expr><literal type="number">236</literal></expr>,  <expr><literal type="number">10</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">83</literal></expr>,  <expr><literal type="number">98</literal></expr>, <expr><literal type="number">163</literal></expr>,  <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">8</literal></expr>, <expr><literal type="number">175</literal></expr>,
  <expr><literal type="number">40</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">189</literal></expr>,  <expr><literal type="number">54</literal></expr>,  <expr><literal type="number">34</literal></expr>,  <expr><literal type="number">56</literal></expr>, <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">57</literal></expr>,  <expr><literal type="number">44</literal></expr>, <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">48</literal></expr>, <expr><literal type="number">229</literal></expr>,  <expr><literal type="number">68</literal></expr>,
 <expr><literal type="number">253</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">244</literal></expr>,  <expr><literal type="number">35</literal></expr>,  <expr><literal type="number">72</literal></expr>,  <expr><literal type="number">16</literal></expr>, <expr><literal type="number">209</literal></expr>,  <expr><literal type="number">81</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">160</literal></expr>,
  <expr><literal type="number">85</literal></expr>, <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">65</literal></expr>, <expr><literal type="number">250</literal></expr>,  <expr><literal type="number">67</literal></expr>,  <expr><literal type="number">19</literal></expr>, <expr><literal type="number">196</literal></expr>,  <expr><literal type="number">47</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">182</literal></expr>,  <expr><literal type="number">60</literal></expr>,  <expr><literal type="number">43</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">165</literal></expr>,
  <expr><literal type="number">32</literal></expr>, <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">144</literal></expr>,  <expr><literal type="number">71</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">6</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">181</literal></expr>,  <expr><literal type="number">18</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">41</literal></expr>,
  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">4</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">148</literal></expr>,  <expr><literal type="number">33</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">237</literal></expr>, <expr><literal type="number">231</literal></expr>,  <expr><literal type="number">59</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">197</literal></expr>,
 <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">55</literal></expr>, <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">76</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">118</literal></expr>,   <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">45</literal></expr>, <expr><literal type="number">222</literal></expr>, <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">38</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">198</literal></expr>,  <expr><literal type="number">92</literal></expr>,
 <expr><literal type="number">211</literal></expr>, <expr><literal type="number">242</literal></expr>,  <expr><literal type="number">79</literal></expr>,  <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">63</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">121</literal></expr>,  <expr><literal type="number">29</literal></expr>,  <expr><literal type="number">82</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">94</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">178</literal></expr>,
 <expr><literal type="number">240</literal></expr>,  <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">74</literal></expr>,  <expr><literal type="number">87</literal></expr>, <expr><literal type="number">132</literal></expr>,  <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">69</literal></expr>,  <expr><literal type="number">27</literal></expr>, <expr><literal type="number">245</literal></expr>,
 <expr><literal type="number">228</literal></expr>,  <expr><literal type="number">14</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">221</literal></expr>,  <expr><literal type="number">89</literal></expr>,  <expr><literal type="number">20</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">146</literal></expr>,  <expr><literal type="number">84</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">227</literal></expr>,  <expr><literal type="number">73</literal></expr>,
 <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">80</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">42</literal></expr>, <expr><literal type="number">199</literal></expr>,  <expr><literal type="number">91</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">61</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
  <expr><literal type="number">56</literal></expr>,  <expr><literal type="number">65</literal></expr>,  <expr><literal type="number">22</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">147</literal></expr>,  <expr><literal type="number">96</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">87</literal></expr>, <expr><literal type="number">160</literal></expr>,
 <expr><literal type="number">145</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">246</literal></expr>,   <expr><literal type="number">7</literal></expr>, <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">39</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">178</literal></expr>,  <expr><literal type="number">73</literal></expr>, <expr><literal type="number">222</literal></expr>,
  <expr><literal type="number">67</literal></expr>,  <expr><literal type="number">92</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">199</literal></expr>,  <expr><literal type="number">62</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">31</literal></expr>,  <expr><literal type="number">24</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">175</literal></expr>,  <expr><literal type="number">47</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">13</literal></expr>,
  <expr><literal type="number">83</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">128</literal></expr>,  <expr><literal type="number">45</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">43</literal></expr>,  <expr><literal type="number">54</literal></expr>, <expr><literal type="number">166</literal></expr>,
 <expr><literal type="number">197</literal></expr>, <expr><literal type="number">134</literal></expr>,  <expr><literal type="number">77</literal></expr>,  <expr><literal type="number">51</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">102</literal></expr>,  <expr><literal type="number">88</literal></expr>, <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">58</literal></expr>,   <expr><literal type="number">9</literal></expr>, <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">16</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">216</literal></expr>,  <expr><literal type="number">66</literal></expr>, <expr><literal type="number">204</literal></expr>,
 <expr><literal type="number">239</literal></expr>,  <expr><literal type="number">38</literal></expr>, <expr><literal type="number">229</literal></expr>,  <expr><literal type="number">97</literal></expr>,  <expr><literal type="number">26</literal></expr>,  <expr><literal type="number">63</literal></expr>,  <expr><literal type="number">59</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">139</literal></expr>,   <expr><literal type="number">2</literal></expr>, <expr><literal type="number">235</literal></expr>,
  <expr><literal type="number">10</literal></expr>,  <expr><literal type="number">44</literal></expr>,  <expr><literal type="number">29</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">136</literal></expr>,  <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">25</literal></expr>, <expr><literal type="number">135</literal></expr>,  <expr><literal type="number">78</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">169</literal></expr>,  <expr><literal type="number">12</literal></expr>, <expr><literal type="number">121</literal></expr>,  <expr><literal type="number">17</literal></expr>,
 <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">34</literal></expr>, <expr><literal type="number">231</literal></expr>,  <expr><literal type="number">89</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">218</literal></expr>,  <expr><literal type="number">61</literal></expr>, <expr><literal type="number">200</literal></expr>,  <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">4</literal></expr>, <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">84</literal></expr>,  <expr><literal type="number">48</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">180</literal></expr>,  <expr><literal type="number">40</literal></expr>,
  <expr><literal type="number">85</literal></expr>, <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">80</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">196</literal></expr>,  <expr><literal type="number">49</literal></expr>, <expr><literal type="number">203</literal></expr>,  <expr><literal type="number">42</literal></expr>, <expr><literal type="number">173</literal></expr>,  <expr><literal type="number">15</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">255</literal></expr>,  <expr><literal type="number">50</literal></expr>, <expr><literal type="number">105</literal></expr>,
   <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">98</literal></expr>,   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">36</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">237</literal></expr>,  <expr><literal type="number">69</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">238</literal></expr>,  <expr><literal type="number">74</literal></expr>,
 <expr><literal type="number">195</literal></expr>,  <expr><literal type="number">46</literal></expr>, <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">230</literal></expr>,  <expr><literal type="number">37</literal></expr>,  <expr><literal type="number">72</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">113</literal></expr>,
  <expr><literal type="number">41</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">108</literal></expr>,  <expr><literal type="number">19</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">99</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">192</literal></expr>,  <expr><literal type="number">75</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">137</literal></expr>,  <expr><literal type="number">95</literal></expr>, <expr><literal type="number">177</literal></expr>,  <expr><literal type="number">23</literal></expr>,
 <expr><literal type="number">244</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">211</literal></expr>,  <expr><literal type="number">70</literal></expr>, <expr><literal type="number">207</literal></expr>,  <expr><literal type="number">55</literal></expr>,  <expr><literal type="number">94</literal></expr>,  <expr><literal type="number">71</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">252</literal></expr>,  <expr><literal type="number">91</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">254</literal></expr>,  <expr><literal type="number">90</literal></expr>, <expr><literal type="number">172</literal></expr>,
  <expr><literal type="number">60</literal></expr>,  <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">53</literal></expr>, <expr><literal type="number">243</literal></expr>,  <expr><literal type="number">35</literal></expr>, <expr><literal type="number">184</literal></expr>,  <expr><literal type="number">93</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">213</literal></expr>,  <expr><literal type="number">33</literal></expr>,  <expr><literal type="number">68</literal></expr>,  <expr><literal type="number">81</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">125</literal></expr>,
  <expr><literal type="number">57</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">119</literal></expr>,  <expr><literal type="number">86</literal></expr>,   <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">27</literal></expr>, <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">21</literal></expr>,  <expr><literal type="number">52</literal></expr>,  <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">28</literal></expr>, <expr><literal type="number">248</literal></expr>,  <expr><literal type="number">82</literal></expr>,
  <expr><literal type="number">32</literal></expr>,  <expr><literal type="number">20</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">227</literal></expr>,  <expr><literal type="number">64</literal></expr>,  <expr><literal type="number">79</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb4</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
 <expr><literal type="number">112</literal></expr>,  <expr><literal type="number">44</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">228</literal></expr>,  <expr><literal type="number">87</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">174</literal></expr>,  <expr><literal type="number">35</literal></expr>, <expr><literal type="number">107</literal></expr>,  <expr><literal type="number">69</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">237</literal></expr>,  <expr><literal type="number">79</literal></expr>,  <expr><literal type="number">29</literal></expr>, <expr><literal type="number">146</literal></expr>,
 <expr><literal type="number">134</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">124</literal></expr>,  <expr><literal type="number">31</literal></expr>,  <expr><literal type="number">62</literal></expr>, <expr><literal type="number">220</literal></expr>,  <expr><literal type="number">94</literal></expr>,  <expr><literal type="number">11</literal></expr>, <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">57</literal></expr>, <expr><literal type="number">213</literal></expr>,  <expr><literal type="number">93</literal></expr>, <expr><literal type="number">217</literal></expr>,  <expr><literal type="number">90</literal></expr>,  <expr><literal type="number">81</literal></expr>, <expr><literal type="number">108</literal></expr>,
 <expr><literal type="number">139</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">116</literal></expr>,  <expr><literal type="number">43</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">203</literal></expr>,  <expr><literal type="number">52</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">209</literal></expr>,   <expr><literal type="number">4</literal></expr>,
  <expr><literal type="number">20</literal></expr>,  <expr><literal type="number">58</literal></expr>, <expr><literal type="number">222</literal></expr>,  <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">50</literal></expr>, <expr><literal type="number">156</literal></expr>,  <expr><literal type="number">83</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">207</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">122</literal></expr>,  <expr><literal type="number">36</literal></expr>, <expr><literal type="number">232</literal></expr>,  <expr><literal type="number">96</literal></expr>, <expr><literal type="number">105</literal></expr>,
 <expr><literal type="number">170</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">161</literal></expr>,  <expr><literal type="number">98</literal></expr>,  <expr><literal type="number">84</literal></expr>,  <expr><literal type="number">30</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">230</literal></expr>,   <expr><literal type="number">9</literal></expr>, <expr><literal type="number">221</literal></expr>,
 <expr><literal type="number">135</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">82</literal></expr>, <expr><literal type="number">216</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">111</literal></expr>,  <expr><literal type="number">19</literal></expr>,  <expr><literal type="number">99</literal></expr>,
 <expr><literal type="number">233</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">188</literal></expr>,  <expr><literal type="number">41</literal></expr>, <expr><literal type="number">249</literal></expr>,  <expr><literal type="number">47</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">6</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">141</literal></expr>,
 <expr><literal type="number">114</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">172</literal></expr>,  <expr><literal type="number">54</literal></expr>,  <expr><literal type="number">42</literal></expr>,  <expr><literal type="number">60</literal></expr>, <expr><literal type="number">241</literal></expr>,  <expr><literal type="number">64</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">187</literal></expr>,  <expr><literal type="number">67</literal></expr>,  <expr><literal type="number">21</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">128</literal></expr>,
 <expr><literal type="number">130</literal></expr>, <expr><literal type="number">236</literal></expr>,  <expr><literal type="number">39</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">133</literal></expr>,  <expr><literal type="number">53</literal></expr>,  <expr><literal type="number">12</literal></expr>,  <expr><literal type="number">65</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">147</literal></expr>,  <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">33</literal></expr>,  <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">78</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">189</literal></expr>,
 <expr><literal type="number">184</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">206</literal></expr>,  <expr><literal type="number">48</literal></expr>,  <expr><literal type="number">95</literal></expr>, <expr><literal type="number">197</literal></expr>,  <expr><literal type="number">26</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">202</literal></expr>,  <expr><literal type="number">71</literal></expr>,  <expr><literal type="number">61</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><literal type="number">214</literal></expr>,  <expr><literal type="number">86</literal></expr>,  <expr><literal type="number">77</literal></expr>,
  <expr><literal type="number">13</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">204</literal></expr>,  <expr><literal type="number">45</literal></expr>,  <expr><literal type="number">18</literal></expr>,  <expr><literal type="number">32</literal></expr>, <expr><literal type="number">177</literal></expr>, <expr><literal type="number">153</literal></expr>,  <expr><literal type="number">76</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">126</literal></expr>,   <expr><literal type="number">5</literal></expr>, <expr><literal type="number">183</literal></expr>,  <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">23</literal></expr>, <expr><literal type="number">215</literal></expr>,
  <expr><literal type="number">88</literal></expr>,  <expr><literal type="number">97</literal></expr>,  <expr><literal type="number">27</literal></expr>,  <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">34</literal></expr>,  <expr><literal type="number">68</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">145</literal></expr>,   <expr><literal type="number">8</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">252</literal></expr>,  <expr><literal type="number">80</literal></expr>,
 <expr><literal type="number">208</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">91</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">196</literal></expr>,  <expr><literal type="number">72</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">219</literal></expr>,   <expr><literal type="number">3</literal></expr>, <expr><literal type="number">218</literal></expr>,  <expr><literal type="number">63</literal></expr>, <expr><literal type="number">148</literal></expr>,
  <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">74</literal></expr>,  <expr><literal type="number">51</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">155</literal></expr>,  <expr><literal type="number">38</literal></expr>,  <expr><literal type="number">55</literal></expr>,  <expr><literal type="number">59</literal></expr>, <expr><literal type="number">150</literal></expr>,  <expr><literal type="number">75</literal></expr>, <expr><literal type="number">190</literal></expr>,  <expr><literal type="number">46</literal></expr>,
 <expr><literal type="number">121</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">253</literal></expr>,  <expr><literal type="number">89</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">106</literal></expr>,  <expr><literal type="number">70</literal></expr>, <expr><literal type="number">186</literal></expr>,  <expr><literal type="number">37</literal></expr>,  <expr><literal type="number">66</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">250</literal></expr>,
  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">85</literal></expr>, <expr><literal type="number">238</literal></expr>,  <expr><literal type="number">10</literal></expr>,  <expr><literal type="number">73</literal></expr>, <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">56</literal></expr>, <expr><literal type="number">164</literal></expr>,  <expr><literal type="number">40</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">158</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSb[(n)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX2</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSb2[(n)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX3</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSb3[(n)]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBOX4</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSb4[(n)]</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_SMALL_MEMORY */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shifts</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <comment type="block">/* KL */</comment>
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <comment type="block">/* KR */</comment>
        <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <comment type="block">/* KA */</comment>
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>  <comment type="block">/* KB */</comment>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <comment type="block">/* KL */</comment>
        <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <comment type="block">/* KR */</comment>
        <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <comment type="block">/* KA */</comment>
        <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>  <comment type="block">/* KB */</comment>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>,
          <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr> }</block></expr>, <comment type="block">/* KL -&gt; RK */</comment>
        <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
          <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <comment type="block">/* KR -&gt; RK */</comment>
        <expr><block>{  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
          <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, <comment type="block">/* KA -&gt; RK */</comment>
        <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
          <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>  <comment type="block">/* KB -&gt; RK */</comment>
    }</block></expr>,
    <expr><block>{
        <expr><block>{  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
          <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr>, <comment type="block">/* KL -&gt; RK */</comment>
        <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
          <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr> }</block></expr>, <comment type="block">/* KR -&gt; RK */</comment>
        <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>,
          <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <comment type="block">/* KA -&gt; RK */</comment>
        <expr><block>{  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>,
          <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>  <comment type="block">/* KB -&gt; RK */</comment>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>transposes</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">20</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
        <expr><literal type="number">11</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,
        <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">24</literal></expr>,
        <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>,
        <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Shift macro for 128 bit strings with rotation smaller than 32 bits (!) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL</name><parameter_list>(<parameter><type><name>DEST</name></type></parameter>, <parameter><type><name>SRC</name></type></parameter>, <parameter><type><name>SHIFT</name></type></parameter>)</parameter_list></cpp:macro>                                      \
<cpp:value>{                                                                   \
    (DEST)[0] = (SRC)[0] &lt;&lt; (SHIFT) ^ (SRC)[1] &gt;&gt; (32 - (SHIFT));   \
    (DEST)[1] = (SRC)[1] &lt;&lt; (SHIFT) ^ (SRC)[2] &gt;&gt; (32 - (SHIFT));   \
    (DEST)[2] = (SRC)[2] &lt;&lt; (SHIFT) ^ (SRC)[3] &gt;&gt; (32 - (SHIFT));   \
    (DEST)[3] = (SRC)[3] &lt;&lt; (SHIFT) ^ (SRC)[0] &gt;&gt; (32 - (SHIFT));   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FL</name><parameter_list>(<parameter><type><name>XL</name></type></parameter>, <parameter><type><name>XR</name></type></parameter>, <parameter><type><name>KL</name></type></parameter>, <parameter><type><name>KR</name></type></parameter>)</parameter_list></cpp:macro>                                          \
<cpp:value>{                                                                   \
    (XR) = ((((XL) &amp; (KL)) &lt;&lt; 1) | (((XL) &amp; (KL)) &gt;&gt; 31)) ^ (XR);   \
    (XL) = ((XR) | (KR)) ^ (XL);                                    \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLInv</name><parameter_list>(<parameter><type><name>YL</name></type></parameter>, <parameter><type><name>YR</name></type></parameter>, <parameter><type><name>KL</name></type></parameter>, <parameter><type><name>KR</name></type></parameter>)</parameter_list></cpp:macro>                                       \
<cpp:value>{                                                                   \
    (YL) = ((YR) | (KR)) ^ (YL);                                    \
    (YR) = ((((YL) &amp; (KL)) &lt;&lt; 1) | (((YL) &amp; (KL)) &gt;&gt; 31)) ^ (YR);   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_AND_PLACE</name><parameter_list>(<parameter><type><name>INDEX</name></type></parameter>, <parameter><type><name>OFFSET</name></type></parameter>)</parameter_list></cpp:macro>                      \
<cpp:value>{                                                           \
    TK[0] = KC[(OFFSET) * 4 + 0];                           \
    TK[1] = KC[(OFFSET) * 4 + 1];                           \
    TK[2] = KC[(OFFSET) * 4 + 2];                           \
    TK[3] = KC[(OFFSET) * 4 + 3];                           \
                                                            \
    for( i = 1; i &lt;= 4; i++ )                               \
        if( shifts[(INDEX)][(OFFSET)][i -1] )               \
            ROTL(TK + i * 4, TK, ( 15 * i ) % 32);          \
                                                            \
    for( i = 0; i &lt; 20; i++ )                               \
        if( indexes[(INDEX)][(OFFSET)][i] != -1 ) {         \
            RK[indexes[(INDEX)][(OFFSET)][i]] = TK[ i ];    \
        }                                                   \
}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>camellia_feistel</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,
                              <parameter><decl><type><name>uint32_t</name></type> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>I0</name></decl>, <decl><type ref="prev"/><name>I1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>I0</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>I1</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>I0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX1</name><argument_list>(<argument><expr><operator>(</operator><name>I0</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX2</name><argument_list>(<argument><expr><operator>(</operator><name>I0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX3</name><argument_list>(<argument><expr><operator>(</operator><name>I0</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX4</name><argument_list>(<argument><expr><operator>(</operator><name>I0</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call>      <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>I1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX2</name><argument_list>(<argument><expr><operator>(</operator><name>I1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX3</name><argument_list>(<argument><expr><operator>(</operator><name>I1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX4</name><argument_list>(<argument><expr><operator>(</operator><name>I1</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>SBOX1</name><argument_list>(<argument><expr><operator>(</operator><name>I1</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call>      <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>I0</name> <operator>^=</operator> <operator>(</operator><name>I1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>I1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>I1</name> <operator>^=</operator> <operator>(</operator><name>I0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>I0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>I0</name> <operator>^=</operator> <operator>(</operator><name>I1</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>I1</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>I1</name> <operator>^=</operator> <operator>(</operator><name>I0</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>I0</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>I1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>I0</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_camellia_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_camellia_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_camellia_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_camellia_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Camellia key schedule (encryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_setkey_enc</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>t</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>SIGMA</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>KC</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>TK</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>RK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <switch>switch<condition>( <expr><name>keybits</name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">128</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">192</literal></expr>:</case>
        <case>case <expr><literal type="number">256</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
        <default>default :</default> <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keybits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>keybits</name> <operator>==</operator> <literal type="number">192</literal></expr> )</condition> <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">24</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>t</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Prepare SIGMA values
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
        <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>SIGMA</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>SIGMA_CHARS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>SIGMA</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>SIGMA_CHARS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>KC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>KC</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Store KL, KR */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>KC</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* Generate KA */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>KC</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>KC</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>KC</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>KC</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>KC</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>keybits</name> <operator>&gt;</operator> <literal type="number">128</literal></expr> )</condition> <block>{<block_content>
        <comment type="block">/* Generate KB */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>KC</name><index>[<expr><literal type="number">12</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>KC</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>^</operator> <name><name>KC</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">14</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>KC</name> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Generating subkeys
     */</comment>

    <comment type="block">/* Manipulating KL */</comment>
    <expr_stmt><expr><call><name>SHIFT_AND_PLACE</name><argument_list>( <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Manipulating KR */</comment>
    <if_stmt><if>if<condition>( <expr><name>keybits</name> <operator>&gt;</operator> <literal type="number">128</literal></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SHIFT_AND_PLACE</name><argument_list>( <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Manipulating KA */</comment>
    <expr_stmt><expr><call><name>SHIFT_AND_PLACE</name><argument_list>( <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Manipulating KB */</comment>
    <if_stmt><if>if<condition>( <expr><name>keybits</name> <operator>&gt;</operator> <literal type="number">128</literal></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SHIFT_AND_PLACE</name><argument_list>( <argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Do transpositions */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>transposes</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">12</literal> <operator>*</operator> <name>idx</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><name><name>transposes</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Camellia key schedule (decryption)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_setkey_dec</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_camellia_context</name></type> <name>cty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>SK</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_camellia_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Also checks keybits */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_camellia_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cty</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>cty</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SK</name> <operator>=</operator> <name><name>cty</name><operator>.</operator><name>rk</name></name> <operator>+</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>idx</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">22</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>idx</name></expr><operator>,</operator> <expr><name>SK</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>SK</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>SK</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_camellia_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Camellia-ECB block encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>NR</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>, <decl><type ref="prev"/><name><name>X</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator> <operator>(</operator><name>void</name><operator>)</operator> <name>mode</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>NR</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>NR</name></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><name>NR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>RK</name></expr></argument>, <argument><expr><name>X</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>X</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RK</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>RK</name></expr></argument>, <argument><expr><name>X</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>X</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RK</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>RK</name></expr></argument>, <argument><expr><name>X</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>camellia_feistel</name><argument_list>( <argument><expr><name>X</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>RK</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>NR</name></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>FL</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>RK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>RK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FLInv</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>RK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>RK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>RK</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Camellia-CBC buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_crypt_cbc</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>length</name> <operator>%</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Camellia-CFB128 buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_crypt_cfb128</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>iv_off</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>iv_off</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CAMELLIA_ENCRYPT</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>input</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>c</name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CAMELLIA_ENCRYPT</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^</operator> <operator>*</operator><name>input</name><operator>++</operator> <operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>iv_off</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Camellia-CTR buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_crypt_ctr</name><parameter_list>( <parameter><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nc_off</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce_counter</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stream_block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>nc_off</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CAMELLIA_ENCRYPT</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>,
                                <argument><expr><name>stream_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>nonce_counter</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>input</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>c</name> <operator>^</operator> <name><name>stream_block</name><index>[<expr><name>n</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>nc_off</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_CAMELLIA_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * Camellia test vectors from:
 *
 * http://info.isl.ntt.co.jp/crypt/eng/camellia/technology.html:
 *   http://info.isl.ntt.co.jp/crypt/eng/camellia/dl/cryptrec/intermediate.txt
 *   http://info.isl.ntt.co.jp/crypt/eng/camellia/dl/cryptrec/t_camellia.txt
 *                      (For each bitlength: Key 0, Nr 39)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMELLIA_TESTS_ECB</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ecb_key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>CAMELLIA_TESTS_ECB</name></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
          <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
          <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
          <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
          <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
          <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ecb_plain</name><index>[<expr><name>CAMELLIA_TESTS_ECB</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
      <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ecb_cipher</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>CAMELLIA_TESTS_ECB</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
          <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x43</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xDE</literal></expr>,
          <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x31</literal></expr> }</block></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
          <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xb9</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,
          <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x64</literal></expr> }</block></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
          <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x09</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x7C</literal></expr>,
          <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x35</literal></expr> }</block></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAMELLIA_TESTS_CBC</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_cbc_key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
        <expr><block>{ <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xA6</literal></expr>,
          <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x3C</literal></expr> }</block></expr>
    ,
        <expr><block>{ <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x52</literal></expr>,
          <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
          <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x7B</literal></expr> }</block></expr>
    ,
        <expr><block>{ <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xBE</literal></expr>,
          <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
          <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
          <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xF4</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_cbc_iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr> }</block></expr></init></decl>
;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_cbc_plain</name><index>[<expr><name>CAMELLIA_TESTS_CBC</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
      <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x2A</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9C</literal></expr>,
      <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x51</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
      <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xEF</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_cbc_cipher</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>CAMELLIA_TESTS_CBC</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xF0</literal></expr>,
          <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xAB</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
          <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8B</literal></expr>,
          <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x54</literal></expr> }</block></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,
          <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x42</literal></expr>,
          <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xD5</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xD8</literal></expr>,
          <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x49</literal></expr> }</block></expr>
    }</block></expr>,
    <expr><block>{
        <expr><block>{ <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x4A</literal></expr>,
          <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xDA</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
          <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x50</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xCA</literal></expr>,
          <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Camellia-CTR test vectors from:
 *
 * http://www.faqs.org/rfcs/rfc5528.html
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ctr_key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xCC</literal></expr>,
      <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
      <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x63</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xA8</literal></expr>,
      <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ctr_nonce_counter</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x59</literal></expr>,
      <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
      <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ctr_pt</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">48</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
      <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x67</literal></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
      <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
      <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
      <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
      <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,
      <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>camellia_test_ctr_ct</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">48</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x9A</literal></expr>,
      <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x3F</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xD4</literal></expr>,
      <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
      <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xA7</literal></expr>,
      <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x48</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
      <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
      <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xF1</literal></expr>,
      <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xCD</literal></expr>,
      <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x96</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>camellia_test_ctr_len</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_camellia_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce_counter</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stream_block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>mbedtls_camellia_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CAMELLIA-ECB-%3d (%s): "</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument>,
                         <argument><expr><ternary><condition><expr><operator>(</operator><name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAMELLIA_TESTS_ECB</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>camellia_test_ecb_key</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>u</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_camellia_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>camellia_test_ecb_cipher</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>camellia_test_ecb_plain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* MBEDTLS_CAMELLIA_ENCRYPT */</comment>
            <expr_stmt><expr><call><name>mbedtls_camellia_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>camellia_test_ecb_plain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>camellia_test_ecb_cipher</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * CBC mode
     */</comment>
    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>j</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CAMELLIA-CBC-%3d (%s): "</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name>camellia_test_cbc_iv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>camellia_test_cbc_iv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>camellia_test_cbc_key</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>u</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_camellia_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_camellia_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CAMELLIA_TESTS_CBC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

            <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument> , <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>camellia_test_cbc_cipher</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>camellia_test_cbc_plain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* MBEDTLS_CAMELLIA_ENCRYPT */</comment>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument> , <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>camellia_test_cbc_plain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>camellia_test_cbc_cipher</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_camellia_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * CTR mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CAMELLIA-CTR-128 (%s): "</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name><name>camellia_test_ctr_nonce_counter</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>camellia_test_ctr_key</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_camellia_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_CAMELLIA_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>camellia_test_ctr_len</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>camellia_test_ctr_ct</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ctr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument>,
                                <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>camellia_test_ctr_pt</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>camellia_test_ctr_len</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>camellia_test_ctr_pt</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_camellia_crypt_ctr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument>,
                                <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>camellia_test_ctr_ct</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>
</unit>
