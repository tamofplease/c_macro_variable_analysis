<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ssl_tls.c"><comment type="block">/*
 *  SSLv3/TLSv1 shared functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The SSL 3.0 specification was drafted by Netscape in 1996,
 *  and became an IETF standard in 1999.
 *
 *  http://wp.netscape.com/eng/ssl3/
 *  http://www.ietf.org/rfc/rfc2246.txt
 *  http://www.ietf.org/rfc/rfc4346.txt
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TLS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>      <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* Length of the "epoch" field in the record header */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>ssl_ep_len</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_set_timer</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>millisecs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_set_timer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"set_timer to %d ms"</literal><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>millisecs</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>f_set_timer</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_timer</name></name></expr></argument>, <argument><expr><name>millisecs</name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>millisecs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return -1 is timer is expired, 0 if it isn't.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_check_timer</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_get_timer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name><name>ssl</name><operator>-&gt;</operator><name>f_get_timer</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_timer</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"timer expired"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Double the retransmit timeout value, within the allowed range,
 * returning -1 if the maximum value has already been reached.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_double_retransmit_timeout</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>new_timeout</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name> <operator>&gt;=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>hs_timeout_max</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>new_timeout</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name></expr>;</expr_stmt>

    <comment type="block">/* Avoid arithmetic overflow and range overflow */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>new_timeout</name> <argument_list type="generic">&lt; <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name> <operator>||</operator>
        <name>new_timeout</name></expr></argument> &gt;</argument_list></name> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>hs_timeout_max</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>new_timeout</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>hs_timeout_max</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name> <operator>=</operator> <name>new_timeout</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"update timeout value to %d millisecs"</literal><operator>,</operator>
                        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_reset_retransmit_timeout</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>hs_timeout_min</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"update timeout value to %d millisecs"</literal><operator>,</operator>
                        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Convert max_fragment_length codes to length.
 * RFC 6066 says:
 *    enum{
 *        2^9(1), 2^10(2), 2^11(3), 2^12(4), (255)
 *    } MaxFragmentLength;
 * and we add 0 -&gt; extension unused
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name><name>mfl_code_to_length</name><index>[<expr><name>MBEDTLS_SSL_MAX_FRAG_LEN_INVALID</name></expr>]</index></name> <init>=
<expr><block>{
    <expr><name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr>,    <comment type="block">/* MBEDTLS_SSL_MAX_FRAG_LEN_NONE */</comment>
    <expr><literal type="number">512</literal></expr>,                    <comment type="block">/* MBEDTLS_SSL_MAX_FRAG_LEN_512  */</comment>
    <expr><literal type="number">1024</literal></expr>,                   <comment type="block">/* MBEDTLS_SSL_MAX_FRAG_LEN_1024 */</comment>
    <expr><literal type="number">2048</literal></expr>,                   <comment type="block">/* MBEDTLS_SSL_MAX_FRAG_LEN_2048 */</comment>
    <expr><literal type="number">4096</literal></expr>,                   <comment type="block">/* MBEDTLS_SSL_MAX_FRAG_LEN_4096 */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_session_copy</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name>dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>src</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509_crt</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>dst</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_der</name><argument_list>( <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                                        <argument><expr><name><name>src</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>src</name><operator>-&gt;</operator><name>ticket</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ticket</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ticket_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>dst</name><operator>-&gt;</operator><name>ticket</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ticket_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS &amp;&amp; MBEDTLS_SSL_CLI_C */</comment>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_ssl_hw_record_init</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_dec</name></decl></parameter>,
                     <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv_enc</name></decl></parameter>,  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv_dec</name></decl></parameter>,
                     <parameter><decl><type><name>size_t</name></type> <name>ivlen</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac_enc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac_dec</name></decl></parameter>,
                     <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter> )</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_ssl_hw_record_activate</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_ssl_hw_record_reset</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_ssl_hw_record_write</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_ssl_hw_record_read</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_ssl_hw_record_finish</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_HW_RECORD_ACCEL */</comment>

<comment type="block">/*
 * Key material generation
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl3_prf</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>random</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padding</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha1sum</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator><name>label</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     *  SSLv3:
     *    block =
     *      MD5( secret + SHA1( 'A'    + secret + random ) ) +
     *      MD5( secret + SHA1( 'BB'   + secret + random ) ) +
     *      MD5( secret + SHA1( 'CCC'  + secret + random ) ) +
     *      ...
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name> <operator>/</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>padding</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>sha1sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>sha1sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>dstbuf</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>padding</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>padding</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>sha1sum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sha1sum</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tls1_prf</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>random</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nb</name></decl>, <decl><type ref="prev"/><name>hs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>S1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>h_i</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>md_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><sizeof>sizeof<argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></sizeof> <operator>&lt;</operator> <literal type="number">20</literal> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>label</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>rlen</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>hs</name> <operator>=</operator> <operator>(</operator> <name>slen</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>S1</name> <operator>=</operator> <name>secret</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>S2</name> <operator>=</operator> <name>secret</name> <operator>+</operator> <name>slen</name> <operator>-</operator> <name>hs</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>label</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">20</literal> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>

    <comment type="block">/*
     * First compute P_md5(secret,label+random)[0..dlen]
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>MBEDTLS_MD_MD5</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>S1</name></expr></argument>, <argument><expr><name>hs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>h_i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name>dlen</name> <operator>)</operator></expr> ?</condition><then> <expr><name>dlen</name> <operator>%</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>dstbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name>  <operator>=</operator> <name><name>h_i</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * XOR out with P_sha1(secret,label+random)[0..dlen]
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>S2</name></expr></argument>, <argument><expr><name>hs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">20</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">20</literal> <operator>+</operator> <name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>h_i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>+</operator> <literal type="number">20</literal> <operator>&gt;</operator> <name>dlen</name> <operator>)</operator></expr> ?</condition><then> <expr><name>dlen</name> <operator>%</operator> <literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>dstbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>dstbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>^</operator> <name><name>h_i</name><index>[<expr><name>j</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>h_i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>h_i</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1) || MBEDTLS_SSL_PROTO_TLS1_1 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_prf_generic</name><parameter_list>( <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_type</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>random</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>md_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>h_i</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>md_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_type</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>md_len</name> <operator>=</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><sizeof>sizeof<argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></sizeof> <operator>&lt;</operator> <name>md_len</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>label</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>rlen</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>label</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name> <operator>+</operator> <name>md_len</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name> <operator>+</operator> <name>md_len</name> <operator>+</operator> <name>nb</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nb</name> <operator>+=</operator> <name>rlen</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Compute P_&lt;hash&gt;(secret, label + random)[0..dlen]
     */</comment>
    <if_stmt><if>if <condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>md_len</name></expr></argument>, <argument><expr><name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>md_len</name></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>md_len</name> <operator>+</operator> <name>nb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>h_i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>md_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>+</operator> <name>md_len</name> <operator>&gt;</operator> <name>dlen</name> <operator>)</operator></expr> ?</condition><then> <expr><name>dlen</name> <operator>%</operator> <name>md_len</name></expr> </then><else>: <expr><name>md_len</name></expr></else></ternary></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>dstbuf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name>  <operator>=</operator> <name><name>h_i</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>h_i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>h_i</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_prf_sha256</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>random</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>tls_prf_generic</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>,
                             <argument><expr><name>label</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>, <argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tls_prf_sha384</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>random</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>rlen</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dstbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>tls_prf_generic</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA384</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>,
                             <argument><expr><name>label</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>, <argument><expr><name>dstbuf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_start</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_md5sha1</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_verify_ssl</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_ssl</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_verify_tls</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_tls</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_sha256</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_verify_tls_sha256</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_tls_sha256</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_sha384</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_verify_tls_sha384</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_tls_sha384</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<function><type><name>int</name></type> <name>mbedtls_ssl_derive_keys</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>keyblk</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac_enc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac_dec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>iv_copy_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_transform</name> <modifier>*</modifier></type><name>transform</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_handshake_params</name> <modifier>*</modifier></type><name>handshake</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; derive keys"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"cipher info for %d not found"</literal><operator>,</operator>
                            <name><name>transform</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>cipher</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>md_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_md info for %d not found"</literal><operator>,</operator>
                            <name><name>transform</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Set appropriate PRF function and other SSL / TLS / TLS1.2 functions
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name> <operator>=</operator> <name>ssl3_prf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_ssl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_finished</name></name> <operator>=</operator> <name>ssl_calc_finished_ssl</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name> <operator>=</operator> <name>tls1_prf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_finished</name></name> <operator>=</operator> <name>ssl_calc_finished_tls</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name> <operator>&amp;&amp;</operator>
        <name><name>transform</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name> <operator>==</operator> <name>MBEDTLS_MD_SHA384</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name> <operator>=</operator> <name>tls_prf_sha384</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls_sha384</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_finished</name></name> <operator>=</operator> <name>ssl_calc_finished_tls_sha384</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name> <operator>=</operator> <name>tls_prf_sha256</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls_sha256</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>calc_finished</name></name> <operator>=</operator> <name>ssl_calc_finished_tls_sha256</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * SSLv3:
     *   master =
     *     MD5( premaster + SHA1( 'A'   + premaster + randbytes ) ) +
     *     MD5( premaster + SHA1( 'BB'  + premaster + randbytes ) ) +
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"premaster secret"</literal></expr></argument>, <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>,
                       <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>==</operator> <name>MBEDTLS_SSL_EXTENDED_MS_ENABLED</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>session_hash</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>hash_len</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"using extended master secret"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>session_hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
            <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name> <operator>==</operator>
                    <name>MBEDTLS_MD_SHA384</name></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>hash_len</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><name>hash_len</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
                <expr_stmt><expr><name>hash_len</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"session hash"</literal></expr></argument>, <argument><expr><name>session_hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>, <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                                      <argument><expr><literal type="string">"extended master secret"</literal></expr></argument>,
                                      <argument><expr><name>session_hash</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>,
                                      <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"prf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>, <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                                  <argument><expr><literal type="string">"master secret"</literal></expr></argument>,
                                  <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
                                  <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"prf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no premaster (session resumed)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Swap the client and server random values.
     */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     *  SSLv3:
     *    key block =
     *      MD5( master + SHA1( 'A'    + master + randbytes ) ) +
     *      MD5( master + SHA1( 'BB'   + master + randbytes ) ) +
     *      MD5( master + SHA1( 'CCC'  + master + randbytes ) ) +
     *      MD5( master + SHA1( 'DDDD' + master + randbytes ) ) +
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="string">"key expansion"</literal></expr></argument>,
                              <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>keyblk</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"prf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite = %s"</literal><operator>,</operator>
                   <call><name>mbedtls_ssl_get_ciphersuite_name</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>ciphersuite</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"master secret"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"random bytes"</literal></expr></argument>, <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"key block"</literal></expr></argument>, <argument><expr><name>keyblk</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Determine the appropriate key, IV and MAC length.
     */</comment>

    <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>key_bitlen</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_GCM</name> <operator>||</operator>
        <name><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_CCM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>fixed_ivlen</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <comment type="block">/* Minimum length is expicit IV + tag */</comment>
        <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name> <operator>=</operator> <name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator> <name><name>transform</name><operator>-&gt;</operator><name>fixed_ivlen</name></name>
                            <operator>+</operator> <operator>(</operator> <ternary><condition><expr><name><name>transform</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator>
                                <name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Initialize HMAC contexts */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_md_setup"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Get MAC length */</comment>
        <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>=</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * If HMAC is to be truncated, we shall keep the leftmost bytes,
         * (rfc 6066 page 13 or rfc 2104 section 4),
         * so we only need to adjust the length here.
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_ENABLED</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>=</operator> <name>MBEDTLS_SSL_TRUNCATED_HMAC_LEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

        <comment type="block">/* IV length */</comment>
        <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>=</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>iv_size</name></name></expr>;</expr_stmt>

        <comment type="block">/* Minimum length */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_STREAM</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name> <operator>=</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/*
             * GenericBlockCipher:
             * 1. if EtM is in use: one block plus MAC
             *    otherwise: * first multiple of blocklen greater than maclen
             * 2. IV except for SSL3 and TLS 1.0
             */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ETM_ENABLED</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name> <operator>=</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name>
                                  <operator>+</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <block>{<block_content>
                <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name> <operator>=</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name>
                                  <operator>+</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name>
                                  <operator>-</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>%</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>||</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr> )</condition><block type="pseudo"><block_content>
                <empty_stmt>;</empty_stmt></block_content></block></if> <comment type="block">/* No need to adjust minlen */</comment>
            <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
            if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name> <operator>||</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name> <operator>+=</operator> <name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"keylen: %d, minlen: %d, ivlen: %d, maclen: %d"</literal><operator>,</operator>
                   <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name><operator>,</operator> <name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name><operator>,</operator> <name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name><operator>,</operator>
                   <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>key1</name> <operator>=</operator> <name>keyblk</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>key2</name> <operator>=</operator> <name>keyblk</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>mac_enc</name> <operator>=</operator> <name>keyblk</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mac_dec</name> <operator>=</operator> <name>keyblk</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>

        <comment type="block">/*
         * This is not used in TLS v1.1.
         */</comment>
        <expr_stmt><expr><name>iv_copy_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>transform</name><operator>-&gt;</operator><name>fixed_ivlen</name></name> <operator>)</operator></expr> ?</condition><then>
                            <expr><name><name>transform</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr> </then><else>: <expr><name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>, <argument><expr><name>key2</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>,  <argument><expr><name>iv_copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>, <argument><expr><name>key2</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name> <operator>+</operator> <name>iv_copy_len</name></expr></argument>,
                <argument><expr><name>iv_copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>key1</name> <operator>=</operator> <name>keyblk</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>key2</name> <operator>=</operator> <name>keyblk</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>mac_enc</name> <operator>=</operator> <name>keyblk</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mac_dec</name> <operator>=</operator> <name>keyblk</name></expr>;</expr_stmt>

        <comment type="block">/*
         * This is not used in TLS v1.1.
         */</comment>
        <expr_stmt><expr><name>iv_copy_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>transform</name><operator>-&gt;</operator><name>fixed_ivlen</name></name> <operator>)</operator></expr> ?</condition><then>
                            <expr><name><name>transform</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr> </then><else>: <expr><name><name>transform</name><operator>-&gt;</operator><name>ivlen</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>, <argument><expr><name>key1</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>,  <argument><expr><name>iv_copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>, <argument><expr><name>key1</name> <operator>+</operator> <name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name> <operator>+</operator> <name>iv_copy_len</name></expr></argument>,
                <argument><expr><name>iv_copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name> <operator>&gt;</operator> <sizeof>sizeof <name><name>transform</name><operator>-&gt;</operator><name>mac_enc</name></name></sizeof></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>mac_enc</name></name></expr></argument>, <argument><expr><name>mac_enc</name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>mac_dec</name></name></expr></argument>, <argument><expr><name>mac_dec</name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>, <argument><expr><name>mac_enc</name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name>mac_dec</name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_init</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"going for mbedtls_ssl_hw_record_init()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_init</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>,
                                        <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>,
                                        <argument><expr><name>iv_copy_len</name></expr></argument>,
                                        <argument><expr><name>mac_enc</name></expr></argument>, <argument><expr><name>mac_dec</name></expr></argument>,
                                        <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_init"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_HW_RECORD_ACCEL */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXPORT_KEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_export_keys</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_export_keys</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_export_keys</name></name></expr></argument>,
                                  <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><name>keyblk</name></expr></argument>,
                                  <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument>, <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>keylen</name></name></expr></argument>,
                                  <argument><expr><name>iv_copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument>,
                                 <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_setup"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument>,
                                 <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_setup"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument>, <argument><expr><name>key1</name></expr></argument>,
                               <argument><expr><name><name>cipher_info</name><operator>-&gt;</operator><name>key_bitlen</name></name></expr></argument>,
                               <argument><expr><name>MBEDTLS_ENCRYPT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_setkey"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument>, <argument><expr><name>key2</name></expr></argument>,
                               <argument><expr><name><name>cipher_info</name><operator>-&gt;</operator><name>key_bitlen</name></name></expr></argument>,
                               <argument><expr><name>MBEDTLS_DECRYPT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_setkey"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_CBC</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_set_padding_mode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument>,
                                             <argument><expr><name>MBEDTLS_PADDING_NONE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_set_padding_mode"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_set_padding_mode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument>,
                                             <argument><expr><name>MBEDTLS_PADDING_NONE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_set_padding_mode"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>keyblk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>keyblk</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// Initialize compression</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Allocating compression buffer"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc(%d bytes) failed"</literal><operator>,</operator>
                                    <name>MBEDTLS_SSL_BUFFER_LEN</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Initializing zlib states"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>ctx_deflate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>ctx_deflate</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>ctx_inflate</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>transform</name><operator>-&gt;</operator><name>ctx_inflate</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>deflateInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>ctx_deflate</name></name></expr></argument>,
                         <argument><expr><name>Z_DEFAULT_COMPRESSION</name></expr></argument> )</argument_list></call>   <operator>!=</operator> <name>Z_OK</name> <operator>||</operator>
            <call><name>inflateInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>ctx_inflate</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Failed to initialize compression"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COMPRESSION_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ZLIB_SUPPORT */</comment>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= derive keys"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>ssl_calc_verify_ssl</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad_1</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad_2</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc verify ssl"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>pad_1</name></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>pad_2</name></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>pad_1</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>pad_2</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,  <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>pad_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>pad_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calculated verify result"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>ssl_calc_verify_tls</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc verify tls"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

     <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>,  <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calculated verify result"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>ssl_calc_verify_tls_sha256</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_sha256_context</name></type> <name>sha256</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc verify sha256"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calculated verify result"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>ssl_calc_verify_tls_sha384</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_sha512_context</name></type> <name>sha512</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc verify sha384"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha512_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calculated verify result"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_psk_derive_premaster</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>mbedtls_key_exchange_type_t</name></type> <name>key_ex</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psk</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>psk_len</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If the psk callback was called, use its result */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>psk</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>psk_len</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk_len</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * PMS = struct {
     *     opaque other_secret&lt;0..2^16-1&gt;;
     *     opaque psk&lt;0..2^16-1&gt;;
     * };
     * with "other_secret" depending on the particular key exchange
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>key_ex</name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>psk_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>psk_len</name>      <operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>psk_len</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psk_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>psk_len</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name>key_ex</name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * other_secret already set by the ClientKeyExchange message,
         * and is 48 bytes long
         */</comment>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">48</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name>key_ex</name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

        <comment type="block">/* Write length only when we know the actual value */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_calc_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>,
                                      <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_calc_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: K "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>K</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name>key_ex</name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zlen</name></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_calc_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zlen</name></expr></argument>,
                                       <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument>,
                                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_calc_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>zlen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>zlen</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>zlen</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>z</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* opaque psk&lt;0..2^16-1&gt;; */</comment>
    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>psk_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>psk_len</name>      <operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>psk_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psk</name></expr></argument>, <argument><expr><name>psk_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>psk_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * SSLv3.0 MAC functions
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_mac</name><parameter_list>( <parameter><decl><type><name>mbedtls_md_context_t</name> <modifier>*</modifier></type><name>md_ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>header</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padding</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>padlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>md_size</name> <init>= <expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name><name>md_ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>md_type</name> <init>= <expr><call><name>mbedtls_md_get_type</name><argument_list>( <argument><expr><name><name>md_ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Only MD5 and SHA-1 supported */</comment>
    <if_stmt><if>if<condition>( <expr><name>md_type</name> <operator>==</operator> <name>MBEDTLS_MD_MD5</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>header</name></expr></argument>, <argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator>  <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>header</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name>      <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><name>padlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_starts</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>,  <argument><expr><name>md_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><name>padlen</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,  <argument><expr><literal type="number">11</literal></expr></argument>      )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,     <argument><expr><name>len</name></expr></argument>     )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_finish</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator>    <name>len</name></expr></argument>     )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><name>padlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_starts</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>,    <argument><expr><name>md_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>,   <argument><expr><name>padlen</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>md_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_finish</name><argument_list>( <argument><expr><name>md_ctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>          )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call> <operator>||</operator>     \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                                  \
      <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_SOME_MODES_USE_MAC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Encryption/decryption functions
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_encrypt_buf</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_cipher_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>auth_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; encrypt buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_out</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>mbedtls_cipher_get_cipher_mode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"before encrypt: output payload"</literal></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Add MAC before if needed
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_SOME_MODES_USE_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_STREAM</name> <operator>||</operator>
        <operator>(</operator> <name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_CBC</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
          <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_out</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ETM_DISABLED</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <operator>)</operator></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ssl_mac</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>mac_enc</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
        <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"computed mac"</literal></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>auth_done</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AEAD not the only option */</comment>

    <comment type="block">/*
     * Encrypt
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_STREAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"before encrypt: msglen = %d, "</literal>
                            <literal type="string">"including %d bytes of padding"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name><operator>,</operator> <literal type="number">0</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_crypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_crypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>!=</operator> <name>olen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_GCM</name> <operator>||</operator>
        <name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_CCM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>enc_msglen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc_msg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>add_data</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>taglen</name> <init>= <expr><ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator>
                               <name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>add_data</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>add_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>  <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                           <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>add_data</name> <operator>+</operator> <literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>add_data</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>add_data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"additional data used for AEAD"</literal></expr></argument>,
                       <argument><expr><name>add_data</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Generate IV
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>fixed_ivlen</name></name> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* Reminder if we ever add an AEAD mode with a different size */</comment>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"IV used"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Fix pointer positions and message length with added IV
         */</comment>
        <expr_stmt><expr><name>enc_msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>enc_msglen</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator>
                           <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"before encrypt: msglen = %d, "</literal>
                            <literal type="string">"including %d bytes of padding"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name><operator>,</operator> <literal type="number">0</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Encrypt and authenticate
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_auth_encrypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument>,
                                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>,
                                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>,
                                         <argument><expr><name>add_data</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,
                                         <argument><expr><name>enc_msg</name></expr></argument>, <argument><expr><name>enc_msglen</name></expr></argument>,
                                         <argument><expr><name>enc_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>,
                                         <argument><expr><name>enc_msg</name> <operator>+</operator> <name>enc_msglen</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_auth_encrypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>olen</name> <operator>!=</operator> <name>enc_msglen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <name>taglen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>auth_done</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"after encrypt: tag"</literal></expr></argument>, <argument><expr><name>enc_msg</name> <operator>+</operator> <name>enc_msglen</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C || MBEDTLS_CCM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                                    \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
    if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_CBC</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc_msg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>enc_msglen</name></decl>, <decl><type ref="prev"/><name>padlen</name></decl>, <decl><type ref="prev"/><name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator>
                 <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>padlen</name> <operator>==</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>padlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>padlen</name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <name>padlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>enc_msglen</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>enc_msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Generate IV
             */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>,
                                  <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * Fix pointer positions and message length with added IV
             */</comment>
            <expr_stmt><expr><name>enc_msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>enc_msglen</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"before encrypt: msglen = %d, "</literal>
                            <literal type="string">"including %d bytes of IV and %d bytes of padding"</literal><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name><operator>,</operator>
                            <name>padlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_crypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>,
                                   <argument><expr><name>enc_msg</name></expr></argument>, <argument><expr><name>enc_msglen</name></expr></argument>,
                                   <argument><expr><name>enc_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_crypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>enc_msglen</name> <operator>!=</operator> <name>olen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Save IV in SSL3 and TLS1
             */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>iv_enc</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>cipher_ctx_enc</name><operator>.</operator><name>iv</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>auth_done</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * MAC(MAC_write_key, seq_num +
             *     TLSCipherText.type +
             *     TLSCipherText.version +
             *     length_of( (IV +) ENC(...) ) +
             *     IV + // except for TLS 1.0
             *     ENC(content + padding + padding_length));
             */</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pseudo_hdr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"using encrypt then mac"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pseudo_hdr</name> <operator>+</operator>  <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pseudo_hdr</name> <operator>+</operator>  <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pseudo_hdr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pseudo_hdr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"MAC'd meta-data"</literal></expr></argument>, <argument><expr><name>pseudo_hdr</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>, <argument><expr><name>pseudo_hdr</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>auth_done</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC &amp;&amp;
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Make extra sure authentication was performed, exactly once */</comment>
    <if_stmt><if>if<condition>( <expr><name>auth_done</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= encrypt buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_MAX_MAC_SIZE</name></cpp:macro>   <cpp:value>48</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_decrypt_buf</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>auth_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_SOME_MODES_USE_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>padlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>correct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; decrypt buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_in</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>mbedtls_cipher_get_cipher_mode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>minlen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"in_msglen (%d) &lt; minlen (%d)"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>minlen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_STREAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_crypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_crypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>!=</operator> <name>olen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_GCM</name> <operator>||</operator>
        <name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_CCM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>dec_msglen</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_msg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_msg_result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>add_data</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>taglen</name> <init>= <expr><ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator>
                               <name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>explicit_iv_len</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator>
                                 <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name>explicit_iv_len</name> <operator>+</operator> <name>taglen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"msglen (%d) &lt; explicit_iv_len (%d) "</literal>
                                <literal type="string">"+ taglen (%d)"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name><operator>,</operator>
                                <name>explicit_iv_len</name><operator>,</operator> <name>taglen</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>dec_msglen</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-</operator> <name>explicit_iv_len</name> <operator>-</operator> <name>taglen</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>dec_msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dec_msg_result</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>=</operator> <name>dec_msglen</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>add_data</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>add_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>  <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                           <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>add_data</name> <operator>+</operator> <literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>add_data</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>add_data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"additional data used for AEAD"</literal></expr></argument>,
                       <argument><expr><name>add_data</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"IV used"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>,
                                     <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"TAG used"</literal></expr></argument>, <argument><expr><name>dec_msg</name> <operator>+</operator> <name>dec_msglen</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Decrypt and authenticate
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_auth_decrypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument>,
                                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>,
                                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>,
                                         <argument><expr><name>add_data</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>,
                                         <argument><expr><name>dec_msg</name></expr></argument>, <argument><expr><name>dec_msglen</name></expr></argument>,
                                         <argument><expr><name>dec_msg_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument>,
                                         <argument><expr><name>dec_msg</name> <operator>+</operator> <name>dec_msglen</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_auth_decrypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>auth_done</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>olen</name> <operator>!=</operator> <name>dec_msglen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C || MBEDTLS_CCM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                                    \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
    if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_MODE_CBC</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Decrypt and check the padding
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_msg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_msg_result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>dec_msglen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>minlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Check immediate ciphertext sanity
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>minlen</name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name>minlen</name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>||</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name>minlen</name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"msglen (%d) &lt; max( ivlen(%d), maclen (%d) "</literal>
                                <literal type="string">"+ 1 ) ( + expl IV )"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name><operator>,</operator>
                                <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name><operator>,</operator>
                                <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>dec_msglen</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dec_msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dec_msg_result</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>

        <comment type="block">/*
         * Authenticate before decrypt if enabled
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_in</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ETM_ENABLED</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>computed_mac</name><index>[<expr><name>SSL_MAX_MAC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pseudo_hdr</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"using encrypt then mac"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>dec_msglen</name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pseudo_hdr</name> <operator>+</operator>  <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pseudo_hdr</name> <operator>+</operator>  <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pseudo_hdr</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pseudo_hdr</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"MAC'd meta-data"</literal></expr></argument>, <argument><expr><name>pseudo_hdr</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name>pseudo_hdr</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name>computed_mac</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"message  mac"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>,
                                              <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"computed mac"</literal></expr></argument>, <argument><expr><name>computed_mac</name></expr></argument>,
                                              <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>, <argument><expr><name>computed_mac</name></expr></argument>,
                              <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"message mac does not match"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>auth_done</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

        <comment type="block">/*
         * Check length sanity
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>%</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"msglen (%d) %% ivlen (%d) != 0"</literal><operator>,</operator>
                           <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>dec_msglen</name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_crypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>,
                                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument>,
                                   <argument><expr><name>dec_msg</name></expr></argument>, <argument><expr><name>dec_msglen</name></expr></argument>,
                                   <argument><expr><name>dec_msg_result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_cipher_crypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>dec_msglen</name> <operator>!=</operator> <name>olen</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Save IV in SSL3 and TLS1
             */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>iv_dec</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>cipher_ctx_dec</name><operator>.</operator><name>iv</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name> <operator>+</operator> <name>padlen</name> <operator>&amp;&amp;</operator>
            <name>auth_done</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DEBUG_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"msglen (%d) &lt; maclen (%d) + padlen (%d)"</literal><operator>,</operator>
                        <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name><operator>,</operator> <name>padlen</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>padlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>correct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>padlen</name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name></expr> )</condition>
            <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DEBUG_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad padding length: is %d, "</literal>
                                    <literal type="string">"should be no more than %d"</literal><operator>,</operator>
                               <name>padlen</name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name>correct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>pad_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>real_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>padding_idx</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-</operator> <name>padlen</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <comment type="block">/*
             * Padding is guaranteed to be incorrect if:
             *   1. padlen &gt;= ssl-&gt;in_msglen
             *
             *   2. padding_idx &gt;= MBEDTLS_SSL_MAX_CONTENT_LEN +
             *                     ssl-&gt;transform_in-&gt;maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */</comment>
            <expr_stmt><expr><name>correct</name> <operator>&amp;=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;=</operator> <name>padlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>correct</name> <operator>&amp;=</operator> <operator>(</operator> <name>padding_idx</name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>+</operator>
                                       <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name> <operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>padding_idx</name> <operator>*=</operator> <name>correct</name></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
            <block>{<block_content>
                <expr_stmt><expr><name>real_count</name> <operator>&amp;=</operator> <operator>(</operator> <name>i</name> <operator>&lt;=</operator> <name>padlen</name> <operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>pad_count</name> <operator>+=</operator> <name>real_count</name> <operator>*</operator>
                             <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>padding_idx</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>padlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name>correct</name> <operator>&amp;=</operator> <operator>(</operator> <name>pad_count</name> <operator>==</operator> <name>padlen</name> <operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Only 1 on correct padding */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DEBUG_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name>padlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>correct</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad padding byte detected"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>padlen</name> <operator>&amp;=</operator> <name>correct</name> <operator>*</operator> <literal type="number">0x1FF</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-=</operator> <name>padlen</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC &amp;&amp;
          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C ) */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"raw buffer after decryption"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Authenticate if not done yet.
     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_SOME_MODES_USE_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>auth_done</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>SSL_MAX_MAC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name>      <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ssl_mac</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>mac_dec</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
        <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Process MAC and always update for padlen afterwards to make
             * total time independent of padlen
             *
             * extra_run compensates MAC check for padlen
             *
             * Known timing attacks:
             *  - Lucky Thirteen (http://www.isg.rhul.ac.uk/tls/TLStiming.pdf)
             *
             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values
             * correctly. (We round down instead of up, so -56 is the correct
             * value for our calculations instead of -55)
             */</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>extra_run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>extra_run</name> <operator>=</operator> <operator>(</operator> <literal type="number">13</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>+</operator> <name>padlen</name> <operator>+</operator> <literal type="number">8</literal> <operator>)</operator> <operator>/</operator> <literal type="number">64</literal> <operator>-</operator>
                        <operator>(</operator> <literal type="number">13</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name>          <operator>+</operator> <literal type="number">8</literal> <operator>)</operator> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>extra_run</name> <operator>&amp;=</operator> <name>correct</name> <operator>*</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_len</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>,
                             <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Call mbedtls_md_process at least once due to cache attacks */</comment>
            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>extra_run</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_md_process</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
              MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"message  mac"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"computed mac"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument>,
                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>maclen</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DEBUG_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"message mac does not match"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>correct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>auth_done</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/*
         * Finally check the correct flag
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>correct</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SSL_SOME_MODES_USE_MAC */</comment>

    <comment type="block">/* Make extra sure authentication was performed, exactly once */</comment>
    <if_stmt><if>if<condition>( <expr><name>auth_done</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>nb_zero</name></name><operator>++</operator></expr>;</expr_stmt>

        <comment type="block">/*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>nb_zero</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received four consecutive empty "</literal>
                                <literal type="string">"messages, possible DoS attack"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>nb_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <empty_stmt>;</empty_stmt> <comment type="block">/* in_ctr read from peer, not maintained internally */</comment>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <call><name>ssl_ep_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <comment type="block">/* The loop goes to its end iff the counter is wrapping */</comment>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <call><name>ssl_ep_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"incoming message counter would wrap"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COUNTER_WRAPPING</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= decrypt buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAC_NONE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAC_PLAINTEXT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAC_CIPHERTEXT</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Compression/decompression functions
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_compress_buf</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg_post</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len_pre</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg_pre</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; compress buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len_pre</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>msg_pre</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name>len_pre</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"before compression: msglen = %d, "</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"before compression: output payload"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ctx_deflate</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>msg_pre</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ctx_deflate</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>len_pre</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ctx_deflate</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>msg_post</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ctx_deflate</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ctx_deflate</name></name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"failed to perform compression (%d)"</literal><operator>,</operator> <name>ret</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COMPRESSION_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>=</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name> <operator>-</operator>
                      <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ctx_deflate</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"after compression: msglen = %d, "</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"after compression: output payload"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= compress buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_decompress_buf</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg_post</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len_pre</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg_pre</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; decompress buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len_pre</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>msg_pre</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name>len_pre</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"before decompression: msglen = %d, "</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"before decompression: input payload"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ctx_inflate</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>msg_pre</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ctx_inflate</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>len_pre</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ctx_inflate</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>msg_post</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ctx_inflate</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflate</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ctx_inflate</name></name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"failed to perform decompression (%d)"</literal><operator>,</operator> <name>ret</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COMPRESSION_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>-</operator>
                     <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>ctx_inflate</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"after decompression: msglen = %d, "</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"after decompression: input payload"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= decompress buf"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ZLIB_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_hello_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_resend_hello_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* If renegotiation is not enforced, retransmit until we would reach max
     * timeout if we were using the usual handshake doubling scheme */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>ratio</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>hs_timeout_max</name></name> <operator>/</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>hs_timeout_min</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>doublings</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <while>while<condition>( <expr><name>ratio</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>doublings</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ratio</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>renego_records_seen</name></name> <operator>&gt;</operator> <name>doublings</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no longer retransmitting hello request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>ssl_write_hello_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C &amp;&amp; MBEDTLS_SSL_RENEGOTIATION */</comment>

<comment type="block">/*
 * Fill the input message buffer by appending data to it.
 * The amount of data already fetched is in ssl-&gt;in_left.
 *
 * If we return 0, is it guaranteed that (at least) nb_want bytes are
 * available (from this read and/or a previous one). Otherwise, an error code
 * is returned (possibly EOF or WANT_READ).
 *
 * With stream transport (TLS) on success ssl-&gt;in_left == nb_want, but
 * with datagram transport (DTLS) on success ssl-&gt;in_left &gt;= nb_want,
 * since we always read a whole datagram at once.
 *
 * For DTLS, it is up to the caller to set ssl-&gt;next_record_offset when
 * they're done reading a record.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_fetch_input</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nb_want</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; fetch input"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_recv</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>f_recv_timeout</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Bad usage of mbedtls_ssl_set_bio() "</literal>
                            <literal type="string">"or mbedtls_ssl_set_bio()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>nb_want</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"requesting more data than fits"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>timeout</name></decl>;</decl_stmt>

        <comment type="block">/* Just to be sure */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_set_timer</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>f_get_timer</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"You must use "</literal>
                        <literal type="string">"mbedtls_ssl_set_timer_cb() for DTLS"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * The point is, we need to always read a full datagram at once, so we
         * sometimes read more then requested, and handle the additional data.
         * It could be the rest of the current record (while fetching the
         * header) and/or some other records in the same datagram.
         */</comment>

        <comment type="block">/*
         * Move to the next record in the already read datagram if applicable
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"next record in same datagram, offset: %d"</literal><operator>,</operator>
                                    <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>,
                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name></expr></argument>,
                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"in_left: %d, nb_want: %d"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name><operator>,</operator> <name>nb_want</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Done if we already have enough data.
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>nb_want</name> <operator>&lt;=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= fetch input"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * A record can't be split accross datagrams. If we need to read but
         * are not at the beginning of a new record, the caller did something
         * wrong.
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Don't even try to read if time's out already.
         * This avoids by-passing the timer when repeatedly receiving messages
         * that will end up being dropped.
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>ssl_check_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name> <operator>-</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>)</operator></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>read_timeout</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"f_recv_timeout: %u ms"</literal><operator>,</operator> <name>timeout</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_recv_timeout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>f_recv_timeout</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                                                                    <argument><expr><name>timeout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>f_recv</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ssl-&gt;f_recv(_timeout)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_CONN_EOF</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_TIMEOUT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"timeout"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><call><name>ssl_double_retransmit_timeout</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake timeout"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_TIMEOUT</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_resend</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_resend"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
                     <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_resend_hello_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_resend_hello_request"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C &amp;&amp; MBEDTLS_SSL_RENEGOTIATION */</comment>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"in_left: %d, nb_want: %d"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name><operator>,</operator> <name>nb_want</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <while>while<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>&lt;</operator> <name>nb_want</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>nb_want</name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>ssl_check_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_TIMEOUT</name></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_recv_timeout</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>f_recv_timeout</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name></expr></argument>,
                                               <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                                               <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>f_recv</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name></expr></argument>,
                                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"in_left: %d, nb_want: %d"</literal><operator>,</operator>
                                        <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name><operator>,</operator> <name>nb_want</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ssl-&gt;f_recv(_timeout)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_CONN_EOF</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= fetch input"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Flush any data not yet written
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_flush_output</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; flush output"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_send</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Bad usage of mbedtls_ssl_set_bio() "</literal>
                            <literal type="string">"or mbedtls_ssl_set_bio()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Avoid incrementing counter if data is flushed */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= flush output"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"message length: %d, out_left: %d"</literal><operator>,</operator>
                       <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator>
              <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>f_send</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ssl-&gt;f_send"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <call><name>ssl_ep_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <comment type="block">/* The loop goes to its end iff the counter is wrapping */</comment>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <call><name>ssl_ep_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"outgoing message counter would wrap"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COUNTER_WRAPPING</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= flush output"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Functions to handle the DTLS retransmission state machine
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Append current handshake message to current outgoing flight
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_flight_append</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_flight_item</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

    <comment type="block">/* Allocate space for current message */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>msg</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name>mbedtls_ssl_flight_item</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc %d bytes failed"</literal><operator>,</operator>
                            <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_flight_item</name></expr></argument> )</argument_list></sizeof> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>msg</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc %d bytes failed"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>msg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Copy current handshake message with headers */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Append to the current flight */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_ssl_flight_item</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free the current flight of handshake messages
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_flight_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_flight_item</name> <modifier>*</modifier></type><name>flight</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_flight_item</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>flight</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_flight_item</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_dtls_replay_reset</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Swap transform_out and out_ctr with the alternative ones
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_swap_epochs</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_transform</name> <modifier>*</modifier></type><name>tmp_transform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp_out_ctr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>==</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_transform_out</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"skip swap epochs"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"swap epochs"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Swap transforms */</comment>
    <expr_stmt><expr><name>tmp_transform</name>                     <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name>                <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_transform_out</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_transform_out</name></name> <operator>=</operator> <name>tmp_transform</name></expr>;</expr_stmt>

    <comment type="block">/* Swap epoch + sequence_number */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp_out_ctr</name></expr></argument>,                 <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>,                <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>,                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_out_ctr</name></name></expr></argument>, <argument><expr><name>tmp_out_ctr</name></expr></argument>,                 <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Adjust to the newly activated transform */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator>
                                     <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_activate</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_activate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_CHANNEL_OUTBOUND</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_activate"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Retransmit the current flight of messages.
 *
 * Need to remember the current message in case flush_output returns
 * WANT_WRITE, causing us to exit this function and come back later.
 * This function must be called until state is no longer SENDING.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_resend</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; mbedtls_ssl_resend"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"initialise resending"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cur_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ssl_swap_epochs</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cur_msg</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mbedtls_ssl_flight_item</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cur_msg</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Swap epochs before sending Finished: we can't do it after
         * sending ChangeCipherSpec, in case write returns WANT_READ.
         * Must be done before copying, may change out_msg pointer */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>&amp;&amp;</operator>
            <name><name>cur</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_FINISHED</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ssl_swap_epochs</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cur_msg</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"resent handshake message header"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_FINISHED</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_WAITING</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= mbedtls_ssl_resend"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * To be called when the last message of an incoming flight is received.
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_recv_flight_completed</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* We won't need to resend that one any more */</comment>
    <expr_stmt><expr><call><name>ssl_flight_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>cur_msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* The next incoming flight will start with this msg_seq */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_flight_start_seq</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name></expr>;</expr_stmt>

    <comment type="block">/* Cancel timer */</comment>
    <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_FINISHED</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_FINISHED</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_PREPARING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * To be called when the last message of an outgoing flight is send.
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_send_flight_completed</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ssl_reset_retransmit_timeout</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_timeout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_FINISHED</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_FINISHED</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_WAITING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

<comment type="block">/*
 * Record layer functions
 */</comment>

<comment type="block">/*
 * Write current record.
 * Uses ssl-&gt;out_msgtype, ssl-&gt;out_msglen and bytes at ssl-&gt;out_msg.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_write_record</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_msg_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write record"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name></expr> )</condition>
    <block>{<block_content>
        <empty_stmt>;</empty_stmt> <comment type="block">/* Skip special handshake treatment when resending */</comment>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>out_msg_type</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>out_msg_type</name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_HELLO_REQUEST</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator>       <operator>)</operator></expr>;</expr_stmt>

        <comment type="block">/*
         * DTLS has additional fields in the Handshake layer,
         * between the length field and the actual payload:
         *      uint16 message_seq;
         *      uint24 fragment_offset;
         *      uint24 fragment_length;
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* Make room for the additional DTLS fields */</comment>
            <expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

            <comment type="block">/* Write message_seq and update it, except for HelloRequest */</comment>
            <if_stmt><if>if<condition>( <expr><name>out_msg_type</name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_HELLO_REQUEST</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>out_msg_seq</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>out_msg_seq</name></name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>out_msg_seq</name></name> <operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* We don't fragment, so frag_offset = 0 and frag_len = len */</comment>
            <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

        <if_stmt><if>if<condition>( <expr><name>out_msg_type</name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_HELLO_REQUEST</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Save handshake and CCS messages for resending */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC</name> <operator>||</operator>
          <name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_flight_append</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_flight_append"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_out</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_compress_buf</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_compress_buf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*MBEDTLS_ZLIB_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_write</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"going for mbedtls_ssl_hw_record_write()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_write</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_write"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_HW_RECORD_ACCEL */</comment>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>done</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                           <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name>      <operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_encrypt_buf</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_encrypt_buf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name>      <operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>=</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"output record: msgtype = %d, "</literal>
                            <literal type="string">"version = [%d:%d], msglen = %d"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>
                     <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"output record sent to network"</literal></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name></expr></argument>, <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_flush_output"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write record"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Mark bits in bitmask (used for DTLS HS reassembly)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_bitmask_set</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start_bits</name></decl>, <decl><type ref="prev"/><name>end_bits</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>start_bits</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator> <name>offset</name> <operator>%</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>start_bits</name> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>first_byte_idx</name> <init>= <expr><name>offset</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Special case */</comment>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;=</operator> <name>start_bits</name></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init>;</init> <condition><expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>mask</name><index>[<expr><name>first_byte_idx</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <name>start_bits</name> <operator>-</operator> <name>len</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <comment type="block">/* Avoid potential issues with offset or len becoming invalid */</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>start_bits</name></expr>;</expr_stmt> <comment type="block">/* Now offset % 8 == 0 */</comment>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>start_bits</name></expr>;</expr_stmt>

        <for>for<control>( <init>;</init> <condition><expr><name>start_bits</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>start_bits</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mask</name><index>[<expr><name>first_byte_idx</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <name>start_bits</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end_bits</name> <operator>=</operator> <name>len</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>end_bits</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>last_byte_idx</name> <init>= <expr><operator>(</operator> <name>offset</name> <operator>+</operator> <name>len</name> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>end_bits</name></expr>;</expr_stmt> <comment type="block">/* Now len % 8 == 0 */</comment>

        <for>for<control>( <init>;</init> <condition><expr><name>end_bits</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>end_bits</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>mask</name><index>[<expr><name>last_byte_idx</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <literal type="number">8</literal> <operator>-</operator> <name>end_bits</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>mask</name> <operator>+</operator> <name>offset</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>len</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check that bitmask is full
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_bitmask_check</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>%</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>mask</name><index>[<expr><name>len</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <literal type="number">7</literal> <operator>-</operator> <name>i</name> <operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reassemble fragmented DTLS handshake messages.
 *
 * Use a temporary buffer for reassembly, divided in two parts:
 * - the first holds the reassembled message (including handshake header),
 * - the second holds a bitmask indicating which parts of the message
 *   (excluding headers) have been received so far.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_reassemble_dtls_handshake</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bitmask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>frag_len</name></decl>, <decl><type ref="prev"/><name>frag_off</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msg_len</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Without headers */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"not supported outside handshake (for now)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * For first fragment, check size and allocate buffer
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>alloc_len</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"initialize reassembly, total length = %d"</literal><operator>,</operator>
                            <name>msg_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake message too large"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* The bitmask needs one bit per byte of message excluding header */</comment>
        <expr_stmt><expr><name>alloc_len</name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <name>msg_len</name> <operator>+</operator> <name>msg_len</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator> <name>msg_len</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc failed (%d bytes)"</literal><operator>,</operator> <name>alloc_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Prepare final header: copy msg_type, length and message_seq,
         * then add standardised fragment_offset and fragment_length */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Make sure msg_type and length are consistent */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"fragment header mismatch"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>+</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bitmask</name> <operator>=</operator> <name>msg</name> <operator>+</operator> <name>msg_len</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Check and copy current fragment
     */</comment>
    <expr_stmt><expr><name>frag_off</name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
               <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>)</operator> <operator>|</operator>
                 <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>frag_len</name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
               <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>)</operator> <operator>|</operator>
                 <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>frag_off</name> <operator>+</operator> <name>frag_len</name> <operator>&gt;</operator> <name>msg_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"invalid fragment offset/len: %d + %d &gt; %d"</literal><operator>,</operator>
                          <name>frag_off</name><operator>,</operator> <name>frag_len</name><operator>,</operator> <name>msg_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>frag_len</name> <operator>+</operator> <literal type="number">12</literal> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"invalid fragment length: %d + 12 &gt; %d"</literal><operator>,</operator>
                          <name>frag_len</name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"adding fragment, offset = %d, length = %d"</literal><operator>,</operator>
                        <name>frag_off</name><operator>,</operator> <name>frag_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>msg</name> <operator>+</operator> <name>frag_off</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>frag_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ssl_bitmask_set</name><argument_list>( <argument><expr><name>bitmask</name></expr></argument>, <argument><expr><name>frag_off</name></expr></argument>, <argument><expr><name>frag_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Do we have the complete message by now?
     * If yes, finalize it, else ask to read the next record.
     */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>ssl_bitmask_check</name><argument_list>( <argument><expr><name>bitmask</name></expr></argument>, <argument><expr><name>msg_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"message is not complete yet"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake message completed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>frag_len</name> <operator>+</operator> <literal type="number">12</literal> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * We'got more handshake messages in the same record.
         * This case is not handled now because no know implementation does
         * that and it's hard to test, so we prefer to fail cleanly for now.
         */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"last fragment not alone in its record"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * We've got more data in the buffer after the current record,
         * that we don't want to overwrite. Move it before writing the
         * reassembled message, and adjust in_left and next_record_offset.
         */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cur_remain</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new_remain</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>remain_len</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* First compute and check new lengths */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <name>new_remain</name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>+</operator> <name>remain_len</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name> <operator>-</operator>
                           <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"reassembled message too large for buffer"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>new_remain</name></expr></argument>, <argument><expr><name>cur_remain</name></expr></argument>, <argument><expr><name>remain_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"reassembled handshake message"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

<function><type><name>int</name></type> <name>mbedtls_ssl_prepare_handshake_record</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake message too short: %d"</literal><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <operator>(</operator>
                    <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
                    <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>)</operator> <operator>|</operator>
                      <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake message: msglen ="</literal>
                        <literal type="string">" %d, type = %d, hslen = %d"</literal><operator>,</operator>
                        <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>recv_msg_seq</name> <init>= <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* ssl-&gt;handshake is NULL when receiving ClientHello for renego */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <name>recv_msg_seq</name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* Retransmit only on last message from previous flight, to avoid
             * too many retransmissions.
             * Besides, No sane server ever retransmits HelloVerifyRequest */</comment>
            <if_stmt><if>if<condition>( <expr><name>recv_msg_seq</name> <operator>==</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_flight_start_seq</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received message from last flight, "</literal>
                                    <literal type="string">"message_seq = %d, start_of_flight = %d"</literal><operator>,</operator>
                                    <name>recv_msg_seq</name><operator>,</operator>
                                    <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_flight_start_seq</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_resend</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_resend"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"dropping out-of-sequence message: "</literal>
                                    <literal type="string">"message_seq = %d, expected = %d"</literal><operator>,</operator>
                                    <name>recv_msg_seq</name><operator>,</operator>
                                    <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Wait until message completion to increment in_msg_seq */</comment>

        <comment type="block">/* Reassemble if current message is fragmented or reassembly is
         * already in progress */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"\0\0\0"</literal></expr></argument>,        <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <literal type="number">9</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name> <operator>!=</operator> <name>NULL</name> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found fragmented DTLS handshake message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_reassemble_dtls_handshake</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_reassemble_dtls_handshake"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>
    <comment type="block">/* With TLS we don't handle fragmentation (for now) */</comment>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"TLS handshake fragmentation not supported"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_update_handshake_status</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Handshake message is complete, increment counter */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * DTLS anti-replay: RFC 6347 4.1.2.6
 *
 * in_window is a field of bits numbered from 0 (lsb) to 63 (msb).
 * Bit n is set iff record number in_window_top - n has been seen.
 *
 * Usually, in_window_top is the last record number seen and the lsb of
 * in_window is set. The only exception is the initial state (record number 0
 * not seen yet).
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_dtls_replay_reset</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>ssl_load_six_bytes</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return 0 if sequence number is acceptable, -1 otherwise
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_dtls_replay_check</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>rec_seqnum</name> <init>= <expr><call><name>ssl_load_six_bytes</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>bit</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>anti_replay</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ANTI_REPLAY_DISABLED</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rec_seqnum</name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>bit</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name> <operator>-</operator> <name>rec_seqnum</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>bit</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_window</name></name> <operator>&amp;</operator> <operator>(</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name> <operator>)</operator> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Update replay window on new validated record
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_dtls_replay_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>rec_seqnum</name> <init>= <expr><call><name>ssl_load_six_bytes</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>anti_replay</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ANTI_REPLAY_DISABLED</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rec_seqnum</name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Update window_top and the contents of the window */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>shift</name> <init>= <expr><name>rec_seqnum</name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name> <operator>=</operator> <name>rec_seqnum</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Mark that number as seen in the current window */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>bit</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window_top</name></name> <operator>-</operator> <name>rec_seqnum</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>bit</name> <operator>&lt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content> <comment type="block">/* Always true, but be extra sure */</comment>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_window</name></name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_ANTI_REPLAY */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Forward declaration */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_session_reset_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>partial</name></decl></parameter> )</parameter_list>;</function_decl>

<comment type="block">/*
 * Without any SSL context, check if a datagram looks like a ClientHello with
 * a valid cookie, and if it doesn't, generate a HelloVerifyRequest message.
 * Both input and output include full DTLS headers.
 *
 * - if cookie is valid, return 0
 * - if ClientHello looks superficially valid but cookie is not,
 *   fill obuf and set olen, then
 *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
 * - otherwise return a specific error code
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_check_dtls_clihlo_cookie</name><parameter_list>(
                           <parameter><decl><type><name>mbedtls_ssl_cookie_write_t</name> <modifier>*</modifier></type><name>f_cookie_write</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_ssl_cookie_check_t</name> <modifier>*</modifier></type><name>f_cookie_check</name></decl></parameter>,
                           <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cookie</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cli_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cli_id_len</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sid_len</name></decl>, <decl><type ref="prev"/><name>cookie_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>f_cookie_write</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>f_cookie_check</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Structure of ClientHello with record and handshake headers,
     * and expected values. We don't need to check a lot, more checks will be
     * done when actually parsing the ClientHello - skipping those checks
     * avoids code duplication and does not make cookie forging any easier.
     *
     *  0-0  ContentType type;                  copied, must be handshake
     *  1-2  ProtocolVersion version;           copied
     *  3-4  uint16 epoch;                      copied, must be 0
     *  5-10 uint48 sequence_number;            copied
     * 11-12 uint16 length;                     (ignored)
     *
     * 13-13 HandshakeType msg_type;            (ignored)
     * 14-16 uint24 length;                     (ignored)
     * 17-18 uint16 message_seq;                copied
     * 19-21 uint24 fragment_offset;            copied, must be 0
     * 22-24 uint24 fragment_length;            (ignored)
     *
     * 25-26 ProtocolVersion client_version;    (ignored)
     * 27-58 Random random;                     (ignored)
     * 59-xx SessionID session_id;              1 byte len + sid_len content
     * 60+   opaque cookie&lt;0..2^8-1&gt;;           1 byte len + content
     *       ...
     *
     * Minimum length is 61 bytes.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>in_len</name> <operator>&lt;</operator> <literal type="number">61</literal> <operator>||</operator>
        <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>||</operator>
        <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>in</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>in</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>in</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>sid_len</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">59</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>sid_len</name> <operator>&gt;</operator> <name>in_len</name> <operator>-</operator> <literal type="number">61</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cookie_len</name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">60</literal> <operator>+</operator> <name>sid_len</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cookie_len</name> <operator>&gt;</operator> <name>in_len</name> <operator>-</operator> <literal type="number">60</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>f_cookie_check</name><argument_list>( <argument><expr><name>p_cookie</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>sid_len</name> <operator>+</operator> <literal type="number">61</literal></expr></argument>, <argument><expr><name>cookie_len</name></expr></argument>,
                        <argument><expr><name>cli_id</name></expr></argument>, <argument><expr><name>cli_id_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Valid cookie */</comment>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If we get here, we've got an invalid cookie, let's prepare HVR.
     *
     *  0-0  ContentType type;                  copied
     *  1-2  ProtocolVersion version;           copied
     *  3-4  uint16 epoch;                      copied
     *  5-10 uint48 sequence_number;            copied
     * 11-12 uint16 length;                     olen - 13
     *
     * 13-13 HandshakeType msg_type;            hello_verify_request
     * 14-16 uint24 length;                     olen - 25
     * 17-18 uint16 message_seq;                copied
     * 19-21 uint24 fragment_offset;            copied
     * 22-24 uint24 fragment_length;            olen - 25
     *
     * 25-26 ProtocolVersion server_version;    0xfe 0xff
     * 27-27 opaque cookie&lt;0..2^8-1&gt;;           cookie_len = olen - 27, cookie
     *
     * Minimum length is 28.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>buf_len</name> <operator>&lt;</operator> <literal type="number">28</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Copy most fields and adapt others */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfe</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

    <comment type="block">/* Generate and write actual cookie */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>obuf</name> <operator>+</operator> <literal type="number">28</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>f_cookie_write</name><argument_list>( <argument><expr><name>p_cookie</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>obuf</name> <operator>+</operator> <name>buf_len</name></expr></argument>, <argument><expr><name>cli_id</name></expr></argument>, <argument><expr><name>cli_id_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>obuf</name></expr>;</expr_stmt>

    <comment type="block">/* Go back and fill length fields */</comment>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">28</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>obuf</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">25</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>obuf</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">25</literal> <operator>)</operator> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>obuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">25</literal> <operator>)</operator>       <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">13</literal> <operator>)</operator> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obuf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">13</literal> <operator>)</operator>       <operator>)</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Handle possible client reconnect with the same UDP quadruplet
 * (RFC 6347 Section 4.2.8).
 *
 * Called by ssl_parse_record_header() in case we receive an epoch 0 record
 * that looks like a ClientHello.
 *
 * - if the input looks like a ClientHello without cookies,
 *   send back HelloVerifyRequest, then
 *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
 * - if the input looks like a ClientHello with a valid cookie,
 *   reset the session of the current context, and
 *   return MBEDTLS_ERR_SSL_CLIENT_RECONNECT
 * - if anything goes wrong, return a specific error code
 *
 * mbedtls_ssl_read_record() will ignore the record if anything else than
 * MBEDTLS_ERR_SSL_CLIENT_RECONNECT or 0 is returned, although this function
 * cannot not return 0.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_handle_possible_reconnect</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_check_dtls_clihlo_cookie</name><argument_list>(
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_cookie_write</name></name></expr></argument>,
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_cookie_check</name></name></expr></argument>,
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_cookie</name></name></expr></argument>,
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id_len</name></name></expr></argument>,
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name></expr></argument>,
            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ssl_check_dtls_clihlo_cookie"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Dont check write errors as we can't do anything here.
         * If the error is permanent we'll catch it later,
         * if it's not, then hopefully it'll work next time. */</comment>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>f_send</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Got a valid cookie, partially reset context */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_session_reset_int</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_CLIENT_RECONNECT</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE &amp;&amp; MBEDTLS_SSL_SRV_C */</comment>

<comment type="block">/*
 * ContentType type;
 * ProtocolVersion version;
 * uint16 epoch;            // DTLS only
 * uint48 sequence_number;  // DTLS only
 * uint16 length;
 *
 * Return 0 if header looks sane (and, for DTLS, the record is expected)
 * MBEDTLS_ERR_SSL_INVALID_RECORD if the header looks bad,
 * MBEDTLS_ERR_SSL_UNEXPECTED_RECORD (DTLS only) if sane but unexpected.
 *
 * With DTLS, mbedtls_ssl_read_record() will:
 * 1. proceed with the record if this function returns 0
 * 2. drop only the current record if this function returns UNEXPECTED_RECORD
 * 3. return CLIENT_RECONNECT if this function return that value
 * 4. drop the whole datagram if this function returns anything else.
 * Point 2 is needed when the peer is resending, and we have already received
 * the first record from a datagram but are still waiting for the others.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_record_header</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>major_ver</name></decl>, <decl><type ref="prev"/><name>minor_ver</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"input record header"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>, <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>=</operator>  <name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ssl_read_version</name><argument_list>( <argument><expr><operator>&amp;</operator><name>major_ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor_ver</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"input record: msgtype = %d, "</literal>
                        <literal type="string">"version = [%d:%d], msglen = %d"</literal><operator>,</operator>
                        <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name><operator>,</operator>
                        <name>major_ver</name><operator>,</operator> <name>minor_ver</name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check record type */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_ALERT</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_APPLICATION_DATA</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"unknown record type"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check version */</comment>
    <if_stmt><if>if<condition>( <expr><name>major_ver</name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"major version mismatch"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>minor_ver</name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"minor version mismatch"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check length against the size of our buffer */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_BUFFER_LEN</name>
                         <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>-</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad message length"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check length against bounds of the current transform and version */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad message length"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>minlen</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad message length"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>minlen</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad message length"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * TLS encrypted messages can have up to 256 bytes of padding
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name><operator>-&gt;</operator><name>minlen</name></name> <operator>+</operator>
                             <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>+</operator> <literal type="number">256</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad message length"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * DTLS-related tests done last, because most of them may result in
     * silently dropping the record (but not the whole datagram), and we only
     * want to consider that after ensuring that the "basic" fields (type,
     * version, length) are sane.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rec_epoch</name> <init>= <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Drop unexpected ChangeCipherSpec messages */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"dropping unexpected ChangeCipherSpec"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Drop unexpected ApplicationData records,
         * except at the beginning of renegotiations */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_APPLICATION_DATA</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <operator>&amp;&amp;</operator> <operator>!</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SERVER_HELLO</name> <operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"dropping unexpected ApplicationData"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Check epoch (and sequence number) with DTLS */</comment>
        <if_stmt><if>if<condition>( <expr><name>rec_epoch</name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_epoch</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"record from another epoch: "</literal>
                                        <literal type="string">"expected %d, received %d"</literal><operator>,</operator>
                                        <name><name>ssl</name><operator>-&gt;</operator><name>in_epoch</name></name><operator>,</operator> <name>rec_epoch</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <comment type="block">/*
             * Check for an epoch 0 ClientHello. We can't use in_msg here to
             * access the first byte of record content (handshake type), as we
             * have an active transform (possibly iv_len != 0), so use the
             * fact that the record header len is 13 instead.
             */</comment>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name> <operator>&amp;&amp;</operator>
                <name>rec_epoch</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>&gt;</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_CLIENT_HELLO</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"possible client reconnect "</literal>
                                            <literal type="string">"from the same port"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <call><name>ssl_handle_possible_reconnect</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE &amp;&amp; MBEDTLS_SSL_SRV_C */</comment>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* Replay detection only works for the current epoch */</comment>
        <if_stmt><if>if<condition>( <expr><name>rec_epoch</name> <operator>==</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_epoch</name></name> <operator>&amp;&amp;</operator>
            <call><name>mbedtls_ssl_dtls_replay_check</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"replayed record"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * If applicable, decrypt (and decompress) record content
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_prepare_record_content</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"input record from network"</literal></expr></argument>,
                   <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name></expr></argument>, <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_read</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"going for mbedtls_ssl_hw_record_read()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_read</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_read"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_HW_RECORD_ACCEL */</comment>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_decrypt_buf</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_decrypt_buf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"input payload after decrypt"</literal></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad message length"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_in</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_decompress_buf</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_decompress_buf"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ZLIB_SUPPORT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_dtls_replay_update</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_handshake_wrapup_free_hs_transform</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>;</function_decl>

<comment type="block">/*
 * Read a record.
 *
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_read_record</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; read record"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <do>do <block>{<block_content>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record_layer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ssl_read_record_layer"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handle_message_type</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition>( <expr><name>MBEDTLS_ERR_SSL_NON_FATAL</name> <operator>==</operator> <name>ret</name></expr> )</condition>;</do>

    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <name>ret</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ssl_handle_message_type"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_update_handshake_status</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= read record"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_read_record_layer</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Get next Handshake message in the current record
         */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr></argument>,
                 <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"remaining content in record"</literal></expr></argument>,
                           <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Read the record header and parse it
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>read_record_header</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_fetch_input</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_fetch_input"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_record_header</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
            <name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_SSL_CLIENT_RECONNECT</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name></expr> )</condition>
            <block>{<block_content>
                <comment type="block">/* Skip unexpected record (but not whole datagram) */</comment>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name>
                                        <operator>+</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"discarding unexpected record "</literal>
                                            <literal type="string">"(header)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* Skip invalid record and the rest of the datagram */</comment>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"discarding invalid record "</literal>
                                            <literal type="string">"(header)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* Get next record */</comment>
            <goto>goto <name>read_record_header</name>;</goto>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Read and optionally decrypt the message contents
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_fetch_input</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                                 <argument><expr><call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_fetch_input"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Done reading this record, get ready for the next one */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_prepare_record_content</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* Silently discard invalid records */</comment>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_INVALID_RECORD</name> <operator>||</operator>
                <name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name></expr> )</condition>
            <block>{<block_content>
                <comment type="block">/* Except when waiting for Finished as a bad mac here
                 * probably means something went wrong in the handshake
                 * (eg wrong psk used, mitm downgrade attempt, etc.) */</comment>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_CLIENT_FINISHED</name> <operator>||</operator>
                    <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SERVER_FINISHED</name></expr> )</condition>
                <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALL_ALERT_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
                    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name></expr> )</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                                <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_BADMAC_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>badmac_limit</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                    <operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>badmac_seen</name></name> <operator>&gt;=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>badmac_limit</name></name></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"too many records with bad MAC"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"discarding invalid record (mac)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>read_record_header</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <comment type="block">/* Error out (and send alert) on invalid records */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALL_ALERT_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * When we sent the last flight of the handshake, we MUST respond to a
     * retransmit of the peer's previous flight with a retransmit. (In
     * practice, only the Finished message will make it, other messages
     * including CCS use the old transform so they're dropped as invalid.)
     *
     * If the record we received is not a handshake message, however, it
     * means the peer received our last flight so we can clean up
     * handshake info.
     *
     * This check needs to be done before prepare_handshake() due to an edge
     * case: if the client immediately requests renegotiation, this
     * finishes the current handshake first, avoiding the new ClientHello
     * being mistaken for an ancient message in the current handshake.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_FINISHED</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received retransmit of last flight"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_resend</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_resend"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ssl_handshake_wrapup_free_hs_transform</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_handle_message_type</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Handle particular types of records
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_prepare_handshake_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_ALERT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got an alert message, type: [%d:%d]"</literal><operator>,</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"is a fatal alert message (msg %d)"</literal><operator>,</operator>
                           <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"is a close notify message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"is a SSLv3 no_cert"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Will be handled when trying to parse ServerHello */</comment>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_ALERT_MSG_NO_CERT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"is a SSLv3 no_cert"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Will be handled in mbedtls_ssl_parse_certificate() */</comment>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 &amp;&amp; MBEDTLS_SSL_SRV_C */</comment>

        <comment type="block">/* Silently ignore: fetch new message */</comment>
        <return>return <expr><name>MBEDTLS_ERR_SSL_NON_FATAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_send_fatal_handshake_failure</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_send_alert_message</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>level</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>message</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; send alert message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_ALERT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= send alert message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Handshake functions
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call>         <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call>     <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call>     <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call>   <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call>    <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_write_certificate</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_parse_certificate</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>mbedtls_ssl_write_certificate</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>crt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>client_auth</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/*
         * If using SSLv3 and got no cert, send an Alert message
         * (otherwise an empty Certificate message will be sent).
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_own_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call>  <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_ALERT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_ALERT_MSG_NO_CERT</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no certificate to send"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>write_msg</name>;</goto>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_own_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no certificate to send"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_CRT</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"own certificate"</literal></expr></argument>, <argument><expr><call><name>mbedtls_ssl_own_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     *     0  .  0    handshake type
     *     1  .  3    handshake length
     *     4  .  6    length of all certs
     *     7  .  9    length of cert. 1
     *    10  . n-1   peer certificate
     *     n  . n+2   length of cert. 2
     *    n+3 . ...   upper level cert, etc.
     */</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>crt</name> <operator>=</operator> <call><name>mbedtls_ssl_own_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>crt</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>i</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate too large, %d &gt; %d"</literal><operator>,</operator>
                           <name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>n</name><operator>,</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name></expr>    ]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name>       <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>crt</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt> <expr_stmt><expr><name>crt</name> <operator>=</operator> <name><name>crt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal> <operator>)</operator> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal> <operator>)</operator>       <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<label><name>write_msg</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_parse_certificate</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>authmode</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>authmode</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_authmode</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_VERIFY_UNSET</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>authmode</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_authmode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
        <name>authmode</name> <operator>==</operator> <name>MBEDTLS_SSL_VERIFY_NONE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>=</operator> <name>MBEDTLS_X509_BADCERT_SKIP_VERIFY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * Check if the client sent an empty certificate
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name>  <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name>  <operator>==</operator> <literal type="number">2</literal>                        <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_ALERT</name>            <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>==</operator> <name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name>  <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>==</operator> <name>MBEDTLS_SSL_ALERT_MSG_NO_CERT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"SSLv3 client has no certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>=</operator> <name>MBEDTLS_X509_BADCERT_MISSING</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>authmode</name> <operator>==</operator> <name>MBEDTLS_SSL_VERIFY_OPTIONAL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name>  <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name>   <operator>==</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name>    <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>==</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE</name>   <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"TLSv1 client has no certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>=</operator> <name>MBEDTLS_X509_BADCERT_MISSING</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>authmode</name> <operator>==</operator> <name>MBEDTLS_SSL_VERIFY_OPTIONAL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&lt;</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>!=</operator> <name>n</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* In case we tried to reuse a session but it failed */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,
                    <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc(%d bytes) failed"</literal><operator>,</operator>
                       <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crt</name></expr></argument> )</argument_list></sizeof> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>i</name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator>
            <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">128</literal> <operator>||</operator> <name>i</name> <operator>+</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_der</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>,
                                  <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <name>ret</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG</name> <operator>+</operator> <name>MBEDTLS_ERR_OID_NOT_FOUND</name> <operator>)</operator> <operator>!=</operator> <name>ret</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">" mbedtls_x509_crt_parse_der"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_CRT</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"peer certificate"</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * On client, make sure the server cert doesn't change during renego to
     * avoid "triple handshake" attack: https://secure-resumption.com/
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"new server cert during renegotiation"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>!=</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server cert changed during renegotiation"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION &amp;&amp; MBEDTLS_SSL_CLI_C */</comment>

    <if_stmt><if>if<condition>( <expr><name>authmode</name> <operator>!=</operator> <name>MBEDTLS_SSL_VERIFY_NONE</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>ca_chain</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_chain</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ca_chain</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_chain</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ca_crl</name>   <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_crl</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <expr_stmt><expr><name>ca_chain</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ca_chain</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ca_crl</name>   <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ca_crl</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ca_chain</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no CA chain"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Main check: verify certificate
         */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_verify_with_profile</name><argument_list>(
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>,
                                <argument><expr><name>ca_chain</name></expr></argument>, <argument><expr><name>ca_crl</name></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>cert_profile</name></name></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>verify_result</name></name></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_vrfy</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_vrfy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"x509_verify_cert"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Secondary checks: always done, but change 'ret' only if it was 0
         */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* If certificate uses an EC key, make sure the curve is OK */</comment>
            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>MBEDTLS_PK_ECKEY</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name>mbedtls_ssl_check_curve</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><name>pk</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>grp</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate (EC key curve)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_check_cert_usage</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>,
                                  <argument><expr><name>ciphersuite_info</name></expr></argument>,
                                  <argument><expr><operator>!</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>verify_result</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate (usage extensions)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>authmode</name> <operator>==</operator> <name>MBEDTLS_SSL_VERIFY_OPTIONAL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>

<function><type><name>int</name></type> <name>mbedtls_ssl_write_change_cipher_spec</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write change cipher spec"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write change cipher spec"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_parse_change_cipher_spec</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse change cipher spec"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad change cipher spec message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad change cipher spec message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"switching to new transform spec for inbound data"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_in</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>ssl_dtls_replay_reset</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* Increment epoch */</comment>
        <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>in_epoch</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"DTLS epoch would wrap"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COUNTER_WRAPPING</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Set the in_msg pointer to the correct location based on IV length
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator>
                      <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_activate</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_activate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_CHANNEL_INBOUND</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_activate"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse change cipher spec"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_optimize_checksum</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ciphersuite_info</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>ssl_update_checksum_md5sha1</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name> <operator>==</operator> <name>MBEDTLS_MD_SHA384</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>ssl_update_checksum_sha384</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name> <operator>!=</operator> <name>MBEDTLS_MD_SHA384</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>ssl_update_checksum_sha256</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_reset_checksum</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
     <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha512_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_start</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
     <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument> , <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha512_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_md5sha1</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
     <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument> , <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_sha256</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_update_checksum_sha384</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_ssl</name><parameter_list>(
                <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type>  <name>md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padbuf</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha1sum</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>session</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>session</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc  finished ssl"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * SSLv3:
     *   hash =
     *      MD5( master + pad2 +
     *          MD5( handshake + sender + master + pad1 ) )
     *   + SHA1( master + pad2 +
     *         SHA1( handshake + sender + master + pad1 ) )
     */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"finished  md5 state"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
                    <name><name>md5</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name><name>md5</name><operator>.</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"finished sha1 state"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
                   <name><name>sha1</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>sha1</name><operator>.</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>sender</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>from</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"CLNT"</literal></expr>
                                       </then><else>: <expr><literal type="string">"SRVR"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">0x36</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>sender</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>sender</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>sha1sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">0x5C</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument> , <argument><expr><literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>sha1sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calc finished result"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>(  <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name>padbuf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>(  <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name>md5sum</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>sha1sum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sha1sum</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc  finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_tls</name><parameter_list>(
                <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type>  <name>md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>sha1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padbuf</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>session</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>session</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc  finished tls"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * TLSv1:
     *   hash = PRF( master, finished_label,
     *               MD5( handshake ) + SHA1( handshake ) )[0..11]
     */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"finished  md5 state"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
                    <name><name>md5</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name><name>md5</name><operator>.</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"finished sha1 state"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
                   <name><name>sha1</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>sha1</name><operator>.</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>sender</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>from</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name> <operator>)</operator></expr>
             ?</condition><then> <expr><literal type="string">"client finished"</literal></expr>
             </then><else>: <expr><literal type="string">"server finished"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument>, <argument><expr><name>padbuf</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>sender</name></expr></argument>,
                             <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calc finished result"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>(  <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name>padbuf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc  finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_tls_sha256</name><parameter_list>(
                <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha256_context</name></type> <name>sha256</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>session</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>session</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc  finished tls sha256"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * TLSv1.2:
     *   hash = PRF( master, finished_label,
     *               Hash( handshake ) )[0.11]
     */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"finished sha2 state"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
                   <name><name>sha256</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>sha256</name><operator>.</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>sender</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>from</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name> <operator>)</operator></expr>
             ?</condition><then> <expr><literal type="string">"client finished"</literal></expr>
             </then><else>: <expr><literal type="string">"server finished"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>sender</name></expr></argument>,
                             <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calc finished result"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha256_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>(  <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(  <argument><expr><name>padbuf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc  finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_calc_finished_tls_sha384</name><parameter_list>(
                <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sender</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_sha512_context</name></type> <name>sha512</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>padbuf</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>session</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>session</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; calc  finished tls sha384"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * TLSv1.2:
     *   hash = PRF( master, finished_label,
     *               Hash( handshake ) )[0.11]
     */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"finished sha512 state"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
                   <name><name>sha512</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>sha512</name><operator>.</operator><name>state</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>sender</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>from</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name> <operator>)</operator></expr>
             ?</condition><then> <expr><literal type="string">"client finished"</literal></expr>
             </then><else>: <expr><literal type="string">"server finished"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument>, <argument><expr><name>padbuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>tls_prf</name></name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>master</name></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>sender</name></expr></argument>,
                             <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"calc finished result"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_sha512_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha512</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>(  <argument><expr><name>padbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>padbuf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= calc  finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_handshake_wrapup_free_hs_transform</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; handshake wrapup: final free"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Free our handshake params
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_ssl_handshake_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Free the previous transform and swith in the current one
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_transform_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= handshake wrapup: final free"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_handshake_wrapup</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>resume</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; handshake wrapup"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>=</operator>  <name>MBEDTLS_SSL_RENEGOTIATION_DONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_records_seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Free the previous session and switch in the current one
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* RFC 7366 3.1: keep the EtM state */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>=</operator>
                  <name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Add cache entry
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_set_cache</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>id_len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <name>resume</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_set_cache</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_cache</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"cache did not store session"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>flight</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Cancel handshake timer */</comment>
        <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Keep last flight around in case we need to resend it:
         * we need the handshake and transform structures for that */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"skip freeing handshake and transform"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>ssl_handshake_wrapup_free_hs_transform</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= handshake wrapup"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_write_finished</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>hash_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set the out_msg pointer to the correct location based on IV length
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>-</operator>
                       <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>fixed_ivlen</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_finished</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */</comment>
    <expr_stmt><expr><name>hash_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">36</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>=</operator> <name>hash_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>own_verify_data</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>hash_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name>hash_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_FINISHED</name></expr>;</expr_stmt>

    <comment type="block">/*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * Switch to our negotiated transform and session parameters for outbound
     * data.
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"switching to new transform spec for outbound data"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>

        <comment type="block">/* Remember current epoch settings for resending */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_transform_out</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_out_ctr</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set sequence_number to zero */</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Increment epoch */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <comment type="block">/* The loop goes to its end iff the counter is wrapping */</comment>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"DTLS epoch would wrap"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_COUNTER_WRAPPING</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_out</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_activate</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_activate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_CHANNEL_OUTBOUND</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_activate"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_send_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_MAX_HASH_LEN</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_MAX_HASH_LEN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>mbedtls_ssl_parse_finished</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>SSL_MAX_HASH_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_finished</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>^</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad finished message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* There is currently no ciphersuite using another length with TLS 1.2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hash_len</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>hash_len</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_FINISHED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name>  <operator>!=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>hash_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad finished message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_FINISHED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>,
                      <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad finished message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_FINISHED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>=</operator> <name>hash_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>peer_verify_data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_recv_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse finished"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_handshake_params_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_handshake_params</name> <modifier>*</modifier></type><name>handshake</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>handshake</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_handshake_params</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
     <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha256_init</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument>    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha512_init</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument>    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha512_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>update_checksum</name></name> <operator>=</operator> <name>ssl_update_checksum_start</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>sig_alg</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HASH_SHA1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_dhm_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_ecdh_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_ecjpake_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>sni_authmode</name></name> <operator>=</operator> <name>MBEDTLS_SSL_VERIFY_UNSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_transform_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_transform</name> <modifier>*</modifier></type><name>transform</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>transform</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_transform</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_cipher_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_cipher_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_session_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_session</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_handshake_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* Clear old handshake information if present */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_transform_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_handshake_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_transform</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_session</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_ssl_handshake_params</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* All pointers should exist and can be directly freed without issue */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc() of ssl sub-contexts failed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Initialize structures */</comment>
    <expr_stmt><expr><call><name>mbedtls_ssl_session_init</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ssl_transform_init</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ssl_handshake_params_init</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>alt_transform_out</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_PREPARING</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RETRANS_WAITING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Dummy cookie callbacks for defaults */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_cookie_write_dummy</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cli_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cli_id_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>end</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cli_id</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cli_id_len</name><operator>)</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_cookie_check_dummy</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cookie</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cookie_len</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cli_id</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cli_id_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cookie</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cookie_len</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cli_id</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cli_id_len</name><operator>)</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_DTLS_HELLO_VERIFY &amp;&amp; MBEDTLS_SSL_SRV_C */</comment>

<comment type="block">/*
 * Initialize an SSL context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Setup an SSL context
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_setup</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>=</operator> <name>conf</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare base structures
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator> <name>in_buf</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc(%d bytes) failed"</literal><operator>,</operator> <name>len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator>  <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name>  <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator>  <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name>  <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_hdr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator>  <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_iv</name></name>  <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hdr</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator>  <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_len</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_iv</name></name>  <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_handshake_init</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reset an initialized and used SSL context for re-use while retaining
 * all application-set variables, function pointers and data.
 *
 * If partial is non-zero, keep data in the input buffer and client ID.
 * (Use when a DTLS client reconnects from the same port.)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_session_reset_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>partial</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HELLO_REQUEST</name></expr>;</expr_stmt>

    <comment type="block">/* Cancel any possibly running timer */</comment>
    <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_records_seen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>own_verify_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_SSL_VERIFY_DATA_MAX_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>peer_verify_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_SSL_VERIFY_DATA_MAX_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>=</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>partial</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>next_record_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_dtls_replay_reset</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>nb_zero</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CBC_RECORD_SPLITTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>split_done</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>split_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>partial</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_reset</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"going for mbedtls_ssl_hw_record_reset()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_hw_record_reset</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_hw_record_reset"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_transform_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>partial</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_handshake_init</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reset an initialized and used SSL context for re-use while retaining
 * all application-set variables, function pointers and data.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_session_reset</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>ssl_session_reset_int</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SSL set accessors
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_endpoint</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endpoint</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name>   <operator>=</operator> <name>endpoint</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_transport</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transport</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>transport</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_dtls_anti_replay</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>anti_replay</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_BADMAC_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_dtls_badmac_limit</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>limit</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>badmac_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_handshake_timeout</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hs_timeout_min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hs_timeout_max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_authmode</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>authmode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>authmode</name></name>   <operator>=</operator> <name>authmode</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_vrfy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_vrfy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_vrfy</name></name>      <operator>=</operator> <name>f_vrfy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_vrfy</name></name>      <operator>=</operator> <name>p_vrfy</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_rng</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name>      <operator>=</operator> <name>f_rng</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name>      <operator>=</operator> <name>p_rng</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_dbg</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f_dbg</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                  <parameter><decl><type><name>void</name>  <modifier>*</modifier></type><name>p_dbg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_dbg</name></name>      <operator>=</operator> <name>f_dbg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_dbg</name></name>      <operator>=</operator> <name>p_dbg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_set_bio</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_bio</name></decl></parameter>,
        <parameter><decl><type><name>mbedtls_ssl_send_t</name> <modifier>*</modifier></type><name>f_send</name></decl></parameter>,
        <parameter><decl><type><name>mbedtls_ssl_recv_t</name> <modifier>*</modifier></type><name>f_recv</name></decl></parameter>,
        <parameter><decl><type><name>mbedtls_ssl_recv_timeout_t</name> <modifier>*</modifier></type><name>f_recv_timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_bio</name></name>          <operator>=</operator> <name>p_bio</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>f_send</name></name>         <operator>=</operator> <name>f_send</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>f_recv</name></name>         <operator>=</operator> <name>f_recv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>f_recv_timeout</name></name> <operator>=</operator> <name>f_recv_timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_read_timeout</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>read_timeout</name></name>   <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_set_timer_cb</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_timer</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_ssl_set_timer_t</name> <modifier>*</modifier></type><name>f_set_timer</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_ssl_get_timer_t</name> <modifier>*</modifier></type><name>f_get_timer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_timer</name></name>        <operator>=</operator> <name>p_timer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>f_set_timer</name></name>    <operator>=</operator> <name>f_set_timer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>f_get_timer</name></name>    <operator>=</operator> <name>f_get_timer</name></expr>;</expr_stmt>

    <comment type="block">/* Make sure we start with no timer running */</comment>
    <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_session_cache</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cache</name></decl></parameter>,
        <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_get_cache</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
        <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_set_cache</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_session</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_cache</name></name> <operator>=</operator> <name>p_cache</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_get_cache</name></name> <operator>=</operator> <name>f_get_cache</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_set_cache</name></name> <operator>=</operator> <name>f_set_cache</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_set_session</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>session</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_session_copy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_ciphersuites</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ciphersuites</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>]</index></name> <operator>=</operator> <name>ciphersuites</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>]</index></name> <operator>=</operator> <name>ciphersuites</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>]</index></name> <operator>=</operator> <name>ciphersuites</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>]</index></name> <operator>=</operator> <name>ciphersuites</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_ciphersuites_for_version</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ciphersuites</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>major</name> <operator>!=</operator> <name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>minor</name> <argument_list type="generic">&lt; <argument><expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>||</operator> <name>minor</name></expr></argument> &gt;</argument_list></name> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>minor</name></expr>]</index></name> <operator>=</operator> <name>ciphersuites</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_cert_profile</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt_profile</name> <modifier>*</modifier></type><name>profile</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>cert_profile</name></name> <operator>=</operator> <name>profile</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Append a new keycert entry to a (possibly empty) list */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_append_key_cert</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>,
                                <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>,
                                <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_key_cert</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>new</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>cert</name></name> <operator>=</operator> <name>cert</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* Update head is the list was null, else add to the end */</comment>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>head</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>head</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>*</operator><name>head</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_conf_own_cert</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>own_cert</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk_key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>ssl_append_key_cert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>key_cert</name></name></expr></argument>, <argument><expr><name>own_cert</name></expr></argument>, <argument><expr><name>pk_key</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_ca_chain</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>ca_chain</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ca_chain</name></name>   <operator>=</operator> <name>ca_chain</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ca_crl</name></name>     <operator>=</operator> <name>ca_crl</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_set_hs_own_cert</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                 <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>own_cert</name></decl></parameter>,
                                 <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk_key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>ssl_append_key_cert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_key_cert</name></name></expr></argument>,
                                 <argument><expr><name>own_cert</name></expr></argument>, <argument><expr><name>pk_key</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_set_hs_ca_chain</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                  <parameter><decl><type><name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>ca_chain</name></decl></parameter>,
                                  <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>ca_crl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_chain</name></name>   <operator>=</operator> <name>ca_chain</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_ca_crl</name></name>     <operator>=</operator> <name>ca_crl</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_set_hs_authmode</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                  <parameter><decl><type><name>int</name></type> <name>authmode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>sni_authmode</name></name> <operator>=</operator> <name>authmode</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Set EC J-PAKE password for current handshake
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_set_hs_ecjpake_password</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>pw_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ecjpake_role</name></type> <name>role</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>role</name> <operator>=</operator> <name>MBEDTLS_ECJPAKE_SERVER</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>role</name> <operator>=</operator> <name>MBEDTLS_ECJPAKE_CLIENT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_ecjpake_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                   <argument><expr><name>role</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument>,
                                   <argument><expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr></argument>,
                                   <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pw_len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_conf_psk</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>psk_len</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psk_identity</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>psk_identity_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>psk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>psk_identity</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>psk_len</name> <operator>&gt;</operator> <name>MBEDTLS_PSK_MAX_LEN</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Identity len will be encoded on two bytes */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>psk_identity_len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name>psk_identity_len</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>psk_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <operator>(</operator> <name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>psk_identity_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name> <operator>=</operator> <name>psk_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name> <operator>=</operator> <name>psk_identity_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name></expr></argument>, <argument><expr><name>psk</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument>, <argument><expr><name>psk_identity</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_set_hs_psk</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>psk_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>psk</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>psk_len</name> <operator>&gt;</operator> <name>MBEDTLS_PSK_MAX_LEN</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>psk_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk_len</name></name> <operator>=</operator> <name>psk_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk</name></name></expr></argument>, <argument><expr><name>psk</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>psk_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_psk_cb</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_psk</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
                     <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_psk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_psk</name></name> <operator>=</operator> <name>f_psk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_psk</name></name> <operator>=</operator> <name>p_psk</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_conf_dh_param</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dhm_P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dhm_G</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_P</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dhm_P</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_G</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>dhm_G</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_P</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_G</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_conf_dh_param_ctx</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>mbedtls_dhm_context</name> <modifier>*</modifier></type><name>dhm_ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_P</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dhm_ctx</name><operator>-&gt;</operator><name>P</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_G</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dhm_ctx</name><operator>-&gt;</operator><name>G</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_P</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_G</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DHM_C &amp;&amp; MBEDTLS_SSL_SRV_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Set the minimum length for Diffie-Hellman parameters
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_dhm_min_bitlen</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                      <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>dhm_min_bitlen</name></name> <operator>=</operator> <name>bitlen</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DHM_C &amp;&amp; MBEDTLS_SSL_CLI_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Set allowed/preferred hashes for handshake signatures
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_sig_hashes</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>hashes</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name> <operator>=</operator> <name>hashes</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Set the allowed elliptic curves
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_curves</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group_id</name> <modifier>*</modifier></type><name>curve_list</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name> <operator>=</operator> <name>curve_list</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_set_hostname</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>hostname_len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>hostname</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>hostname_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>hostname</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>hostname_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>hostname_len</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_HOST_NAME_LEN</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hostname_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name><index>[<expr><name>hostname_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_sni</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_sni</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_sni</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_sni</name></name> <operator>=</operator> <name>f_sni</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_sni</name></name> <operator>=</operator> <name>p_sni</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_conf_alpn_protocols</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>protos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cur_len</name></decl>, <decl><type ref="prev"/><name>tot_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="block">/*
     * "Empty strings MUST NOT be included and byte strings MUST NOT be
     * truncated". Check lengths now rather than later.
     */</comment>
    <expr_stmt><expr><name>tot_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>p</name> <operator>=</operator> <name>protos</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>cur_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tot_len</name> <operator>+=</operator> <name>cur_len</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>cur_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cur_len</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>tot_len</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name> <operator>=</operator> <name>protos</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbedtls_ssl_get_alpn_protocol</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALPN */</comment>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_max_version</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>=</operator> <name>major</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_min_version</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name> <operator>=</operator> <name>major</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>=</operator> <name>minor</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_FALLBACK_SCSV</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_fallback</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>fallback</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>fallback</name></name> <operator>=</operator> <name>fallback</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_encrypt_then_mac</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>etm</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>=</operator> <name>etm</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_extended_master_secret</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ems</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>=</operator> <name>ems</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_arc4_support</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>arc4</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>arc4_disabled</name></name> <operator>=</operator> <name>arc4</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_conf_max_frag_len</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>mfl_code</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>mfl_code</name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MAX_FRAG_LEN_INVALID</name> <operator>||</operator>
        <name><name>mfl_code_to_length</name><index>[<expr><name>mfl_code</name></expr>]</index></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>mfl_code</name></name> <operator>=</operator> <name>mfl_code</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_truncated_hmac</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>truncate</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>=</operator> <name>truncate</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CBC_RECORD_SPLITTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_cbc_record_splitting</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>split</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>cbc_record_splitting</name></name> <operator>=</operator> <name>split</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_legacy_renegotiation</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_legacy</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>=</operator> <name>allow_legacy</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_renegotiation</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>renegotiation</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>disable_renegotiation</name></name> <operator>=</operator> <name>renegotiation</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_renegotiation_enforced</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_records</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name> <operator>=</operator> <name>max_records</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_conf_renegotiation_period</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>period</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>renego_period</name></name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_session_tickets</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_tickets</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>session_tickets</name></name> <operator>=</operator> <name>use_tickets</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_session_tickets_cb</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
        <parameter><decl><type><name>mbedtls_ssl_ticket_write_t</name> <modifier>*</modifier></type><name>f_ticket_write</name></decl></parameter>,
        <parameter><decl><type><name>mbedtls_ssl_ticket_parse_t</name> <modifier>*</modifier></type><name>f_ticket_parse</name></decl></parameter>,
        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ticket</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_ticket_write</name></name> <operator>=</operator> <name>f_ticket_write</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_ticket_parse</name></name> <operator>=</operator> <name>f_ticket_parse</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_ticket</name></name>       <operator>=</operator> <name>p_ticket</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXPORT_KEYS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_ssl_conf_export_keys_cb</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
        <parameter><decl><type><name>mbedtls_ssl_export_keys_t</name> <modifier>*</modifier></type><name>f_export_keys</name></decl></parameter>,
        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_export_keys</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_export_keys</name></name> <operator>=</operator> <name>f_export_keys</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>p_export_keys</name></name> <operator>=</operator> <name>p_export_keys</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * SSL get accessors
 */</comment>
<function><type><name>size_t</name></type> <name>mbedtls_ssl_get_bytes_avail</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></else></ternary> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>mbedtls_ssl_get_verify_result</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>verify_result</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0xFFFFFFFF</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbedtls_ssl_get_ciphersuite</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>mbedtls_ssl_get_ciphersuite_name</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>ciphersuite</name></name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbedtls_ssl_get_version</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <switch>switch<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr> )</condition>
        <block>{<block_content>
            <case>case <expr><name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>:</case>
                <return>return<expr><operator>(</operator> <literal type="string">"DTLSv1.0"</literal> <operator>)</operator></expr>;</return>

            <case>case <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>:</case>
                <return>return<expr><operator>(</operator> <literal type="string">"DTLSv1.2"</literal> <operator>)</operator></expr>;</return>

            <default>default:</default>
                <return>return<expr><operator>(</operator> <literal type="string">"unknown (DTLS)"</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>:</case>
            <return>return<expr><operator>(</operator> <literal type="string">"SSLv3.0"</literal> <operator>)</operator></expr>;</return>

        <case>case <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>:</case>
            <return>return<expr><operator>(</operator> <literal type="string">"TLSv1.0"</literal> <operator>)</operator></expr>;</return>

        <case>case <expr><name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>:</case>
            <return>return<expr><operator>(</operator> <literal type="string">"TLSv1.1"</literal> <operator>)</operator></expr>;</return>

        <case>case <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>:</case>
            <return>return<expr><operator>(</operator> <literal type="string">"TLSv1.2"</literal> <operator>)</operator></expr>;</return>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <literal type="string">"unknown"</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_get_record_expansion</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>transform_expansion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_transform</name> <modifier>*</modifier></type><name>transform</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_out</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>transform</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch<condition>( <expr><call><name>mbedtls_cipher_get_cipher_mode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_MODE_GCM</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_MODE_CCM</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_MODE_STREAM</name></expr>:</case>
            <expr_stmt><expr><name>transform_expansion</name> <operator>=</operator> <name><name>transform</name><operator>-&gt;</operator><name>minlen</name></name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>MBEDTLS_MODE_CBC</name></expr>:</case>
            <expr_stmt><expr><name>transform_expansion</name> <operator>=</operator> <name><name>transform</name><operator>-&gt;</operator><name>maclen</name></name>
                      <operator>+</operator> <call><name>mbedtls_cipher_get_block_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>mbedtls_ssl_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>transform_expansion</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>size_t</name></type> <name>mbedtls_ssl_get_max_frag_len</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_len</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Assume mfl_code is correct since it was checked when set
     */</comment>
    <expr_stmt><expr><name>max_len</name> <operator>=</operator> <name><name>mfl_code_to_length</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>mfl_code</name></name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Check if a smaller max length was negotiated
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_out</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <name><name>mfl_code_to_length</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>session_out</name><operator>-&gt;</operator><name>mfl_code</name></name></expr>]</index></name> <operator>&lt;</operator> <name>max_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>max_len</name> <operator>=</operator> <name><name>mfl_code_to_length</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>session_out</name><operator>-&gt;</operator><name>mfl_code</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>max_len</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>mbedtls_ssl_get_peer_cert</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_get_session</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name>dst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>ssl_session_copy</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>

<comment type="block">/*
 * Perform a single step of the SSL handshake
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_handshake_step</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake_client_step</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake_server_step</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform the SSL handshake
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_handshake</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; handshake"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake_step</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= handshake"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Write HelloRequest to request renegotiation on server
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_hello_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write hello request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_HELLO_REQUEST</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write hello request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>

<comment type="block">/*
 * Actually renegotiate current connection, triggered by either:
 * - any side: calling mbedtls_ssl_renegotiate(),
 * - client: receiving a HelloRequest during mbedtls_ssl_read(),
 * - server: receiving any handshake message on server during mbedtls_ssl_read() after
 *   the initial handshake is completed.
 * If the handshake doesn't complete due to waiting for I/O, it will continue
 * during the next calls to mbedtls_ssl_renegotiate() or mbedtls_ssl_read() respectively.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_start_renegotiation</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; renegotiate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_handshake_init</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* RFC 6347 4.2.2: "[...] the HelloRequest will have message_seq = 0 and
     * the ServerHello will have message_seq = 1" */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>out_msg_seq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>in_msg_seq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HELLO_REQUEST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_handshake"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= renegotiate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Renegotiate current connection on client,
 * or request renegotiation on server
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_renegotiate</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* On server, just send the request */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name></expr>;</expr_stmt>

        <comment type="block">/* Did we already try/start sending HelloRequest? */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <call><name>ssl_write_hello_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * On client, either start the renegotiation process or,
     * if already in progress, continue the handshake
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_start_renegotiation</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_start_renegotiation"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_handshake"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check record counters and renegotiate if they're above the limit.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_check_ctr_renegotiate</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>disable_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_DISABLED</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_ctr</name></name></expr></argument>,  <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_period</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_ctr</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_period</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"record counter limit reached: renegotiate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_ssl_renegotiate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

<comment type="block">/*
 * Receive application data decrypted from the SSL layer
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_read</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>record_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; read"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_resend</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_check_ctr_renegotiate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_check_ctr_renegotiate"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>record_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_handshake"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Start timer if not already running */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>f_get_timer</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <call><name><name>ssl</name><operator>-&gt;</operator><name>f_get_timer</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>p_timer</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>read_timeout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator> <name>record_read</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_CONN_EOF</name></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name>  <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_APPLICATION_DATA</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * OpenSSL sends empty messages to randomize the IV
             */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_CONN_EOF</name></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received handshake message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name> <operator>&amp;&amp;</operator>
                <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_HELLO_REQUEST</name> <operator>||</operator>
                  <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>!=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake received (not HelloRequest)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* With DTLS, drop the packet (probably from last handshake) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_CLIENT_HELLO</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake received (not ClientHello)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* With DTLS, drop the packet (probably from last handshake) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>disable_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_DISABLED</name> <operator>||</operator>
                <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
                  <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>==</operator>
                                                <name>MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION</name> <operator>)</operator></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"refusing renegotiation, sending alert"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
                <block>{<block_content>
                    <comment type="block">/*
                     * SSLv3 does not have a "no_renegotiation" alert
                     */</comment>
                    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
                if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr> )</condition>
                <block>{<block_content>
                    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                                    <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name></expr></argument>,
                                    <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                    <block>{<block_content>
                        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="block">/* DTLS clients need to know renego is server-initiated */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
                    <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_start_renegotiation</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO</name></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>record_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_start_renegotiation"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="block">/* If a non-handshake record was read during renego, fallthrough,
             * else tell the user they should call mbedtls_ssl_read() again */</comment>
            <if_stmt><if>if<condition>( <expr><operator>!</operator> <name>record_read</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name></expr> )</condition>
        <block>{<block_content>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ssl</name><operator>-&gt;</operator><name>renego_records_seen</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name></expr> )</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"renegotiation requested, "</literal>
                                        <literal type="string">"but not honored by client"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

        <comment type="block">/* Fatal and closure alerts handled by mbedtls_ssl_read_record() */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MSG_ALERT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ignoring non-fatal non-closure alert"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_APPLICATION_DATA</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad application data message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>

        <comment type="block">/* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ssl_set_timer</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <comment type="block">/* If we requested renego but received AppData, resend HelloRequest.
         * Do it now, after setting in_offt, to avoid taking this branch
         * again if ssl_write_hello_request() returns WANT_WRITE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name> <operator>&amp;&amp;</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_PENDING</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_resend_hello_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_resend_hello_request"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SRV_C &amp;&amp; MBEDTLS_SSL_RENEGOTIATION */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>len</name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator></expr>
        ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <comment type="block">/* all bytes consumed  */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <comment type="block">/* more data available */</comment>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_offt</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= read"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Send application data to be encrypted by the SSL layer,
 * taking care of max fragment length and buffer size
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_real</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_len</name> <init>= <expr><call><name>mbedtls_ssl_get_max_frag_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <name>max_len</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"fragment larger than the (negotiated) "</literal>
                                <literal type="string">"maximum fragment length: %d &gt; %d"</literal><operator>,</operator>
                                <name>len</name><operator>,</operator> <name>max_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>max_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_flush_output"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_APPLICATION_DATA</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write application data, doing 1/n-1 splitting if necessary.
 *
 * With non-blocking I/O, ssl_write_real() may return WANT_WRITE,
 * then the caller will call us again with the same arguments, so
 * remember wether we already did the split or not.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CBC_RECORD_SPLITTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_split</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>cbc_record_splitting</name></name> <operator>==</operator>
            <name>MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED</name> <operator>||</operator>
        <name>len</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name> <operator>||</operator>
        <call><name>mbedtls_cipher_get_cipher_mode</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>transform_out</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument> )</argument_list></call>
                                <operator>!=</operator> <name>MBEDTLS_MODE_CBC</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <call><name>ssl_write_real</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>split_done</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_write_real</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>split_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_write_real</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>split_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CBC_RECORD_SPLITTING */</comment>

<comment type="block">/*
 * Write application data (public-facing wrapper)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_write</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_check_ctr_renegotiate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_check_ctr_renegotiate"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_handshake</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_handshake"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CBC_RECORD_SPLITTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_split</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_real</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Notify the peer that the connection is being closed
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_close_notify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write close notify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_left</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_WARNING</name></expr></argument>,
                        <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_send_alert_message"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write close notify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_transform_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_transform</name> <modifier>*</modifier></type><name>transform</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>transform</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>deflateEnd</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>ctx_deflate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>inflateEnd</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>ctx_inflate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>cipher_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_enc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>transform</name><operator>-&gt;</operator><name>md_ctx_dec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>transform</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_transform</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_key_cert_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier></type><name>key_cert</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>key_cert</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<function><type><name>void</name></type> <name>mbedtls_ssl_handshake_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_handshake_params</name> <modifier>*</modifier></type><name>handshake</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>handshake</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(    <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_md5</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha256_free</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha256</name></name></expr></argument>    )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_sha512_free</name><argument_list>(   <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>fin_sha512</name></name></expr></argument>    )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_dhm_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_ecdh_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_ecjpake_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* explicit void pointer cast for buggy MS compiler */</comment>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>handshake</name><operator>-&gt;</operator><name>curves</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>handshake</name><operator>-&gt;</operator><name>psk</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>psk</name></name></expr></argument>, <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>psk_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>psk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>handshake</name><operator>-&gt;</operator><name>sni_key_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_ssl_key_cert</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>handshake</name><operator>-&gt;</operator><name>sni_key_cert</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

        <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C &amp;&amp; MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>hs_msg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ssl_flight_free</name><argument_list>( <argument><expr><name><name>handshake</name><operator>-&gt;</operator><name>flight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>handshake</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_handshake_params</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_session_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>session</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>session</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free an SSL context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ssl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; free"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_BUFFER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>compress_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_transform_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_handshake_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_transform_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_session_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_HW_RECORD_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>mbedtls_ssl_hw_record_finish</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"going for mbedtls_ssl_hw_record_finish()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_hw_record_finish</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>cli_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= free"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Actually clear after last debug message */</comment>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialze mbedtls_ssl_config
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_config_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_config</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ssl_preset_default_hashes</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>MBEDTLS_MD_SHA512</name></expr>,
    <expr><name>MBEDTLS_MD_SHA384</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>MBEDTLS_MD_SHA256</name></expr>,
    <expr><name>MBEDTLS_MD_SHA224</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>MBEDTLS_MD_SHA1</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>MBEDTLS_MD_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ssl_preset_suiteb_ciphersuites</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>ssl_preset_suiteb_hashes</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_SHA256</name></expr>,
    <expr><name>MBEDTLS_MD_SHA384</name></expr>,
    <expr><name>MBEDTLS_MD_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>mbedtls_ecp_group_id</name></type> <name><name>ssl_preset_suiteb_curves</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr>,
    <expr><name>MBEDTLS_ECP_DP_SECP384R1</name></expr>,
    <expr><name>MBEDTLS_ECP_DP_NONE</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Load default in mbedtls_ssl_config
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_config_defaults</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transport</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>preset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Use the functions here so that they are covered in tests,
     * but otherwise access member directly for efficiency */</comment>
    <expr_stmt><expr><call><name>mbedtls_ssl_conf_endpoint</name><argument_list>( <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ssl_conf_transport</name><argument_list>( <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>transport</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Things that are common to all presets
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>endpoint</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_CLIENT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>authmode</name></name> <operator>=</operator> <name>MBEDTLS_SSL_VERIFY_REQUIRED</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>session_tickets</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SESSION_TICKETS_ENABLED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>arc4_disabled</name></name> <operator>=</operator> <name>MBEDTLS_SSL_ARC4_DISABLED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>=</operator> <name>MBEDTLS_SSL_ETM_ENABLED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>=</operator> <name>MBEDTLS_SSL_EXTENDED_MS_ENABLED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CBC_RECORD_SPLITTING</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>cbc_record_splitting</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_HELLO_VERIFY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_cookie_write</name></name> <operator>=</operator> <name>ssl_cookie_write_dummy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>f_cookie_check</name></name> <operator>=</operator> <name>ssl_cookie_check_dummy</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_DTLS_ANTI_REPLAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>anti_replay</name></name> <operator>=</operator> <name>MBEDTLS_SSL_ANTI_REPLAY_ENABLED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hs_timeout_min</name></name> <operator>=</operator> <name>MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hs_timeout_max</name></name> <operator>=</operator> <name>MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name> <operator>=</operator> <name>MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>renego_period</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>renego_period</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SRV_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name>endpoint</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_conf_dh_param</name><argument_list>( <argument><expr><name>conf</name></expr></argument>,
                                <argument><expr><name>MBEDTLS_DHM_RFC5114_MODP_2048_P</name></expr></argument>,
                                <argument><expr><name>MBEDTLS_DHM_RFC5114_MODP_2048_G</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
                <block>{<block_content>
                    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Preset-specific defaults
     */</comment>
    <switch>switch<condition>( <expr><name>preset</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * NSA Suite B
         */</comment>
        <case>case <expr><name>MBEDTLS_SSL_PRESET_SUITEB</name></expr>:</case>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>;</expr_stmt> <comment type="block">/* TLS 1.2 */</comment>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAX_MAJOR_VERSION</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAX_MINOR_VERSION</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>]</index></name> <operator>=</operator>
            <name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>]</index></name> <operator>=</operator>
            <name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>]</index></name> <operator>=</operator>
            <name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>]</index></name> <operator>=</operator>
                                   <name>ssl_preset_suiteb_ciphersuites</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>cert_profile</name></name> <operator>=</operator> <operator>&amp;</operator><name>mbedtls_x509_crt_profile_suiteb</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name> <operator>=</operator> <name>ssl_preset_suiteb_hashes</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name> <operator>=</operator> <name>ssl_preset_suiteb_curves</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break;</break>

        <comment type="block">/*
         * Default
         */</comment>
        <default>default:</default>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>;</expr_stmt> <comment type="block">/* TLS 1.0 */</comment>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAX_MAJOR_VERSION</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MAX_MINOR_VERSION</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if_stmt><if>if<condition>( <expr><name>transport</name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>]</index></name> <operator>=</operator>
            <name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>]</index></name> <operator>=</operator>
            <name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr>]</index></name> <operator>=</operator>
            <name><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>]</index></name> <operator>=</operator>
                                   <call><name>mbedtls_ssl_list_ciphersuites</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>cert_profile</name></name> <operator>=</operator> <operator>&amp;</operator><name>mbedtls_x509_crt_profile_default</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name> <operator>=</operator> <name>ssl_preset_default_hashes</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name> <operator>=</operator> <call><name>mbedtls_ecp_grp_id_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>dhm_min_bitlen</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free mbedtls_ssl_config
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_config_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_config</name> <modifier>*</modifier></type><name>conf</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_P</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>conf</name><operator>-&gt;</operator><name>dhm_G</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_key_cert_free</name><argument_list>( <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>conf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_config</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
<comment type="block">/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */</comment>
<function><type><name>unsigned</name> <name>char</name></type> <name>mbedtls_ssl_sig_from_pk</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>MBEDTLS_PK_RSA</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_SIG_RSA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>MBEDTLS_PK_ECDSA</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_SIG_ECDSA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_SIG_ANON</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>mbedtls_pk_type_t</name></type> <name>mbedtls_ssl_pk_alg_from_sig</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>sig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name>sig</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_SIG_RSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_RSA</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_SIG_ECDSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_NONE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_C &amp;&amp; ( MBEDTLS_RSA_C || MBEDTLS_ECDSA_C ) */</comment>

<comment type="block">/*
 * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
 */</comment>
<function><type><name>mbedtls_md_type_t</name></type> <name>mbedtls_ssl_md_alg_from_hash</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>hash</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name>hash</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_MD5</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_MD5</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA1</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_SHA1</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA224</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_SHA224</name> <operator>)</operator></expr>;</return>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA256</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_SHA256</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA384</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_SHA384</name> <operator>)</operator></expr>;</return>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA512</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_SHA512</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_MD_NONE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */</comment>
<function><type><name>unsigned</name> <name>char</name></type> <name>mbedtls_ssl_hash_from_md_alg</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name>md</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_MD_MD5</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_MD5</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_MD_SHA1</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_SHA1</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_MD_SHA224</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_SHA224</name> <operator>)</operator></expr>;</return>
        <case>case <expr><name>MBEDTLS_MD_SHA256</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_SHA256</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_MD_SHA384</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_SHA384</name> <operator>)</operator></expr>;</return>
        <case>case <expr><name>MBEDTLS_MD_SHA512</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_SHA512</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_SSL_HASH_NONE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Check if a curve proposed by the peer is in our list.
 * Return 0 if we're willing to use it, -1 otherwise.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_check_curve</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>mbedtls_ecp_group_id</name></type> <name>grp_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group_id</name> <modifier>*</modifier></type><name>gid</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>gid</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>gid</name> <operator>!=</operator> <name>MBEDTLS_ECP_DP_NONE</name></expr>;</condition> <incr><expr><name>gid</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>gid</name> <operator>==</operator> <name>grp_id</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Check if a hash proposed by the peer is in our list.
 * Return 0 if we're willing to use it, -1 otherwise.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_check_sig_hash</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cur</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>cur</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>md</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_check_cert_usage</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crt</name> <modifier>*</modifier></type><name>cert</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>cert_endpoint</name></decl></parameter>,
                          <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>flags</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>usage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ext_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ext_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>          \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cert</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>cert_endpoint</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>flags</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>cert_endpoint</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Server part of the key exchange */</comment>
        <switch>switch<condition>( <expr><name><name>ciphersuite</name><operator>-&gt;</operator><name>key_exchange</name></name></expr> )</condition>
        <block>{<block_content>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>:</case>
                <expr_stmt><expr><name>usage</name> <operator>=</operator> <name>MBEDTLS_X509_KU_KEY_ENCIPHERMENT</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>:</case>
                <expr_stmt><expr><name>usage</name> <operator>=</operator> <name>MBEDTLS_X509_KU_DIGITAL_SIGNATURE</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>:</case>
                <expr_stmt><expr><name>usage</name> <operator>=</operator> <name>MBEDTLS_X509_KU_KEY_AGREEMENT</name></expr>;</expr_stmt>
                <break>break;</break>

            <comment type="block">/* Don't use default: we want warnings when adding new values */</comment>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_NONE</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>:</case>
            <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr>:</case>
                <expr_stmt><expr><name>usage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */</comment>
        <expr_stmt><expr><name>usage</name> <operator>=</operator> <name>MBEDTLS_X509_KU_DIGITAL_SIGNATURE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_crt_check_key_usage</name><argument_list>( <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>usage</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_KEY_USAGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ciphersuite</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CHECK_KEY_USAGE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>cert_endpoint</name> <operator>==</operator> <name>MBEDTLS_SSL_IS_SERVER</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ext_oid</name> <operator>=</operator> <name>MBEDTLS_OID_SERVER_AUTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ext_len</name> <operator>=</operator> <call><name>MBEDTLS_OID_SIZE</name><argument_list>( <argument><expr><name>MBEDTLS_OID_SERVER_AUTH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>ext_oid</name> <operator>=</operator> <name>MBEDTLS_OID_CLIENT_AUTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ext_len</name> <operator>=</operator> <call><name>MBEDTLS_OID_SIZE</name><argument_list>( <argument><expr><name>MBEDTLS_OID_CLIENT_AUTH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_x509_crt_check_extended_key_usage</name><argument_list>( <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>ext_oid</name></expr></argument>, <argument><expr><name>ext_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>MBEDTLS_X509_BADCERT_EXT_KEY_USAGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */</comment>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

<comment type="block">/*
 * Convert version numbers to/from wire format
 * and, for DTLS, to/from TLS equivalent.
 *
 * For TLS this is the identity.
 * For DTLS, use one complement (v -&gt; 255 - v, and then map as follows:
 * 1.0 &lt;-&gt; 3.2      (DTLS 1.0 is based on TLS 1.1)
 * 1.x &lt;-&gt; 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_write_version</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transport</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>transport</name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>minor</name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_2</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>--</operator><name>minor</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* DTLS 1.0 stored as TLS 1.1 internally */</comment>

        <expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator> <name>major</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator> <name>minor</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>transport</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>major</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>minor</name></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ssl_read_version</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>major</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>minor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>transport</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ver</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>transport</name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>major</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>minor</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>minor</name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><operator>*</operator><name>minor</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* DTLS 1.0 stored as TLS 1.1 internally */</comment>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>transport</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>major</name> <operator>=</operator> <name><name>ver</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>minor</name> <operator>=</operator> <name><name>ver</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_set_calc_verify_md</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>md</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><name>MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH</name></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch<condition>( <expr><name>md</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_MD5</name></expr>:</case>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls</name></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA1</name></expr>:</case>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls</name></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA384</name></expr>:</case>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls_sha384</name></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_SSL_HASH_SHA256</name></expr>:</case>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name> <operator>=</operator> <name>ssl_calc_verify_tls_sha256</name></expr>;</expr_stmt>
            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default>
            <return>return <expr><name>MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH</name></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>md</name></expr>;</expr_stmt>

    <return>return <expr><name>MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TLS_C */</comment>
</unit>
