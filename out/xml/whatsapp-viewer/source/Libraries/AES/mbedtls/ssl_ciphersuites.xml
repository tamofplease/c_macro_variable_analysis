<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ssl_ciphersuites.c"><comment type="block" format="doxygen">/**
 * \file ssl_ciphersuites.c
 *
 * \brief SSL ciphersuites for mbed TLS
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TLS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_ciphersuites.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Ordered from most preferred to least preferred in terms of security.
 *
 * Current rule (except rc4, weak and null which come last):
 * 1. By key exchange:
 *    Forward-secure non-PSK &gt; forward-secure PSK &gt; ECJPAKE &gt; other non-PSK &gt; other PSK
 * 2. By key length and cipher:
 *    AES-256 &gt; Camellia-256 &gt; AES-128 &gt; Camellia-128 &gt; 3DES
 * 3. By cipher mode when relevant GCM &gt; CCM &gt; CBC &gt; CCM_8
 * 4. By hash function used when relevant
 * 5. By key exchange/auth again: EC &gt; non-EC
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ciphersuite_preference</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>MBEDTLS_SSL_CIPHERSUITES</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* All AES-256 ephemeral suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8</name></expr>,

    <comment type="block">/* All CAMELLIA-256 ephemeral suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA</name></expr>,

    <comment type="block">/* All AES-128 ephemeral suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8</name></expr>,

    <comment type="block">/* All CAMELLIA-128 ephemeral suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA</name></expr>,

    <comment type="block">/* All remaining &gt;= 128-bit ephemeral suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,

    <comment type="block">/* The PSK ephemeral suites */</comment>
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8</name></expr>,

    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8</name></expr>,

    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>,

    <comment type="block">/* The ECJPAKE suite */</comment>
    <expr><name>MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8</name></expr>,

    <comment type="block">/* All AES-256 suites */</comment>
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8</name></expr>,

    <comment type="block">/* All CAMELLIA-256 suites */</comment>
    <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,

    <comment type="block">/* All AES-128 suites */</comment>
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8</name></expr>,

    <comment type="block">/* All CAMELLIA-128 suites */</comment>
    <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,

    <comment type="block">/* All remaining &gt;= 128-bit suites */</comment>
    <expr><name>MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>,

    <comment type="block">/* The RSA PSK suites */</comment>
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,

    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,

    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>,

    <comment type="block">/* The PSK suites */</comment>
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8</name></expr>,

    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CCM</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8</name></expr>,

    <expr><name>MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>,

    <comment type="block">/* RC4 suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_RC4_128_MD5</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_RC4_128_SHA</name></expr>,

    <comment type="block">/* Weak suites */</comment>
    <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA</name></expr>,

    <comment type="block">/* NULL suites */</comment>
    <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA</name></expr>,

    <expr><name>MBEDTLS_TLS_RSA_WITH_NULL_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_WITH_NULL_MD5</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_NULL_SHA384</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_NULL_SHA256</name></expr>,
    <expr><name>MBEDTLS_TLS_PSK_WITH_NULL_SHA</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CIPHERSUITES */</comment>
    <expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name></type> <name><name>ciphersuite_definitions</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-256-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-256-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-128-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-AES-128-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-ECDSA-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-RSA-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C &amp;&amp; MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-256-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-256-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-256-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-128-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-AES-128-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C &amp;&amp; MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-256-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CCM</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-256-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-256-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CCM</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-128-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-AES-128-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-CAMELLIA-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-CAMELLIA-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_RC4_128_MD5</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-RC4-128-MD5"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_MD5</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-RSA-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-ECDH-ECDSA-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CCM</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-256-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-256-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CCM</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-128-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-AES-128-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-256-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-256-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-128-CCM"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-AES-128-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-AES-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-AES-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-AES-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-AES-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-AES-128-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-AES-256-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-CAMELLIA-128-CBC-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-CAMELLIA-256-CBC-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-CAMELLIA-128-GCM-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-CAMELLIA-256-GCM-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-3DES-EDE-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-RC4-128-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_NODTLS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8</name></expr>, <expr><literal type="string">"TLS-ECJPAKE-WITH-AES-128-CCM-8"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_SHORT_TAG</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENABLE_WEAK_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_NULL_MD5</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-NULL-MD5"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_MD5</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_NULL_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-NULL-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_NULL_SHA256</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-NULL-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_PSK_WITH_NULL_SHA384</name></expr>, <expr><literal type="string">"TLS-PSK-WITH-NULL-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-NULL-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384</name></expr>, <expr><literal type="string">"TLS-DHE-PSK-WITH-NULL-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-NULL-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384</name></expr>, <expr><literal type="string">"TLS-ECDHE-PSK-WITH-NULL-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-NULL-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-NULL-SHA256"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA256</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384</name></expr>, <expr><literal type="string">"TLS-RSA-PSK-WITH-NULL-SHA384"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NULL</name></expr>, <expr><name>MBEDTLS_MD_SHA384</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_1</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-DHE-RSA-WITH-DES-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA</name></expr>, <expr><literal type="string">"TLS-RSA-WITH-DES-CBC-SHA"</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_DES_CBC</name></expr>, <expr><name>MBEDTLS_MD_SHA1</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr>,
      <expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name></expr>, <expr><name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr>,
      <expr><name>MBEDTLS_CIPHERSUITE_WEAK</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENABLE_WEAK_CIPHERSUITES */</comment>

    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">""</literal></expr>,
      <expr><name>MBEDTLS_CIPHER_NONE</name></expr>, <expr><name>MBEDTLS_MD_NONE</name></expr>, <expr><name>MBEDTLS_KEY_EXCHANGE_NONE</name></expr>,
      <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>mbedtls_ssl_list_ciphersuites</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <name>ciphersuite_preference</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CIPHERSUITES</name></cpp:macro>    <cpp:value>sizeof( ciphersuite_definitions     ) /         \
                            sizeof( ciphersuite_definitions[0]  )</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>supported_ciphersuites</name><index>[<expr><name>MAX_CIPHERSUITES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>supported_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>mbedtls_ssl_list_ciphersuites</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>supported_init</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>p</name> <operator>=</operator> <name>ciphersuite_preference</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name>supported_ciphersuites</name></expr>;</init>
             <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>q</name> <operator>&lt;</operator> <name>supported_ciphersuites</name> <operator>+</operator> <name>MAX_CIPHERSUITES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition>
             <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_REMOVE_ARC4_CIPHERSUITES</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>cs_info</name></decl>;</decl_stmt>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>cs_info</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
                <name><name>cs_info</name><operator>-&gt;</operator><name>cipher</name></name> <operator>!=</operator> <name>MBEDTLS_CIPHER_ARC4_128</name></expr> )</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>q</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>supported_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>supported_ciphersuites</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CIPHERSUITES */</comment>

<function><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>mbedtls_ssl_ciphersuite_from_string</name><parameter_list>(
                                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ciphersuite_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>ciphersuite_definitions</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ciphersuite_name</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>ciphersuite_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>cur</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>mbedtls_ssl_ciphersuite_from_id</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>ciphersuite</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>ciphersuite_definitions</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>ciphersuite</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>cur</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbedtls_ssl_get_ciphersuite_name</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ciphersuite_id</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><name>ciphersuite_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="string">"unknown"</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name><name>cur</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ssl_get_ciphersuite_id</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ciphersuite_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_string</name><argument_list>( <argument><expr><name>ciphersuite_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name><name>cur</name><operator>-&gt;</operator><name>id</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>mbedtls_pk_type_t</name></type> <name>mbedtls_ssl_get_ciphersuite_sig_pk_alg</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name><name>info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_RSA</name> <operator>)</operator></expr>;</return>

        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>)</operator></expr>;</return>

        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_ECKEY</name> <operator>)</operator></expr>;</return>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_PK_NONE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_ciphersuite_uses_ec</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name><name>info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr>:</case>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ssl_ciphersuite_uses_psk</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name><name>info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr>:</case>
        <case>case <expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr>:</case>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>

        <default>default:</default>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TLS_C */</comment>
</unit>
