<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/aesni.c"><comment type="block">/*
 *  AES-NI support functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 * [AES-WP] http://software.intel.com/en-us/articles/intel-advanced-encryption-standard-aes-instructions-set
 * [CLMUL-WP] http://software.intel.com/en-us/articles/intel-carry-less-multiplication-instruction-and-its-usage-for-computing-the-gcm-mode/
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aesni.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>asm</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asm</name></cpp:macro> <cpp:value>__asm</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * AES-NI support detection routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aesni_has_support</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>what</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator> <name>done</name></expr> )</condition>
    <block>{<block_content>
        <asm>asm( "movl  $1, %%eax   \n\t"
             "cpuid             \n\t"
             : "=c" (c)
             :
             : "eax", "ebx", "edx" );</asm>
        <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator> <name>c</name> <operator>&amp;</operator> <name>what</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Binutils needs to be at least 2.19 to support AES-NI instructions.
 * Unfortunately, a lot of users have a lower version now (2014-04).
 * Emit bytecode directly in order to support "old" version of gas.
 *
 * Opcodes from the Intel architecture reference manual, vol. 3.
 * We always use registers, so we don't need prefixes for memory operands.
 * Operand macros are in gas order (src, dst) as opposed to Intel order
 * (dst, src) in order to blend better into the surrounding assembly code.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AESDEC</name></cpp:macro>      <cpp:value>".byte 0x66,0x0F,0x38,0xDE,"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AESDECLAST</name></cpp:macro>  <cpp:value>".byte 0x66,0x0F,0x38,0xDF,"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AESENC</name></cpp:macro>      <cpp:value>".byte 0x66,0x0F,0x38,0xDC,"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AESENCLAST</name></cpp:macro>  <cpp:value>".byte 0x66,0x0F,0x38,0xDD,"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AESIMC</name></cpp:macro>      <cpp:value>".byte 0x66,0x0F,0x38,0xDB,"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AESKEYGENA</name></cpp:macro>  <cpp:value>".byte 0x66,0x0F,0x3A,0xDF,"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCLMULQDQ</name></cpp:macro>   <cpp:value>".byte 0x66,0x0F,0x3A,0x44,"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm0_xmm0</name></cpp:macro>   <cpp:value>"0xC0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm0_xmm1</name></cpp:macro>   <cpp:value>"0xC8"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm0_xmm2</name></cpp:macro>   <cpp:value>"0xD0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm0_xmm3</name></cpp:macro>   <cpp:value>"0xD8"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm0_xmm4</name></cpp:macro>   <cpp:value>"0xE0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm1_xmm0</name></cpp:macro>   <cpp:value>"0xC1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmm1_xmm2</name></cpp:macro>   <cpp:value>"0xD1"</cpp:value></cpp:define>

<comment type="block">/*
 * AES-NI AES-ECB block en(de)cryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aesni_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                     <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <asm>asm( "movdqu    (%3), %%xmm0    \n\t" <comment type="line">// load input</comment>
         "movdqu    (%1), %%xmm1    \n\t" <comment type="line">// load round key 0</comment>
         "pxor      %%xmm1, %%xmm0  \n\t" <comment type="line">// round 0</comment>
         "add       $16, %1         \n\t" <comment type="line">// point to next round key</comment>
         "subl      $1, %0          \n\t" <comment type="line">// normal rounds = nr - 1</comment>
         "test      %2, %2          \n\t" <comment type="line">// mode?</comment>
         "jz        2f              \n\t" <comment type="line">// 0 = decrypt</comment>

         "1:                        \n\t" <comment type="line">// encryption loop</comment>
         "movdqu    (%1), %%xmm1    \n\t" <comment type="line">// load round key</comment>
         AESENC     xmm1_xmm0      "\n\t" <comment type="line">// do round</comment>
         "add       $16, %1         \n\t" <comment type="line">// point to next round key</comment>
         "subl      $1, %0          \n\t" <comment type="line">// loop</comment>
         "jnz       1b              \n\t"
         "movdqu    (%1), %%xmm1    \n\t" <comment type="line">// load round key</comment>
         AESENCLAST xmm1_xmm0      "\n\t" <comment type="line">// last round</comment>
         "jmp       3f              \n\t"

         "2:                        \n\t" <comment type="line">// decryption loop</comment>
         "movdqu    (%1), %%xmm1    \n\t"
         AESDEC     xmm1_xmm0      "\n\t" <comment type="line">// do round</comment>
         "add       $16, %1         \n\t"
         "subl      $1, %0          \n\t"
         "jnz       2b              \n\t"
         "movdqu    (%1), %%xmm1    \n\t" <comment type="line">// load round key</comment>
         AESDECLAST xmm1_xmm0      "\n\t" <comment type="line">// last round</comment>

         "3:                        \n\t"
         "movdqu    %%xmm0, (%4)    \n\t" <comment type="line">// export output</comment>
         :
         : "r" (ctx-&gt;nr), "r" (ctx-&gt;rk), "r" (mode), "r" (input), "r" (output)
         : "memory", "cc", "xmm0", "xmm1" );</asm>


    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GCM multiplication: c = a times b in GF(2^128)
 * Based on [CLMUL-WP] algorithms 1 (with equation 27) and 5.
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_aesni_gcm_mult</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aa</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* The inputs are in big-endian order, so byte-reverse them */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>bb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <asm>asm( "movdqu (%0), %%xmm0               \n\t" <comment type="line">// a1:a0</comment>
         "movdqu (%1), %%xmm1               \n\t" <comment type="line">// b1:b0</comment>

         <comment type="block">/*
          * Caryless multiplication xmm2:xmm1 = xmm0 * xmm1
          * using [CLMUL-WP] algorithm 1 (p. 13).
          */</comment>
         "movdqa %%xmm1, %%xmm2             \n\t" <comment type="line">// copy of b1:b0</comment>
         "movdqa %%xmm1, %%xmm3             \n\t" <comment type="line">// same</comment>
         "movdqa %%xmm1, %%xmm4             \n\t" <comment type="line">// same</comment>
         PCLMULQDQ xmm0_xmm1 ",0x00         \n\t" <comment type="line">// a0*b0 = c1:c0</comment>
         PCLMULQDQ xmm0_xmm2 ",0x11         \n\t" <comment type="line">// a1*b1 = d1:d0</comment>
         PCLMULQDQ xmm0_xmm3 ",0x10         \n\t" <comment type="line">// a0*b1 = e1:e0</comment>
         PCLMULQDQ xmm0_xmm4 ",0x01         \n\t" <comment type="line">// a1*b0 = f1:f0</comment>
         "pxor %%xmm3, %%xmm4               \n\t" <comment type="line">// e1+f1:e0+f0</comment>
         "movdqa %%xmm4, %%xmm3             \n\t" <comment type="line">// same</comment>
         "psrldq $8, %%xmm4                 \n\t" <comment type="line">// 0:e1+f1</comment>
         "pslldq $8, %%xmm3                 \n\t" <comment type="line">// e0+f0:0</comment>
         "pxor %%xmm4, %%xmm2               \n\t" <comment type="line">// d1:d0+e1+f1</comment>
         "pxor %%xmm3, %%xmm1               \n\t" <comment type="line">// c1+e0+f1:c0</comment>

         <comment type="block">/*
          * Now shift the result one bit to the left,
          * taking advantage of [CLMUL-WP] eq 27 (p. 20)
          */</comment>
         "movdqa %%xmm1, %%xmm3             \n\t" <comment type="line">// r1:r0</comment>
         "movdqa %%xmm2, %%xmm4             \n\t" <comment type="line">// r3:r2</comment>
         "psllq $1, %%xmm1                  \n\t" <comment type="line">// r1&lt;&lt;1:r0&lt;&lt;1</comment>
         "psllq $1, %%xmm2                  \n\t" <comment type="line">// r3&lt;&lt;1:r2&lt;&lt;1</comment>
         "psrlq $63, %%xmm3                 \n\t" <comment type="line">// r1&gt;&gt;63:r0&gt;&gt;63</comment>
         "psrlq $63, %%xmm4                 \n\t" <comment type="line">// r3&gt;&gt;63:r2&gt;&gt;63</comment>
         "movdqa %%xmm3, %%xmm5             \n\t" <comment type="line">// r1&gt;&gt;63:r0&gt;&gt;63</comment>
         "pslldq $8, %%xmm3                 \n\t" <comment type="line">// r0&gt;&gt;63:0</comment>
         "pslldq $8, %%xmm4                 \n\t" <comment type="line">// r2&gt;&gt;63:0</comment>
         "psrldq $8, %%xmm5                 \n\t" <comment type="line">// 0:r1&gt;&gt;63</comment>
         "por %%xmm3, %%xmm1                \n\t" <comment type="line">// r1&lt;&lt;1|r0&gt;&gt;63:r0&lt;&lt;1</comment>
         "por %%xmm4, %%xmm2                \n\t" <comment type="line">// r3&lt;&lt;1|r2&gt;&gt;62:r2&lt;&lt;1</comment>
         "por %%xmm5, %%xmm2                \n\t" <comment type="line">// r3&lt;&lt;1|r2&gt;&gt;62:r2&lt;&lt;1|r1&gt;&gt;63</comment>

         <comment type="block">/*
          * Now reduce modulo the GCM polynomial x^128 + x^7 + x^2 + x + 1
          * using [CLMUL-WP] algorithm 5 (p. 20).
          * Currently xmm2:xmm1 holds x3:x2:x1:x0 (already shifted).
          */</comment>
         <comment type="block">/* Step 2 (1) */</comment>
         "movdqa %%xmm1, %%xmm3             \n\t" <comment type="line">// x1:x0</comment>
         "movdqa %%xmm1, %%xmm4             \n\t" <comment type="line">// same</comment>
         "movdqa %%xmm1, %%xmm5             \n\t" <comment type="line">// same</comment>
         "psllq $63, %%xmm3                 \n\t" <comment type="line">// x1&lt;&lt;63:x0&lt;&lt;63 = stuff:a</comment>
         "psllq $62, %%xmm4                 \n\t" <comment type="line">// x1&lt;&lt;62:x0&lt;&lt;62 = stuff:b</comment>
         "psllq $57, %%xmm5                 \n\t" <comment type="line">// x1&lt;&lt;57:x0&lt;&lt;57 = stuff:c</comment>

         <comment type="block">/* Step 2 (2) */</comment>
         "pxor %%xmm4, %%xmm3               \n\t" <comment type="line">// stuff:a+b</comment>
         "pxor %%xmm5, %%xmm3               \n\t" <comment type="line">// stuff:a+b+c</comment>
         "pslldq $8, %%xmm3                 \n\t" <comment type="line">// a+b+c:0</comment>
         "pxor %%xmm3, %%xmm1               \n\t" <comment type="line">// x1+a+b+c:x0 = d:x0</comment>

         <comment type="block">/* Steps 3 and 4 */</comment>
         "movdqa %%xmm1,%%xmm0              \n\t" <comment type="line">// d:x0</comment>
         "movdqa %%xmm1,%%xmm4              \n\t" <comment type="line">// same</comment>
         "movdqa %%xmm1,%%xmm5              \n\t" <comment type="line">// same</comment>
         "psrlq $1, %%xmm0                  \n\t" <comment type="line">// e1:x0&gt;&gt;1 = e1:e0'</comment>
         "psrlq $2, %%xmm4                  \n\t" <comment type="line">// f1:x0&gt;&gt;2 = f1:f0'</comment>
         "psrlq $7, %%xmm5                  \n\t" <comment type="line">// g1:x0&gt;&gt;7 = g1:g0'</comment>
         "pxor %%xmm4, %%xmm0               \n\t" <comment type="line">// e1+f1:e0'+f0'</comment>
         "pxor %%xmm5, %%xmm0               \n\t" <comment type="line">// e1+f1+g1:e0'+f0'+g0'</comment>
         <comment type="line">// e0'+f0'+g0' is almost e0+f0+g0, ex\tcept for some missing</comment>
         <comment type="line">// bits carried from d. Now get those\t bits back in.</comment>
         "movdqa %%xmm1,%%xmm3              \n\t" <comment type="line">// d:x0</comment>
         "movdqa %%xmm1,%%xmm4              \n\t" <comment type="line">// same</comment>
         "movdqa %%xmm1,%%xmm5              \n\t" <comment type="line">// same</comment>
         "psllq $63, %%xmm3                 \n\t" <comment type="line">// d&lt;&lt;63:stuff</comment>
         "psllq $62, %%xmm4                 \n\t" <comment type="line">// d&lt;&lt;62:stuff</comment>
         "psllq $57, %%xmm5                 \n\t" <comment type="line">// d&lt;&lt;57:stuff</comment>
         "pxor %%xmm4, %%xmm3               \n\t" <comment type="line">// d&lt;&lt;63+d&lt;&lt;62:stuff</comment>
         "pxor %%xmm5, %%xmm3               \n\t" <comment type="line">// missing bits of d:stuff</comment>
         "psrldq $8, %%xmm3                 \n\t" <comment type="line">// 0:missing bits of d</comment>
         "pxor %%xmm3, %%xmm0               \n\t" <comment type="line">// e1+f1+g1:e0+f0+g0</comment>
         "pxor %%xmm1, %%xmm0               \n\t" <comment type="line">// h1:h0</comment>
         "pxor %%xmm2, %%xmm0               \n\t" <comment type="line">// x3+h1:x2+h0</comment>

         "movdqu %%xmm0, (%2)               \n\t" <comment type="line">// done</comment>
         :
         : "r" (aa), "r" (bb), "r" (cc)
         : "memory", "cc", "xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5" );</asm>

    <comment type="block">/* Now byte-reverse the outputs */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cc</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute decryption round keys from encryption round keys
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_aesni_inverse_key</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>invkey</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fwdkey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ik</name> <init>= <expr><name>invkey</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fk</name> <init>= <expr><name>fwdkey</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>nr</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ik</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>fk</name> <operator>-=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>ik</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>fk</name> <operator>&gt;</operator> <name>fwdkey</name></expr>;</condition> <incr><expr><name>fk</name> <operator>-=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>ik</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr> )</control><block type="pseudo"><block_content>
        <asm>asm( "movdqu (%0), %%xmm0       \n\t"
             AESIMC  xmm0_xmm0         "\n\t"
             "movdqu %%xmm0, (%1)       \n\t"
             :
             : "r" (fk), "r" (ik)
             : "memory", "xmm0" );</asm></block_content></block></for>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ik</name></expr></argument>, <argument><expr><name>fk</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Key expansion, 128-bit case
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>aesni_setkey_enc_128</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <asm>asm( "movdqu (%1), %%xmm0               \n\t" <comment type="line">// copy the original key</comment>
         "movdqu %%xmm0, (%0)               \n\t" <comment type="line">// as round key 0</comment>
         "jmp 2f                            \n\t" <comment type="line">// skip auxiliary routine</comment>

         <comment type="block">/*
          * Finish generating the next round key.
          *
          * On entry xmm0 is r3:r2:r1:r0 and xmm1 is X:stuff:stuff:stuff
          * with X = rot( sub( r3 ) ) ^ RCON.
          *
          * On exit, xmm0 is r7:r6:r5:r4
          * with r4 = X + r0, r5 = r4 + r1, r6 = r5 + r2, r7 = r6 + r3
          * and those are written to the round key buffer.
          */</comment>
         "1:                                \n\t"
         "pshufd $0xff, %%xmm1, %%xmm1      \n\t" <comment type="line">// X:X:X:X</comment>
         "pxor %%xmm0, %%xmm1               \n\t" <comment type="line">// X+r3:X+r2:X+r1:r4</comment>
         "pslldq $4, %%xmm0                 \n\t" <comment type="line">// r2:r1:r0:0</comment>
         "pxor %%xmm0, %%xmm1               \n\t" <comment type="line">// X+r3+r2:X+r2+r1:r5:r4</comment>
         "pslldq $4, %%xmm0                 \n\t" <comment type="line">// etc</comment>
         "pxor %%xmm0, %%xmm1               \n\t"
         "pslldq $4, %%xmm0                 \n\t"
         "pxor %%xmm1, %%xmm0               \n\t" <comment type="line">// update xmm0 for next time!</comment>
         "add $16, %0                       \n\t" <comment type="line">// point to next round key</comment>
         "movdqu %%xmm0, (%0)               \n\t" <comment type="line">// write it</comment>
         "ret                               \n\t"

         <comment type="block">/* Main "loop" */</comment>
         "2:                                \n\t"
         AESKEYGENA xmm0_xmm1 ",0x01        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x02        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x04        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x08        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x10        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x20        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x40        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x80        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x1B        \n\tcall 1b \n\t"
         AESKEYGENA xmm0_xmm1 ",0x36        \n\tcall 1b \n\t"
         :
         : "r" (rk), "r" (key)
         : "memory", "cc", "0" );</asm>
</block_content>}</block></function>

<comment type="block">/*
 * Key expansion, 192-bit case
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>aesni_setkey_enc_192</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <asm>asm( "movdqu (%1), %%xmm0   \n\t" <comment type="line">// copy original round key</comment>
         "movdqu %%xmm0, (%0)   \n\t"
         "add $16, %0           \n\t"
         "movq 16(%1), %%xmm1   \n\t"
         "movq %%xmm1, (%0)     \n\t"
         "add $8, %0            \n\t"
         "jmp 2f                \n\t" <comment type="line">// skip auxiliary routine</comment>

         <comment type="block">/*
          * Finish generating the next 6 quarter-keys.
          *
          * On entry xmm0 is r3:r2:r1:r0, xmm1 is stuff:stuff:r5:r4
          * and xmm2 is stuff:stuff:X:stuff with X = rot( sub( r3 ) ) ^ RCON.
          *
          * On exit, xmm0 is r9:r8:r7:r6 and xmm1 is stuff:stuff:r11:r10
          * and those are written to the round key buffer.
          */</comment>
         "1:                            \n\t"
         "pshufd $0x55, %%xmm2, %%xmm2  \n\t" <comment type="line">// X:X:X:X</comment>
         "pxor %%xmm0, %%xmm2           \n\t" <comment type="line">// X+r3:X+r2:X+r1:r4</comment>
         "pslldq $4, %%xmm0             \n\t" <comment type="line">// etc</comment>
         "pxor %%xmm0, %%xmm2           \n\t"
         "pslldq $4, %%xmm0             \n\t"
         "pxor %%xmm0, %%xmm2           \n\t"
         "pslldq $4, %%xmm0             \n\t"
         "pxor %%xmm2, %%xmm0           \n\t" <comment type="line">// update xmm0 = r9:r8:r7:r6</comment>
         "movdqu %%xmm0, (%0)           \n\t"
         "add $16, %0                   \n\t"
         "pshufd $0xff, %%xmm0, %%xmm2  \n\t" <comment type="line">// r9:r9:r9:r9</comment>
         "pxor %%xmm1, %%xmm2           \n\t" <comment type="line">// stuff:stuff:r9+r5:r10</comment>
         "pslldq $4, %%xmm1             \n\t" <comment type="line">// r2:r1:r0:0</comment>
         "pxor %%xmm2, %%xmm1           \n\t" <comment type="line">// xmm1 = stuff:stuff:r11:r10</comment>
         "movq %%xmm1, (%0)             \n\t"
         "add $8, %0                    \n\t"
         "ret                           \n\t"

         "2:                            \n\t"
         AESKEYGENA xmm1_xmm2 ",0x01    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x02    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x04    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x08    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x10    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x20    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x40    \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x80    \n\tcall 1b \n\t"

         :
         : "r" (rk), "r" (key)
         : "memory", "cc", "0" );</asm>
</block_content>}</block></function>

<comment type="block">/*
 * Key expansion, 256-bit case
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>aesni_setkey_enc_256</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <asm>asm( "movdqu (%1), %%xmm0           \n\t"
         "movdqu %%xmm0, (%0)           \n\t"
         "add $16, %0                   \n\t"
         "movdqu 16(%1), %%xmm1         \n\t"
         "movdqu %%xmm1, (%0)           \n\t"
         "jmp 2f                        \n\t" <comment type="line">// skip auxiliary routine</comment>

         <comment type="block">/*
          * Finish generating the next two round keys.
          *
          * On entry xmm0 is r3:r2:r1:r0, xmm1 is r7:r6:r5:r4 and
          * xmm2 is X:stuff:stuff:stuff with X = rot( sub( r7 )) ^ RCON
          *
          * On exit, xmm0 is r11:r10:r9:r8 and xmm1 is r15:r14:r13:r12
          * and those have been written to the output buffer.
          */</comment>
         "1:                                \n\t"
         "pshufd $0xff, %%xmm2, %%xmm2      \n\t"
         "pxor %%xmm0, %%xmm2               \n\t"
         "pslldq $4, %%xmm0                 \n\t"
         "pxor %%xmm0, %%xmm2               \n\t"
         "pslldq $4, %%xmm0                 \n\t"
         "pxor %%xmm0, %%xmm2               \n\t"
         "pslldq $4, %%xmm0                 \n\t"
         "pxor %%xmm2, %%xmm0               \n\t"
         "add $16, %0                       \n\t"
         "movdqu %%xmm0, (%0)               \n\t"

         <comment type="block">/* Set xmm2 to stuff:Y:stuff:stuff with Y = subword( r11 )
          * and proceed to generate next round key from there */</comment>
         AESKEYGENA xmm0_xmm2 ",0x00        \n\t"
         "pshufd $0xaa, %%xmm2, %%xmm2      \n\t"
         "pxor %%xmm1, %%xmm2               \n\t"
         "pslldq $4, %%xmm1                 \n\t"
         "pxor %%xmm1, %%xmm2               \n\t"
         "pslldq $4, %%xmm1                 \n\t"
         "pxor %%xmm1, %%xmm2               \n\t"
         "pslldq $4, %%xmm1                 \n\t"
         "pxor %%xmm2, %%xmm1               \n\t"
         "add $16, %0                       \n\t"
         "movdqu %%xmm1, (%0)               \n\t"
         "ret                               \n\t"

         <comment type="block">/*
          * Main "loop" - Generating one more key than necessary,
          * see definition of mbedtls_aes_context.buf
          */</comment>
         "2:                                \n\t"
         AESKEYGENA xmm1_xmm2 ",0x01        \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x02        \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x04        \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x08        \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x10        \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x20        \n\tcall 1b \n\t"
         AESKEYGENA xmm1_xmm2 ",0x40        \n\tcall 1b \n\t"
         :
         : "r" (rk), "r" (key)
         : "memory", "cc", "0" );</asm>
</block_content>}</block></function>

<comment type="block">/*
 * Key expansion, wrapper
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aesni_setkey_enc</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>bits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <switch>switch<condition>( <expr><name>bits</name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">128</literal></expr>:</case> <expr_stmt><expr><call><name>aesni_setkey_enc_128</name><argument_list>( <argument><expr><name>rk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">192</literal></expr>:</case> <expr_stmt><expr><call><name>aesni_setkey_enc_192</name><argument_list>( <argument><expr><name>rk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">256</literal></expr>:</case> <expr_stmt><expr><call><name>aesni_setkey_enc_256</name><argument_list>( <argument><expr><name>rk</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <default>default :</default> <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_X86_64 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AESNI_C */</comment>
</unit>
