<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ssl_ticket.c"><comment type="block">/*
 *  TLS server tickets callbacks implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TICKET_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>      <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_ticket.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Initialze context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_ticket_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_ticket_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEY_BYTES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>    <comment type="block">/* 256 bits */</comment>

<comment type="block">/*
 * Generate/update a key
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ticket_gen_key</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>index</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_KEY_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_ticket_key</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>keys</name></name> <operator>+</operator> <name>index</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>generation_time</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>key</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* With GCM and CCM, same context can encrypt &amp; decrypt */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
                                 <argument><expr><call><name>mbedtls_cipher_get_key_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument> )</argument_list></call></expr></argument>,
                                 <argument><expr><name>MBEDTLS_ENCRYPT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rotate/generate keys if necessary
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ticket_update_keys</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>ticket_lifetime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>current_time</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>key_time</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>active</name></name></expr>]</index></name><operator>.</operator><name>generation_time</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>current_time</name> <operator>&gt;</operator> <name>key_time</name> <operator>&amp;&amp;</operator>
            <name>current_time</name> <operator>-</operator> <name>key_time</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ticket_lifetime</name></name></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <call><name>ssl_ticket_gen_key</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>active</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Setup context for actual use
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_ticket_setup</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter>,
    <parameter><decl><type><name>mbedtls_cipher_type_t</name></type> <name>cipher</name></decl></parameter>,
    <parameter><decl><type><name>uint32_t</name></type> <name>lifetime</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>f_rng</name></name> <operator>=</operator> <name>f_rng</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_rng</name></name> <operator>=</operator> <name>p_rng</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ticket_lifetime</name></name> <operator>=</operator> <name>lifetime</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MBEDTLS_MODE_GCM</name> <operator>&amp;&amp;</operator>
        <name><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>MBEDTLS_MODE_CCM</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>cipher_info</name><operator>-&gt;</operator><name>key_bitlen</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>MAX_KEY_BYTES</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctx</name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_ticket_gen_key</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_ticket_gen_key</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Serialize a session in the following format:
 *  0   .   n-1     session structure, n = sizeof(mbedtls_ssl_session)
 *  n   .   n+2     peer_cert length = m (0 if no certificate)
 *  n+3 .   n+2+m   peer cert ASN.1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_save_session</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,
                             <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>buf_len</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cert_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

    <if_stmt><if>if<condition>( <expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>left</name> <operator>-=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cert_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>cert_len</name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>left</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <name>cert_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>cert_len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>cert_len</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>cert_len</name>       <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>cert_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>cert_len</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unserialise session, see ssl_save_session()
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_load_session</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cert_len</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof> <operator>&gt;</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>session</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_session</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRT_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cert_len</name> <operator>=</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>cert_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <name>cert_len</name> <operator>&gt;</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crt</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse_der</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument>,
                                        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cert_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>cert_len</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRT_PARSE_C */</comment>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create session ticket, with the following structure:
 *
 *    struct {
 *        opaque key_name[4];
 *        opaque iv[12];
 *        opaque encrypted_state&lt;0..2^16-1&gt;;
 *        opaque tag[16];
 *    } ticket;
 *
 * The key_name, iv, and length of encrypted_state are the additional
 * authenticated data.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_ticket_write</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ticket</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                              <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>tlen</name></decl></parameter>,
                              <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ticket_lifetime</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>p_ticket</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_ticket_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_name</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name> <init>= <expr><name>start</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>state_len_bytes</name> <init>= <expr><name>iv</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>state_len_bytes</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>clear_len</name></decl>, <decl><type ref="prev"/><name>ciph_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>tlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>f_rng</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* We need at least 4 bytes for key_name, 12 for IV, 2 for len 16 for tag,
     * in addition to session itself, that will be checked when writing it. */</comment>
    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_ticket_update_keys</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>key</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>active</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>ticket_lifetime</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ticket_lifetime</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key_name</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* Dump session state */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_save_session</name><argument_list>( <argument><expr><name>session</name></expr></argument>,
                                  <argument><expr><name>state</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>clear_len</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr> )</condition>
    <block>{<block_content>
         <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>state_len_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>clear_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state_len_bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>clear_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

    <comment type="block">/* Encrypt and authenticate */</comment>
    <expr_stmt><expr><name>tag</name> <operator>=</operator> <name>state</name> <operator>+</operator> <name>clear_len</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_auth_encrypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>,
                    <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
                    <argument><expr><name>state</name></expr></argument>, <argument><expr><name>clear_len</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ciph_len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>ciph_len</name> <operator>!=</operator> <name>clear_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>tlen</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>ciph_len</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Select key based on name
 */</comment>
<function><type><specifier>static</specifier> <name>mbedtls_ssl_ticket_key</name> <modifier>*</modifier></type><name>ssl_ticket_select_key</name><parameter_list>(
        <parameter><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>keys</name></name></expr></argument> )</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name></name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Load session ticket (see mbedtls_ssl_ticket_write for structure)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_ticket_parse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_ticket</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_ssl_session</name> <modifier>*</modifier></type><name>session</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                              <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>p_ticket</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ssl_ticket_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key_name</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>enc_len_p</name> <init>= <expr><name>iv</name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ticket</name> <init>= <expr><name>enc_len_p</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>enc_len</name></decl>, <decl><type ref="prev"/><name>clear_len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>f_rng</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* See mbedtls_ssl_ticket_write() */</comment>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_ticket_update_keys</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>enc_len</name> <operator>=</operator> <operator>(</operator> <name><name>enc_len_p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>enc_len_p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tag</name> <operator>=</operator> <name>ticket</name> <operator>+</operator> <name>enc_len</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>enc_len</name> <operator>+</operator> <literal type="number">16</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Select key */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>key</name> <operator>=</operator> <call><name>ssl_ticket_select_key</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key_name</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* We can't know for sure but this is a likely option unless we're
         * under attack - this is only informative anyway */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Decrypt and authenticate */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_auth_decrypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,
                    <argument><expr><name>key_name</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>ticket</name></expr></argument>, <argument><expr><name>enc_len</name></expr></argument>,
                    <argument><expr><name>ticket</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clear_len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_INVALID_MAC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>clear_len</name> <operator>!=</operator> <name>enc_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Actually load session */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_load_session</name><argument_list>( <argument><expr><name>session</name></expr></argument>, <argument><expr><name>ticket</name></expr></argument>, <argument><expr><name>clear_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <block>{<block_content>
        <comment type="block">/* Check for expiration */</comment>
        <decl_stmt><decl><type><name>mbedtls_time_t</name></type> <name>current_time</name> <init>= <expr><call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>current_time</name> <argument_list type="generic">&lt; <argument><expr><name><name>session</name><operator>-&gt;</operator><name>start</name></name> <operator>||</operator>
            <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator> <name>current_time</name> <operator>-</operator> <name><name>session</name><operator>-&gt;</operator><name>start</name></name> <operator>)</operator></expr></argument> &gt;</argument_list></name> <name><name>ctx</name><operator>-&gt;</operator><name>ticket_lifetime</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED</name></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>cleanup</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ssl_ticket_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_ticket_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ssl_ticket_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TICKET_C */</comment>
</unit>
