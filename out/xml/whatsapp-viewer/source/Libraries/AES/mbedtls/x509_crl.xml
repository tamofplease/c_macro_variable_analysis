<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/x509_crl.c"><comment type="block">/*
 *  X.509 Certidicate Revocation List (CRL) parsing
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The ITU-T X.509 standard defines a certificate format for PKI.
 *
 *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
 *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
 *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
 *
 *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
 *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CRL_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509_crl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_snprintf</name></cpp:macro>   <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 *  Version  ::=  INTEGER  {  v1(0), v2(1)  }
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_crl_get_version</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ver</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>ver</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>ver</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_VERSION</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * X.509 CRL v2 extensions (no extensions parsed yet.)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_crl_ext</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Get explicit tag */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_ext</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * X.509 CRL v2 entry extensions (no extensions parsed yet.)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_crl_entry_ext</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* OPTIONAL */</comment>
    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;=</operator> <operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Get CRL-entry extension sequence header
     * crlEntryExtensions      Extensions OPTIONAL  -- if present, MUST be v2
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>!=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>len</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * X.509 CRL Entries
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_entries</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                             <parameter><decl><type><name>mbedtls_x509_crl_entry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>entry_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crl_entry</name> <modifier>*</modifier></type><name>cur_entry</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_SEQUENCE</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>entry_len</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end2</name></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>,
                <argument><expr><name>MBEDTLS_ASN1_SEQUENCE</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>cur_entry</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur_entry</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur_entry</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end2</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_serial</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_entry</name><operator>-&gt;</operator><name>serial</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_time</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>,
                                   <argument><expr><operator>&amp;</operator><name><name>cur_entry</name><operator>-&gt;</operator><name>revocation_date</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_crl_entry_ext</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>,
                                            <argument><expr><operator>&amp;</operator><name><name>cur_entry</name><operator>-&gt;</operator><name>entry_ext</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cur_entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crl_entry</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>cur_entry</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>cur_entry</name> <operator>=</operator> <name><name>cur_entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse one  CRLs in DER format and append it to the chained list
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crl_parse_der</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_buf</name></type> <name>sig_params1</name></decl>, <decl><type ref="prev"/><name>sig_params2</name></decl>, <decl><type ref="prev"/><name>sig_oid2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl</name> <init>= <expr><name>chain</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Check for valid input
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>crl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_params1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_params2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sig_oid2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Add new CRL on the end of the chain if needed.
     */</comment>
    <while>while<condition>( <expr><name><name>crl</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>crl</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>crl</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>

    <if_stmt><if>if<condition>( <expr><name><name>crl</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>crl</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crl</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>crl</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_x509_crl_init</name><argument_list>( <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>crl</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Copy raw DER-encoded CRL
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>buflen</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>buflen</name></expr>;</expr_stmt>

    <comment type="block">/*
     * CertificateList  ::=  SEQUENCE  {
     *      tbsCertList          TBSCertList,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * TBSCertList  ::=  SEQUENCE  {
     */</comment>
    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>crl</name><operator>-&gt;</operator><name>tbs</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Version  ::=  INTEGER  OPTIONAL {  v1(0), v2(1)  }
     *               -- if present, MUST be v2
     *
     * signature            AlgorithmIdentifier
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_crl_get_version</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>version</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_params1</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>version</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crl</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_UNKNOWN_VERSION</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_sig_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig_oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_params1</name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>,
                                  <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * issuer               Name
     */</comment>
    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_name</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>crl</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>crl</name><operator>-&gt;</operator><name>issuer_raw</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * thisUpdate          Time
     * nextUpdate          Time OPTIONAL
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>this_update</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>next_update</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator>
                        <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator> <operator>&amp;&amp;</operator>
            <name>ret</name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator>
                        <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * revokedCertificates    SEQUENCE OF SEQUENCE   {
     *      userCertificate        CertificateSerialNumber,
     *      revocationDate         Time,
     *      crlEntryExtensions     Extensions OPTIONAL
     *                                   -- if present, MUST be v2
     *                        } OPTIONAL
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_entries</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>entry</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * crlExtensions          EXPLICIT Extensions OPTIONAL
     *                              -- if present, MUST be v2
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>crl</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>x509_get_crl_ext</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>crl_ext</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>crl</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>+</operator> <name><name>crl</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_oid2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_params2</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>crl</name><operator>-&gt;</operator><name>sig_oid</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>sig_oid2</name><operator>.</operator><name>len</name></name> <operator>||</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>sig_oid</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sig_oid2</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>sig_oid</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>sig_params1</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>sig_params2</name><operator>.</operator><name>len</name></name> <operator>||</operator>
        <operator>(</operator> <name><name>sig_params1</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <call><name>memcmp</name><argument_list>( <argument><expr><name><name>sig_params1</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sig_params2</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>sig_params1</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_SIG_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_sig</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_x509_crl_free</name><argument_list>( <argument><expr><name>crl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse one or more CRLs and add them to the chained list
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crl_parse</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_pem_context</name></type> <name>pem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_pem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>chain</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <do>do
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_pem_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Avoid calling mbedtls_pem_read_buffer() on non-null-terminated</comment>
        <comment type="line">// string</comment>
        <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_pem_read_buffer</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument>,
                                           <argument><expr><literal type="string">"-----BEGIN X509 CRL-----"</literal></expr></argument>,
                                           <argument><expr><literal type="string">"-----END X509 CRL-----"</literal></expr></argument>,
                                            <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Was PEM encoded
             */</comment>
            <expr_stmt><expr><name>is_pem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crl_parse_der</name><argument_list>( <argument><expr><name>chain</name></expr></argument>,
                                            <argument><expr><name><name>pem</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pem</name><operator>.</operator><name>buflen</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_pem_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_pem_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <comment type="block">/* In the PEM case, buflen is 1 at the end, for the terminated NULL byte.
     * And a valid CRL cannot be less than 1 byte anyway. */</comment>
    while<condition>( <expr><name>is_pem</name> <operator>&amp;&amp;</operator> <name>buflen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>;</do>

    <if_stmt><if>if<condition>( <expr><name>is_pem</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_PARSE_C */</comment>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_x509_crl_parse_der</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Load one or more CRLs and add them to the chained list
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crl_parse_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_load_file</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crl_parse</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_FS_IO */</comment>

<comment type="block">/*
 * Return an informational string about the certificate.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEFORE_COLON</name></cpp:macro>    <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC</name></cpp:macro>              <cpp:value>"14"</cpp:value></cpp:define>
<comment type="block">/*
 * Return an informational string about the CRL.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_crl_info</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_crl_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%sCRL version   : %d"</literal></expr></argument>,
                               <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sissuer name   : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_dn_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>issuer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sthis update   : "</literal> \
                   <literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                   <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>this_update</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>this_update</name><operator>.</operator><name>mon</name></name></expr></argument>,
                   <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>this_update</name><operator>.</operator><name>day</name></name></expr></argument>,  <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>this_update</name><operator>.</operator><name>hour</name></name></expr></argument>,
                   <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>this_update</name><operator>.</operator><name>min</name></name></expr></argument>,  <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>this_update</name><operator>.</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%snext update   : "</literal> \
                   <literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,
                   <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next_update</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next_update</name><operator>.</operator><name>mon</name></name></expr></argument>,
                   <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next_update</name><operator>.</operator><name>day</name></name></expr></argument>,  <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next_update</name><operator>.</operator><name>hour</name></name></expr></argument>,
                   <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next_update</name><operator>.</operator><name>min</name></name></expr></argument>,  <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>next_update</name><operator>.</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>entry</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sRevoked certificates:"</literal></expr></argument>,
                               <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>entry</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%sserial number: "</literal></expr></argument>,
                               <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_serial_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>serial</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">" revocation date: "</literal> \
                   <literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>,
                   <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocation_date</name><operator>.</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocation_date</name><operator>.</operator><name>mon</name></name></expr></argument>,
                   <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocation_date</name><operator>.</operator><name>day</name></name></expr></argument>,  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocation_date</name><operator>.</operator><name>hour</name></name></expr></argument>,
                   <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocation_date</name><operator>.</operator><name>min</name></name></expr></argument>,  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>revocation_date</name><operator>.</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n%ssigned using  : "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_sig_alg_gets</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crl</name><operator>-&gt;</operator><name>sig_oid</name></name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>sig_pk</name></name></expr></argument>, <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>sig_md</name></name></expr></argument>,
                             <argument><expr><name><name>crl</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a CRL chain
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_x509_crl_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>crl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_x509_crl</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Unallocate all CRL data
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_x509_crl_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl_cur</name> <init>= <expr><name>crl</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crl</name> <modifier>*</modifier></type><name>crl_prv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>name_cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>name_prv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crl_entry</name> <modifier>*</modifier></type><name>entry_cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crl_entry</name> <modifier>*</modifier></type><name>entry_prv</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>crl</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <do>do
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_RSASSA_PSS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>crl_cur</name><operator>-&gt;</operator><name>sig_opts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>name_cur</name> <operator>=</operator> <name><name>crl_cur</name><operator>-&gt;</operator><name>issuer</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>name_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>name_prv</name> <operator>=</operator> <name>name_cur</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name_cur</name> <operator>=</operator> <name><name>name_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>name_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_name</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>name_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>entry_cur</name> <operator>=</operator> <name><name>crl_cur</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>entry_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entry_prv</name> <operator>=</operator> <name>entry_cur</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>entry_cur</name> <operator>=</operator> <name><name>entry_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>entry_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crl_entry</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>entry_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if<condition>( <expr><name><name>crl_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>crl_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>crl_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>crl_cur</name><operator>-&gt;</operator><name>raw</name><operator>.</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>crl_cur</name> <operator>=</operator> <name><name>crl_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block>
    while<condition>( <expr><name>crl_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>;</do>

    <expr_stmt><expr><name>crl_cur</name> <operator>=</operator> <name>crl</name></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
        <expr_stmt><expr><name>crl_prv</name> <operator>=</operator> <name>crl_cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>crl_cur</name> <operator>=</operator> <name><name>crl_cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>crl_prv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_crl</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>crl_prv</name> <operator>!=</operator> <name>crl</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>crl_prv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    while<condition>( <expr><name>crl_cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>;</do>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CRL_PARSE_C */</comment>
</unit>
