<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/error.c"><comment type="block">/*
 *  Error message information
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_STRERROR_DUMMY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_snprintf</name></cpp:macro> <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_time_t</name></cpp:macro>   <cpp:value>time_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BASE64_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base64.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bignum.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blowfish.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"camellia.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ccm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CTR_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctr_drbg.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"des.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dhm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecp.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entropy.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gcm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HMAC_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hmac_drbg.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NET_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net_sockets.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_OID_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"padlock.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pk.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS12_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkcs12.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkcs5.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsa.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TLS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_USE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CREATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_XTEA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xtea.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>void</name></type> <name>mbedtls_strerror</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>use_ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0xFF80</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>use_ret</name> <operator>=</operator> <name>ret</name> <operator>&amp;</operator> <literal type="number">0xFF80</literal></expr>;</expr_stmt>

        <comment type="line">// High level error codes</comment>
        <comment type="line">//</comment>
        <comment type="line">// BEGIN generated code</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - The selected feature is not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - Failed to allocate memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_INVALID_PADDING</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - Input data contains invalid padding and is rejected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - Decryption of block requires a full block"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - Authentication failed (for AEAD modes)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CIPHER_INVALID_CONTEXT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CIPHER - The context is invalid, eg because it was free()ed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DHM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_READ_PARAMS_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Reading of the DHM parameters failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Making of the DHM parameters failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Reading of the public values failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Making of the public value failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_CALC_SECRET_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Calculation of the DHM secret failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_INVALID_FORMAT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - The ASN.1 data is not formatted correctly"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Allocation of memory failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DHM_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DHM - Read/write of file failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DHM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - The buffer is too small to write to"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - Requested curve not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_VERIFY_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - The signature is not valid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - Memory allocation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_RANDOM_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - Generation of random value, such as (ephemeral) key, failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_INVALID_KEY</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - Invalid private or public key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ECP - Signature is valid but shorter than the user-supplied length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"MD - The selected feature is not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MD_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"MD - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MD_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"MD - Failed to allocate memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MD_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"MD - Opening or reading of file failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - No PEM header or footer found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_INVALID_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - PEM string is not as expected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - Failed to allocate memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_INVALID_ENC_IV</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - RSA IV is not in hex-format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - Unsupported key encryption algorithm"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_PASSWORD_REQUIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - Private key password can't be empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_PASSWORD_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - Given private key password does not allow for correct decryption"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - Unavailable feature, e.g. hashing/encryption combination"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PEM_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PEM - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Memory allocation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_TYPE_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Type mismatch, eg attempt to encrypt with an ECDSA key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Read/write of file failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_KEY_INVALID_VERSION</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Unsupported key version"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_KEY_INVALID_FORMAT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Invalid key tag or value"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_UNKNOWN_PK_ALG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Key algorithm is unsupported (only RSA and EC are supported)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_PASSWORD_REQUIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Private key password can't be empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_PASSWORD_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Given private key password does not allow for correct decryption"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_INVALID_PUBKEY</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - The pubkey tag or value is invalid (only RSA and EC are supported)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_INVALID_ALG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - The algorithm tag or value is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Elliptic curve is unsupported (only NIST curves are supported)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - Unavailable feature, e.g. RSA disabled for RSA key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PK_SIG_LEN_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PK - The signature is valid but its length is less than expected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS12_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS12 - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS12 - Feature not available, e.g. unsupported encryption scheme"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS12 - PBE ASN.1 data not as expected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS12 - Given private key password does not allow for correct decryption"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS12_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS5 - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS5 - Unexpected ASN.1 data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS5 - Requested encryption or digest alg not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PKCS5 - Given private key password does not allow for correct decryption"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS5_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_INVALID_PADDING</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - Input data contains invalid padding and is rejected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_KEY_GEN_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - Something failed during generation of a key"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_KEY_CHECK_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - Key failed to pass the library's validity check"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_PUBLIC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - The public key operation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_PRIVATE_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - The private key operation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_VERIFY_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - The PKCS#1 verification failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - The output buffer for decryption is not large enough"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_RSA_RNG_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"RSA - The random generator failed to generate non-zeros"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TLS_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The requested feature is not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_INVALID_MAC</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Verification of the message MAC failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_INVALID_RECORD</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - An invalid SSL record was received"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_CONN_EOF</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The connection indicated an EOF"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_UNKNOWN_CIPHER</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - An unknown cipher was received"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The server has no ciphersuites in common with the client"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_NO_RNG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - No RNG was provided to the SSL module"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - No client certification received from the client, but required by the authentication mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Our own certificate(s) is/are too large to send in an SSL message"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The own certificate is not set, but needed by the server"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The own private key or pre-shared key is not set, but needed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - No CA Chain is set, but required to operate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - An unexpected message was received from our peer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE</name><operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - A fatal alert message was received from our peer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Verification of our peer failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The peer notified us that the connection is going to be closed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ClientHello handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ServerHello handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the Certificate handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the CertificateRequest handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ServerKeyExchange handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ServerHelloDone handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ClientKeyExchange handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the CertificateVerify handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the ChangeCipherSpec handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_FINISHED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the Finished handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Memory allocation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_HW_ACCEL_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Hardware acceleration function returned with error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Hardware acceleration function skipped / left alone data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_COMPRESSION_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the compression / decompression failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Handshake protocol not within min/max boundaries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Processing of the NewSessionTicket handshake message failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Session ticket has expired"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Public key type mismatch (eg, asked for RSA key exchange and presented EC key)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Unknown identity received (eg, PSK identity)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Internal error (eg, unexpected failure in lower-level module)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_COUNTER_WRAPPING</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - A counter would wrap (eg, too many messages exchanged)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Unexpected message at ServerHello in renegotiation"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - DTLS client must retry for hello verification"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - A buffer is too small to receive or write a message"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_WANT_READ</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Connection requires a read call"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_WANT_WRITE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Connection requires a write call"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_TIMEOUT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The operation timed out"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_CLIENT_RECONNECT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The client initiated a reconnect from the same port"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_UNEXPECTED_RECORD</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Record header looks valid but is not expected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_NON_FATAL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - The alert message received indicates a non-fatal error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"SSL - Couldn't set the hash for verifying CertificateVerify"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TLS_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_USE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CREATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Unavailable feature, e.g. RSA hashing/encryption combination"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_UNKNOWN_OID</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Requested OID is unknown"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_FORMAT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The CRT/CRL/CSR format is invalid, e.g. different type expected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_VERSION</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The CRT/CRL/CSR version element is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_SERIAL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The serial tag or value is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_ALG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The algorithm tag or value is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_NAME</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The name tag or value is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_DATE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The date tag or value is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_SIGNATURE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The signature tag or value invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - The extension tag or value is invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_UNKNOWN_VERSION</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - CRT/CRL/CSR has an unsupported version number"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Signature algorithm (oid) is unsupported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_SIG_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Signature algorithms do not match. (see \\c ::mbedtls_x509_crt sig_oid)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_CERT_VERIFY_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Certificate verification failed, e.g. CRL, CA or signature check failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Format not recognized as DER or PEM"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Input invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Allocation of memory failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Read/write of file failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_X509_BUFFER_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"X509 - Destination buffer is too small"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */</comment>
        <comment type="line">// END generated code</comment>

        <if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN ERROR CODE (%04X)"</literal></expr></argument>, <argument><expr><name>use_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>use_ret</name> <operator>=</operator> <name>ret</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFF80</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// If high level code is present, make a concatenation between both</comment>
    <comment type="line">// error strings.</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>-</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" : "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>len</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Low level error codes</comment>
    <comment type="line">//</comment>
    <comment type="line">// BEGIN generated code</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"AES - Invalid key length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"AES - Invalid data input length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ASN1_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - Out of data when parsing an ASN1 data structure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - ASN1 tag was of an unexpected value"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_INVALID_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - Error when trying to determine the length or invalid length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - Actual length differs from expected length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_INVALID_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - Data is invalid. (not used)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - Memory allocation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ASN1 - Buffer too small when writing ASN.1 data structure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ASN1_PARSE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BASE64_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BASE64 - Output buffer too small"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_BASE64_INVALID_CHARACTER</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BASE64 - Invalid character in input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BASE64_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - An error occurred while reading from or writing to a file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_INVALID_CHARACTER</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - There is an invalid character in the digit string"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - The buffer is too small to write to"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_NEGATIVE_VALUE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - The input arguments are negative or result in illegal output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - The input argument for division is zero, which is not allowed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - The input arguments are not acceptable"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_MPI_ALLOC_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BIGNUM - Memory allocation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BIGNUM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_BLOWFISH_INVALID_KEY_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BLOWFISH - Invalid key length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"BLOWFISH - Invalid data input length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BLOWFISH_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CAMELLIA - Invalid key length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CAMELLIA - Invalid data input length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CCM_BAD_INPUT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CCM - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CCM_AUTH_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CCM - Authenticated decryption failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CTR_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CTR_DRBG - The entropy source failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CTR_DRBG - Too many random requested in single call"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CTR_DRBG - Input too large (Entropy + additional)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"CTR_DRBG - Read/write error in file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CTR_DRBG_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"DES - The data input has an invalid length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ENTROPY_SOURCE_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ENTROPY - Critical entropy source failure"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ENTROPY_MAX_SOURCES</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ENTROPY - No more sources can be added"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ENTROPY - No sources have been added to poll"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ENTROPY - No strong sources have been added to poll"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"ENTROPY - Read/write error in file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_GCM_AUTH_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"GCM - Authenticated decryption failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_GCM_BAD_INPUT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"GCM - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HMAC_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"HMAC_DRBG - Too many random requested in single call"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"HMAC_DRBG - Input too large (Entropy + additional)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"HMAC_DRBG - Read/write error in file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"HMAC_DRBG - The entropy source failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HMAC_DRBG_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NET_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_SOCKET_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Failed to open a socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_CONNECT_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - The connection to the given server / port failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_BIND_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Binding of the socket failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_LISTEN_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Could not listen on the socket"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_ACCEPT_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Could not accept the incoming connection"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_RECV_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Reading information from the socket failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_SEND_FAILED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Sending information through the socket failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_CONN_RESET</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Connection was reset by peer"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_UNKNOWN_HOST</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Failed to get an IP address for the given hostname"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_BUFFER_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - Buffer is too small to hold the data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_NET_INVALID_CONTEXT</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NET - The context is invalid, eg because it was free()ed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_NET_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_OID_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_OID_NOT_FOUND</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"OID - OID is not found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_OID_BUF_TOO_SMALL</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"OID - output buffer is too small"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_OID_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"PADLOCK - Input data should be aligned"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PADLOCK_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_THREADING_FEATURE_UNAVAILABLE</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"THREADING - The selected feature is not available"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_THREADING_BAD_INPUT_DATA</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"THREADING - Bad input parameters to function"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"THREADING - Locking / unlocking / free failed with error code"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_THREADING_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_XTEA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>use_ret</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"XTEA - The data input has an invalid length"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_XTEA_C */</comment>
    <comment type="line">// END generated code</comment>

    <if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"UNKNOWN ERROR CODE (%04X)"</literal></expr></argument>, <argument><expr><name>use_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_ERROR_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ERROR_STRERROR_DUMMY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * Provide an non-function in case MBEDTLS_ERROR_C is not defined
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_strerror</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ret</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ERROR_STRERROR_DUMMY */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ERROR_C */</comment>
</unit>
