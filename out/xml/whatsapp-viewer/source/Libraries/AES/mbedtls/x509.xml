<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/x509.c"><comment type="block">/*
 *  X.509 common functions for parsing and verification
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The ITU-T X.509 standard defines a certificate format for PKI.
 *
 *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
 *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
 *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
 *
 *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
 *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_USE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>      <cpp:value>free</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro>    <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_snprintf</name></cpp:macro>  <cpp:value>snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform_time.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>code</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( ( ret = code ) != 0 ){ return( ret ); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RANGE</name><parameter_list>(<parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if( val &lt; min || val &gt; max ){ return( ret ); }</cpp:value></cpp:define>

<comment type="block">/*
 *  CertificateSerialNumber  ::=  INTEGER
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_serial</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                     <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>serial</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_SERIAL</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_PRIMITIVE</name> <operator>|</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator>   <name>MBEDTLS_ASN1_INTEGER</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_SERIAL</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>serial</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>serial</name><operator>-&gt;</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_SERIAL</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>serial</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>serial</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get an algorithm identifier without parameters (eg for signatures)
 *
 *  AlgorithmIdentifier  ::=  SEQUENCE  {
 *       algorithm               OBJECT IDENTIFIER,
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_alg_null</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                       <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_alg_null</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse an algorithm identifier with (optional) paramaters
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_alg</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>params</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_alg</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>alg</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_RSASSA_PSS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * HashAlgorithm ::= AlgorithmIdentifier
 *
 * AlgorithmIdentifier  ::=  SEQUENCE  {
 *      algorithm               OBJECT IDENTIFIER,
 *      parameters              ANY DEFINED BY algorithm OPTIONAL  }
 *
 * For HashAlgorithm, parameters MUST be NULL or absent.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_hash_alg</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name> <modifier>*</modifier></type><name>md_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_buf</name></type> <name>md_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <comment type="block">/* Make sure we got a SEQUENCE and setup bounds */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>alg</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>alg</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>alg</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>&gt;=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Parse md_oid */</comment>
    <expr_stmt><expr><name><name>md_oid</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>md_oid</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OID</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>md_oid</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>md_oid</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

    <comment type="block">/* Get md_alg from md_oid */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_md_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_oid</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Make sure params is absent of NULL */</comment>
    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_NULL</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *    RSASSA-PSS-params  ::=  SEQUENCE  {
 *       hashAlgorithm     [0] HashAlgorithm DEFAULT sha1Identifier,
 *       maskGenAlgorithm  [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,
 *       saltLength        [2] INTEGER DEFAULT 20,
 *       trailerField      [3] INTEGER DEFAULT 1  }
 *    -- Note that the tags in this Sequence are explicit.
 *
 * RFC 4055 (which defines use of RSASSA-PSS in PKIX) states that the value
 * of trailerField MUST be 1, and PKCS#1 v2.2 doesn't even define any other
 * option. Enfore this at parsing time.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_rsassa_pss_params</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
                                <parameter><decl><type><name>mbedtls_md_type_t</name> <modifier>*</modifier></type><name>md_alg</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name> <modifier>*</modifier></type><name>mgf_md</name></decl></parameter>,
                                <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>salt_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_buf</name></type> <name>alg_id</name></decl>, <decl><type ref="prev"/><name>alg_params</name></decl>;</decl_stmt>

    <comment type="block">/* First set everything to defaults */</comment>
    <expr_stmt><expr><operator>*</operator><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>mgf_md</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>salt_len</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

    <comment type="block">/* Make sure params is a SEQUENCE and setup bounds */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>params</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>params</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * HashAlgorithm
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>end2</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

        <comment type="block">/* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_alg_null</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alg_id</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_md_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>alg_id</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end2</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * MaskGenAlgorithm
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>end2</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

        <comment type="block">/* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alg_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alg_params</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Only MFG1 is recognised for now */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>MBEDTLS_OID_CMP</name><argument_list>( <argument><expr><name>MBEDTLS_OID_MGF1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alg_id</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_OID_NOT_FOUND</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Parse HashAlgorithm */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_hash_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>alg_params</name></expr></argument>, <argument><expr><name>mgf_md</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end2</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * salt_len
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>end2</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end2</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * trailer_field (if present, must be 1)
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>trailer_field</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>end2</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trailer_field</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end2</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                    <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>trailer_field</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_RSASSA_PSS_SUPPORT */</comment>

<comment type="block">/*
 *  AttributeTypeAndValue ::= SEQUENCE {
 *    type     AttributeType,
 *    value    AttributeValue }
 *
 *  AttributeType ::= OBJECT IDENTIFIER
 *
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_attr_type_value</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                     <parameter><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>cur</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>oid</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OID</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>oid</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>oid</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_BMP_STRING</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_UTF8_STRING</name>      <operator>&amp;&amp;</operator>
        <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_T61_STRING</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_PRINTABLE_STRING</name> <operator>&amp;&amp;</operator>
        <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_IA5_STRING</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_UNIVERSAL_STRING</name> <operator>&amp;&amp;</operator>
        <operator>*</operator><operator>*</operator><name>p</name> <operator>!=</operator> <name>MBEDTLS_ASN1_BIT_STRING</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><operator>-&gt;</operator><name>len</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>val</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name><name>val</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  Name ::= CHOICE { -- only one possibility for now --
 *       rdnSequence  RDNSequence }
 *
 *  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 *
 *  RelativeDistinguishedName ::=
 *    SET OF AttributeTypeAndValue
 *
 *  AttributeTypeAndValue ::= SEQUENCE {
 *    type     AttributeType,
 *    value    AttributeValue }
 *
 *  AttributeType ::= OBJECT IDENTIFIER
 *
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 *
 * The data structure is optimized for the common case where each RDN has only
 * one element, which is represented as a list of AttributeTypeAndValue.
 * For the general case we still use a flat list, but we mark elements of the
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_name</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                   <parameter><decl><type><name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>cur</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>set_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end_set</name></decl>;</decl_stmt>

    <comment type="block">/* don't use recursion, we'd risk stack overflow if not optimized */</comment>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * parse SET
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>set_len</name></expr></argument>,
                <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SET</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>end_set</name>  <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>set_len</name></expr>;</expr_stmt>

        <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>x509_get_attr_type_value</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end_set</name></expr></argument>, <argument><expr><name>cur</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end_set</name></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <comment type="block">/* Mark this item as being no the only one in a set */</comment>
            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next_merged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_name</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/*
         * continue until end of SEQUENCE is reached
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_x509_name</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_parse_int</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>n</name></expr></incr> )</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator> <operator>*</operator><operator>*</operator><name>p</name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>MBEDTLS_ERR_X509_INVALID_DATE</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>res</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>res</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_date_is_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_X509_INVALID_DATE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><name><name>time</name><operator>-&gt;</operator><name>year</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>,   <argument><expr><name><name>time</name><operator>-&gt;</operator><name>hour</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>,   <argument><expr><name><name>time</name><operator>-&gt;</operator><name>min</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>,   <argument><expr><name><name>time</name><operator>-&gt;</operator><name>sec</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

    <switch>switch<condition>( <expr><name><name>time</name><operator>-&gt;</operator><name>mon</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <case>case <expr><literal type="number">3</literal></expr>:</case> <case>case <expr><literal type="number">5</literal></expr>:</case> <case>case <expr><literal type="number">7</literal></expr>:</case> <case>case <expr><literal type="number">8</literal></expr>:</case> <case>case <expr><literal type="number">10</literal></expr>:</case> <case>case <expr><literal type="number">12</literal></expr>:</case>
            <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><name><name>time</name><operator>-&gt;</operator><name>day</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case> <case>case <expr><literal type="number">6</literal></expr>:</case> <case>case <expr><literal type="number">9</literal></expr>:</case> <case>case <expr><literal type="number">11</literal></expr>:</case>
            <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name><name>time</name><operator>-&gt;</operator><name>day</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><call><name>CHECK_RANGE</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">28</literal> <operator>+</operator> <operator>(</operator><name><name>time</name><operator>-&gt;</operator><name>year</name></name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>time</name><operator>-&gt;</operator><name>day</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  Time ::= CHOICE {
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_time</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                   <parameter><decl><type><name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>time</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tag</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>tag</name> <operator>==</operator> <name>MBEDTLS_ASN1_UTC_TIME</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>year</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>mon</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>day</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>hour</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>min</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>!=</operator> <literal type="char">'Z'</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>year</name></name> <operator>+=</operator>  <literal type="number">100</literal> <operator>*</operator> <operator>(</operator> <name><name>time</name><operator>-&gt;</operator><name>year</name></name> <operator>&lt;</operator> <literal type="number">50</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>time</name><operator>-&gt;</operator><name>year</name></name> <operator>+=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_date_is_valid</name><argument_list>( <argument><expr><name>time</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>tag</name> <operator>==</operator> <name>MBEDTLS_ASN1_GENERALIZED_TIME</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>year</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>mon</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>day</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>hour</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>min</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_parse_int</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>time</name><operator>-&gt;</operator><name>sec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>!=</operator> <literal type="char">'Z'</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><call><name>x509_date_is_valid</name><argument_list>( <argument><expr><name>time</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_DATE</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_get_sig</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>sig</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tag_type</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_SIGNATURE</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_OUT_OF_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>tag_type</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_bitstring_null</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_SIGNATURE</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name>tag_type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sig</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get signature algorithm from alg OID and optional parameters
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_sig_alg</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>sig_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>sig_params</name></decl></parameter>,
                      <parameter><decl><type><name>mbedtls_md_type_t</name> <modifier>*</modifier></type><name>md_alg</name></decl></parameter>, <parameter><decl><type><name>mbedtls_pk_type_t</name> <modifier>*</modifier></type><name>pk_alg</name></decl></parameter>,
                      <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sig_opts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>sig_opts</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_sig_alg</name><argument_list>( <argument><expr><name>sig_oid</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>pk_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_RSASSA_PSS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_RSASSA_PSS</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_pk_rsassa_pss_options</name> <modifier>*</modifier></type><name>pss_opts</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>pss_opts</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_pk_rsassa_pss_options</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pss_opts</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_get_rsassa_pss_params</name><argument_list>( <argument><expr><name>sig_params</name></expr></argument>,
                                          <argument><expr><name>md_alg</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name><name>pss_opts</name><operator>-&gt;</operator><name>mgf1_hash_id</name></name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name><name>pss_opts</name><operator>-&gt;</operator><name>expected_salt_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>pss_opts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>sig_opts</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pss_opts</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_RSASSA_PSS_SUPPORT */</comment>
    <block>{<block_content>
        <comment type="block">/* Make sure parameters are absent or NULL */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>sig_params</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <name>MBEDTLS_ASN1_NULL</name> <operator>&amp;&amp;</operator> <name><name>sig_params</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator>
              <name><name>sig_params</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_ALG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_get_ext</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                  <parameter><decl><type><name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>ext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>p</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ext</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>tag</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ext</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name><name>ext</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     *
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
            <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>!=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <name>len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_INVALID_EXTENSIONS</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_dn_gets</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>dn</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>merge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_x509_name</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MBEDTLS_X509_MAX_DN_NAME_SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>name</name> <operator>=</operator> <name>dn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>name</name> <operator>!=</operator> <name>dn</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><ternary><condition><expr><name>merge</name></expr> ?</condition><then> <expr><literal type="string">" + "</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_attr_short_name</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>name</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>short_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>short_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"\?\?="</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>name</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>c</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">127</literal> <operator>||</operator> <operator>(</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">160</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
                 <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>merge</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>next_merged</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_serial_gets</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>serial</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>nr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>serial</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">32</literal> <operator>)</operator></expr>
        ?</condition><then> <expr><name><name>serial</name><operator>-&gt;</operator><name>len</name></name></expr>  </then><else>: <expr><literal type="number">28</literal></expr></else></ternary></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nr</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>serial</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%02X%s"</literal></expr></argument>,
                <argument><expr><name><name>serial</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&lt;</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>nr</name> <operator>!=</operator> <name><name>serial</name><operator>-&gt;</operator><name>len</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"...."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper for writing signature algorithms
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_sig_alg_gets</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_buf</name> <modifier>*</modifier></type><name>sig_oid</name></decl></parameter>,
                       <parameter><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sig_opts</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_sig_alg_desc</name><argument_list>( <argument><expr><name>sig_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"???"</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_RSASSA_PSS_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_RSASSA_PSS</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_pk_rsassa_pss_options</name> <modifier>*</modifier></type><name>pss_opts</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mgf_md_info</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>pss_opts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>mbedtls_pk_rsassa_pss_options</name> <operator>*</operator><operator>)</operator> <name>sig_opts</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mgf_md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name><name>pss_opts</name><operator>-&gt;</operator><name>mgf1_hash_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">" (%s, MGF1-%s, 0x%02X)"</literal></expr></argument>,
                              <argument><expr><ternary><condition><expr><name>md_info</name></expr> ?</condition><then> <expr><call><name>mbedtls_md_get_name</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary></expr></argument>,
                              <argument><expr><ternary><condition><expr><name>mgf_md_info</name></expr> ?</condition><then> <expr><call><name>mbedtls_md_get_name</name><argument_list>( <argument><expr><name>mgf_md_info</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary></expr></argument>,
                              <argument><expr><name><name>pss_opts</name><operator>-&gt;</operator><name>expected_salt_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>pk_alg</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>md_alg</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>sig_opts</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_RSASSA_PSS_SUPPORT */</comment>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <name>size</name> <operator>-</operator> <name>n</name> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper for writing "RSA key size", "EC key size", etc
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_key_size_helper</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>buf_size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_snprintf</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"%s key size"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>MBEDTLS_X509_SAFE_SNPRINTF</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Set the time structure to the current time.
 * Return 0 on success, non-zero on failure.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_current_time</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>now</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>st</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>GetSystemTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name>st</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>wYear</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>mon</name></name>  <operator>=</operator> <name><name>st</name><operator>.</operator><name>wMonth</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>day</name></name>  <operator>=</operator> <name><name>st</name><operator>.</operator><name>wDay</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>wHour</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>min</name></name>  <operator>=</operator> <name><name>st</name><operator>.</operator><name>wMinute</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>sec</name></name>  <operator>=</operator> <name><name>st</name><operator>.</operator><name>wSecond</name></name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_get_current_time</name><parameter_list>( <parameter><decl><type><name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>now</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_time_t</name></type> <name>tt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_gmtime_mutex</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>gmtime</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>lt</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>year</name></name> <operator>=</operator> <name><name>lt</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>mon</name></name>  <operator>=</operator> <name><name>lt</name><operator>-&gt;</operator><name>tm_mon</name></name>  <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>day</name></name>  <operator>=</operator> <name><name>lt</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>hour</name></name> <operator>=</operator> <name><name>lt</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>min</name></name>  <operator>=</operator> <name><name>lt</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>now</name><operator>-&gt;</operator><name>sec</name></name>  <operator>=</operator> <name><name>lt</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_threading_gmtime_mutex</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 &amp;&amp; !EFIX64 &amp;&amp; !EFI32 */</comment>

<comment type="block">/*
 * Return 0 if before &lt;= after, 1 otherwise
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_check_time</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>before</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>after</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>before</name><operator>-&gt;</operator><name>year</name></name>  <operator>&gt;</operator> <name><name>after</name><operator>-&gt;</operator><name>year</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>before</name><operator>-&gt;</operator><name>year</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>year</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>mon</name></name>   <operator>&gt;</operator> <name><name>after</name><operator>-&gt;</operator><name>mon</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>before</name><operator>-&gt;</operator><name>year</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>year</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>mon</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>mon</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>day</name></name>   <operator>&gt;</operator> <name><name>after</name><operator>-&gt;</operator><name>day</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>before</name><operator>-&gt;</operator><name>year</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>year</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>mon</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>mon</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>day</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>day</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>hour</name></name>  <operator>&gt;</operator> <name><name>after</name><operator>-&gt;</operator><name>hour</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>before</name><operator>-&gt;</operator><name>year</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>year</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>mon</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>mon</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>day</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>day</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>hour</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>hour</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>min</name></name>   <operator>&gt;</operator> <name><name>after</name><operator>-&gt;</operator><name>min</name></name></expr>  )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>before</name><operator>-&gt;</operator><name>year</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>year</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>mon</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>mon</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>day</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>day</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>hour</name></name> <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>hour</name></name> <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>min</name></name>  <operator>==</operator> <name><name>after</name><operator>-&gt;</operator><name>min</name></name>  <operator>&amp;&amp;</operator>
        <name><name>before</name><operator>-&gt;</operator><name>sec</name></name>   <operator>&gt;</operator> <name><name>after</name><operator>-&gt;</operator><name>sec</name></name></expr>  )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_time_is_past</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>to</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_x509_time</name></type> <name>now</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_get_current_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name>now</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>x509_check_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>to</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_time_is_future</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>from</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_x509_time</name></type> <name>now</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>x509_get_current_time</name><argument_list>( <argument><expr><operator>&amp;</operator><name>now</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>x509_check_time</name><argument_list>( <argument><expr><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* MBEDTLS_HAVE_TIME_DATE */</comment>

<function><type><name>int</name></type> <name>mbedtls_x509_time_is_past</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>to</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>to</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_time_is_future</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_x509_time</name> <modifier>*</modifier></type><name>from</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>from</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME_DATE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509_crt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"certs.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CERTS_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>cacert</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_x509_crt</name></type> <name>clicert</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  X.509 certificate load: "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>clicert</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>clicert</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>mbedtls_test_cli_crt</name></expr></argument>,
                           <argument><expr><name>mbedtls_test_cli_crt_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_x509_crt_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cacert</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cacert</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>mbedtls_test_ca_crt</name></expr></argument>,
                          <argument><expr><name>mbedtls_test_ca_crt_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n  X.509 signature verify: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_x509_crt_verify</name><argument_list>( <argument><expr><operator>&amp;</operator><name>clicert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cacert</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_x509_crt_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>clicert</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>verbose</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CERTS_C &amp;&amp; MBEDTLS_SHA1_C */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_USE_C */</comment>
</unit>
