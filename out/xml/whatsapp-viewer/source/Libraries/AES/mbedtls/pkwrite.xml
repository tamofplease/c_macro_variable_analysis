<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/pkwrite.c"><comment type="block">/*
 *  Public Key layer for writing key files and structures
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PK_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rsa.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecp.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecdsa.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 *  RSAPublicKey ::= SEQUENCE {
 *      modulus           INTEGER,  -- n
 *      publicExponent    INTEGER   -- e
 *  }
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pk_write_rsa_pubkey</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                                  <parameter><decl><type><name>mbedtls_rsa_context</name> <modifier>*</modifier></type><name>rsa</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>E</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                 <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * EC public key is an EC point
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pk_write_ec_pubkey</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                                 <parameter><decl><type><name>mbedtls_ecp_keypair</name> <modifier>*</modifier></type><name>ec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MBEDTLS_ECP_MAX_PT_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecp_point_write_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ec</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ec</name><operator>-&gt;</operator><name>Q</name></name></expr></argument>,
                                        <argument><expr><name>MBEDTLS_ECP_PF_UNCOMPRESSED</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>start</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <operator>*</operator><name>p</name> <operator>-</operator> <name>start</name> <operator>)</operator> <operator>&lt;</operator> <name>len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ECParameters ::= CHOICE {
 *   namedCurve         OBJECT IDENTIFIER
 * }
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pk_write_ec_param</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                                <parameter><decl><type><name>mbedtls_ecp_keypair</name> <modifier>*</modifier></type><name>ec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>oid_len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_oid_by_ec_grp</name><argument_list>( <argument><expr><name><name>ec</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_oid</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<function><type><name>int</name></type> <name>mbedtls_pk_write_pubkey</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_RSA</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>pk_write_rsa_pubkey</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>mbedtls_pk_rsa</name><argument_list>( <argument><expr><operator>*</operator><name>key</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>pk_write_ec_pubkey</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><name>key</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pk_write_pubkey_der</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>par_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>oid_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_pk_write_pubkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>c</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
     *       algorithm            AlgorithmIdentifier,
     *       subjectPublicKey     BIT STRING }
     */</comment>
    <expr_stmt><expr><operator>*</operator><operator>--</operator><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_BIT_STRING</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_oid_get_oid_by_pk_alg</name><argument_list>( <argument><expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>par_len</name></expr></argument>, <argument><expr><call><name>pk_write_ec_param</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><name>key</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_algorithm_identifier</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_len</name></expr></argument>,
                                                        <argument><expr><name>par_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pk_write_key_der</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_RSA</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_rsa_context</name> <modifier>*</modifier></type><name>rsa</name> <init>= <expr><call><name>mbedtls_pk_rsa</name><argument_list>( <argument><expr><operator>*</operator><name>key</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>QP</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>DQ</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>DP</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>Q</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>P</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>D</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>E</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rsa</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                    <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>mbedtls_ecp_keypair</name> <modifier>*</modifier></type><name>ec</name> <init>= <expr><call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><operator>*</operator><name>key</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>pub_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>par_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * RFC 5915, or SEC1 Appendix C.4
         *
         * ECPrivateKey ::= SEQUENCE {
         *      version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
         *      privateKey     OCTET STRING,
         *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
         *      publicKey  [1] BIT STRING OPTIONAL
         *    }
         */</comment>

        <comment type="block">/* publicKey */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>pub_len</name></expr></argument>, <argument><expr><call><name>pk_write_ec_pubkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ec</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>c</name> <operator>-</operator> <name>buf</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><operator>--</operator><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>pub_len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>pub_len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pub_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>pub_len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_BIT_STRING</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>pub_len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pub_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>pub_len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
                            <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>pub_len</name></expr>;</expr_stmt>

        <comment type="block">/* parameters */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>par_len</name></expr></argument>, <argument><expr><call><name>pk_write_ec_param</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ec</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>par_len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>par_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>par_len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
                            <argument><expr><name>MBEDTLS_ASN1_CONTEXT_SPECIFIC</name> <operator>|</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>par_len</name></expr>;</expr_stmt>

        <comment type="block">/* privateKey: write as MPI then fix tag */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ec</name><operator>-&gt;</operator><name>d</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>MBEDTLS_ASN1_OCTET_STRING</name></expr>;</expr_stmt>

        <comment type="block">/* version */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                    <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_BEGIN_PUBLIC_KEY</name></cpp:macro>    <cpp:value>"-----BEGIN PUBLIC KEY-----\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_END_PUBLIC_KEY</name></cpp:macro>      <cpp:value>"-----END PUBLIC KEY-----\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_BEGIN_PRIVATE_KEY_RSA</name></cpp:macro>   <cpp:value>"-----BEGIN RSA PRIVATE KEY-----\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_END_PRIVATE_KEY_RSA</name></cpp:macro>     <cpp:value>"-----END RSA PRIVATE KEY-----\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_BEGIN_PRIVATE_KEY_EC</name></cpp:macro>    <cpp:value>"-----BEGIN EC PRIVATE KEY-----\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEM_END_PRIVATE_KEY_EC</name></cpp:macro>      <cpp:value>"-----END EC PRIVATE KEY-----\n"</cpp:value></cpp:define>

<comment type="block">/*
 * Max sizes of key per types. Shown as tag + len (+ content).
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<comment type="block">/*
 * RSA public keys:
 *  SubjectPublicKeyInfo  ::=  SEQUENCE  {          1 + 3
 *       algorithm            AlgorithmIdentifier,  1 + 1 (sequence)
 *                                                + 1 + 1 + 9 (rsa oid)
 *                                                + 1 + 1 (params null)
 *       subjectPublicKey     BIT STRING }          1 + 3 + (1 + below)
 *  RSAPublicKey ::= SEQUENCE {                     1 + 3
 *      modulus           INTEGER,  -- n            1 + 3 + MPI_MAX + 1
 *      publicExponent    INTEGER   -- e            1 + 3 + MPI_MAX + 1
 *  }
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSA_PUB_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>38 + 2 * MBEDTLS_MPI_MAX_SIZE</cpp:value></cpp:define>

<comment type="block">/*
 * RSA private keys:
 *  RSAPrivateKey ::= SEQUENCE {                    1 + 3
 *      version           Version,                  1 + 1 + 1
 *      modulus           INTEGER,                  1 + 3 + MPI_MAX + 1
 *      publicExponent    INTEGER,                  1 + 3 + MPI_MAX + 1
 *      privateExponent   INTEGER,                  1 + 3 + MPI_MAX + 1
 *      prime1            INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
 *      prime2            INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
 *      exponent1         INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
 *      exponent2         INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
 *      coefficient       INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
 *      otherPrimeInfos   OtherPrimeInfos OPTIONAL  0 (not supported)
 *  }
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPI_MAX_SIZE_2</name></cpp:macro>          <cpp:value>MBEDTLS_MPI_MAX_SIZE / 2 + \
                                MBEDTLS_MPI_MAX_SIZE % 2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSA_PRV_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>47 + 3 * MBEDTLS_MPI_MAX_SIZE \
                                   + 5 * MPI_MAX_SIZE_2</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_RSA_C */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSA_PUB_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSA_PRV_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RSA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<comment type="block">/*
 * EC public keys:
 *  SubjectPublicKeyInfo  ::=  SEQUENCE  {      1 + 2
 *    algorithm         AlgorithmIdentifier,    1 + 1 (sequence)
 *                                            + 1 + 1 + 7 (ec oid)
 *                                            + 1 + 1 + 9 (namedCurve oid)
 *    subjectPublicKey  BIT STRING              1 + 2 + 1               [1]
 *                                            + 1 (point format)        [1]
 *                                            + 2 * ECP_MAX (coords)    [1]
 *  }
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECP_PUB_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>30 + 2 * MBEDTLS_ECP_MAX_BYTES</cpp:value></cpp:define>

<comment type="block">/*
 * EC private keys:
 * ECPrivateKey ::= SEQUENCE {                  1 + 2
 *      version        INTEGER ,                1 + 1 + 1
 *      privateKey     OCTET STRING,            1 + 1 + ECP_MAX
 *      parameters [0] ECParameters OPTIONAL,   1 + 1 + (1 + 1 + 9)
 *      publicKey  [1] BIT STRING OPTIONAL      1 + 2 + [1] above
 *    }
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECP_PRV_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>29 + 3 * MBEDTLS_ECP_MAX_BYTES</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECP_PUB_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECP_PRV_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_C */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUB_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>RSA_PUB_DER_MAX_BYTES &gt; ECP_PUB_DER_MAX_BYTES ? \
                            RSA_PUB_DER_MAX_BYTES : ECP_PUB_DER_MAX_BYTES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRV_DER_MAX_BYTES</name></cpp:macro>   <cpp:value>RSA_PRV_DER_MAX_BYTES &gt; ECP_PRV_DER_MAX_BYTES ? \
                            RSA_PRV_DER_MAX_BYTES : ECP_PRV_DER_MAX_BYTES</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>mbedtls_pk_write_pubkey_pem</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output_buf</name><index>[<expr><name>PUB_DER_MAX_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_write_pubkey_der</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name>output_buf</name></expr></argument>,
                                     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_buf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pem_write_buffer</name><argument_list>( <argument><expr><name>PEM_BEGIN_PUBLIC_KEY</name></expr></argument>, <argument><expr><name>PEM_END_PUBLIC_KEY</name></expr></argument>,
                                  <argument><expr><name>output_buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>output_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>ret</name></expr></argument>,
                                  <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pk_write_key_pem</name><parameter_list>( <parameter><decl><type><name>mbedtls_pk_context</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output_buf</name><index>[<expr><name>PRV_DER_MAX_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_write_key_der</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name>output_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_buf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_RSA</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>begin</name> <operator>=</operator> <name>PEM_BEGIN_PRIVATE_KEY_RSA</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>PEM_END_PRIVATE_KEY_RSA</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><call><name>mbedtls_pk_get_type</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>MBEDTLS_PK_ECKEY</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>begin</name> <operator>=</operator> <name>PEM_BEGIN_PRIVATE_KEY_EC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>PEM_END_PRIVATE_KEY_EC</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pem_write_buffer</name><argument_list>( <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                                  <argument><expr><name>output_buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>output_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>ret</name></expr></argument>,
                                  <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_WRITE_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PK_WRITE_C */</comment>
</unit>
