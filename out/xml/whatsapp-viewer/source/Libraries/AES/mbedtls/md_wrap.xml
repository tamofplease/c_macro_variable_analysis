<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/md_wrap.c"><comment type="block" format="doxygen">/**
 * \file md_wrap.c
 *
 * \brief Generic message digest wrapper for mbed TLS
 *
 * \author Adriaan de Jong &lt;dejong@fox-it.com&gt;
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md2.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md4.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ripemd160.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha256.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha512.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md2_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md2_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md2_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md2_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md2_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md2_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>md2_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md2_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_md2_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md2_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md2_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md2_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md2_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                 <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md2_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md2_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md2_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_md2_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_MD2</name></expr>,
    <expr><literal type="string">"MD2"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><name>md2_starts_wrap</name></expr>,
    <expr><name>md2_update_wrap</name></expr>,
    <expr><name>md2_finish_wrap</name></expr>,
    <expr><name>mbedtls_md2</name></expr>,
    <expr><name>md2_ctx_alloc</name></expr>,
    <expr><name>md2_ctx_free</name></expr>,
    <expr><name>md2_clone_wrap</name></expr>,
    <expr><name>md2_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md4_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md4_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md4_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md4_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md4_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md4_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>md4_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md4_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_md4_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md4_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md4_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md4_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md4_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                 <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md4_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md4_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_md4_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_MD4</name></expr>,
    <expr><literal type="string">"MD4"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><name>md4_starts_wrap</name></expr>,
    <expr><name>md4_update_wrap</name></expr>,
    <expr><name>md4_finish_wrap</name></expr>,
    <expr><name>mbedtls_md4</name></expr>,
    <expr><name>md4_ctx_alloc</name></expr>,
    <expr><name>md4_ctx_free</name></expr>,
    <expr><name>md4_clone_wrap</name></expr>,
    <expr><name>md4_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD4_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md5_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md5_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                             <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md5_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>md5_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md5_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md5_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md5_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md5_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                 <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>md5_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_md5_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_md5_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_md5_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_MD5</name></expr>,
    <expr><literal type="string">"MD5"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><name>md5_starts_wrap</name></expr>,
    <expr><name>md5_update_wrap</name></expr>,
    <expr><name>md5_finish_wrap</name></expr>,
    <expr><name>mbedtls_md5</name></expr>,
    <expr><name>md5_ctx_alloc</name></expr>,
    <expr><name>md5_ctx_free</name></expr>,
    <expr><name>md5_clone_wrap</name></expr>,
    <expr><name>md5_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RIPEMD160_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ripemd160_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ripemd160_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ripemd160_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                       <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ripemd160_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ripemd160_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_ripemd160_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_RIPEMD160</name></expr>,
    <expr><literal type="string">"RIPEMD160"</literal></expr>,
    <expr><literal type="number">20</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><name>ripemd160_starts_wrap</name></expr>,
    <expr><name>ripemd160_update_wrap</name></expr>,
    <expr><name>ripemd160_finish_wrap</name></expr>,
    <expr><name>mbedtls_ripemd160</name></expr>,
    <expr><name>ripemd160_ctx_alloc</name></expr>,
    <expr><name>ripemd160_ctx_free</name></expr>,
    <expr><name>ripemd160_clone_wrap</name></expr>,
    <expr><name>ripemd160_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_RIPEMD160_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                              <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sha1_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_sha1_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha1_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                  <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha1_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha1_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha1_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_sha1_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_SHA1</name></expr>,
    <expr><literal type="string">"SHA1"</literal></expr>,
    <expr><literal type="number">20</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><name>sha1_starts_wrap</name></expr>,
    <expr><name>sha1_update_wrap</name></expr>,
    <expr><name>sha1_finish_wrap</name></expr>,
    <expr><name>mbedtls_sha1</name></expr>,
    <expr><name>sha1_ctx_alloc</name></expr>,
    <expr><name>sha1_ctx_free</name></expr>,
    <expr><name>sha1_clone_wrap</name></expr>,
    <expr><name>sha1_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>

<comment type="block">/*
 * Wrappers for generic message digests
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                                <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_wrap</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sha224_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_sha256_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_sha256_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                    <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha224_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_sha224_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_SHA224</name></expr>,
    <expr><literal type="string">"SHA224"</literal></expr>,
    <expr><literal type="number">28</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><name>sha224_starts_wrap</name></expr>,
    <expr><name>sha224_update_wrap</name></expr>,
    <expr><name>sha224_finish_wrap</name></expr>,
    <expr><name>sha224_wrap</name></expr>,
    <expr><name>sha224_ctx_alloc</name></expr>,
    <expr><name>sha224_ctx_free</name></expr>,
    <expr><name>sha224_clone_wrap</name></expr>,
    <expr><name>sha224_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha256_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha256_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha256_wrap</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha256</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_sha256_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_SHA256</name></expr>,
    <expr><literal type="string">"SHA256"</literal></expr>,
    <expr><literal type="number">32</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><name>sha256_starts_wrap</name></expr>,
    <expr><name>sha224_update_wrap</name></expr>,
    <expr><name>sha224_finish_wrap</name></expr>,
    <expr><name>sha256_wrap</name></expr>,
    <expr><name>sha224_ctx_alloc</name></expr>,
    <expr><name>sha224_ctx_free</name></expr>,
    <expr><name>sha224_clone_wrap</name></expr>,
    <expr><name>sha224_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA256_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA512_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_update_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                                <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_finish_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_wrap</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sha384_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_sha512_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_sha512_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_clone_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_clone</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></argument>,
                    <argument><expr><operator>(</operator><specifier>const</specifier> <name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha384_process_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_process</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_sha384_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_SHA384</name></expr>,
    <expr><literal type="string">"SHA384"</literal></expr>,
    <expr><literal type="number">48</literal></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><name>sha384_starts_wrap</name></expr>,
    <expr><name>sha384_update_wrap</name></expr>,
    <expr><name>sha384_finish_wrap</name></expr>,
    <expr><name>sha384_wrap</name></expr>,
    <expr><name>sha384_ctx_alloc</name></expr>,
    <expr><name>sha384_ctx_free</name></expr>,
    <expr><name>sha384_clone_wrap</name></expr>,
    <expr><name>sha384_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha512_starts_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_sha512_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sha512_wrap</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_sha512</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name></type> <name>mbedtls_sha512_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_MD_SHA512</name></expr>,
    <expr><literal type="string">"SHA512"</literal></expr>,
    <expr><literal type="number">64</literal></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><name>sha512_starts_wrap</name></expr>,
    <expr><name>sha384_update_wrap</name></expr>,
    <expr><name>sha384_finish_wrap</name></expr>,
    <expr><name>sha512_wrap</name></expr>,
    <expr><name>sha384_ctx_alloc</name></expr>,
    <expr><name>sha384_ctx_free</name></expr>,
    <expr><name>sha384_clone_wrap</name></expr>,
    <expr><name>sha384_process_wrap</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA512_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD_C */</comment>
</unit>
