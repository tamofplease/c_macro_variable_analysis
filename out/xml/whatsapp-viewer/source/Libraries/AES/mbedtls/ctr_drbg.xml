<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ctr_drbg.c"><comment type="block">/*
 *  CTR_DRBG implementation based on AES-256 (NIST SP 800-90)
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The NIST SP 800-90 DRBGs are described in the following publucation.
 *
 *  http://csrc.nist.gov/publications/nistpubs/800-90/SP800-90revised_March2007.pdf
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CTR_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ctr_drbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * CTR_DRBG context initialization
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ctr_drbg_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ctr_drbg_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Non-public function wrapped by mbedtls_ctr_drbg_seed(). Necessary to allow
 * NIST tests to succeed (which require known length fixed entropy)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_seed_entropy_len</name><parameter_list>(
                   <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_entropy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_entropy</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>custom</name></decl></parameter>,
                   <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                   <parameter><decl><type><name>size_t</name></type> <name>entropy_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_CTR_DRBG_KEYSIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_KEYSIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>f_entropy</name></name> <operator>=</operator> <name>f_entropy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_entropy</name></name> <operator>=</operator> <name>p_entropy</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>=</operator> <name>entropy_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_interval</name></name> <operator>=</operator> <name>MBEDTLS_CTR_DRBG_RESEED_INTERVAL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Initialize with an empty key
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_KEYBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_reseed</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_seed</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_entropy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_entropy</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>custom</name></decl></parameter>,
                   <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_ctr_drbg_seed_entropy_len</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f_entropy</name></expr></argument>, <argument><expr><name>p_entropy</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_CTR_DRBG_ENTROPY_LEN</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ctr_drbg_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ctr_drbg_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ctr_drbg_set_prediction_resistance</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resistance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prediction_resistance</name></name> <operator>=</operator> <name>resistance</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ctr_drbg_set_entropy_len</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ctr_drbg_set_reseed_interval</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>block_cipher_df</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name> <operator>+</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MBEDTLS_CTR_DRBG_KEYSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>chain</name><index>[<expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_aes_context</name></type> <name>aes_ctx</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>buf_len</name></decl>, <decl><type ref="prev"/><name>use_len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>data_len</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name> <operator>+</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Construct IV (16 bytes) and S in buffer
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name>data_len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name>data_len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name>data_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal>  <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name>data_len</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>data_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>buf_len</name> <operator>=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>data_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MBEDTLS_CTR_DRBG_KEYSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_KEYBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */</comment>
    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>chain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <name>buf_len</name></expr>;</expr_stmt>

        <while>while<condition>( <expr><name>use_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>chain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>use_len</name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator> <name>use_len</name> <operator>&gt;=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name> <operator>)</operator></expr> ?</condition><then>
                       <expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr> </then><else>: <expr><name>use_len</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Update IV
         */</comment>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Do final encryption with reduced data
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_KEYBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iv</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>MBEDTLS_CTR_DRBG_KEYSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ctr_drbg_update_internal</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></incr> )</control>
    <block>{<block_content>
        <comment type="block">/*
         * Increase counter
         */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>counter</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <comment type="block">/*
         * Crypt counter block
         */</comment>
        <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/*
     * Update key and counter
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_KEYBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>MBEDTLS_CTR_DRBG_KEYSIZE</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_ctr_drbg_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>additional</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>add_input</name><index>[<expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* MAX_INPUT would be more logical here, but we have to match
         * block_cipher_df()'s limits since we can't propagate errors */</comment>
        <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>add_len</name> <operator>=</operator> <name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>block_cipher_df</name><argument_list>( <argument><expr><name>add_input</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctr_drbg_update_internal</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>add_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_reseed</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>additional</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>seed</name><index>[<expr><name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>seedlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_MAX_SEED_INPUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Gather entropy_len bytes of entropy to seed state
     */</comment>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>f_entropy</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_entropy</name></name></expr></argument>, <argument><expr><name>seed</name></expr></argument>,
                             <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>seedlen</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Add additional data
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>additional</name> <operator>&amp;&amp;</operator> <name>len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>seed</name> <operator>+</operator> <name>seedlen</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seedlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Reduce to 384 bits
     */</comment>
    <expr_stmt><expr><call><name>block_cipher_df</name><argument_list>( <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seedlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Update state
     */</comment>
    <expr_stmt><expr><call><name>ctr_drbg_update_internal</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_random_with_add</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>output_len</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>additional</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mbedtls_ctr_drbg_context</name> <operator>*</operator><operator>)</operator> <name>p_rng</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>add_input</name><index>[<expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>output_len</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_MAX_REQUEST</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>add_input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_SEEDLEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_counter</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>reseed_interval</name></name> <operator>||</operator>
        <name><name>ctx</name><operator>-&gt;</operator><name>prediction_resistance</name></name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_reseed</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>add_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>block_cipher_df</name><argument_list>( <argument><expr><name>add_input</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ctr_drbg_update_internal</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>add_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>output_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Increase counter
         */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>counter</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

        <comment type="block">/*
         * Crypt counter block
         */</comment>
        <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>aes_ctx</name></name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>output_len</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name> <operator>)</operator></expr> ?</condition><then> <expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr> </then><else>:
                                                       <expr><name>output_len</name></expr></else></ternary></expr>;</expr_stmt>
        <comment type="block">/*
         * Copy random block to destination
         */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>output_len</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>ctr_drbg_update_internal</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>add_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_counter</name></name><operator>++</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_random</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>output_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mbedtls_ctr_drbg_context</name> <operator>*</operator><operator>)</operator> <name>p_rng</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_random_with_add</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_write_seed_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[ <expr><name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr> ]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ctr_drbg_random</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR</name></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_update_seed_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_ctr_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[ <expr><name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr> ]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>fseek</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ftell</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fseek</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <name>MBEDTLS_CTR_DRBG_MAX_INPUT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>fread</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ctr_drbg_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_ctr_drbg_write_seed_file</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_FS_IO */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>entropy_source_pr</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
      <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
      <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x8b</literal></expr>,
      <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xcb</literal></expr>,
      <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xc9</literal></expr>,
      <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x95</literal></expr>,
      <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
      <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
      <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
      <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xe4</literal></expr>,
      <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
      <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x68</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>entropy_source_nopr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x14</literal></expr>,
      <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xfe</literal></expr>,
      <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x9d</literal></expr>,
      <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
      <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xa9</literal></expr>,
      <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x46</literal></expr>,
      <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x7e</literal></expr>,
      <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x2e</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nonce_pers_pr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
      <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x6c</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nonce_pers_nopr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xf5</literal></expr>,
      <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x3f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>result_pr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,
      <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>result_nopr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
      <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x8f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>test_offset</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ctr_drbg_self_test_entropy</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>test_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>test_offset</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHK</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro>    <cpp:value>if( (c) != 0 )                          \
                    {                                       \
                        if( verbose != 0 )                  \
                            mbedtls_printf( "failed\n" );  \
                        return( 1 );                        \
                    }</cpp:value></cpp:define>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ctr_drbg_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_ctr_drbg_context</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Based on a NIST CTR_DRBG test vector (PR = True)
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CTR_DRBG (PR = TRUE) : "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>test_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_seed_entropy_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ctr_drbg_self_test_entropy</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>entropy_source_pr</name></expr></argument>, <argument><expr><name>nonce_pers_pr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ctr_drbg_set_prediction_resistance</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_PR_ON</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result_pr</name></expr></argument>, <argument><expr><name>MBEDTLS_CTR_DRBG_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ctr_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Based on a NIST CTR_DRBG test vector (PR = FALSE)
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  CTR_DRBG (PR = FALSE): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ctr_drbg_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>test_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_seed_entropy_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ctr_drbg_self_test_entropy</name></expr></argument>,
                            <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>entropy_source_nopr</name></expr></argument>, <argument><expr><name>nonce_pers_nopr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_reseed</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ctr_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result_nopr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ctr_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CTR_DRBG_C */</comment>
</unit>
