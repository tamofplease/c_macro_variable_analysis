<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/xtea.c"><comment type="block">/*
 *  An 32-bit implementation of the XTEA algorithm
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_XTEA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xtea.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_XTEA_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * 32-bit integer manipulation macros (big endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ] &lt;&lt; 24 )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 3]       );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_BE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_BE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (b)[(i)    ] = (unsigned char) ( (n) &gt;&gt; 24 );       \
    (b)[(i) + 1] = (unsigned char) ( (n) &gt;&gt; 16 );       \
    (b)[(i) + 2] = (unsigned char) ( (n) &gt;&gt;  8 );       \
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>mbedtls_xtea_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_xtea_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_xtea_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_xtea_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_xtea_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_xtea_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * XTEA key schedule
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_xtea_setup</name><parameter_list>( <parameter><decl><type><name>mbedtls_xtea_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_xtea_context</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * XTEA encrypt function
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_xtea_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>mbedtls_xtea_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>k</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_BE</name><argument_list>( <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_XTEA_ENCRYPT</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0x9E3779B9</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>k</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>k</name><index>[<expr><operator>(</operator><name>sum</name><operator>&gt;&gt;</operator><literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else <comment type="block">/* MBEDTLS_XTEA_DECRYPT */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0x9E3779B9</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><name>delta</name> <operator>*</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name>v1</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>k</name><index>[<expr><operator>(</operator><name>sum</name><operator>&gt;&gt;</operator><literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v0</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>v1</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name><name>k</name><index>[<expr><name>sum</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_BE</name><argument_list>( <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * XTEA-CBC buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_xtea_crypt_cbc</name><parameter_list>( <parameter><decl><type><name>mbedtls_xtea_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>length</name> <operator>%</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_XTEA_DECRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_xtea_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>mbedtls_xtea_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_XTEA_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * XTEA tests vectors (non-official)
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>xtea_test_key</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
   <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
     <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,
   <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
     <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,
   <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
     <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,
   <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
     <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
   <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
     <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
   <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
     <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>xtea_test_pt</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x7f</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x48</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x55</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>xtea_test_ct</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xb5</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd8</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xa5</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x2d</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_xtea_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_xtea_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_xtea_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  XTEA test #%d: "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xtea_test_pt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_xtea_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>xtea_test_key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_xtea_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_XTEA_ENCRYPT</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xtea_test_ct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_xtea_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_XTEA_C */</comment>
</unit>
