<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/net_sockets.c"><comment type="block">/*
 *  TCP/IP or UDP/IP networking functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_NET_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>unix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__unix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This module only works on Unix and Windows, see MBEDTLS_NET_C in config.h"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net_sockets.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WINNT</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_WIN32_WINNT</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* Enables getaddrinfo() &amp; Co */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name> <name>lib</name><name>,</name> <cpp:literal>"ws2.lib"</cpp:literal> <name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name> <name>lib</name><name>,</name> <cpp:literal>"ws2_32.lib"</cpp:literal> <name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _MSC_VER */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>recv(fd,(char*)buf,(int) len,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>,<parameter><type><name>buf</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>send(fd,(char*)buf,(int) len,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>closesocket(fd)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wsa_init_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* ( _WIN32 || _WIN32_WCE ) &amp;&amp; !EFIX64 &amp;&amp; !EFI32 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ( _WIN32 || _WIN32_WCE ) &amp;&amp; !EFIX64 &amp;&amp; !EFI32 */</comment>

<comment type="block">/* Some MS functions want int and MSVC warns if we pass size_t,
 * but the standard fucntions use socklen_t, so cast only for MSVC */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSVC_INT_CAST</name></cpp:macro>   <cpp:value>(int)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSVC_INT_CAST</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Prepare for using the sockets interface
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>net_prepare</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>wsa_init_done</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>WSAStartup</name><argument_list>( <argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_SOCKET_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>wsa_init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>signal</name><argument_list>( <argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_net_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initiate a TCP connection with host:port and the given protocol
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_connect</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>net_prepare</name><argument_list>()</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Do name resolution with both IPv6 and IPv4 */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hints</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <ternary><condition><expr><name>proto</name> <operator>==</operator> <name>MBEDTLS_NET_PROTO_UDP</name></expr> ?</condition><then> <expr><name>SOCK_DGRAM</name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>proto</name> <operator>==</operator> <name>MBEDTLS_NET_PROTO_UDP</name></expr> ?</condition><then> <expr><name>IPPROTO_UDP</name></expr> </then><else>: <expr><name>IPPROTO_TCP</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>getaddrinfo</name><argument_list>( <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_list</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_UNKNOWN_HOST</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Try the sockaddrs until a connection succeeds */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_UNKNOWN_HOST</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name>addr_list</name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>socket</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,
                            <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_SOCKET_FAILED</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><macro><name>connect</name><argument_list>( <argument>ctx-&gt;fd</argument>, <argument>cur-&gt;ai_addr</argument>, <argument>MSVC_INT_CAST cur-&gt;ai_addrlen</argument> )</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_CONNECT_FAILED</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>addr_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a listening socket on bind_ip:port
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_bind</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bind_ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>proto</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addr_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>net_prepare</name><argument_list>()</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Bind to IPv6 and/or IPv4, but only in the desired protocol */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>hints</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <ternary><condition><expr><name>proto</name> <operator>==</operator> <name>MBEDTLS_NET_PROTO_UDP</name></expr> ?</condition><then> <expr><name>SOCK_DGRAM</name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>proto</name> <operator>==</operator> <name>MBEDTLS_NET_PROTO_UDP</name></expr> ?</condition><then> <expr><name>IPPROTO_UDP</name></expr> </then><else>: <expr><name>IPPROTO_TCP</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bind_ip</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>getaddrinfo</name><argument_list>( <argument><expr><name>bind_ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_list</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_UNKNOWN_HOST</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Try the sockaddrs until a binding succeeds */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_UNKNOWN_HOST</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name>addr_list</name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>socket</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>,
                            <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_SOCKET_FAILED</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>setsockopt</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
                        <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_SOCKET_FAILED</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><macro><name>bind</name><argument_list>( <argument>ctx-&gt;fd</argument>, <argument>cur-&gt;ai_addr</argument>, <argument>MSVC_INT_CAST cur-&gt;ai_addrlen</argument> )</argument_list></macro> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_BIND_FAILED</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Listen only makes sense for TCP */</comment>
        <if_stmt><if>if<condition>( <expr><name>proto</name> <operator>==</operator> <name>MBEDTLS_NET_PROTO_TCP</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>listen</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>MBEDTLS_NET_LISTEN_BACKLOG</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_NET_LISTEN_FAILED</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* I we ever get there, it's a success */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>( <argument><expr><name>addr_list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Check if the requested operation would be blocking on a non-blocking socket
 * and thus 'failed' with a negative return value.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>net_would_block</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEWOULDBLOCK</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/*
 * Check if the requested operation would be blocking on a non-blocking socket
 * and thus 'failed' with a negative return value.
 *
 * Note: on a blocking socket this function always returns 0!
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>net_would_block</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * Never return 'WOULD BLOCK' on a non-blocking socket
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <call><name>fcntl</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <name>O_NONBLOCK</name> <operator>)</operator> <operator>!=</operator> <name>O_NONBLOCK</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch<condition>( <expr><name>errno</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>EAGAIN</name></expr></cpp:if>
        <case>case <expr><name>EAGAIN</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>EWOULDBLOCK</name> <operator>&amp;&amp;</operator> <name>EWOULDBLOCK</name> <operator>!=</operator> <name>EAGAIN</name></expr></cpp:if>
        <case>case <expr><name>EWOULDBLOCK</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ( _WIN32 || _WIN32_WCE ) &amp;&amp; !EFIX64 &amp;&amp; !EFI32 */</comment>

<comment type="block">/*
 * Accept a connection from a remote client
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_accept</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>bind_ctx</name></decl></parameter>,
                        <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>client_ctx</name></decl></parameter>,
                        <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>client_ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>ip_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>client_addr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__socklen_t_defined</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_SOCKLEN_T</name></expr></argument>)</argument_list></call> <operator>||</operator>  \
    <call><name>defined</name><argument_list>(<argument><expr><name>_SOCKLEN_T_DECLARED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DEFINED_socklen_t</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>client_addr</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>type_len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>client_addr</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Is this a TCP or UDP socket? */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>getsockopt</name><argument_list>( <argument><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_TYPE</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>type</name> <operator>!=</operator> <name>SOCK_STREAM</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>SOCK_DGRAM</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_ACCEPT_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>SOCK_STREAM</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* TCP: actual accept() */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>client_ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>accept</name><argument_list>( <argument><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                                         <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>client_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/* UDP: wait for a message, but keep it in the queue */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>recvfrom</name><argument_list>( <argument><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>,
                        <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>client_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>SOCKET_ERROR</name> <operator>&amp;&amp;</operator>
            <call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEMSGSIZE</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* We know buf is too small, thanks, just peeking here */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>net_would_block</name><argument_list>( <argument><expr><name>bind_ctx</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_ACCEPT_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* UDP: hijack the listening socket to communicate with the client,
     * then bind a new socket to accept new connections */</comment>
    <if_stmt><if>if<condition>( <expr><name>type</name> <operator>!=</operator> <name>SOCK_STREAM</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>local_addr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>connect</name><argument_list>( <argument><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>client_addr</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_ACCEPT_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>client_ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name>   <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* In case we exit early */</comment>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr>struct <name>sockaddr_storage</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>getsockname</name><argument_list>( <argument><expr><name><name>client_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>,
                         <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>local_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <operator>(</operator> <name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>socket</name><argument_list>( <argument><expr><name><name>local_addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>,
                                           <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>setsockopt</name><argument_list>( <argument><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
                        <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>one</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_SOCKET_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>bind</name><argument_list>( <argument><expr><name><name>bind_ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>local_addr</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_BIND_FAILED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>client_ip</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>client_addr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr4</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>client_addr</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>*</operator><name>ip_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>addr4</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>buf_size</name> <operator>&lt;</operator> <operator>*</operator><name>ip_len</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>client_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr4</name><operator>-&gt;</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ip_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>client_addr</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>*</operator><name>ip_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>buf_size</name> <operator>&lt;</operator> <operator>*</operator><name>ip_len</name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>client_ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr6</name><operator>-&gt;</operator><name>sin6_addr</name><operator>.</operator><name>s6_addr</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ip_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set the socket blocking or non-blocking
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_set_block</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>u_long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <return>return<expr><operator>(</operator> <call><name>ioctlsocket</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return<expr><operator>(</operator> <call><name>fcntl</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>O_NONBLOCK</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_net_set_nonblock</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>u_long</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <return>return<expr><operator>(</operator> <call><name>ioctlsocket</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return<expr><operator>(</operator> <call><name>fcntl</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><call><name>fcntl</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument> )</argument_list></call> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Portable usleep helper
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_net_usleep</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>usec</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>Sleep</name><argument_list>( <argument><expr><operator>(</operator> <name>usec</name> <operator>+</operator> <literal type="number">999</literal> <operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name>usec</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__unix</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>suseconds_t</name><operator>)</operator> <name>usec</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>usec</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>select</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Read at most 'len' characters
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_recv</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mbedtls_net_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_INVALID_CONTEXT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>read</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>net_would_block</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAECONNRESET</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_CONN_RESET</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>EPIPE</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ECONNRESET</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_CONN_RESET</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_RECV_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read at most 'len' characters, blocking for at most 'timeout' ms
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_recv_timeout</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                      <parameter><decl><type><name>uint32_t</name></type> <name>timeout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fd_set</name></type> <name>read_fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mbedtls_net_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_INVALID_CONTEXT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>( <argument><expr><operator>&amp;</operator><name>read_fds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_fds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator> <name>timeout</name> <operator>%</operator> <literal type="number">1000</literal> <operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>( <argument><expr><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>tv</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Zero fds ready means we timed out */</comment>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_TIMEOUT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEINTR</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_READ</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_RECV_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* This call will not block */</comment>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_net_recv</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write at most 'len' characters
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_net_send</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>(</operator><operator>(</operator><name>mbedtls_net_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_INVALID_CONTEXT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>write</name><argument_list>( <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>net_would_block</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_WRITE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFIX64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFI32</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAECONNRESET</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_CONN_RESET</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>EPIPE</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ECONNRESET</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_CONN_RESET</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WANT_WRITE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_NET_SEND_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Gracefully close the connection
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_net_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_net_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>shutdown</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_NET_C */</comment>
</unit>
