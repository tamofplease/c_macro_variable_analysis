<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/bignum.c"><comment type="block">/*
 *  Multi-precision integer library
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 *  The following sources were referenced in the design of this Multi-precision
 *  Integer library:
 *
 *  [1] Handbook of Applied Cryptography - 1997
 *      Menezes, van Oorschot and Vanstone
 *
 *  [2] Multi-Precision Math
 *      Tom St Denis
 *      https://github.com/libtom/libtommath/blob/develop/tommath.pdf
 *
 *  [3] GNU Multi-Precision Arithmetic Library
 *      https://gmplib.org/manual/index.html
 *
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BIGNUM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bignum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bn_mul.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro>     <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_mpi_zeroize</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ciL</name></cpp:macro>    <cpp:value>(sizeof(mbedtls_mpi_uint))</cpp:value></cpp:define>         <comment type="block">/* chars in limb  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>biL</name></cpp:macro>    <cpp:value>(ciL &lt;&lt; 3)</cpp:value></cpp:define>               <comment type="block">/* bits  in limb  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>biH</name></cpp:macro>    <cpp:value>(ciL &lt;&lt; 2)</cpp:value></cpp:define>               <comment type="block">/* half limb size */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPI_SIZE_T_MAX</name></cpp:macro>  <cpp:value>( (size_t) -1 )</cpp:value></cpp:define> <comment type="block">/* SIZE_T_MAX is not standard */</comment>

<comment type="block">/*
 * Convert between bits/chars and number of limbs
 * Divide first in order to avoid potential overflows
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_TO_LIMBS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>( (i) / biL + ( (i) % biL != 0 ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHARS_TO_LIMBS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (i) / ciL + ( (i) % ciL != 0 ) )</cpp:value></cpp:define>

<comment type="block">/*
 * Initialize one MPI
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_mpi_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Unallocate one MPI
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_mpi_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_mpi_zeroize</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Enlarge to the specified number of limbs
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_grow</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nblimbs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>nblimbs</name> <operator>&gt;</operator> <name>MBEDTLS_MPI_MAX_LIMBS</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>nblimbs</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>*</operator><operator>)</operator><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><name>nblimbs</name></expr></argument>, <argument><expr><name>ciL</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_mpi_zeroize</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>nblimbs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_shrink</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nblimbs</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Actually resize up in this case */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;=</operator> <name>nblimbs</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>nblimbs</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>nblimbs</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblimbs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>*</operator><operator>)</operator><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ciL</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_mpi_zeroize</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Copy the contents of Y into X
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_copy</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>Y</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>Y</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>Y</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>Y</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Swap the contents of X and Y
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_mpi_swap</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>T</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>,  <argument><expr><name>X</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(  <argument><expr><name>X</name></expr></argument>,  <argument><expr><name>Y</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(  <argument><expr><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_safe_cond_assign</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>assign</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* make sure assign is 0 or 1 in a time-constant manner */</comment>
    <expr_stmt><expr><name>assign</name> <operator>=</operator> <operator>(</operator><name>assign</name> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>-</operator><name>assign</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>Y</name><operator>-&gt;</operator><name>n</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>assign</name> <operator>)</operator> <operator>+</operator> <name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <name>assign</name></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>Y</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>assign</name> <operator>)</operator> <operator>+</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>assign</name></expr>;</expr_stmt></block_content></block></for>

    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>assign</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Conditionally swap X and Y, without leaking information
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_safe_cond_swap</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>swap</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>tmp</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>Y</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* make sure swap is 0 or 1 in a time-constant manner */</comment>
    <expr_stmt><expr><name>swap</name> <operator>=</operator> <operator>(</operator><name>swap</name> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>-</operator><name>swap</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>Y</name><operator>-&gt;</operator><name>n</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>swap</name> <operator>)</operator> <operator>+</operator> <name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <name>swap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>swap</name> <operator>)</operator> <operator>+</operator>    <name>s</name> <operator>*</operator> <name>swap</name></expr>;</expr_stmt>


    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>swap</name> <operator>)</operator> <operator>+</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>swap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator> <literal type="number">1</literal> <operator>-</operator> <name>swap</name> <operator>)</operator> <operator>+</operator>     <name>tmp</name> <operator>*</operator> <name>swap</name></expr>;</expr_stmt>
    </block_content>}</block></for>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set value from integer
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_lset</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_sint</name></type> <name>z</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>z</name></expr> </then><else>: <expr><name>z</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name>    <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get a specific bit
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_get_bit</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>biL</name> <operator>&lt;=</operator> <name>pos</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>pos</name> <operator>/</operator> <name>biL</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator> <name>pos</name> <operator>%</operator> <name>biL</name> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set a bit to a specific value of 0 or 1
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_set_bit</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>val</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><name>pos</name> <operator>/</operator> <name>biL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name>pos</name> <operator>%</operator> <name>biL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>val</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>val</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>biL</name> <operator>&lt;=</operator> <name>pos</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>off</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <name>idx</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>off</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <name>val</name> <operator>&lt;&lt;</operator> <name>idx</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the number of less significant zero-bits
 */</comment>
<function><type><name>size_t</name></type> <name>mbedtls_mpi_lsb</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>biL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>count</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Count leading zero bits in a given integer
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>mbedtls_clz</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>mask</name> <init>= <expr><operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>biL</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>biL</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>x</name> <operator>&amp;</operator> <name>mask</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the number of bits
 */</comment>
<function><type><name>size_t</name></type> <name>mbedtls_mpi_bitlen</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><name>j</name> <operator>=</operator> <name>biL</name> <operator>-</operator> <call><name>mbedtls_clz</name><argument_list>( <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator> <name>i</name> <operator>*</operator> <name>biL</name> <operator>)</operator> <operator>+</operator> <name>j</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the total size in bytes
 */</comment>
<function><type><name>size_t</name></type> <name>mbedtls_mpi_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <operator>(</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert an ASCII character to digit value
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_get_digit</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x30</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x39</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">0x30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x41</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x46</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">0x37</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0x61</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0x66</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">0x57</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>d</name> <operator>&gt;=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <name>radix</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_INVALID_CHARACTER</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Import from an ASCII string
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_read_string</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>T</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>radix</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>radix</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>radix</name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>slen</name> <operator>&gt;</operator> <name>MPI_SIZE_T_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>BITS_TO_LIMBS</name><argument_list>( <argument><expr><name>slen</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>slen</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_get_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>/</operator> <operator>(</operator> <literal type="number">2</literal> <operator>*</operator> <name>ciL</name> <operator>)</operator></expr>]</index></name> <operator>|=</operator> <name>d</name> <operator>&lt;&lt;</operator> <operator>(</operator> <operator>(</operator> <name>j</name> <operator>%</operator> <operator>(</operator> <literal type="number">2</literal> <operator>*</operator> <name>ciL</name> <operator>)</operator> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_get_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>radix</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper to write the digits high-order first
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_write_hlp</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>radix</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>radix</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>radix</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_div_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>radix</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_write_hlp</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>r</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator> <name>r</name> <operator>+</operator> <literal type="number">0x30</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator> <name>r</name> <operator>+</operator> <literal type="number">0x37</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Export into an ASCII string
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_write_string</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>,
                              <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>T</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>radix</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>radix</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>radix</name> <operator>&gt;=</operator>  <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>radix</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>&lt;</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>radix</name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name>ciL</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control>
            <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator> <operator>(</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

                <if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal> <index>[<expr><name>c</name> <operator>/</operator> <literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal> <index>[<expr><name>c</name> <operator>%</operator> <literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>T</name><operator>.</operator><name>s</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>T</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_write_hlp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Read X from an opened file
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_read_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fin</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <comment type="block">/*
     * Buffer should have space for (short) label and decimal formatted MPI,
     * newline characters and '\0'
     */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[ <expr><name>MBEDTLS_MPI_RW_BUFFER_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>fgets</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fin</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>slen</name> <operator>==</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>s</name><index>[<expr><name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>slen</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>s</name><index>[<expr><name>slen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition> <block>{<block_content> <expr_stmt><expr><name>slen</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>slen</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>--</operator><name>p</name> <operator>&gt;=</operator> <name>s</name></expr> )</condition><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mpi_get_digit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write X into an opened file (or stdout if fout == NULL)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_write_file</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>plen</name></decl>;</decl_stmt>
    <comment type="block">/*
     * Buffer should have space for (short) label and decimal formatted MPI,
     * newline characters and '\0'
     */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[ <expr><name>MBEDTLS_MPI_RW_BUFFER_SIZE</name></expr> ]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_write_string</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>slen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>fout</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>fout</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>plen</name> <operator>||</operator>
            <call><name>fwrite</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>fout</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>slen</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_FS_IO */</comment>

<comment type="block">/*
 * Import X from unsigned binary data, big endian
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_read_binary</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>buflen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>CHARS_TO_LIMBS</name><argument_list>( <argument><expr><name>buflen</name> <operator>-</operator> <name>n</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>buflen</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>/</operator> <name>ciL</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>%</operator> <name>ciL</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Export X into unsigned binary data, big endian
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_write_binary</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>mbedtls_mpi_size</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>buflen</name> <operator>&lt;</operator> <name>n</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buflen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>/</operator> <name>ciL</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>%</operator> <name>ciL</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Left-shift: X &lt;&lt;= count
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_shift_l</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>r0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>count</name> <operator>/</operator> <operator>(</operator><name>biL</name>    <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>count</name> <operator>&amp;</operator> <operator>(</operator><name>biL</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call> <operator>+</operator> <name>count</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>biL</name> <operator>&lt;</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>BITS_TO_LIMBS</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * shift by count / limb_size
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>v0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>v0</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>v0</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * shift by count % limb_size
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>t1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>v0</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>biL</name> <operator>-</operator> <name>t1</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>t1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name>r0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>r0</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Right-shift: X &gt;&gt;= count
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_shift_r</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>r0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>v0</name> <operator>=</operator> <name>count</name> <operator>/</operator>  <name>biL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v1</name> <operator>=</operator> <name>count</name> <operator>&amp;</operator> <operator>(</operator><name>biL</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>v0</name> <operator>&gt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>||</operator> <operator>(</operator> <name>v0</name> <operator>==</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>&amp;&amp;</operator> <name>v1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * shift by count / limb_size
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>v0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>v0</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <name>v0</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * shift by count % limb_size
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>v1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>biL</name> <operator>-</operator> <name>v1</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>v1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>r0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>r0</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare unsigned values
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_cmp_abs</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>Y</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <name>j</name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator>  <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator>  <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare signed values
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_cmp_mpi</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Y</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>Y</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;</operator> <name>j</name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator>  <name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <operator>-</operator><name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator>  <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>Y</name><operator>-&gt;</operator><name>s</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator>  <name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <operator>-</operator><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare signed values
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_cmp_int</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_sint</name></type> <name>z</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>Y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name>  <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>z</name></expr> </then><else>: <expr><name>z</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Y</name><operator>.</operator><name>s</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>z</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Y</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Y</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_add_abs</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>o</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>B</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><name>A</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>A</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>!=</operator> <name>A</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * X should always be positive as a result of unsigned additions.
     */</comment>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>B</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * tmp is used because it might happen that p == o
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>o</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>tmp</name><operator>=</operator> <operator>*</operator><name>o</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator>  <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name>  <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator>  <name>c</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>tmp</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <while>while<condition>( <expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <name>c</name> <operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper for mbedtls_mpi subtraction
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mpi_sub_hlp</name><parameter_list>( <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>d</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><name>d</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>d</name> <operator>&lt;</operator>  <name>c</name> <operator>)</operator></expr>;</expr_stmt>     <expr_stmt><expr><operator>*</operator><name>d</name> <operator>-=</operator>  <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>d</name> <operator>&lt;</operator> <operator>*</operator><name>s</name> <operator>)</operator> <operator>+</operator> <name>z</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>d</name> <operator>-=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <while>while<condition>( <expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>d</name> <operator>&lt;</operator> <name>c</name> <operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>d</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_sub_abs</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>TB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_abs</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_NEGATIVE_VALUE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>B</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>B</name> <operator>=</operator> <operator>&amp;</operator><name>TB</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>!=</operator> <name>A</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * X should always be positive as a result of unsigned subtractions.
     */</comment>
    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>n</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>B</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>mpi_sub_hlp</name><argument_list>( <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Signed addition: X = A + B
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_add_mpi</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>A</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <name><name>B</name><operator>-&gt;</operator><name>s</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_abs</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator>  <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_abs</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Signed subtraction: X = A - B
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_sub_mpi</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>A</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <name><name>B</name><operator>-&gt;</operator><name>s</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_abs</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator>  <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_abs</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Signed addition: X = A + b
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_add_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_sint</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>_B</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>b</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>s</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_B</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Signed subtraction: X = A - b
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_sub_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_sint</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>_B</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>b</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>s</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_B</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper for mbedtls_mpi multiplication
 */</comment>
<expr_stmt><expr><specifier>static</specifier>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Apple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)
 * appears to need this to prevent bad ARM code generation at -O3.
 */</comment>
<macro><name>__attribute__</name> <argument_list>(<argument>(noinline)</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>void</name> <macro><name>mpi_mul_hlp</name><argument_list>( <argument>size_t i</argument>, <argument>mbedtls_mpi_uint *s</argument>, <argument>mbedtls_mpi_uint *d</argument>, <argument>mbedtls_mpi_uint b</argument> )</argument_list></macro>
<block>{
    <expr><name>mbedtls_mpi_uint</name> <name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MULADDC_HUIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>MULADDC_INIT</name>
        <name>MULADDC_HUIT</name>
        <name>MULADDC_STOP</name></expr></expr_stmt></block_content></block></for>
    }</block></expr></expr_stmt>

    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>MULADDC_INIT</name>
        <name>MULADDC_CORE</name>
        <name>MULADDC_STOP</name></expr></expr_stmt>
    </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MULADDC_HUIT */</comment>
    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">16</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>MULADDC_INIT</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>

        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_STOP</name></expr></expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>MULADDC_INIT</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>

        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_CORE</name>   <name>MULADDC_CORE</name>
        <name>MULADDC_STOP</name></expr></expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>MULADDC_INIT</name>
        <name>MULADDC_CORE</name>
        <name>MULADDC_STOP</name></expr></expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MULADDC_HUIT */</comment>

    <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>d</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>d</name> <operator>&lt;</operator> <name>c</name> <operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    while<condition>( <expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>;</do>
}

<comment type="block">/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */</comment>
int <macro><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument>mbedtls_mpi *X</argument>, <argument>const mbedtls_mpi *A</argument>, <argument>const mbedtls_mpi *B</argument> )</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>TA</name></decl>, <decl><type ref="prev"/><name>TB</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>A</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>A</name> <operator>=</operator> <operator>&amp;</operator><name>TA</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>X</name> <operator>==</operator> <name>B</name></expr> )</condition> <block>{<block_content> <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>B</name> <operator>=</operator> <operator>&amp;</operator><name>TB</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>A</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>B</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name><operator>++</operator></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mpi_mul_hlp</name><argument_list>( <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <name><name>B</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block>

<comment type="block">/*
 * Baseline multiplication: X = A * b
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_mul_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>_B</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_B</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */</comment>
<function><type><specifier>static</specifier> <name>mbedtls_mpi_uint</name></type> <name>mbedtls_int_div_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>u1</name></decl></parameter>,
            <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>u0</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>r</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_UDBL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_t_udbl</name></type> <name>dividend</name></decl>, <decl><type ref="prev"/><name>quotient</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name>radix</name> <init>= <expr><operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>biH</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_mpi_uint</name></type> <name>uint_halfword_mask</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>biH</name> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>rAX</name></decl>, <decl><type ref="prev"/><name>r0</name></decl>, <decl><type ref="prev"/><name>quotient</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>u0_msw</name></decl>, <decl><type ref="prev"/><name>u0_lsw</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Check for overflow
     */</comment>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <name>d</name> <operator>||</operator> <name>u1</name> <operator>&gt;=</operator> <name>d</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><operator>(</operator> <operator>~</operator><literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_UDBL</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>dividend</name>  <operator>=</operator> <operator>(</operator><name>mbedtls_t_udbl</name><operator>)</operator> <name>u1</name> <operator>&lt;&lt;</operator> <name>biL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dividend</name> <operator>|=</operator> <operator>(</operator><name>mbedtls_t_udbl</name><operator>)</operator> <name>u0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>quotient</name> <operator>=</operator> <name>dividend</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>quotient</name> <operator>&gt;</operator> <operator>(</operator> <operator>(</operator><name>mbedtls_t_udbl</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>biL</name> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>quotient</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>mbedtls_t_udbl</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>biL</name> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator><operator>(</operator> <name>dividend</name> <operator>-</operator> <operator>(</operator><name>quotient</name> <operator>*</operator> <name>d</name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>mbedtls_mpi_uint</name><operator>)</operator> <name>quotient</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <comment type="block">/*
     * Algorithm D, Section 4.3.1 - The Art of Computer Programming
     *   Vol. 2 - Seminumerical Algorithms, Knuth
     */</comment>

    <comment type="block">/*
     * Normalize the divisor, d, and dividend, u0, u1
     */</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mbedtls_clz</name><argument_list>( <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>u1</name> <operator>=</operator> <name>u1</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u1</name> <operator>|=</operator> <operator>(</operator> <name>u0</name> <operator>&gt;&gt;</operator> <operator>(</operator> <name>biL</name> <operator>-</operator> <name>s</name> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <operator>(</operator> <operator>-</operator><operator>(</operator><name>mbedtls_mpi_sint</name><operator>)</operator><name>s</name> <operator>&gt;&gt;</operator> <operator>(</operator> <name>biL</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>u0</name> <operator>=</operator>  <name>u0</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>biH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <name>uint_halfword_mask</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>u0_msw</name> <operator>=</operator> <name>u0</name> <operator>&gt;&gt;</operator> <name>biH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>u0_lsw</name> <operator>=</operator> <name>u0</name> <operator>&amp;</operator> <name>uint_halfword_mask</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Find the first quotient and remainder
     */</comment>
    <expr_stmt><expr><name>q1</name> <operator>=</operator> <name>u1</name> <operator>/</operator> <name>d1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r0</name> <operator>=</operator> <name>u1</name> <operator>-</operator> <name>d1</name> <operator>*</operator> <name>q1</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>q1</name> <operator>&gt;=</operator> <name>radix</name> <operator>||</operator> <operator>(</operator> <name>q1</name> <operator>*</operator> <name>d0</name> <operator>&gt;</operator> <name>radix</name> <operator>*</operator> <name>r0</name> <operator>+</operator> <name>u0_msw</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>q1</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>r0</name> <operator>+=</operator> <name>d1</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>( <expr><name>r0</name> <operator>&gt;=</operator> <name>radix</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>rAX</name> <operator>=</operator> <operator>(</operator> <name>u1</name> <operator>*</operator> <name>radix</name> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>u0_msw</name> <operator>-</operator> <name>q1</name> <operator>*</operator> <name>d</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>q0</name> <operator>=</operator> <name>rAX</name> <operator>/</operator> <name>d1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r0</name> <operator>=</operator> <name>rAX</name> <operator>-</operator> <name>q0</name> <operator>*</operator> <name>d1</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>q0</name> <operator>&gt;=</operator> <name>radix</name> <operator>||</operator> <operator>(</operator> <name>q0</name> <operator>*</operator> <name>d0</name> <operator>&gt;</operator> <name>radix</name> <operator>*</operator> <name>r0</name> <operator>+</operator> <name>u0_lsw</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>q0</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>r0</name> <operator>+=</operator> <name>d1</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>( <expr><name>r0</name> <operator>&gt;=</operator> <name>radix</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator> <name>rAX</name> <operator>*</operator> <name>radix</name> <operator>+</operator> <name>u0_lsw</name> <operator>-</operator> <name>q0</name> <operator>*</operator> <name>d</name> <operator>)</operator> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>quotient</name> <operator>=</operator> <name>q1</name> <operator>*</operator> <name>radix</name> <operator>+</operator> <name>q0</name></expr>;</expr_stmt>

    <return>return <expr><name>quotient</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_div_mpi</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>Z</name></decl>, <decl><type ref="prev"/><name>T1</name></decl>, <decl><type ref="prev"/><name>T2</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_abs</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>Q</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><name>Q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>R</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name><name>Y</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Z</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Z</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call> <operator>%</operator> <name>biL</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>k</name> <operator>&lt;</operator> <name>biL</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <name>biL</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>X</name><operator>.</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>Y</name><operator>.</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>biL</name> <operator>*</operator> <operator>(</operator> <name>n</name> <operator>-</operator> <name>t</name> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>n</name> <operator>-</operator> <name>t</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>biL</name> <operator>*</operator> <operator>(</operator> <name>n</name> <operator>-</operator> <name>t</name> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>t</name></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>X</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>Y</name><operator>.</operator><name>p</name><index>[<expr><name>t</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mbedtls_int_div_int</name><argument_list>( <argument><expr><name><name>X</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
                                                            <argument><expr><name><name>Y</name><operator>.</operator><name>p</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>T1</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>t</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>Y</name><operator>.</operator><name>p</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>T1</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><operator>.</operator><name>p</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>T2</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>X</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>T2</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>X</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>T2</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>X</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block>
        while<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T2</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>;</do>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>,  <argument><expr><name>biL</name> <operator>*</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument>, <argument><expr><name>biL</name> <operator>*</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Z</name><operator>.</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>Q</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>Q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Q</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>s</name></name> <operator>*</operator> <name><name>B</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>R</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>X</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Division by int: A = Q * b + R
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_div_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_sint</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>_B</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>b</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>s</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>_B</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_mpi_div_mpi</name><argument_list>( <argument><expr><name>Q</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>_B</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Modulo: R = A mod B
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_mod_mpi</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_NEGATIVE_VALUE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_div_mpi</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <while>while<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<label><name>cleanup</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Modulo: r = A mod b
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_mod_int</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_sint</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_DIVISION_BY_ZERO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_NEGATIVE_VALUE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * handle trivial cases
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>b</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * general case
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>n</name></name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>x</name>  <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name>  <operator>=</operator> <operator>(</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>biH</name> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>biH</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name>  <operator>=</operator> <name>y</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>-=</operator> <name>z</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <name>biH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name>  <operator>=</operator> <operator>(</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>biH</name> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>biH</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name>  <operator>=</operator> <name>y</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>-=</operator> <name>z</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * If A is negative, then the current y represents a negative value.
     * Flipping it to the positive side.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>A</name><operator>-&gt;</operator><name>s</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mpi_montg_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi_uint</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>m0</name> <init>= <expr><name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name>  <operator>=</operator> <name>m0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator> <operator>(</operator> <name>m0</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>biL</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>x</name> <operator>*=</operator> <operator>(</operator> <literal type="number">2</literal> <operator>-</operator> <operator>(</operator> <name>m0</name> <operator>*</operator> <name>x</name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <operator>~</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_montmul</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>mm</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>T</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>u0</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>T</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>T</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>B</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <name>n</name> <operator>)</operator></expr> ?</condition><then> <expr><name><name>B</name><operator>-&gt;</operator><name>n</name></name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <comment type="block">/*
         * T = (T + u0*B + u1*N) / 2^biL
         */</comment>
        <expr_stmt><expr><name>u0</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u1</name> <operator>=</operator> <operator>(</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>u0</name> <operator>*</operator> <name><name>B</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>*</operator> <name>mm</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mpi_mul_hlp</name><argument_list>( <argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>u0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mpi_mul_hlp</name><argument_list>( <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>u1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <name>u0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>d</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name>ciL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_abs</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mpi_sub_hlp</name><argument_list>( <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <comment type="block">/* prevent timing attacks */</comment>
        <expr_stmt><expr><call><name>mpi_sub_hlp</name><argument_list>( <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Montgomery reduction: A = A * R^-1 mod N
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_montred</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi_uint</name></type> <name>mm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>T</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>z</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>U</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>U</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>U</name><operator>.</operator><name>s</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>U</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>&amp;</operator><name>z</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mpi_montmul</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>T</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_exp_mod</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>E</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>_RR</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>wbits</name></decl>, <decl><type ref="prev"/><name>wsize</name></decl>, <decl><type ref="prev"/><name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nblimbs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>ei</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>RR</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[ <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>MBEDTLS_MPI_WINDOW_SIZE</name></expr> ]</index></name></decl>, <decl><type ref="prev"/><name>Apos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator> <name><name>N</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Init temps and window size
     */</comment>
    <expr_stmt><expr><call><name>mpi_montg_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Apos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>W</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>W</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><name>E</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>wsize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">671</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">239</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>:
            <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;</operator>  <literal type="number">79</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;</operator>  <literal type="number">23</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>wsize</name> <operator>&gt;</operator> <name>MBEDTLS_MPI_WINDOW_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>wsize</name> <operator>=</operator> <name>MBEDTLS_MPI_WINDOW_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,  <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Compensate for negative A (and correct at the end)
     */</comment>
    <expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>(</operator> <name><name>A</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>neg</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Apos</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Apos</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <operator>&amp;</operator><name>Apos</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * If 1st call, pre-compute R^2 mod N
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>_RR</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>_RR</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>biL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>_RR</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>_RR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><name>_RR</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><name>A</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * X = R^2 * R^-1 mod N = R mod N
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montred</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>wsize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * W[1 &lt;&lt; (wsize - 1)] = W[1] ^ (wsize - 1)
         */</comment>
        <expr_stmt><expr><name>j</name> <operator>=</operator>  <name>one</name> <operator>&lt;&lt;</operator> <operator>(</operator> <name>wsize</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>    )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wsize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="block">/*
         * W[i] = W[i - 1] * W[1]
         */</comment>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator> <name>one</name> <operator>&lt;&lt;</operator> <name>wsize</name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_grow</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>N</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nblimbs</name> <operator>=</operator> <name><name>E</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbits</name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>wbits</name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>state</name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>nblimbs</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>nblimbs</name><operator>--</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_mpi_uint</name></expr></argument> )</argument_list></sizeof> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>bufsize</name><operator>--</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>ei</name> <operator>=</operator> <operator>(</operator><name><name>E</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>nblimbs</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>bufsize</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="block">/*
         * skip leading 0s
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>ei</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>ei</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>state</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * out of window, square X
             */</comment>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * add ei to current window
         */</comment>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>nbits</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>wbits</name> <operator>|=</operator> <operator>(</operator> <name>ei</name> <operator>&lt;&lt;</operator> <operator>(</operator> <name>wsize</name> <operator>-</operator> <name>nbits</name> <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>nbits</name> <operator>==</operator> <name>wsize</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * X = X^wsize R^-1 mod N
             */</comment>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wsize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <comment type="block">/*
             * X = X * W[wbits] R^-1 mod N
             */</comment>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>wbits</name></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>state</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>nbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>wbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*
     * process the remaining bits
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>wbits</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>wbits</name> <operator>&amp;</operator> <operator>(</operator> <name>one</name> <operator>&lt;&lt;</operator> <name>wsize</name> <operator>)</operator> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montmul</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mpi_montred</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>neg</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <operator>(</operator> <name>one</name> <operator>&lt;&lt;</operator> <operator>(</operator> <name>wsize</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator> <name>one</name> <operator>&lt;&lt;</operator> <name>wsize</name> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>W</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Apos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>_RR</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>_RR</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_gcd</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>B</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>lz</name></decl>, <decl><type ref="prev"/><name>lzt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>TG</name></decl>, <decl><type ref="prev"/><name>TA</name></decl>, <decl><type ref="prev"/><name>TB</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lz</name> <operator>=</operator> <call><name>mbedtls_mpi_lsb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lzt</name> <operator>=</operator> <call><name>mbedtls_mpi_lsb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>lzt</name> <operator>&lt;</operator> <name>lz</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>lz</name> <operator>=</operator> <name>lzt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><name>lz</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><name>lz</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>TA</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name><name>TB</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <while>while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><call><name>mbedtls_mpi_lsb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><call><name>mbedtls_mpi_lsb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_abs</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_l</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><name>lz</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Fill X with size bytes of random.
 *
 * Use a temporary bytes representation to make sure the result is the same
 * regardless of the platform endianness (useful when f_rng is actually
 * deterministic, eg for tests).
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_fill_random</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                     <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                     <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MBEDTLS_MPI_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>size</name> <operator>&gt;</operator> <name>MBEDTLS_MPI_MAX_SIZE</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>f_rng</name><argument_list>( <argument><expr><name>p_rng</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_inv_mod</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>G</name></decl>, <decl><type ref="prev"/><name>TA</name></decl>, <decl><type ref="prev"/><name>TU</name></decl>, <decl><type ref="prev"/><name>U1</name></decl>, <decl><type ref="prev"/><name>U2</name></decl>, <decl><type ref="prev"/><name>TB</name></decl>, <decl><type ref="prev"/><name>TV</name></decl>, <decl><type ref="prev"/><name>V1</name></decl>, <decl><type ref="prev"/><name>V2</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_gcd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <do>do
    <block>{<block_content>
        <while>while<condition>( <expr><operator>(</operator> <name><name>TU</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>U1</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator> <name><name>U2</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <while>while<condition>( <expr><operator>(</operator> <name><name>TV</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>V1</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator> <name><name>V2</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>;</do>

    <while>while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <while>while<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TU</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>TV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GENPRIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>small_prime</name><index>[]</index></name> <init>=
<expr><block>{
        <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">19</literal></expr>,   <expr><literal type="number">23</literal></expr>,
       <expr><literal type="number">29</literal></expr>,   <expr><literal type="number">31</literal></expr>,   <expr><literal type="number">37</literal></expr>,   <expr><literal type="number">41</literal></expr>,   <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">47</literal></expr>,   <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">59</literal></expr>,
       <expr><literal type="number">61</literal></expr>,   <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">71</literal></expr>,   <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">79</literal></expr>,   <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">89</literal></expr>,   <expr><literal type="number">97</literal></expr>,
      <expr><literal type="number">101</literal></expr>,  <expr><literal type="number">103</literal></expr>,  <expr><literal type="number">107</literal></expr>,  <expr><literal type="number">109</literal></expr>,  <expr><literal type="number">113</literal></expr>,  <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">131</literal></expr>,  <expr><literal type="number">137</literal></expr>,
      <expr><literal type="number">139</literal></expr>,  <expr><literal type="number">149</literal></expr>,  <expr><literal type="number">151</literal></expr>,  <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">163</literal></expr>,  <expr><literal type="number">167</literal></expr>,  <expr><literal type="number">173</literal></expr>,  <expr><literal type="number">179</literal></expr>,
      <expr><literal type="number">181</literal></expr>,  <expr><literal type="number">191</literal></expr>,  <expr><literal type="number">193</literal></expr>,  <expr><literal type="number">197</literal></expr>,  <expr><literal type="number">199</literal></expr>,  <expr><literal type="number">211</literal></expr>,  <expr><literal type="number">223</literal></expr>,  <expr><literal type="number">227</literal></expr>,
      <expr><literal type="number">229</literal></expr>,  <expr><literal type="number">233</literal></expr>,  <expr><literal type="number">239</literal></expr>,  <expr><literal type="number">241</literal></expr>,  <expr><literal type="number">251</literal></expr>,  <expr><literal type="number">257</literal></expr>,  <expr><literal type="number">263</literal></expr>,  <expr><literal type="number">269</literal></expr>,
      <expr><literal type="number">271</literal></expr>,  <expr><literal type="number">277</literal></expr>,  <expr><literal type="number">281</literal></expr>,  <expr><literal type="number">283</literal></expr>,  <expr><literal type="number">293</literal></expr>,  <expr><literal type="number">307</literal></expr>,  <expr><literal type="number">311</literal></expr>,  <expr><literal type="number">313</literal></expr>,
      <expr><literal type="number">317</literal></expr>,  <expr><literal type="number">331</literal></expr>,  <expr><literal type="number">337</literal></expr>,  <expr><literal type="number">347</literal></expr>,  <expr><literal type="number">349</literal></expr>,  <expr><literal type="number">353</literal></expr>,  <expr><literal type="number">359</literal></expr>,  <expr><literal type="number">367</literal></expr>,
      <expr><literal type="number">373</literal></expr>,  <expr><literal type="number">379</literal></expr>,  <expr><literal type="number">383</literal></expr>,  <expr><literal type="number">389</literal></expr>,  <expr><literal type="number">397</literal></expr>,  <expr><literal type="number">401</literal></expr>,  <expr><literal type="number">409</literal></expr>,  <expr><literal type="number">419</literal></expr>,
      <expr><literal type="number">421</literal></expr>,  <expr><literal type="number">431</literal></expr>,  <expr><literal type="number">433</literal></expr>,  <expr><literal type="number">439</literal></expr>,  <expr><literal type="number">443</literal></expr>,  <expr><literal type="number">449</literal></expr>,  <expr><literal type="number">457</literal></expr>,  <expr><literal type="number">461</literal></expr>,
      <expr><literal type="number">463</literal></expr>,  <expr><literal type="number">467</literal></expr>,  <expr><literal type="number">479</literal></expr>,  <expr><literal type="number">487</literal></expr>,  <expr><literal type="number">491</literal></expr>,  <expr><literal type="number">499</literal></expr>,  <expr><literal type="number">503</literal></expr>,  <expr><literal type="number">509</literal></expr>,
      <expr><literal type="number">521</literal></expr>,  <expr><literal type="number">523</literal></expr>,  <expr><literal type="number">541</literal></expr>,  <expr><literal type="number">547</literal></expr>,  <expr><literal type="number">557</literal></expr>,  <expr><literal type="number">563</literal></expr>,  <expr><literal type="number">569</literal></expr>,  <expr><literal type="number">571</literal></expr>,
      <expr><literal type="number">577</literal></expr>,  <expr><literal type="number">587</literal></expr>,  <expr><literal type="number">593</literal></expr>,  <expr><literal type="number">599</literal></expr>,  <expr><literal type="number">601</literal></expr>,  <expr><literal type="number">607</literal></expr>,  <expr><literal type="number">613</literal></expr>,  <expr><literal type="number">617</literal></expr>,
      <expr><literal type="number">619</literal></expr>,  <expr><literal type="number">631</literal></expr>,  <expr><literal type="number">641</literal></expr>,  <expr><literal type="number">643</literal></expr>,  <expr><literal type="number">647</literal></expr>,  <expr><literal type="number">653</literal></expr>,  <expr><literal type="number">659</literal></expr>,  <expr><literal type="number">661</literal></expr>,
      <expr><literal type="number">673</literal></expr>,  <expr><literal type="number">677</literal></expr>,  <expr><literal type="number">683</literal></expr>,  <expr><literal type="number">691</literal></expr>,  <expr><literal type="number">701</literal></expr>,  <expr><literal type="number">709</literal></expr>,  <expr><literal type="number">719</literal></expr>,  <expr><literal type="number">727</literal></expr>,
      <expr><literal type="number">733</literal></expr>,  <expr><literal type="number">739</literal></expr>,  <expr><literal type="number">743</literal></expr>,  <expr><literal type="number">751</literal></expr>,  <expr><literal type="number">757</literal></expr>,  <expr><literal type="number">761</literal></expr>,  <expr><literal type="number">769</literal></expr>,  <expr><literal type="number">773</literal></expr>,
      <expr><literal type="number">787</literal></expr>,  <expr><literal type="number">797</literal></expr>,  <expr><literal type="number">809</literal></expr>,  <expr><literal type="number">811</literal></expr>,  <expr><literal type="number">821</literal></expr>,  <expr><literal type="number">823</literal></expr>,  <expr><literal type="number">827</literal></expr>,  <expr><literal type="number">829</literal></expr>,
      <expr><literal type="number">839</literal></expr>,  <expr><literal type="number">853</literal></expr>,  <expr><literal type="number">857</literal></expr>,  <expr><literal type="number">859</literal></expr>,  <expr><literal type="number">863</literal></expr>,  <expr><literal type="number">877</literal></expr>,  <expr><literal type="number">881</literal></expr>,  <expr><literal type="number">883</literal></expr>,
      <expr><literal type="number">887</literal></expr>,  <expr><literal type="number">907</literal></expr>,  <expr><literal type="number">911</literal></expr>,  <expr><literal type="number">919</literal></expr>,  <expr><literal type="number">929</literal></expr>,  <expr><literal type="number">937</literal></expr>,  <expr><literal type="number">941</literal></expr>,  <expr><literal type="number">947</literal></expr>,
      <expr><literal type="number">953</literal></expr>,  <expr><literal type="number">967</literal></expr>,  <expr><literal type="number">971</literal></expr>,  <expr><literal type="number">977</literal></expr>,  <expr><literal type="number">983</literal></expr>,  <expr><literal type="number">991</literal></expr>,  <expr><literal type="number">997</literal></expr>, <expr><operator>-</operator><literal type="number">103</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Small divisors test (X must be positive)
 *
 * Return values:
 * 0: no small factor (possible prime, more tests needed)
 * 1: certain prime
 * MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: certain non-prime
 * other negative: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_check_small_factors</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>small_prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>small_prime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>small_prime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Miller-Rabin pseudo-primality test  (HAC 4.24)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mpi_miller_rabin</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                             <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                             <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>W</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>RR</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * W = |X| - 1
     * R = W &gt;&gt; lsb( W )
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mbedtls_mpi_lsb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * HAC, table 4.4
     */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">1300</literal> <operator>)</operator></expr> ?</condition><then>  <expr><literal type="number">2</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;=</operator>  <literal type="number">850</literal> <operator>)</operator></expr> ?</condition><then>  <expr><literal type="number">3</literal></expr> </then><else>:
          <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;=</operator>  <literal type="number">650</literal> <operator>)</operator></expr> ?</condition><then>  <expr><literal type="number">4</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;=</operator>  <literal type="number">350</literal> <operator>)</operator></expr> ?</condition><then>  <expr><literal type="number">8</literal></expr> </then><else>:
          <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;=</operator>  <literal type="number">250</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator> <name>i</name> <operator>&gt;=</operator>  <literal type="number">150</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">18</literal></expr> </then><else>: <expr><literal type="number">27</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <comment type="block">/*
         * pick a random A, 1 &lt; A &lt; |X| - 1
         */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_fill_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>ciL</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>A</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_fill_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name><name>X</name><operator>-&gt;</operator><name>n</name></name> <operator>*</operator> <name>ciL</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>k</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>k</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>count</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
                  <call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call>  <operator>&lt;=</operator> <literal type="number">0</literal></expr>    )</condition>;</do>

        <comment type="block">/*
         * A = A^R mod |X|
         */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_exp_mod</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>j</name> <operator>&lt;</operator> <name>s</name> <operator>&amp;&amp;</operator> <call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * A = A * A mod |X|
             */</comment>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>X</name></expr></argument>  )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/*
         * not prime if A != |X| - 1 or A == 1
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>W</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>T</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>RR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Pseudo-primality test: small factors, then Miller-Rabin
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_is_prime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>XX</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>XX</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>XX</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>XX</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>X</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>XX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>XX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>XX</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mpi_check_small_factors</name><argument_list>( <argument><expr><operator>&amp;</operator><name>XX</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <call><name>mpi_miller_rabin</name><argument_list>( <argument><expr><operator>&amp;</operator><name>XX</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prime number generation
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_gen_prime</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dh_flag</name></decl></parameter>,
                   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi_uint</name></type> <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>Y</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>nbits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">3</literal> <operator>||</operator> <name>nbits</name></expr></argument> &gt;</argument_list></name> <name>MBEDTLS_MPI_MAX_BITS</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MPI_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>BITS_TO_LIMBS</name><argument_list>( <argument><expr><name>nbits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_fill_random</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>ciL</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>mbedtls_mpi_bitlen</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>k</name> <operator>&gt;</operator> <name>nbits</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <name>nbits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_set_bit</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>nbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>dh_flag</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_is_prime</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name></expr> )</condition><block type="pseudo"><block_content>
                <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * An necessary condition for Y and X = 2Y + 1 to be prime
         * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).
         * Make sure it is satisfied, while keeping X = 3 mod 4
         */</comment>

        <expr_stmt><expr><name><name>X</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_int</name><argument_list>( <argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Set Y = (X-1) / 2, which is X / 2 because X is odd */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * First, check small factors for X and Y
             * before doing Miller-Rabin on any of them
             */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mpi_check_small_factors</name><argument_list>(  <argument><expr><name>X</name></expr></argument>         )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mpi_check_small_factors</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>         )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mpi_miller_rabin</name><argument_list>(  <argument><expr><name>X</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument>  )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mpi_miller_rabin</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument>  )</argument_list></call> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_MPI_NOT_ACCEPTABLE</name></expr> )</condition><block type="pseudo"><block_content>
                <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Next candidates. We want to preserve Y = (X-1) / 2 and
             * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)
             * so up Y by 6 and X by 12.
             */</comment>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_int</name><argument_list>(  <argument><expr><name>X</name></expr></argument>,  <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>  )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

<label><name>cleanup</name>:</label>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GENPRIME */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCD_PAIR_COUNT</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>gcd_pairs</name><index>[<expr><name>GCD_PAIR_COUNT</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">693</literal></expr>, <expr><literal type="number">609</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">1764</literal></expr>, <expr><literal type="number">868</literal></expr>, <expr><literal type="number">28</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">768454923</literal></expr>, <expr><literal type="number">542167814</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_mpi_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>N</name></decl>, <decl><type ref="prev"/><name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>U</name></decl>, <decl><type ref="prev"/><name>V</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>E</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>N</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"EFE021C2645FD1DC586E69184AF4A31E"</literal> \
        <literal type="string">"D5F53E93B5F123FA41680867BA110131"</literal> \
        <literal type="string">"944FE7952E2517337780CB0DB80E61AA"</literal> \
        <literal type="string">"E7C8DDC6C5C6AADEB34EB38A2F40D5E6"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"B2E7EFD37075B9F03FF989C7C5051C20"</literal> \
        <literal type="string">"34D2A323810251127E7BF8625A4F49A5"</literal> \
        <literal type="string">"F3E27F4DA8BD59C47D6DAABA4C8127BD"</literal> \
        <literal type="string">"5B5C25763222FEFCCFC38B832366C29E"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"0066A198186C18C10B2F5ED9B522752A"</literal> \
        <literal type="string">"9830B69916E535C8F047518A889A43A5"</literal> \
        <literal type="string">"94B6BED27A168D31D4A52F88925AA8F5"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"602AB7ECA597A3D6B56FF9829A5E8B85"</literal> \
        <literal type="string">"9E857EA95A03512E2BAE7391688D264A"</literal> \
        <literal type="string">"A5663B0341DB9CCFD2C4C5F421FEC814"</literal> \
        <literal type="string">"8001B72E848A38CAE1C65F78E56ABDEF"</literal> \
        <literal type="string">"E12D3C039B8A02D6BE593F0BBBDA56F1"</literal> \
        <literal type="string">"ECF677152EF804370C1A305CAF3B5BF1"</literal> \
        <literal type="string">"30879B56C61DE584A0F53A2447A51E"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MPI test #1 (mul_mpi): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_div_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"256567336059E52CAE22925474705F39A94"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"6613F26162223DF488E9CD48CC132C7A"</literal> \
        <literal type="string">"0AC93C701B001B092E4E5B9F73BCD27B"</literal> \
        <literal type="string">"9EE50D0657C77F374E903CDFA4C642"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MPI test #2 (div_mpi): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_exp_mod</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"36E139AEA55215609D2816998ED020BB"</literal> \
        <literal type="string">"BD96C37890F65171D948E9BC7CBAA4D9"</literal> \
        <literal type="string">"325D24D6A3C12710F10A09FA08AB87"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MPI test #3 (exp_mod): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_inv_mod</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_string</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,
        <argument><expr><literal type="string">"003A0AAEDD7E784FC07D8F9EC6E3BFD5"</literal> \
        <literal type="string">"C3DBA76456363A10869622EAC2DD84EC"</literal> \
        <literal type="string">"C5B8A74DAC4D09E03B5E0BE779F2DF61"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MPI test #4 (inv_mod): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MPI test #5 (simple gcd): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GCD_PAIR_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name><name>gcd_pairs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name><name>gcd_pairs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_gcd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name><name>gcd_pairs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed at %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"Unexpected error, return code = %08X\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>E</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>N</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>X</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>U</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BIGNUM_C */</comment>
</unit>
