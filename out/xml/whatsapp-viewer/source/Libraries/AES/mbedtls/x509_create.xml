<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/x509_create.c"><comment type="block">/*
 *  X.509 base functions for creating certificates / CSRs
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_X509_CREATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x509.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>name_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>
}</block></struct></type> <name>x509_attr_descriptor_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_STRLEN</name><parameter_list>( <parameter><type><name>s</name></type></parameter> )</parameter_list></cpp:macro>     <cpp:value>s, sizeof( s ) - 1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>x509_attr_descriptor_t</name></type> <name><name>x509_attrs</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"CN"</literal></expr></argument> )</argument_list></call></expr>,                       <expr><name>MBEDTLS_OID_AT_CN</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"commonName"</literal></expr></argument> )</argument_list></call></expr>,               <expr><name>MBEDTLS_OID_AT_CN</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"C"</literal></expr></argument> )</argument_list></call></expr>,                        <expr><name>MBEDTLS_OID_AT_COUNTRY</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"countryName"</literal></expr></argument> )</argument_list></call></expr>,              <expr><name>MBEDTLS_OID_AT_COUNTRY</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"O"</literal></expr></argument> )</argument_list></call></expr>,                        <expr><name>MBEDTLS_OID_AT_ORGANIZATION</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"organizationName"</literal></expr></argument> )</argument_list></call></expr>,         <expr><name>MBEDTLS_OID_AT_ORGANIZATION</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"L"</literal></expr></argument> )</argument_list></call></expr>,                        <expr><name>MBEDTLS_OID_AT_LOCALITY</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"locality"</literal></expr></argument> )</argument_list></call></expr>,                 <expr><name>MBEDTLS_OID_AT_LOCALITY</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"R"</literal></expr></argument> )</argument_list></call></expr>,                        <expr><name>MBEDTLS_OID_PKCS9_EMAIL</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"OU"</literal></expr></argument> )</argument_list></call></expr>,                       <expr><name>MBEDTLS_OID_AT_ORG_UNIT</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"organizationalUnitName"</literal></expr></argument> )</argument_list></call></expr>,   <expr><name>MBEDTLS_OID_AT_ORG_UNIT</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"ST"</literal></expr></argument> )</argument_list></call></expr>,                       <expr><name>MBEDTLS_OID_AT_STATE</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"stateOrProvinceName"</literal></expr></argument> )</argument_list></call></expr>,      <expr><name>MBEDTLS_OID_AT_STATE</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"emailAddress"</literal></expr></argument> )</argument_list></call></expr>,             <expr><name>MBEDTLS_OID_PKCS9_EMAIL</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"serialNumber"</literal></expr></argument> )</argument_list></call></expr>,             <expr><name>MBEDTLS_OID_AT_SERIAL_NUMBER</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"postalAddress"</literal></expr></argument> )</argument_list></call></expr>,            <expr><name>MBEDTLS_OID_AT_POSTAL_ADDRESS</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"postalCode"</literal></expr></argument> )</argument_list></call></expr>,               <expr><name>MBEDTLS_OID_AT_POSTAL_CODE</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"dnQualifier"</literal></expr></argument> )</argument_list></call></expr>,              <expr><name>MBEDTLS_OID_AT_DN_QUALIFIER</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>,                    <expr><name>MBEDTLS_OID_AT_TITLE</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"surName"</literal></expr></argument> )</argument_list></call></expr>,                  <expr><name>MBEDTLS_OID_AT_SUR_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"SN"</literal></expr></argument> )</argument_list></call></expr>,                       <expr><name>MBEDTLS_OID_AT_SUR_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"givenName"</literal></expr></argument> )</argument_list></call></expr>,                <expr><name>MBEDTLS_OID_AT_GIVEN_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"GN"</literal></expr></argument> )</argument_list></call></expr>,                       <expr><name>MBEDTLS_OID_AT_GIVEN_NAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"initials"</literal></expr></argument> )</argument_list></call></expr>,                 <expr><name>MBEDTLS_OID_AT_INITIALS</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"pseudonym"</literal></expr></argument> )</argument_list></call></expr>,                <expr><name>MBEDTLS_OID_AT_PSEUDONYM</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"generationQualifier"</literal></expr></argument> )</argument_list></call></expr>,      <expr><name>MBEDTLS_OID_AT_GENERATION_QUALIFIER</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"domainComponent"</literal></expr></argument> )</argument_list></call></expr>,          <expr><name>MBEDTLS_OID_DOMAIN_COMPONENT</name></expr> }</block></expr>,
    <expr><block>{ <expr><call><name>ADD_STRLEN</name><argument_list>( <argument><expr><literal type="string">"DC"</literal></expr></argument> )</argument_list></call></expr>,                       <expr><name>MBEDTLS_OID_DOMAIN_COMPONENT</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x509_at_oid_from_name</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>x509_attr_descriptor_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name>x509_attrs</name></expr>;</init> <condition><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>name_len</name></name> <operator>==</operator> <name>name_len</name> <operator>&amp;&amp;</operator>
            <call><name>strncmp</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name><name>cur</name><operator>-&gt;</operator><name>oid</name></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_string_to_names</name><parameter_list>( <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>name</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>in_tag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>MBEDTLS_X509_MAX_DN_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Clear existing chain if present */</comment>
    <expr_stmt><expr><call><name>mbedtls_asn1_free_named_data_list</name><argument_list>( <argument><expr><name>head</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>c</name> <operator>&lt;=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>in_tag</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'='</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>oid</name> <operator>=</operator> <call><name>x509_at_oid_from_name</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>s</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_X509_UNKNOWN_OID</name></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>in_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>in_tag</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>end</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>

            <comment type="block">/* Check for valid escaped characters */</comment>
            <if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <name>end</name> <operator>||</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">','</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><operator>!</operator><name>in_tag</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>end</name> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>mbedtls_asn1_store_named_data</name><argument_list>( <argument><expr><name>head</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>oid</name></expr></argument> )</argument_list></call></expr></argument>,
                                       <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>,
                                       <argument><expr><name>d</name> <operator>-</operator> <name>data</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <while>while<condition>( <expr><name>c</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt><expr><name>s</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>in_tag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>in_tag</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>d</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>d</name> <operator>-</operator> <name>data</name> <operator>==</operator> <name>MBEDTLS_X509_MAX_DN_NAME_SIZE</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_X509_INVALID_NAME</name></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

<label><name>exit</name>:</label>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The first byte of the value in the mbedtls_asn1_named_data structure is reserved
 * to store the critical boolean for us
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_set_extension</name><parameter_list>( <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier><modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oid_len</name></decl></parameter>,
                        <parameter><decl><type><name>int</name></type> <name>critical</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>val_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>cur</name> <operator>=</operator> <call><name>mbedtls_asn1_store_named_data</name><argument_list>( <argument><expr><name>head</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_len</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>val_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_X509_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>critical</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  RelativeDistinguishedName ::=
 *    SET OF AttributeTypeAndValue
 *
 *  AttributeTypeAndValue ::= SEQUENCE {
 *    type     AttributeType,
 *    value    AttributeValue }
 *
 *  AttributeType ::= OBJECT IDENTIFIER
 *
 *  AttributeValue ::= ANY DEFINED BY AttributeType
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_write_name</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oid_len</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Write PrintableString for all except MBEDTLS_OID_PKCS9_EMAIL</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><call><name>MBEDTLS_OID_SIZE</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS9_EMAIL</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>oid_len</name> <operator>&amp;&amp;</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>MBEDTLS_OID_PKCS9_EMAIL</name></expr></argument>, <argument><expr><name>oid_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_ia5_string</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
                                                  <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></argument>,
                                                  <argument><expr><name>name_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_printable_string</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,
                                                        <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></argument>,
                                                        <argument><expr><name>name_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Write OID</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_oid</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                 <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                 <name>MBEDTLS_ASN1_SET</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_write_names</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                      <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>first</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>x509_write_name</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>cur</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr></argument>,
                                            <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument>,
                                            <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                 <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_x509_write_sig</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>oid_len</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>&lt;</operator> <name>start</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <operator>*</operator><name>p</name> <operator>-</operator> <name>start</name> <operator>)</operator> <operator>&lt;</operator> <name>size</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>-</operator> <name>start</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ASN1_BUF_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><operator>--</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_BIT_STRING</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write OID</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_algorithm_identifier</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>,
                                                        <argument><expr><name>oid_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>x509_write_extension</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                                 <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>ext</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_raw_buffer</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                                              <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OCTET_STRING</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ext</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_bool</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_raw_buffer</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>p</name></name></expr></argument>,
                                              <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>ext</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OID</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator>
                                                 <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extension  ::=  SEQUENCE  {
 *     extnID      OBJECT IDENTIFIER,
 *     critical    BOOLEAN DEFAULT FALSE,
 *     extnValue   OCTET STRING
 *                 -- contains the DER encoding of an ASN.1 value
 *                 -- corresponding to the extension type identified
 *                 -- by extnID
 *     }
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_x509_write_extensions</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>first</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_named_data</name> <modifier>*</modifier></type><name>cur_ext</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>cur_ext</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>x509_write_extension</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>cur_ext</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur_ext</name> <operator>=</operator> <name><name>cur_ext</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_X509_CREATE_C */</comment>
</unit>
