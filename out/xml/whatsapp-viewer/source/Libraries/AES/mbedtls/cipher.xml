<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/cipher.c"><comment type="block" format="doxygen">/**
 * \file cipher.c
 *
 * \brief Generic cipher wrapper for mbed TLS
 *
 * \author Adriaan de Jong &lt;dejong@fox-it.com&gt;
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gcm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ccm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CMAC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmac.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro> <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>   <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_CIPHER_MODE_STREAM</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>supported_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>mbedtls_cipher_list</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_definition_t</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator> <name>supported_init</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>def</name> <operator>=</operator> <name>mbedtls_cipher_definitions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>mbedtls_cipher_supported</name></expr>;</expr_stmt>

        <while>while<condition>( <expr><name><name>def</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>type</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>def</name><operator>++</operator><operator>)</operator><operator>.</operator><name>type</name></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>supported_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>mbedtls_cipher_supported</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>mbedtls_cipher_info_from_type</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_cipher_type_t</name></type> <name>cipher_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_definition_t</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>def</name> <operator>=</operator> <name>mbedtls_cipher_definitions</name></expr>;</init> <condition><expr><name><name>def</name><operator>-&gt;</operator><name>info</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>def</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>def</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>cipher_type</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name><name>def</name><operator>-&gt;</operator><name>info</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>mbedtls_cipher_info_from_string</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cipher_name</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_definition_t</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>cipher_name</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <for>for<control>( <init><expr><name>def</name> <operator>=</operator> <name>mbedtls_cipher_definitions</name></expr>;</init> <condition><expr><name><name>def</name><operator>-&gt;</operator><name>info</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>def</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><operator>!</operator>  <call><name>strcmp</name><argument_list>( <argument><expr><name><name>def</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cipher_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name><name>def</name><operator>-&gt;</operator><name>info</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>mbedtls_cipher_info_from_values</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_cipher_id_t</name></type> <name>cipher_id</name></decl></parameter>,
                                              <parameter><decl><type><name>int</name></type> <name>key_bitlen</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_cipher_mode_t</name></type> <name>mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_definition_t</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>def</name> <operator>=</operator> <name>mbedtls_cipher_definitions</name></expr>;</init> <condition><expr><name><name>def</name><operator>-&gt;</operator><name>info</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>def</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <if_stmt><if>if<condition>( <expr><name><name>def</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cipher</name></name> <operator>==</operator> <name>cipher_id</name> <operator>&amp;&amp;</operator>
            <name><name>def</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>key_bitlen</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>key_bitlen</name> <operator>&amp;&amp;</operator>
            <name><name>def</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>mode</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name><name>def</name><operator>-&gt;</operator><name>info</name></name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_cipher_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_cipher_context_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_cipher_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CMAC_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name></expr> )</condition>
    <block>{<block_content>
       <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_cmac_context_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cmac_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ctx_free_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbedtls_cipher_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_setup</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>cipher_info</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>ctx</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_cipher_context_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name> <operator>=</operator> <call><name><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ctx_alloc_func</name></name><argument_list>()</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>=</operator> <name>cipher_info</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_WITH_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_PKCS7</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_cipher_set_padding_mode</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_PADDING_PKCS7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>mbedtls_cipher_set_padding_mode</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_PADDING_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_WITH_PADDING */</comment>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_setkey</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>key_bitlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MBEDTLS_CIPHER_VARIABLE_KEY_LEN</name> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>int</name><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>key_bitlen</name></name> <operator>!=</operator> <name>key_bitlen</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_bitlen</name></name> <operator>=</operator> <name>key_bitlen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>

    <comment type="block">/*
     * For CFB and CTR mode always use the encryption key schedule
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_ENCRYPT</name> <operator>==</operator> <name>operation</name> <operator>||</operator>
        <name>MBEDTLS_MODE_CFB</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator>
        <name>MBEDTLS_MODE_CTR</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>setkey_enc_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_bitlen</name></name></expr></argument> )</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_DECRYPT</name> <operator>==</operator> <name>operation</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>setkey_dec_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_bitlen</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_set_iv</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>actual_iv_size</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>iv</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* avoid buffer overflow in ctx-&gt;iv */</comment>
    <if_stmt><if>if<condition>( <expr><name>iv_len</name> <operator>&gt;</operator> <name>MBEDTLS_MAX_IV_LENGTH</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>actual_iv_size</name> <operator>=</operator> <name>iv_len</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>actual_iv_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>iv_size</name></name></expr>;</expr_stmt>

        <comment type="block">/* avoid reading past the end of input buffer */</comment>
        <if_stmt><if>if<condition>( <expr><name>actual_iv_size</name> <operator>&gt;</operator> <name>iv_len</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>actual_iv_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>=</operator> <name>actual_iv_size</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_reset</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_cipher_update_ad</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ad_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_GCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return <expr><call><name>mbedtls_gcm_starts</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>,
                           <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv_size</name></name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_len</name></expr></argument> )</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<function><type><name>int</name></type> <name>mbedtls_cipher_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                   <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>olen</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>block_size</name> <operator>=</operator> <call><name>mbedtls_cipher_get_block_size</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_ECB</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ilen</name> <operator>!=</operator> <name>block_size</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ecb_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_GCM</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>
        <return>return <expr><call><name>mbedtls_gcm_update</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                           <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>( <expr><literal type="number">0</literal> <operator>==</operator> <name>block_size</name></expr> )</condition>
    <block>{<block_content>
        <return>return <expr><name>MBEDTLS_ERR_CIPHER_INVALID_CONTEXT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>input</name> <operator>==</operator> <name>output</name> <operator>&amp;&amp;</operator>
       <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ilen</name> <operator>%</operator> <name>block_size</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_CBC</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>copy_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * If there is not enough data for a full block, cache it.
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>MBEDTLS_DECRYPT</name> <operator>&amp;&amp;</operator>
                <name>ilen</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>&lt;=</operator> <name>block_size</name> <operator>)</operator> <operator>||</operator>
             <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>MBEDTLS_ENCRYPT</name> <operator>&amp;&amp;</operator>
                <name>ilen</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>&lt;</operator> <name>block_size</name> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>]</index></name> <operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                    <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>+=</operator> <name>ilen</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Process cached data first
         */</comment>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>copy_len</name> <operator>=</operator> <name>block_size</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr>]</index></name> <operator>)</operator></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                    <argument><expr><name>copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cbc_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>, <argument><expr><name>block_size</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>,
                    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>copy_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ilen</name> <operator>-=</operator> <name>copy_len</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Cache final, incomplete block
         */</comment>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <name>ilen</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <name>block_size</name></expr> )</condition>
            <block>{<block_content>
                <return>return <expr><name>MBEDTLS_ERR_CIPHER_INVALID_CONTEXT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>copy_len</name> <operator>=</operator> <name>ilen</name> <operator>%</operator> <name>block_size</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>copy_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>MBEDTLS_DECRYPT</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>copy_len</name> <operator>=</operator> <name>block_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>ilen</name> <operator>-</operator> <name>copy_len</name></expr>]</index></name> <operator>)</operator></expr></argument>,
                    <argument><expr><name>copy_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>+=</operator> <name>copy_len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ilen</name> <operator>-=</operator> <name>copy_len</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Process remaining full blocks
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>ilen</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cbc_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>+=</operator> <name>ilen</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_CFB</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cfb_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>,
                <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_CTR</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>ctr_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                <argument><expr><name>ilen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>,
                <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MBEDTLS_MODE_STREAM</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>stream_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                                                    <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_STREAM */</comment>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_WITH_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_PKCS7</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_pkcs_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>output_len</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>padding_len</name> <init>= <expr><name>output_len</name> <operator>-</operator> <name>data_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>padding_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>data_len</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>padding_len</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_pkcs_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>input_len</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pad_idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>padding_len</name></decl>, <decl><type ref="prev"/><name>bad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>input</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>data_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>padding_len</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>input_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>input_len</name> <operator>-</operator> <name>padding_len</name></expr>;</expr_stmt>

    <comment type="block">/* Avoid logical || since it results in a branch */</comment>
    <expr_stmt><expr><name>bad</name> <operator>|=</operator> <name>padding_len</name> <operator>&gt;</operator> <name>input_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bad</name> <operator>|=</operator> <name>padding_len</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */</comment>
    <expr_stmt><expr><name>pad_idx</name> <operator>=</operator> <name>input_len</name> <operator>-</operator> <name>padding_len</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>input_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>bad</name> <operator>|=</operator> <operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>padding_len</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>i</name> <operator>&gt;=</operator> <name>pad_idx</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_INVALID_PADDING</name> <operator>*</operator> <operator>(</operator> <name>bad</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_PKCS7 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * One and zeros padding: fill with 80 00 ... 00
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_one_and_zeros_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>output_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>padding_len</name> <init>= <expr><name>output_len</name> <operator>-</operator> <name>data_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>output</name><index>[<expr><name>data_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>padding_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>data_len</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_one_and_zeros_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>input_len</name></decl></parameter>,
                                      <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_done</name></decl>, <decl><type ref="prev"/><name>bad</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>input</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>data_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>bad</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>input_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>prev_done</name> <operator>=</operator> <name>done</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>done</name> <operator>|=</operator> <operator>(</operator> <name><name>input</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>|=</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>done</name> <operator>!=</operator> <name>prev_done</name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bad</name> <operator>&amp;=</operator> <operator>(</operator> <name><name>input</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <literal type="number">0x80</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>done</name> <operator>==</operator> <name>prev_done</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_INVALID_PADDING</name> <operator>*</operator> <operator>(</operator> <name>bad</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_zeros_and_len_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>output_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>padding_len</name> <init>= <expr><name>output_len</name> <operator>-</operator> <name>data_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>padding_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>data_len</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>output</name><index>[<expr><name>output_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>padding_len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_zeros_and_len_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>input_len</name></decl></parameter>,
                                      <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pad_idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>padding_len</name></decl>, <decl><type ref="prev"/><name>bad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>input</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>data_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>padding_len</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>input_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>input_len</name> <operator>-</operator> <name>padding_len</name></expr>;</expr_stmt>

    <comment type="block">/* Avoid logical || since it results in a branch */</comment>
    <expr_stmt><expr><name>bad</name> <operator>|=</operator> <name>padding_len</name> <operator>&gt;</operator> <name>input_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bad</name> <operator>|=</operator> <name>padding_len</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* The number of bytes checked must be independent of padding_len */</comment>
    <expr_stmt><expr><name>pad_idx</name> <operator>=</operator> <name>input_len</name> <operator>-</operator> <name>padding_len</name></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>input_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>bad</name> <operator>|=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator> <name>i</name> <operator>&gt;=</operator> <name>pad_idx</name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_INVALID_PADDING</name> <operator>*</operator> <operator>(</operator> <name>bad</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ZEROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Zero padding: fill with 00 ... 00
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_zeros_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                               <parameter><decl><type><name>size_t</name></type> <name>output_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>data_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>output_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_zeros_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>input_len</name></decl></parameter>,
                              <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev_done</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>input</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>data_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>input_len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>prev_done</name> <operator>=</operator> <name>done</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>done</name> <operator>|=</operator> <operator>(</operator> <name><name>input</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>|=</operator> <name>i</name> <operator>*</operator> <operator>(</operator> <name>done</name> <operator>!=</operator> <name>prev_done</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_PADDING_ZEROS */</comment>

<comment type="block">/*
 * No padding: don't pad :)
 *
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_no_padding</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>input_len</name></decl></parameter>,
                              <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>input</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>data_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <name>input_len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_WITH_PADDING */</comment>

<function><type><name>int</name></type> <name>mbedtls_cipher_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>olen</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_CFB</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator>
        <name>MBEDTLS_MODE_CTR</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator>
        <name>MBEDTLS_MODE_GCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator>
        <name>MBEDTLS_MODE_STREAM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_ECB</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_CBC</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>MBEDTLS_ENCRYPT</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/* check for 'no padding' mode */</comment>
            <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr> )</condition><block type="pseudo"><block_content>
                    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

                <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name></name></expr></argument>, <argument><expr><call><name>mbedtls_cipher_get_iv_size</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr></argument>,
                    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><call><name>mbedtls_cipher_get_block_size</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */</comment>
            <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_len</name></name></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* cipher block */</comment>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>base</name><operator>-&gt;</operator><name>cbc_func</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>, <argument><expr><call><name>mbedtls_cipher_get_block_size</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>,
                <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unprocessed_data</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Set output size for decryption */</comment>
        <if_stmt><if>if<condition>( <expr><name>MBEDTLS_DECRYPT</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr> )</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>get_padding</name></name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>mbedtls_cipher_get_block_size</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr></argument>,
                                     <argument><expr><name>olen</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block">/* Set output size for encryption */</comment>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <call><name>mbedtls_cipher_get_block_size</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>output</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_WITH_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_cipher_set_padding_mode</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_cipher_padding_t</name></type> <name>mode</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator>
        <name>MBEDTLS_MODE_CBC</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch<condition>( <expr><name>mode</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_PKCS7</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>MBEDTLS_PADDING_PKCS7</name></expr>:</case>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name> <operator>=</operator> <name>add_pkcs_padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_padding</name></name> <operator>=</operator> <name>get_pkcs_padding</name></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>MBEDTLS_PADDING_ONE_AND_ZEROS</name></expr>:</case>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name> <operator>=</operator> <name>add_one_and_zeros_padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_padding</name></name> <operator>=</operator> <name>get_one_and_zeros_padding</name></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>MBEDTLS_PADDING_ZEROS_AND_LEN</name></expr>:</case>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name> <operator>=</operator> <name>add_zeros_and_len_padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_padding</name></name> <operator>=</operator> <name>get_zeros_and_len_padding</name></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_PADDING_ZEROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <case>case <expr><name>MBEDTLS_PADDING_ZEROS</name></expr>:</case>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name> <operator>=</operator> <name>add_zeros_padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_padding</name></name> <operator>=</operator> <name>get_zeros_padding</name></expr>;</expr_stmt>
        <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>MBEDTLS_PADDING_NONE</name></expr>:</case>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>add_padding</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>get_padding</name></name> <operator>=</operator> <name>get_no_padding</name></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_WITH_PADDING */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_cipher_write_tag</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>tag</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_ENCRYPT</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_GCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>mbedtls_gcm_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_cipher_check_tag</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>==</operator> <name>ctx</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name></name> <operator>||</operator>
        <name>MBEDTLS_DECRYPT</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>operation</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_GCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>check_tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>tag_len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>check_tag</name></expr></argument> )</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_finish</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>,
                                     <argument><expr><name>check_tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>
        <block>{<block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Check the tag in "constant-time" */</comment>
        <for>for<control>( <init><expr><name>diff</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tag_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>diff</name> <operator>|=</operator> <name><name>tag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>check_tag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt><if>if<condition>( <expr><name>diff</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<comment type="block">/*
 * Packet-oriented wrapper for non-AEAD modes
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_cipher_crypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>finish_olen</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_set_iv</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_reset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_finish</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name> <operator>+</operator> <operator>*</operator><name>olen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>finish_olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>+=</operator> <name>finish_olen</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_AEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Packet-oriented encryption for AEAD modes
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_cipher_auth_encrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ad_len</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_GCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_gcm_crypt_and_tag</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>MBEDTLS_GCM_ENCRYPT</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>,
                                   <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_len</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,
                                   <argument><expr><name>tag_len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_CCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_ccm_encrypt_and_tag</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>,
                                     <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_len</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,
                                     <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Packet-oriented decryption for AEAD modes
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_cipher_auth_decrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ad_len</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tag_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_GCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_gcm_auth_decrypt</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>,
                                <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_len</name></expr></argument>,
                                <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_GCM_AUTH_FAILED</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>MBEDTLS_MODE_CCM</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_info</name><operator>-&gt;</operator><name>mode</name></name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ccm_auth_decrypt</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_ctx</name></name></expr></argument>, <argument><expr><name>ilen</name></expr></argument>,
                                <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv_len</name></expr></argument>, <argument><expr><name>ad</name></expr></argument>, <argument><expr><name>ad_len</name></expr></argument>,
                                <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_CCM_AUTH_FAILED</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_CIPHER_AUTH_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_AEAD */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_C */</comment>
</unit>
