<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ecjpake.c"><comment type="block">/*
 *  Elliptic curve J-PAKE
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 * References in the code are to the Thread v1.0 Specification,
 * available to members of the Thread Group http://threadgroup.org/
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECJPAKE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecjpake.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * Convert a mbedtls_ecjpake_role to identifier string
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ecjpake_id</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"client"</literal></expr>,
    <expr><literal type="string">"server"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_MINE</name></cpp:macro>     <cpp:value>( ecjpake_id[ ctx-&gt;role ] )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_PEER</name></cpp:macro>     <cpp:value>( ecjpake_id[ 1 - ctx-&gt;role ] )</cpp:value></cpp:define>

<comment type="block">/*
 * Initialize context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ecjpake_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_group_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>point_format</name></name> <operator>=</operator> <name>MBEDTLS_ECP_PF_UNCOMPRESSED</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ecjpake_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_group_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>   )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Setup context
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_setup</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_ecjpake_role</name></type> <name>role</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>hash</name></decl></parameter>,
                           <parameter><decl><type><name>mbedtls_ecp_group_id</name></type> <name>curve</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>secret</name></decl></parameter>,
                           <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <name>role</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>hash</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_group_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><name>curve</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ecjpake_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if context is ready for use
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_check</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>MBEDTLS_ECP_DP_NONE</name> <operator>||</operator>
        <name><name>ctx</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write a point plus its length to a buffer
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_write_len_point</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <comment type="block">/* Need at least 4 for length plus 1 for point */</comment>
    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name> <operator>||</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecp_point_write_binary</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>,
                                          <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>(</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>len</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Size of the temporary buffer for ecjpake_hash:
 * 3 EC points plus their length, plus ID and its length (4 + 6 bytes)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECJPAKE_HASH_BUF_LEN</name></cpp:macro>    <cpp:value>( 3 * ( 4 + MBEDTLS_ECP_MAX_PT_LEN ) + 4 + 6 )</cpp:value></cpp:define>

<comment type="block">/*
 * Compute hash for ZKP (7.4.2.2.2.1)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_hash</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>V</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                         <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>ECJPAKE_HASH_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>id_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Write things to temporary buffer */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_write_len_point</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_write_len_point</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>V</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_write_len_point</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>id_len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>id_len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>id_len</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>id_len</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>id_len</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>id_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>id_len</name></expr>;</expr_stmt>

    <comment type="block">/* Compute hash */</comment>
    <expr_stmt><expr><call><name>mbedtls_md</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>buf</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Turn it into an integer mod n */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,
                                        <argument><expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse a ECShnorrZKP (7.4.2.2.2) and verify it (7.4.2.3.3)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_zkp_read</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>V</name></decl>, <decl><type ref="prev"/><name>VV</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>r_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>VV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * struct {
     *     ECPoint V;
     *     opaque r&lt;1..2^8-1&gt;;
     * } ECSchnorrZKP;
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_read_point</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>r_len</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>r_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>r_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>r_len</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Verification
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_hash</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_muladd</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecp_group</name> <operator>*</operator><operator>)</operator> <name>grp</name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>VV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>G</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ecp_point_cmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name>VV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_VERIFY_FAILED</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>VV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate ZKP (7.4.2.3.2) and write it as ECSchnorrZKP (7.4.2.2.2)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_zkp_write</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>, 
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                              <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                              <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>V</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>h</name></decl>;</decl_stmt> <comment type="block">/* later recycled to hold r */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Compute signature */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_gen_keypair_base</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecp_group</name> <operator>*</operator><operator>)</operator> <name>grp</name></expr></argument>,
                                                   <argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_hash</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* x*h */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* v - x*h */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* r */</comment>

    <comment type="block">/* Write it out */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_write_point</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>,
                <argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbedtls_mpi_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* actually r */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>end</name> <argument_list type="generic">&lt; <argument><expr><operator>*</operator><name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <name>len</name> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_write_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* r */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse a ECJPAKEKeyKP (7.4.2.2.1) and check proof
 * Output: verified public key X
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_kkp_read</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                             <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * struct {
     *     ECPoint X;
     *     ECSchnorrZKP zkp;
     * } ECJPAKEKeyKP;
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_read_point</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ecp_is_zero</name><argument_list>( <argument><expr><name>X</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_INVALID_KEY</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_zkp_read</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate an ECJPAKEKeyKP
 * Output: the serialized structure, plus private/public key pair
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_kkp_write</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                              <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                              <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Generate key (7.4.2.3.1) and write it out */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_gen_keypair_base</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ecp_group</name> <operator>*</operator><operator>)</operator> <name>grp</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>X</name></expr></argument>,
                                                   <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_write_point</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>X</name></expr></argument>,
                <argument><expr><name>pf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <comment type="block">/* Generate and write proof */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_zkp_write</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                                        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read a ECJPAKEKeyKPPairList (7.4.2.3) and check proofs
 * Ouputs: verified peer public keys Xa, Xb
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_kkpp_read</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>Xa</name></decl></parameter>,
                              <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>Xb</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                              <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * struct {
     *     ECJPAKEKeyKP ecjpake_key_kp_pair_list[2];
     * } ECJPAKEKeyKPPairList;
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_kkp_read</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>Xa</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_kkp_read</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>Xb</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate a ECJPAKEKeyKPPairList
 * Outputs: the serialized structure, plus two private/public key pairs
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_kkpp_write</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pf</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>xm1</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>Xa</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>xm2</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>Xb</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                               <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                               <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                               <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_kkp_write</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>xm1</name></expr></argument>, <argument><expr><name>Xa</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_kkp_write</name><argument_list>( <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>xm2</name></expr></argument>, <argument><expr><name>Xb</name></expr></argument>, <argument><expr><name>id</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read and process the first round message
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_read_round_one</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>ecjpake_kkpp_read</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>point_format</name></name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>G</name></name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp2</name></name></expr></argument>, <argument><expr><name>ID_PEER</name></expr></argument>,
                               <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate and write the first round message
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_write_round_one</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                            <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                            <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>ecjpake_kkpp_write</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>point_format</name></name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>G</name></name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm2</name></name></expr></argument>,
                                <argument><expr><name>ID_MINE</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute the sum of three points R = A + B + C
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_ecp_add3</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>B</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>C</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>one</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_muladd</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><name>B</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_muladd</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><name>C</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read and process second round message (C: 7.4.2.5, S: 7.4.2.6)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_read_round_two</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                            <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                            <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_group</name></type> <name>grp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>G</name></decl>;</decl_stmt>    <comment type="block">/* C: GB, S: GA */</comment>

    <expr_stmt><expr><call><name>mbedtls_ecp_group_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>grp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Server: GA = X3  + X4  + X1      (7.4.2.6.1)
     * Client: GB = X1  + X2  + X3      (7.4.2.5.1)
     * Unified: G = Xm1 + Xm2 + Xp1
     * We need that before parsing in order to check Xp as we read it
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_ecp_add3</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp1</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * struct {
     *     ECParameters curve_params;   // only client reading server msg
     *     ECJPAKEKeyKP ecjpake_key_kp;
     * } Client/ServerECJPAKEParams;
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>role</name></name> <operator>==</operator> <name>MBEDTLS_ECJPAKE_CLIENT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_read_group</name><argument_list>( <argument><expr><operator>&amp;</operator><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>grp</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>id</name></name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE</name></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_kkp_read</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>,
                            <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>point_format</name></name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp</name></name></expr></argument>, <argument><expr><name>ID_PEER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_group_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>grp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute R = +/- X * S mod N, taking care not to leak S
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_mul_secret</name><parameter_list>( <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>S</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>N</name></decl></parameter>,
                               <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>b</name></decl>;</decl_stmt> <comment type="block">/* Blinding value, then s + N * blinding */</comment>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* b = s + rnd-128-bit * N */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_fill_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* R = sign * X * b mod N */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>s</name></name> <operator>*=</operator> <name>sign</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><name>R</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate and write the second round message (S: 7.4.2.5, C: 7.4.2.6)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_write_round_two</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                            <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                            <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>G</name></decl>;</decl_stmt>    <comment type="block">/* C: GA, S: GB */</comment>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>Xm</name></decl>;</decl_stmt>   <comment type="block">/* C: Xc, S: Xs */</comment>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>xm</name></decl>;</decl_stmt>         <comment type="block">/* C: xc, S: xs */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ec_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Xm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>xm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * First generate private/public key pair (S: 7.4.2.5.1, C: 7.4.2.6.1)
     *
     * Client:  GA = X1  + X3  + X4  | xs = x2  * s | Xc = xc * GA
     * Server:  GB = X3  + X1  + X2  | xs = x4  * s | Xs = xs * GB
     * Unified: G  = Xm1 + Xp1 + Xp2 | xm = xm2 * s | Xm = xm * G
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_ecp_add3</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>,
                                       <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm1</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_mul_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name>xm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>N</name></name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_mul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Xm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Now write things out
     *
     * struct {
     *     ECParameters curve_params;   // only server writing its message
     *     ECJPAKEKeyKP ecjpake_key_kp;
     * } Client/ServerECJPAKEParams;
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>role</name></name> <operator>==</operator> <name>MBEDTLS_ECJPAKE_SERVER</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_write_group</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ec_len</name></expr></argument>,
                                                      <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ec_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_tls_write_point</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Xm</name></expr></argument>,
                     <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>point_format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ec_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ec_len</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_zkp_write</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>,
                                        <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>point_format</name></name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>G</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Xm</name></expr></argument>, <argument><expr><name>ID_MINE</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>G</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>Xm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>xm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Derive PMS (7.4.2.7 / 7.4.2.8)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_derive_secret</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                            <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                            <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                            <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>K</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>m_xm2_s</name></decl>, <decl><type ref="prev"/><name>one</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kx</name><index>[<expr><name>MBEDTLS_ECP_MAX_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>x_bytes</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <operator>*</operator><name>olen</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>K</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>m_xm2_s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_lset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Client:  K = ( Xs - X4  * x2  * s ) * x2
     * Server:  K = ( Xc - X2  * x4  * s ) * x4
     * Unified: K = ( Xp - Xp2 * xm2 * s ) * xm2
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_mul_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name>m_xm2_s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>N</name></name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_muladd</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>K</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp</name></name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>m_xm2_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xp2</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_mul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>K</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>K</name></expr></argument>,
                                      <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* PMS = SHA-256( K.X ) */</comment>
    <expr_stmt><expr><name>x_bytes</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>pbits</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_write_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>K</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>kx</name></expr></argument>, <argument><expr><name>x_bytes</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_md</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument>, <argument><expr><name>kx</name></expr></argument>, <argument><expr><name>x_bytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>K</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>m_xm2_s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ID_MINE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ID_PEER</name></cpp:undef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro>     <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_DP_SECP256R1_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA256_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>verbose</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_password</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
    <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_x1</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>,
    <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>,
    <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x21</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_x2</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
    <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
    <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x81</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_x3</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
    <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
    <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x81</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_x4</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>,
    <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xd8</literal></expr>,
    <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xe1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_cli_one</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x19</literal></expr>,
    <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x44</literal></expr>,
    <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xad</literal></expr>,
    <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
    <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xf9</literal></expr>,
    <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
    <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x9e</literal></expr>,
    <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
    <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
    <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xce</literal></expr>,
    <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
    <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x5b</literal></expr>,
    <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7e</literal></expr>,
    <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
    <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc5</literal></expr>,
    <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xeb</literal></expr>,
    <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x35</literal></expr>,
    <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xb0</literal></expr>,
    <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xeb</literal></expr>,
    <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x47</literal></expr>,
    <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
    <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
    <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
    <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x4d</literal></expr>,
    <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xaa</literal></expr>,
    <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,
    <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xf0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_srv_one</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xdb</literal></expr>,
    <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x18</literal></expr>,
    <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x47</literal></expr>,
    <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,
    <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
    <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,
    <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x64</literal></expr>,
    <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
    <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xc2</literal></expr>,
    <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xec</literal></expr>,
    <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
    <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
    <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd3</literal></expr>,
    <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x19</literal></expr>,
    <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
    <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
    <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xc7</literal></expr>,
    <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xea</literal></expr>,
    <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xc5</literal></expr>,
    <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xe6</literal></expr>,
    <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
    <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x1d</literal></expr>,
    <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xe8</literal></expr>,
    <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xee</literal></expr>,
    <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
    <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
    <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x80</literal></expr>,
    <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x12</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_srv_two</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
    <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x7c</literal></expr>,
    <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,
    <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xca</literal></expr>,
    <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
    <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
    <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
    <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,
    <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xb9</literal></expr>,
    <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xd4</literal></expr>,
    <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xd2</literal></expr>,
    <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,
    <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xdd</literal></expr>,
    <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x6c</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_cli_two</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x46</literal></expr>,
    <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xcb</literal></expr>,
    <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
    <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xce</literal></expr>,
    <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x98</literal></expr>,
    <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
    <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
    <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xe8</literal></expr>,
    <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x45</literal></expr>,
    <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x4d</literal></expr>,
    <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
    <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x82</literal></expr>,
    <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x4c</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ecjpake_test_pms</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xe7</literal></expr>,
    <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xf9</literal></expr>,
    <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x51</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Load my private keys and generate the correponding public keys */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_test_load</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecjpake_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>xm1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len1</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>xm2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len2</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm1</name></name></expr></argument>, <argument><expr><name>xm1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument>, <argument><expr><name>xm2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_mul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm1</name></name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>G</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_mul</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Xm2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>xm2</name></name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name><operator>.</operator><name>G</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For tests we don't need a secure RNG;
 * use the LGC from Numerical Recipes for simplicity */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecjpake_lgc</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>x</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name> <init>= <expr><ternary><condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1664525</literal> <operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">1013904223</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ASSERT</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro>    \
    <cpp:value>do {                    \
        if( x )             \
            ret = 0;        \
        else                \
        {                   \
            ret = 1;        \
            goto cleanup;   \
        }                   \
    } while( 0 )</cpp:value></cpp:define>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecjpake_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecjpake_context</name></type> <name>cli</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecjpake_context</name></type> <name>srv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pms</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>pmslen</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecjpake_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecjpake_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  ECJPAKE test #0 (setup): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>, <argument><expr><name>MBEDTLS_ECJPAKE_CLIENT</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument>, <argument><expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr></argument>,
                    <argument><expr><name>ecjpake_test_password</name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_password</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>, <argument><expr><name>MBEDTLS_ECJPAKE_SERVER</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_MD_SHA256</name></expr></argument>, <argument><expr><name>MBEDTLS_ECP_DP_SECP256R1</name></expr></argument>,
                    <argument><expr><name>ecjpake_test_password</name></expr></argument>,
            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_password</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  ECJPAKE test #1 (random handshake): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_write_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_write_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_write_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_derive_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                 <argument><expr><name>pms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>pms</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmslen</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_write_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_derive_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><name>len</name> <operator>==</operator> <name>pmslen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pms</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  ECJPAKE test #2 (reference handshake): "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Simulate generation of round one */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_test_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                <argument><expr><name>ecjpake_test_x1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_x1</name></expr></argument> )</argument_list></sizeof></expr></argument>,
                <argument><expr><name>ecjpake_test_x2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_x2</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecjpake_test_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                <argument><expr><name>ecjpake_test_x3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_x3</name></expr></argument> )</argument_list></sizeof></expr></argument>,
                <argument><expr><name>ecjpake_test_x4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_x4</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read round one */</comment>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                                    <argument><expr><name>ecjpake_test_cli_one</name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_cli_one</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                                    <argument><expr><name>ecjpake_test_srv_one</name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_srv_one</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Skip generation of round two, read round two */</comment>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                                    <argument><expr><name>ecjpake_test_srv_two</name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_srv_two</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_read_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                                    <argument><expr><name>ecjpake_test_cli_two</name></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_cli_two</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Server derives PMS */</comment>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_derive_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><name>len</name> <operator>==</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_pms</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ecjpake_test_pms</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Avoid interferences with next step */</comment>

    <comment type="block">/* Client derives PMS */</comment>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>mbedtls_ecjpake_derive_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument>,
                 <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ecjpake_lgc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><name>len</name> <operator>==</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>ecjpake_test_pms</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ASSERT</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ecjpake_test_pms</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecjpake_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cli</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ecjpake_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>srv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_ASSERT</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECP_DP_SECP256R1_ENABLED &amp;&amp; MBEDTLS_SHA256_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECJPAKE_C */</comment>
</unit>
