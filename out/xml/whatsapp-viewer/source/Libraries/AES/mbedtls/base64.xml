<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/base64.c"><comment type="block">/*
 *  RFC 1521 base64 encoding/decoding
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BASE64_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>base64_enc_map</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>,
    <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>,
    <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>,
    <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>,
    <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>,
    <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,
    <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'/'</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>base64_dec_map</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,
    <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,
    <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,
    <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,
    <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">62</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">63</literal></expr>,  <expr><literal type="number">52</literal></expr>,  <expr><literal type="number">53</literal></expr>,
     <expr><literal type="number">54</literal></expr>,  <expr><literal type="number">55</literal></expr>,  <expr><literal type="number">56</literal></expr>,  <expr><literal type="number">57</literal></expr>,  <expr><literal type="number">58</literal></expr>,  <expr><literal type="number">59</literal></expr>,  <expr><literal type="number">60</literal></expr>,  <expr><literal type="number">61</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,
    <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">64</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,   <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">4</literal></expr>,
      <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">9</literal></expr>,  <expr><literal type="number">10</literal></expr>,  <expr><literal type="number">11</literal></expr>,  <expr><literal type="number">12</literal></expr>,  <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">14</literal></expr>,
     <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">16</literal></expr>,  <expr><literal type="number">17</literal></expr>,  <expr><literal type="number">18</literal></expr>,  <expr><literal type="number">19</literal></expr>,  <expr><literal type="number">20</literal></expr>,  <expr><literal type="number">21</literal></expr>,  <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">23</literal></expr>,  <expr><literal type="number">24</literal></expr>,
     <expr><literal type="number">25</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>,  <expr><literal type="number">26</literal></expr>,  <expr><literal type="number">27</literal></expr>,  <expr><literal type="number">28</literal></expr>,
     <expr><literal type="number">29</literal></expr>,  <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">31</literal></expr>,  <expr><literal type="number">32</literal></expr>,  <expr><literal type="number">33</literal></expr>,  <expr><literal type="number">34</literal></expr>,  <expr><literal type="number">35</literal></expr>,  <expr><literal type="number">36</literal></expr>,  <expr><literal type="number">37</literal></expr>,  <expr><literal type="number">38</literal></expr>,
     <expr><literal type="number">39</literal></expr>,  <expr><literal type="number">40</literal></expr>,  <expr><literal type="number">41</literal></expr>,  <expr><literal type="number">42</literal></expr>,  <expr><literal type="number">43</literal></expr>,  <expr><literal type="number">44</literal></expr>,  <expr><literal type="number">45</literal></expr>,  <expr><literal type="number">46</literal></expr>,  <expr><literal type="number">47</literal></expr>,  <expr><literal type="number">48</literal></expr>,
     <expr><literal type="number">49</literal></expr>,  <expr><literal type="number">50</literal></expr>,  <expr><literal type="number">51</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">127</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE64_SIZE_T_MAX</name></cpp:macro>   <cpp:value>( (size_t) -1 )</cpp:value></cpp:define> <comment type="block">/* SIZE_T_MAX is not standard */</comment>

<comment type="block">/*
 * Encode a buffer into base64 format
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_base64_encode</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>C1</name></decl>, <decl><type ref="prev"/><name>C2</name></decl>, <decl><type ref="prev"/><name>C3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>slen</name> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator> <name>slen</name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <operator>(</operator> <name>BASE64_SIZE_T_MAX</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>BASE64_SIZE_T_MAX</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>dlen</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name>NULL</name> <operator>==</operator> <name>dst</name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>slen</name> <operator>/</operator> <literal type="number">3</literal> <operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>dst</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>C1</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>C2</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>C3</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><operator>(</operator><name>C1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>C1</name> <operator>&amp;</operator>  <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>C2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>C2</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>C3</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><name>C3</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>C1</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>C2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <operator>(</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&lt;</operator> <name>slen</name> <operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>src</name><operator>++</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><operator>(</operator><name>C1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>C1</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>C2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&lt;</operator> <name>slen</name></expr> )</condition><block type="pseudo"><block_content>
             <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>base64_enc_map</name><index>[<expr><operator>(</operator><operator>(</operator><name>C2</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>dst</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decode a base64-formatted buffer
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_base64_decode</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="block">/* First pass: check for validity and get output length */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <comment type="block">/* Skip spaces before checking for EOL */</comment>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>slen</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Spaces at end of buffer are OK */</comment>
        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name>slen</name></expr> )</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>slen</name> <operator>-</operator> <name>i</name> <operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
            <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* Space inside a line is an error */</comment>
        <if_stmt><if>if<condition>( <expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_INVALID_CHARACTER</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>j</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_INVALID_CHARACTER</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name><name>base64_dec_map</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">127</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_INVALID_CHARACTER</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>base64_dec_map</name><index>[<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_INVALID_CHARACTER</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>n</name> <operator>*</operator> <literal type="number">6</literal> <operator>)</operator> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>dst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>&lt;</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

   <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>x</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>dst</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>src</name><operator>++</operator></expr></incr> )</control>
   <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>j</name> <operator>-=</operator> <operator>(</operator> <name><name>base64_dec_map</name><index>[<expr><operator>*</operator><name>src</name></expr>]</index></name> <operator>==</operator> <literal type="number">64</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name>  <operator>=</operator> <operator>(</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>base64_dec_map</name><index>[<expr><operator>*</operator><name>src</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal> <operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>++</operator><name>n</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>x</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>x</name>       <operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>dst</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>base64_test_dec</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xBD</literal></expr>,
    <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
    <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x09</literal></expr>,
    <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
    <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
    <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
    <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4B</literal></expr>,
    <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x97</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>base64_test_enc</name><index>[]</index></name> <init>=
    <expr><literal type="string">"JEhuVodiWr2/F9mixBcaAZTtjx4Rs9cJDLbpEG8i7hPK"</literal>
    <literal type="string">"swcFdsn6MWwINP+Nwmw4AEPpVJevUEvRQbqVMVoLlw=="</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_base64_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  Base64 encoding test: "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>src</name> <operator>=</operator> <name>base64_test_dec</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_base64_encode</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buffer</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>memcmp</name><argument_list>( <argument><expr><name>base64_test_enc</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n  Base64 decoding test: "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>src</name> <operator>=</operator> <name>base64_test_enc</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_base64_decode</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buffer</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
         <call><name>memcmp</name><argument_list>( <argument><expr><name>base64_test_dec</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BASE64_C */</comment>
</unit>
