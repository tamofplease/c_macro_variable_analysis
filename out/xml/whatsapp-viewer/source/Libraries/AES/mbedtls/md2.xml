<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/md2.c"><comment type="block">/*
 *  RFC 1115/1319 compliant MD2 implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The MD2 algorithm was designed by Ron Rivest in 1989.
 *
 *  http://www.ietf.org/rfc/rfc1115.txt
 *  http://www.ietf.org/rfc/rfc1319.txt
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>PI_SUBST</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
    <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xF3</literal></expr>,
    <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x4C</literal></expr>,
    <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
    <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x4E</literal></expr>,
    <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x8E</literal></expr>,
    <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xB2</literal></expr>,
    <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x21</literal></expr>,
    <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
    <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xB3</literal></expr>,
    <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x56</literal></expr>,
    <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xB6</literal></expr>,
    <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x9D</literal></expr>,
    <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x65</literal></expr>,
    <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>,
    <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
    <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x5C</literal></expr>,
    <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x6E</literal></expr>,
    <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
    <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xFA</literal></expr>,
    <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
    <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xFE</literal></expr>,
    <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
    <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
    <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x99</literal></expr>,
    <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x14</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mbedtls_md2_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md2_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_md2_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_md2_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_md2_clone</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MD2 context setup
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md2_starts</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cksum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD2_PROCESS_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_md2_process</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">32</literal></expr>]</index></name> <operator>=</operator>
            <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator>
               <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^</operator> <name><name>PI_SUBST</name><index>[<expr><name>t</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name>  <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>+</operator> <name>i</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cksum</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cksum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator>
           <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cksum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>PI_SUBST</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>t</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name>  <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cksum</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_MD2_PROCESS_ALT */</comment>

<comment type="block">/*
 * MD2 process buffer
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md2_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>fill</name></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>left</name></name> <operator>+</operator> <name>ilen</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>fill</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>fill</name> <operator>=</operator> <name>ilen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>fill</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>left</name></name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>+=</operator> <name>fill</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ilen</name>  <operator>-=</operator> <name>fill</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <literal type="number">16</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md2_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * MD2 final digest
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md2_finish</name><parameter_list>( <parameter><decl><type><name>mbedtls_md2_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <literal type="number">16</literal> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>left</name></name> <operator>)</operator></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>left</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>mbedtls_md2_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cksum</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md2_process</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_MD2_ALT */</comment>

<comment type="block">/*
 * output = MD2( input buffer )
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_md2</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_md2_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_md2_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md2_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md2_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>ilen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md2_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md2_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
 * RFC 1319 test vectors
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>md2_test_str</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">81</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="string">""</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"a"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"message digest"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"12345678901234567890123456789012345678901234567890123456789012"</literal> \
      <literal type="string">"345678901234567890"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>md2_test_sum</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,
      <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x73</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
      <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xD1</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x9B</literal></expr>,
      <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xBB</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x0B</literal></expr>,
      <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xB0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xAB</literal></expr>,
      <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x0B</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
      <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xCD</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
      <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xD8</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_md2_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md2sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  MD2 test #%d: "</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>mbedtls_md2</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>md2_test_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
             <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>md2_test_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>md2sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>md2sum</name></expr></argument>, <argument><expr><name><name>md2_test_sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD2_C */</comment>
</unit>
