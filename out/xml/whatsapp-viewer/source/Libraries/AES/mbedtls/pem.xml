<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/pem.c"><comment type="block">/*
 *  Privacy Enhanced Mail (PEM) decoding
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"des.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_PARSE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_pem_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_pem_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_pem_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>         \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
<comment type="block">/*
 * Read a 16-byte hex string and convert it to binary
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pem_get_iv</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>iv_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iv_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iv_len</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
        if<condition>( <expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'7'</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else
        if<condition>( <expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_ENC_IV</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <operator>(</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>iv</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>iv</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name>k</name> <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pem_pbkdf1</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pwdlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>md5_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * key[ 0..15] = MD5(pwd || IV)
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>keylen</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * key[16..23] = MD5(key[ 0..15] || pwd || IV])
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>,  <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument>, <argument><expr><name>md5sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>use_len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>keylen</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <name>keylen</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md5_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>md5sum</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Decrypt with DES-CBC, using PBKDF1 for key derivation
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pem_des_decrypt</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>des_iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pwdlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_des_context</name></type> <name>des_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>des_key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pem_pbkdf1</name><argument_list>( <argument><expr><name>des_key</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>des_iv</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des_ctx</name></expr></argument>, <argument><expr><name>des_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des_ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_DES_DECRYPT</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
                     <argument><expr><name>des_iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>des_key</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Decrypt with 3DES-CBC, using PBKDF1 for key derivation
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pem_des3_decrypt</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>des3_iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pwdlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_des3_context</name></type> <name>des3_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>des3_key</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_des3_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des3_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pem_pbkdf1</name><argument_list>( <argument><expr><name>des3_key</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>des3_iv</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_des3_set3key_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des3_ctx</name></expr></argument>, <argument><expr><name>des3_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_des3_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des3_ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_DES_DECRYPT</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
                     <argument><expr><name>des3_iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_des3_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>des3_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>des3_key</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pem_aes_decrypt</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aes_iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keylen</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pwdlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_aes_context</name></type> <name>aes_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aes_key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pem_pbkdf1</name><argument_list>( <argument><expr><name>aes_key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>aes_iv</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_aes_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument>, <argument><expr><name>aes_key</name></expr></argument>, <argument><expr><name>keylen</name> <operator>*</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_aes_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_DECRYPT</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
                     <argument><expr><name>aes_iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>aes_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>aes_key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C &amp;&amp; MBEDTLS_CIPHER_MODE_CBC &amp;&amp;
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */</comment>

<function><type><name>int</name></type> <name>mbedtls_pem_read_buffer</name><parameter_list>( <parameter><decl><type><name>mbedtls_pem_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>footer</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>,
                     <parameter><decl><type><name>size_t</name></type> <name>pwdlen</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>use_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>enc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>         \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pem_iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_type_t</name></type> <name>enc_alg</name> <init>= <expr><name>MBEDTLS_CIPHER_NONE</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>pwd</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>pwdlen</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C &amp;&amp; MBEDTLS_CIPHER_MODE_CBC &amp;&amp;
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */</comment>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>strstr</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>s1</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>s2</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>strstr</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name>footer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>s2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s2</name> <operator>&lt;=</operator> <name>s1</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>s1</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">' '</literal></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>footer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">' '</literal></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>use_len</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>data</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>enc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"Proc-Type: 4,ENCRYPTED"</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>         \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><name>enc</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_DATA</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"DEK-Info: DES-EDE3-CBC,"</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>enc_alg</name> <operator>=</operator> <name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">23</literal></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><call><name>pem_get_iv</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_ENC_IV</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"DEK-Info: DES-CBC,"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>enc_alg</name> <operator>=</operator> <name>MBEDTLS_CIPHER_DES_CBC</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><call><name>pem_get_iv</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_ENC_IV</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"DEK-Info: AES-"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"DEK-Info: AES-128-CBC,"</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>enc_alg</name> <operator>=</operator> <name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"DEK-Info: AES-192-CBC,"</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>enc_alg</name> <operator>=</operator> <name>MBEDTLS_CIPHER_AES_192_CBC</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="string">"DEK-Info: AES-256-CBC,"</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>enc_alg</name> <operator>=</operator> <name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

            <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">22</literal></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><call><name>pem_get_iv</name><argument_list>( <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_ENC_IV</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>s1</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

        <if_stmt><if>if<condition>( <expr><name>enc_alg</name> <operator>==</operator> <name>MBEDTLS_CIPHER_NONE</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_DATA</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C &amp;&amp; MBEDTLS_CIPHER_MODE_CBC &amp;&amp;
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>s1</name> <operator>==</operator> <name>s2</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_base64_decode</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name> <operator>-</operator> <name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>==</operator> <name>MBEDTLS_ERR_BASE64_INVALID_CHARACTER</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_DATA</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>buf</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_base64_decode</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name> <operator>-</operator> <name>s1</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_INVALID_DATA</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>enc</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_MD5_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>         \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_PASSWORD_REQUIRED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>enc_alg</name> <operator>==</operator> <name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pem_des3_decrypt</name><argument_list>( <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><name>enc_alg</name> <operator>==</operator> <name>MBEDTLS_CIPHER_DES_CBC</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pem_des_decrypt</name><argument_list>( <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>enc_alg</name> <operator>==</operator> <name>MBEDTLS_CIPHER_AES_128_CBC</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pem_aes_decrypt</name><argument_list>( <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><name>enc_alg</name> <operator>==</operator> <name>MBEDTLS_CIPHER_AES_192_CBC</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pem_aes_decrypt</name><argument_list>( <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if<condition>( <expr><name>enc_alg</name> <operator>==</operator> <name>MBEDTLS_CIPHER_AES_256_CBC</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pem_aes_decrypt</name><argument_list>( <argument><expr><name>pem_iv</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

        <comment type="block">/*
         * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3
         * length bytes (allow 4 to be sure) in all known use cases.
         *
         * Use that as heurisitic to try detecting password mismatchs.
         */</comment>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x30</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x83</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_PASSWORD_MISMATCH</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_MD5_C &amp;&amp; MBEDTLS_CIPHER_MODE_CBC &amp;&amp;
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_pem_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_pem_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>info</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_pem_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_PARSE_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PEM_WRITE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_pem_write_buffer</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>footer</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>der_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>der_len</name></decl></parameter>,
                      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encode_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>use_len</name></decl>, <decl><type ref="prev"/><name>add_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_base64_encode</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_len</name></expr></argument>, <argument><expr><name>der_data</name></expr></argument>, <argument><expr><name>der_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>add_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>footer</name></expr></argument> )</argument_list></call> <operator>+</operator> <operator>(</operator> <name>use_len</name> <operator>/</operator> <literal type="number">64</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>use_len</name> <operator>+</operator> <name>add_len</name> <operator>&gt;</operator> <name>buf_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>use_len</name> <operator>+</operator> <name>add_len</name></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>encode_buf</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PEM_ALLOC_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_base64_encode</name><argument_list>( <argument><expr><name>encode_buf</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_len</name></expr></argument>, <argument><expr><name>der_data</name></expr></argument>,
                               <argument><expr><name>der_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>encode_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>encode_buf</name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>use_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>use_len</name> <operator>&gt;</operator> <literal type="number">64</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><name>use_len</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>use_len</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>footer</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>footer</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>footer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>encode_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_WRITE_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */</comment>
</unit>
