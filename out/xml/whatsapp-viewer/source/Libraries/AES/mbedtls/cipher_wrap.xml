<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/cipher_wrap.c"><comment type="block" format="doxygen">/**
 * \file cipher_wrap.c
 *
 * \brief Generic cipher wrapper for mbed TLS
 *
 * \author Adriaan de Jong &lt;dejong@fox-it.com&gt;
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher_internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arc4.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"camellia.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"des.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blowfish.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gcm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ccm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>       <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* shared by all GCM ciphers */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>gcm_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_gcm_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_gcm_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gcm_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_gcm_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* shared by all CCM ciphers */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ccm_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_ccm_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ccm_init</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ccm_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ccm_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ccm_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aes_crypt_ecb_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aes_crypt_cbc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_aes_crypt_cbc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                          <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aes_crypt_cfb128_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>iv_off</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_aes_crypt_cfb128</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv_off</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,
                             <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>aes_crypt_ctr_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nc_off</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce_counter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stream_block</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_aes_crypt_ctr</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>nc_off</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>,
                          <argument><expr><name>stream_block</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aes_setkey_dec_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_aes_setkey_dec</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aes_setkey_enc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>aes_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>aes</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_aes_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>aes</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>( <argument><expr><name>aes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>aes</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aes_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_aes_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>aes_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_AES</name></expr>,
    <expr><name>aes_crypt_ecb_wrap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>aes_crypt_cbc_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>aes_crypt_cfb128_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>aes_crypt_ctr_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>aes_setkey_enc_wrap</name></expr>,
    <expr><name>aes_setkey_dec_wrap</name></expr>,
    <expr><name>aes_ctx_alloc</name></expr>,
    <expr><name>aes_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_128_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_128_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"AES-128-ECB"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_192_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_192_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"AES-192-ECB"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_256_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_256_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"AES-256-ECB"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_128_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"AES-128-CBC"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_192_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_192_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"AES-192-CBC"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_256_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"AES-256-CBC"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_128_cfb128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_128_CFB128</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"AES-128-CFB128"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_192_cfb128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_192_CFB128</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"AES-192-CFB128"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_256_cfb128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_256_CFB128</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"AES-256-CFB128"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_128_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_128_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"AES-128-CTR"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_192_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_192_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"AES-192-CTR"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_256_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_256_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"AES-256-CTR"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gcm_aes_setkey_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_gcm_setkey</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CIPHER_ID_AES</name></expr></argument>,
                     <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>gcm_aes_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_AES</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>gcm_aes_setkey_wrap</name></expr>,
    <expr><name>gcm_aes_setkey_wrap</name></expr>,
    <expr><name>gcm_ctx_alloc</name></expr>,
    <expr><name>gcm_ctx_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_128_gcm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>,
    <expr><name>MBEDTLS_MODE_GCM</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"AES-128-GCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>gcm_aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_192_gcm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_192_GCM</name></expr>,
    <expr><name>MBEDTLS_MODE_GCM</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"AES-192-GCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>gcm_aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_256_gcm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>,
    <expr><name>MBEDTLS_MODE_GCM</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"AES-256-GCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>gcm_aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ccm_aes_setkey_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_ccm_setkey</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ccm_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CIPHER_ID_AES</name></expr></argument>,
                     <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>ccm_aes_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_AES</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>ccm_aes_setkey_wrap</name></expr>,
    <expr><name>ccm_aes_setkey_wrap</name></expr>,
    <expr><name>ccm_ctx_alloc</name></expr>,
    <expr><name>ccm_ctx_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_128_ccm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>,
    <expr><name>MBEDTLS_MODE_CCM</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"AES-128-CCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>ccm_aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_192_ccm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_192_CCM</name></expr>,
    <expr><name>MBEDTLS_MODE_CCM</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"AES-192-CCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>ccm_aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>aes_256_ccm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>,
    <expr><name>MBEDTLS_MODE_CCM</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"AES-256-CCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>ccm_aes_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>camellia_crypt_ecb_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_camellia_crypt_ecb</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                               <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>camellia_crypt_cbc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_camellia_crypt_cbc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,
                               <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>camellia_crypt_cfb128_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>iv_off</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_camellia_crypt_cfb128</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                  <argument><expr><name>iv_off</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>camellia_crypt_ctr_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nc_off</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce_counter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stream_block</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_camellia_crypt_ctr</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>nc_off</name></expr></argument>,
                               <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>camellia_setkey_dec_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_camellia_setkey_dec</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>camellia_setkey_enc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_camellia_setkey_enc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>camellia_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_camellia_context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_camellia_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_camellia_init</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>camellia_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_camellia_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_camellia_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>camellia_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_CAMELLIA</name></expr>,
    <expr><name>camellia_crypt_ecb_wrap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>camellia_crypt_cbc_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>camellia_crypt_cfb128_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>camellia_crypt_ctr_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>camellia_setkey_enc_wrap</name></expr>,
    <expr><name>camellia_setkey_dec_wrap</name></expr>,
    <expr><name>camellia_ctx_alloc</name></expr>,
    <expr><name>camellia_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_128_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"CAMELLIA-128-ECB"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_192_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"CAMELLIA-192-ECB"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_256_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"CAMELLIA-256-ECB"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_128_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"CAMELLIA-128-CBC"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_192_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"CAMELLIA-192-CBC"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_256_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"CAMELLIA-256-CBC"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_128_cfb128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CFB128</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"CAMELLIA-128-CFB128"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_192_cfb128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CFB128</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"CAMELLIA-192-CFB128"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_256_cfb128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CFB128</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"CAMELLIA-256-CFB128"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_128_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"CAMELLIA-128-CTR"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_192_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"CAMELLIA-192-CTR"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_256_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"CAMELLIA-256-CTR"</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gcm_camellia_setkey_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_gcm_setkey</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_gcm_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CIPHER_ID_CAMELLIA</name></expr></argument>,
                     <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>gcm_camellia_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_CAMELLIA</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>gcm_camellia_setkey_wrap</name></expr>,
    <expr><name>gcm_camellia_setkey_wrap</name></expr>,
    <expr><name>gcm_ctx_alloc</name></expr>,
    <expr><name>gcm_ctx_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_128_gcm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>,
    <expr><name>MBEDTLS_MODE_GCM</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"CAMELLIA-128-GCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>gcm_camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_192_gcm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_GCM</name></expr>,
    <expr><name>MBEDTLS_MODE_GCM</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"CAMELLIA-192-GCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>gcm_camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_256_gcm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>,
    <expr><name>MBEDTLS_MODE_GCM</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"CAMELLIA-256-GCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>gcm_camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_GCM_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ccm_camellia_setkey_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                     <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_ccm_setkey</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_ccm_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_CIPHER_ID_CAMELLIA</name></expr></argument>,
                     <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>ccm_camellia_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_CAMELLIA</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>ccm_camellia_setkey_wrap</name></expr>,
    <expr><name>ccm_camellia_setkey_wrap</name></expr>,
    <expr><name>ccm_ctx_alloc</name></expr>,
    <expr><name>ccm_ctx_free</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_128_ccm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CCM</name></expr>,
    <expr><name>MBEDTLS_MODE_CCM</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"CAMELLIA-128-CCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>ccm_camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_192_ccm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CCM</name></expr>,
    <expr><name>MBEDTLS_MODE_CCM</name></expr>,
    <expr><literal type="number">192</literal></expr>,
    <expr><literal type="string">"CAMELLIA-192-CCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>ccm_camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>camellia_256_ccm_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CCM</name></expr>,
    <expr><name>MBEDTLS_MODE_CCM</name></expr>,
    <expr><literal type="number">256</literal></expr>,
    <expr><literal type="string">"CAMELLIA-256-CCM"</literal></expr>,
    <expr><literal type="number">12</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_IV_LEN</name></expr>,
    <expr><literal type="number">16</literal></expr>,
    <expr><operator>&amp;</operator><name>ccm_camellia_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CCM_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des_crypt_ecb_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>operation</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><call><name>mbedtls_des_crypt_ecb</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des3_crypt_ecb_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>operation</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><call><name>mbedtls_des3_crypt_ecb</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>des_crypt_cbc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_des_crypt_cbc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                          <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>des3_crypt_cbc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_des3_crypt_cbc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                           <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des_setkey_dec_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>mbedtls_des_setkey_dec</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des_setkey_enc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>mbedtls_des_setkey_enc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des3_set2key_dec_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>mbedtls_des3_set2key_dec</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des3_set2key_enc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>mbedtls_des3_set2key_enc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des3_set3key_dec_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>mbedtls_des3_set3key_dec</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>des3_set3key_enc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><call><name>mbedtls_des3_set3key_enc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>des_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_des_context</name> <modifier>*</modifier></type><name>des</name> <init>= <expr><call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_des_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>des</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_des_init</name><argument_list>( <argument><expr><name>des</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>des</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>des_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_des_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>des3_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_des3_context</name> <modifier>*</modifier></type><name>des3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>des3</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_des3_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>des3</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_des3_init</name><argument_list>( <argument><expr><name>des3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>des3</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>des3_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_des3_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_des3_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>des_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_DES</name></expr>,
    <expr><name>des_crypt_ecb_wrap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>des_crypt_cbc_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>des_setkey_enc_wrap</name></expr>,
    <expr><name>des_setkey_dec_wrap</name></expr>,
    <expr><name>des_ctx_alloc</name></expr>,
    <expr><name>des_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>des_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_DES_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><name>MBEDTLS_KEY_LENGTH_DES</name></expr>,
    <expr><literal type="string">"DES-ECB"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>des_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>des_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_DES_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><name>MBEDTLS_KEY_LENGTH_DES</name></expr>,
    <expr><literal type="string">"DES-CBC"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>des_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>des_ede_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_DES</name></expr>,
    <expr><name>des3_crypt_ecb_wrap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>des3_crypt_cbc_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>des3_set2key_enc_wrap</name></expr>,
    <expr><name>des3_set2key_dec_wrap</name></expr>,
    <expr><name>des3_ctx_alloc</name></expr>,
    <expr><name>des3_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>des_ede_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_DES_EDE_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><name>MBEDTLS_KEY_LENGTH_DES_EDE</name></expr>,
    <expr><literal type="string">"DES-EDE-ECB"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>des_ede_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>des_ede_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_DES_EDE_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><name>MBEDTLS_KEY_LENGTH_DES_EDE</name></expr>,
    <expr><literal type="string">"DES-EDE-CBC"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>des_ede_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>des_ede3_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_3DES</name></expr>,
    <expr><name>des3_crypt_ecb_wrap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>des3_crypt_cbc_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>des3_set3key_enc_wrap</name></expr>,
    <expr><name>des3_set3key_dec_wrap</name></expr>,
    <expr><name>des3_ctx_alloc</name></expr>,
    <expr><name>des3_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>des_ede3_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><name>MBEDTLS_KEY_LENGTH_DES_EDE3</name></expr>,
    <expr><literal type="string">"DES-EDE3-ECB"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>des_ede3_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>des_ede3_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><name>MBEDTLS_KEY_LENGTH_DES_EDE3</name></expr>,
    <expr><literal type="string">"DES-EDE3-CBC"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>des_ede3_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blowfish_crypt_ecb_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_blowfish_crypt_ecb</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_blowfish_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,
                               <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blowfish_crypt_cbc_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_blowfish_crypt_cbc</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_blowfish_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>,
                               <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blowfish_crypt_cfb64_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_operation_t</name></type> <name>operation</name></decl></parameter>,
        <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>iv_off</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_blowfish_crypt_cfb64</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_blowfish_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
                                 <argument><expr><name>iv_off</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blowfish_crypt_ctr_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nc_off</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce_counter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>stream_block</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_blowfish_crypt_ctr</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_blowfish_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>nc_off</name></expr></argument>,
                               <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blowfish_setkey_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>mbedtls_blowfish_setkey</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_blowfish_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>blowfish_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_blowfish_context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_blowfish_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_blowfish_init</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blowfish_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_blowfish_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_blowfish_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>blowfish_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_BLOWFISH</name></expr>,
    <expr><name>blowfish_crypt_ecb_wrap</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>blowfish_crypt_cbc_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>blowfish_crypt_cfb64_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>blowfish_crypt_ctr_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>blowfish_setkey_wrap</name></expr>,
    <expr><name>blowfish_setkey_wrap</name></expr>,
    <expr><name>blowfish_ctx_alloc</name></expr>,
    <expr><name>blowfish_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>blowfish_ecb_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_BLOWFISH_ECB</name></expr>,
    <expr><name>MBEDTLS_MODE_ECB</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"BLOWFISH-ECB"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_KEY_LEN</name></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>blowfish_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>blowfish_cbc_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_BLOWFISH_CBC</name></expr>,
    <expr><name>MBEDTLS_MODE_CBC</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"BLOWFISH-CBC"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_KEY_LEN</name></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>blowfish_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>blowfish_cfb64_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_BLOWFISH_CFB64</name></expr>,
    <expr><name>MBEDTLS_MODE_CFB</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"BLOWFISH-CFB64"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_KEY_LEN</name></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>blowfish_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>blowfish_ctr_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_BLOWFISH_CTR</name></expr>,
    <expr><name>MBEDTLS_MODE_CTR</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"BLOWFISH-CTR"</literal></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><name>MBEDTLS_CIPHER_VARIABLE_KEY_LEN</name></expr>,
    <expr><literal type="number">8</literal></expr>,
    <expr><operator>&amp;</operator><name>blowfish_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BLOWFISH_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>arc4_crypt_stream_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_arc4_crypt</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_arc4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>arc4_setkey_wrap</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                             <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/* we get key_bitlen in bits, arc4 expects it in bytes */</comment>
    <if_stmt><if>if<condition>( <expr><name>key_bitlen</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_arc4_setup</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_arc4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_bitlen</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>arc4_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_arc4_context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_arc4_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_arc4_init</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ctx</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>arc4_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_arc4_free</name><argument_list>( <argument><expr><operator>(</operator><name>mbedtls_arc4_context</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>arc4_base_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_ARC4</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>arc4_crypt_stream_wrap</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>arc4_setkey_wrap</name></expr>,
    <expr><name>arc4_setkey_wrap</name></expr>,
    <expr><name>arc4_ctx_alloc</name></expr>,
    <expr><name>arc4_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>arc4_128_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>,
    <expr><name>MBEDTLS_MODE_STREAM</name></expr>,
    <expr><literal type="number">128</literal></expr>,
    <expr><literal type="string">"ARC4-128"</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">1</literal></expr>,
    <expr><operator>&amp;</operator><name>arc4_base_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ARC4_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>null_crypt_stream</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>null_setkey</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key_bitlen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>key_bitlen</name><operator>)</operator></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>null_ctx_alloc</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>null_ctx_free</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ctx</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_base_t</name></type> <name>null_base_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_ID_NULL</name></expr>,
    <expr><name>NULL</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><name>null_crypt_stream</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>null_setkey</name></expr>,
    <expr><name>null_setkey</name></expr>,
    <expr><name>null_ctx_alloc</name></expr>,
    <expr><name>null_ctx_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>mbedtls_cipher_info_t</name></type> <name>null_cipher_info</name> <init>= <expr><block>{
    <expr><name>MBEDTLS_CIPHER_NULL</name></expr>,
    <expr><name>MBEDTLS_MODE_STREAM</name></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="string">"NULL"</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">1</literal></expr>,
    <expr><operator>&amp;</operator><name>null_base_info</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(MBEDTLS_CIPHER_NULL_CIPHER) */</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_definition_t</name></type> <name><name>mbedtls_cipher_definitions</name><index>[]</index></name> <init>=
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_128_ECB</name></expr>,          <expr><operator>&amp;</operator><name>aes_128_ecb_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_192_ECB</name></expr>,          <expr><operator>&amp;</operator><name>aes_192_ecb_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_256_ECB</name></expr>,          <expr><operator>&amp;</operator><name>aes_256_ecb_info</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_128_CBC</name></expr>,          <expr><operator>&amp;</operator><name>aes_128_cbc_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_192_CBC</name></expr>,          <expr><operator>&amp;</operator><name>aes_192_cbc_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_256_CBC</name></expr>,          <expr><operator>&amp;</operator><name>aes_256_cbc_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_128_CFB128</name></expr>,       <expr><operator>&amp;</operator><name>aes_128_cfb128_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_192_CFB128</name></expr>,       <expr><operator>&amp;</operator><name>aes_192_cfb128_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_256_CFB128</name></expr>,       <expr><operator>&amp;</operator><name>aes_256_cfb128_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_128_CTR</name></expr>,          <expr><operator>&amp;</operator><name>aes_128_ctr_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_192_CTR</name></expr>,          <expr><operator>&amp;</operator><name>aes_192_ctr_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_256_CTR</name></expr>,          <expr><operator>&amp;</operator><name>aes_256_ctr_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_128_GCM</name></expr>,          <expr><operator>&amp;</operator><name>aes_128_gcm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_192_GCM</name></expr>,          <expr><operator>&amp;</operator><name>aes_192_gcm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_256_GCM</name></expr>,          <expr><operator>&amp;</operator><name>aes_256_gcm_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_128_CCM</name></expr>,          <expr><operator>&amp;</operator><name>aes_128_ccm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_192_CCM</name></expr>,          <expr><operator>&amp;</operator><name>aes_192_ccm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_AES_256_CCM</name></expr>,          <expr><operator>&amp;</operator><name>aes_256_ccm_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_ARC4_128</name></expr>,             <expr><operator>&amp;</operator><name>arc4_128_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_BLOWFISH_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_BLOWFISH_ECB</name></expr>,         <expr><operator>&amp;</operator><name>blowfish_ecb_info</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_BLOWFISH_CBC</name></expr>,         <expr><operator>&amp;</operator><name>blowfish_cbc_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_BLOWFISH_CFB64</name></expr>,       <expr><operator>&amp;</operator><name>blowfish_cfb64_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_BLOWFISH_CTR</name></expr>,         <expr><operator>&amp;</operator><name>blowfish_ctr_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_BLOWFISH_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CAMELLIA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_ECB</name></expr>,     <expr><operator>&amp;</operator><name>camellia_128_ecb_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_ECB</name></expr>,     <expr><operator>&amp;</operator><name>camellia_192_ecb_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_ECB</name></expr>,     <expr><operator>&amp;</operator><name>camellia_256_ecb_info</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CBC</name></expr>,     <expr><operator>&amp;</operator><name>camellia_128_cbc_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CBC</name></expr>,     <expr><operator>&amp;</operator><name>camellia_192_cbc_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CBC</name></expr>,     <expr><operator>&amp;</operator><name>camellia_256_cbc_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CFB128</name></expr>,  <expr><operator>&amp;</operator><name>camellia_128_cfb128_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CFB128</name></expr>,  <expr><operator>&amp;</operator><name>camellia_192_cfb128_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CFB128</name></expr>,  <expr><operator>&amp;</operator><name>camellia_256_cfb128_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CTR</name></expr>,     <expr><operator>&amp;</operator><name>camellia_128_ctr_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CTR</name></expr>,     <expr><operator>&amp;</operator><name>camellia_192_ctr_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CTR</name></expr>,     <expr><operator>&amp;</operator><name>camellia_256_ctr_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_GCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_GCM</name></expr>,     <expr><operator>&amp;</operator><name>camellia_128_gcm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_GCM</name></expr>,     <expr><operator>&amp;</operator><name>camellia_192_gcm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_GCM</name></expr>,     <expr><operator>&amp;</operator><name>camellia_256_gcm_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CCM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_128_CCM</name></expr>,     <expr><operator>&amp;</operator><name>camellia_128_ccm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_192_CCM</name></expr>,     <expr><operator>&amp;</operator><name>camellia_192_ccm_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_CAMELLIA_256_CCM</name></expr>,     <expr><operator>&amp;</operator><name>camellia_256_ccm_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CAMELLIA_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_DES_ECB</name></expr>,              <expr><operator>&amp;</operator><name>des_ecb_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_DES_EDE_ECB</name></expr>,          <expr><operator>&amp;</operator><name>des_ede_ecb_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_DES_EDE3_ECB</name></expr>,         <expr><operator>&amp;</operator><name>des_ede3_ecb_info</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_DES_CBC</name></expr>,              <expr><operator>&amp;</operator><name>des_cbc_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_DES_EDE_CBC</name></expr>,          <expr><operator>&amp;</operator><name>des_ede_cbc_info</name></expr> }</block></expr>,
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_DES_EDE3_CBC</name></expr>,         <expr><operator>&amp;</operator><name>des_ede3_cbc_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_DES_C */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_NULL_CIPHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr><block>{ <expr><name>MBEDTLS_CIPHER_NULL</name></expr>,                 <expr><operator>&amp;</operator><name>null_cipher_info</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_NULL_CIPHER */</comment>

    <expr><block>{ <expr><name>MBEDTLS_CIPHER_NONE</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CIPHERS</name></cpp:macro> <cpp:value>sizeof mbedtls_cipher_definitions / sizeof mbedtls_cipher_definitions[0]</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>mbedtls_cipher_supported</name><index>[<expr><name>NUM_CIPHERS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_C */</comment>
</unit>
