<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/hmac_drbg.c"><comment type="block">/*
 *  HMAC_DRBG implementation (NIST SP 800-90)
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 *  The NIST SP 800-90A DRBGs are described in the following publication.
 *  http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf
 *  References below are based on rev. 1 (January 2012).
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HMAC_DRBG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hmac_drbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * HMAC_DRBG context initialization
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_hmac_drbg_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_hmac_drbg_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * HMAC_DRBG update, using optional additional data (10.1.2.2)
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_hmac_drbg_update</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>additional</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>md_len</name> <init>= <expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name><operator>.</operator><name>md_info</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>rounds</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>additional</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>add_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><name><name>sep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <comment type="block">/* Step 1 or 4 */</comment>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><name>md_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rounds</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name>K</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Step 2 or 5 */</comment>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>md_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><name>md_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_seed_buf</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type> <name>md_info</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Set initial working state.
     * Use the V memory location, which is currently all 0, to initialize the
     * MD context with an all-zero key. Then set V to its initial value.
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_reseed</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>additional</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>seed</name><index>[<expr><name>MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>seedlen</name></decl>;</decl_stmt>

    <comment type="block">/* III. Check input length */</comment>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;</operator> <name>MBEDTLS_HMAC_DRBG_MAX_INPUT</name> <operator>||</operator>
        <name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>seed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* IV. Gather entropy_len bytes of entropy for the seed */</comment>
    <if_stmt><if>if<condition>( <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>f_entropy</name></name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_entropy</name></name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>seedlen</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name></expr>;</expr_stmt>

    <comment type="block">/* 1. Concatenate entropy and additional data if any */</comment>
    <if_stmt><if>if<condition>( <expr><name>additional</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>seed</name> <operator>+</operator> <name>seedlen</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>seedlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 2. Update state */</comment>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>seedlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 3. Reset reseed_counter */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="block">/* 4. Done */</comment>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * HMAC_DRBG initialisation (10.1.2.3 + 9.1)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_seed</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type> <name>md_info</name></decl></parameter>,
                    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_entropy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_entropy</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>custom</name></decl></parameter>,
                    <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>entropy_len</name></decl>, <decl><type ref="prev"/><name>md_size</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>md_size</name> <operator>=</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name>md_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set initial working state.
     * Use the V memory location, which is currently all 0, to initialize the
     * MD context with an all-zero key. Then set V to its initial value.
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><name>md_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>md_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>f_entropy</name></name> <operator>=</operator> <name>f_entropy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_entropy</name></name> <operator>=</operator> <name>p_entropy</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_interval</name></name> <operator>=</operator> <name>MBEDTLS_HMAC_DRBG_RESEED_INTERVAL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * See SP800-57 5.6.1 (p. 65-66) for the security strength provided by
     * each hash function, then according to SP800-90A rev1 10.1 table 2,
     * min_entropy_len (in bits) is security_strength.
     *
     * (This also matches the sizes used in the NIST test vectors.)
     */</comment>
    <expr_stmt><expr><name>entropy_len</name> <operator>=</operator> <ternary><condition><expr><name>md_size</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <comment type="block">/* 160-bits hash -&gt; 128 bits */</comment>
                  <expr><ternary><condition><expr><name>md_size</name> <operator>&lt;=</operator> <literal type="number">28</literal></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <comment type="block">/* 224-bits hash -&gt; 192 bits */</comment>
                                  <expr><literal type="number">32</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>  <comment type="block">/* better (256+) -&gt; 256 bits */</comment>

    <comment type="block">/*
     * For initialisation, use more entropy to emulate a nonce
     * (Again, matches test vectors.)
     */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>=</operator> <name>entropy_len</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_hmac_drbg_reseed</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>=</operator> <name>entropy_len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set prediction resistance
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_hmac_drbg_set_prediction_resistance</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>resistance</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prediction_resistance</name></name> <operator>=</operator> <name>resistance</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set entropy length grabbed for reseeds
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_hmac_drbg_set_entropy_len</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>entropy_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set reseed interval
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_hmac_drbg_set_reseed_interval</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * HMAC_DRBG random function with optional additional data:
 * 10.1.2.5 (arabic) + 9.3 (Roman)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_random_with_add</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>additional</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mbedtls_hmac_drbg_context</name> <operator>*</operator><operator>)</operator> <name>p_rng</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>md_len</name> <init>= <expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name><operator>.</operator><name>md_info</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>out_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* II. Check request length */</comment>
    <if_stmt><if>if<condition>( <expr><name>out_len</name> <operator>&gt;</operator> <name>MBEDTLS_HMAC_DRBG_MAX_REQUEST</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* III. Check input length */</comment>
    <if_stmt><if>if<condition>( <expr><name>add_len</name> <operator>&gt;</operator> <name>MBEDTLS_HMAC_DRBG_MAX_INPUT</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* 1. (aka VII and IX) Check reseed counter and PR */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>f_entropy</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <comment type="block">/* For no-reseeding instances */</comment>
        <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>prediction_resistance</name></name> <operator>==</operator> <name>MBEDTLS_HMAC_DRBG_PR_ON</name> <operator>||</operator>
          <name><name>ctx</name><operator>-&gt;</operator><name>reseed_counter</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>reseed_interval</name></name> <operator>)</operator></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_hmac_drbg_reseed</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>add_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* VII.4 */</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 2. Use additional data if any */</comment>
    <if_stmt><if>if<condition>( <expr><name>additional</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>add_len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_hmac_drbg_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* 3, 4, 5. Generate bytes */</comment>
    <while>while<condition>( <expr><name>left</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name> <init>= <expr><ternary><condition><expr><name>left</name> <operator>&gt;</operator> <name>md_len</name></expr> ?</condition><then> <expr><name>md_len</name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>mbedtls_md_hmac_reset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><name>md_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>V</name></name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name> <operator>-=</operator> <name>use_len</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* 6. Update */</comment>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>additional</name></expr></argument>, <argument><expr><name>add_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 7. Update reseed counter */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reseed_counter</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* 8. Done */</comment>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * HMAC_DRBG random function
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_random</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mbedtls_hmac_drbg_context</name> <operator>*</operator><operator>)</operator> <name>p_rng</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_hmac_drbg_random_with_add</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_THREADING_MUTEX_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free an HMAC_DRBG context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_hmac_drbg_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_THREADING_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>mbedtls_mutex_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>md_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_hmac_drbg_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_write_seed_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[ <expr><name>MBEDTLS_HMAC_DRBG_MAX_INPUT</name></expr> ]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_hmac_drbg_random</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>fwrite</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR</name></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_update_seed_file</name><parameter_list>( <parameter><decl><type><name>mbedtls_hmac_drbg_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[ <expr><name>MBEDTLS_HMAC_DRBG_MAX_INPUT</name></expr> ]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>fseek</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ftell</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fseek</name><argument_list>( <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <name>MBEDTLS_HMAC_DRBG_MAX_INPUT</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>fread</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <call><name>mbedtls_hmac_drbg_write_seed_file</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_FS_IO */</comment>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Dummy checkup routine */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>verbose</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_LEN</name></cpp:macro>  <cpp:value>80</cpp:value></cpp:define>

<comment type="block">/* From a NIST PR=true test vector */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>entropy_pr</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x4f</literal></expr>,
    <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
    <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x42</literal></expr>,
    <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
    <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xe4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>result_pr</name><index>[<expr><name>OUTPUT_LEN</name></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
    <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
    <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
    <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x5e</literal></expr>,
    <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xab</literal></expr>,
    <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xf3</literal></expr>,
    <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* From a NIST PR=false test vector */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>entropy_nopr</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
    <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xc8</literal></expr>,
    <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xe3</literal></expr>,
    <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdf</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>result_nopr</name><index>[<expr><name>OUTPUT_LEN</name></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x7f</literal></expr>,
    <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xa6</literal></expr>,
    <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
    <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xec</literal></expr>,
    <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,
    <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x49</literal></expr>,
    <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xb7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* "Entropy" from buffer */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>test_offset</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hmac_drbg_self_test_entropy</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
                                        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>test_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>test_offset</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHK</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro>    <cpp:value>if( (c) != 0 )                          \
                    {                                       \
                        if( verbose != 0 )                  \
                            mbedtls_printf( "failed\n" );  \
                        return( 1 );                        \
                    }</cpp:value></cpp:define>

<comment type="block">/*
 * Checkup routine for HMAC_DRBG with SHA-1
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_hmac_drbg_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_hmac_drbg_context</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>OUTPUT_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name> <init>= <expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * PR = True
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  HMAC_DRBG (PR = True) : "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>test_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_seed</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>,
                         <argument><expr><name>hmac_drbg_self_test_entropy</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>entropy_pr</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_set_prediction_resistance</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_HMAC_DRBG_PR_ON</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>OUTPUT_LEN</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>OUTPUT_LEN</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result_pr</name></expr></argument>, <argument><expr><name>OUTPUT_LEN</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * PR = False
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  HMAC_DRBG (PR = False) : "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>test_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_seed</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>,
                         <argument><expr><name>hmac_drbg_self_test_entropy</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>entropy_nopr</name></expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_reseed</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>OUTPUT_LEN</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>mbedtls_hmac_drbg_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>OUTPUT_LEN</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHK</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result_nopr</name></expr></argument>, <argument><expr><name>OUTPUT_LEN</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HMAC_DRBG_C */</comment>
</unit>
