<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/platform.c"><comment type="block">/*
 *  Platform abstraction layer
 *
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_CALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>platform_calloc_uninit</name><parameter_list>( <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>size</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_CALLOC</name></cpp:macro>   <cpp:value>platform_calloc_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_CALLOC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>platform_free_uninit</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ptr</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_FREE</name></cpp:macro>     <cpp:value>platform_free_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_FREE */</comment>

<function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>mbedtls_calloc</name>)<parameter_list>( <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list> <init>= <expr><name>MBEDTLS_PLATFORM_STD_CALLOC</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mbedtls_free</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>     <init>= <expr><name>MBEDTLS_PLATFORM_STD_FREE</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_calloc_free</name><parameter_list>( <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>calloc_func</name>)<parameter_list>( <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list></function_decl></parameter>,
                              <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_func</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_calloc</name> <operator>=</operator> <name>calloc_func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mbedtls_free</name> <operator>=</operator> <name>free_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_MEMORY */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>mbedtls_platform_win32_snprintf</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>

    <comment type="block">/* Avoid calling the invalid parameter handler by checking ourselves */</comment>
    <if_stmt><if>if<condition>( <expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TRUNCATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_vsnprintf_s</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>_TRUNCATE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_vsnprintf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>ret</name> <operator>==</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>argp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_SNPRINTF_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_SNPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>platform_snprintf_uninit</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>format</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_SNPRINTF</name></cpp:macro>    <cpp:value>platform_snprintf_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_SNPRINTF */</comment>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_snprintf</name>)<parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>format</name></decl></parameter>,
                          <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>MBEDTLS_PLATFORM_STD_SNPRINTF</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_snprintf</name><parameter_list>( <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>snprintf_func</name>)<parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
                                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>format</name></decl></parameter>,
                                                 <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_snprintf</name> <operator>=</operator> <name>snprintf_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_SNPRINTF_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_PRINTF_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_PRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>platform_printf_uninit</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>format</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_PRINTF</name></cpp:macro>    <cpp:value>platform_printf_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_PRINTF */</comment>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_printf</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><name>MBEDTLS_PLATFORM_STD_PRINTF</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_printf</name><parameter_list>( <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>printf_func</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_printf</name> <operator>=</operator> <name>printf_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_PRINTF_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_FPRINTF_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_FPRINTF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>platform_fprintf_uninit</name><parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>stream</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>format</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_FPRINTF</name></cpp:macro>   <cpp:value>platform_fprintf_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_FPRINTF */</comment>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_fprintf</name>)<parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> <init>=
                                        <expr><name>MBEDTLS_PLATFORM_STD_FPRINTF</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_fprintf</name><parameter_list>( <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fprintf_func</name>)<parameter_list>( <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_fprintf</name> <operator>=</operator> <name>fprintf_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_FPRINTF_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_EXIT_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_EXIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>platform_exit_uninit</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>status</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_EXIT</name></cpp:macro>   <cpp:value>platform_exit_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_EXIT */</comment>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mbedtls_exit</name>)<parameter_list>( <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter> )</parameter_list> <init>= <expr><name>MBEDTLS_PLATFORM_STD_EXIT</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_exit</name><parameter_list>( <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>exit_func</name>)<parameter_list>( <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_exit</name> <operator>=</operator> <name>exit_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_EXIT_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_TIME_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>mbedtls_time_t</name></type> <name>platform_time_uninit</name><parameter_list>( <parameter><decl><type><name>mbedtls_time_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>timer</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_TIME</name></cpp:macro>   <cpp:value>platform_time_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_TIME */</comment>

<function_decl><type><name>mbedtls_time_t</name></type> (<modifier>*</modifier><name>mbedtls_time</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_time_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter> )</parameter_list> <init>= <expr><name>MBEDTLS_PLATFORM_STD_TIME</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_time</name><parameter_list>( <parameter><function_decl><type><name>mbedtls_time_t</name></type> (<modifier>*</modifier><name>time_func</name>)<parameter_list>( <parameter><decl><type><name>mbedtls_time_t</name><modifier>*</modifier></type> <name>timer</name></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_time</name> <operator>=</operator> <name>time_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_TIME_ALT */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ENTROPY_NV_SEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_NO_STD_FUNCTIONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_FS_IO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Default implementations for the platform independent seed functions use
 * standard libc file functions to read from and write to a pre-defined filename
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_platform_std_nv_seed_read</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>MBEDTLS_PLATFORM_STD_NV_SEED_FILE</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>n</name> <operator>=</operator> <call><name>fread</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>buf_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>n</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_platform_std_nv_seed_write</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>( <argument><expr><name>MBEDTLS_PLATFORM_STD_NV_SEED_FILE</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>n</name> <operator>=</operator> <call><name>fwrite</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr><name>file</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <name>buf_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>n</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_NO_STD_FUNCTIONS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_NV_SEED_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_NV_SEED_READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>platform_nv_seed_read_uninit</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf_len</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_NV_SEED_READ</name></cpp:macro>   <cpp:value>platform_nv_seed_read_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_NV_SEED_READ */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_STD_NV_SEED_WRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Make dummy function to prevent NULL pointer dereferences
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>platform_nv_seed_write_uninit</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf_len</name><operator>)</operator></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBEDTLS_PLATFORM_STD_NV_SEED_WRITE</name></cpp:macro>   <cpp:value>platform_nv_seed_write_uninit</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_PLATFORM_STD_NV_SEED_WRITE */</comment>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_nv_seed_read</name>)<parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list> <init>=
            <expr><name>MBEDTLS_PLATFORM_STD_NV_SEED_READ</name></expr></init>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mbedtls_nv_seed_write</name>)<parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list> <init>=
            <expr><name>MBEDTLS_PLATFORM_STD_NV_SEED_WRITE</name></expr></init>;</function_decl>

<function><type><name>int</name></type> <name>mbedtls_platform_set_nv_seed</name><parameter_list>(
        <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>nv_seed_read_func</name>)<parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list></function_decl></parameter>,
        <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>nv_seed_write_func</name>)<parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buf_len</name></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>mbedtls_nv_seed_read</name> <operator>=</operator> <name>nv_seed_read_func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mbedtls_nv_seed_write</name> <operator>=</operator> <name>nv_seed_write_func</name></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_NV_SEED_ALT */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ENTROPY_NV_SEED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
</unit>
