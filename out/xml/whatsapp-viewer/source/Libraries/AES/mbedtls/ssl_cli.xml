<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ssl_cli.c"><comment type="block">/*
 *  SSLv3/TLSv1 client-side functions
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_CLI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_calloc</name></cpp:macro>    <cpp:value>calloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_free</name></cpp:macro>      <cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform_time.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_hostname_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>hostname_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding server name extension: %s"</literal><operator>,</operator>
                   <name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>hostname_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>hostname_len</name> <operator>+</operator> <literal type="number">9</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * struct {
     *     NameType name_type;
     *     select (name_type) {
     *         case host_name: HostName;
     *     } name;
     * } ServerName;
     *
     * enum {
     *     host_name(0), (255)
     * } NameType;
     *
     * opaque HostName&lt;1..2^16-1&gt;;
     *
     * struct {
     *     ServerName server_name_list&lt;1..2^16-1&gt;
     * } ServerNameList;
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SERVERNAME</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SERVERNAME</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name>hostname_len</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name>hostname_len</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name>hostname_len</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name>hostname_len</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>hostname_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>hostname_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>hostname_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>hostname_len</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SERVER_NAME_INDICATION */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_renegotiation_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding renegotiation extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Secure renegotiation
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>own_verify_data</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

<comment type="block">/*
 * Only if we handle at least one key exchange that needs signatures.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_signature_algorithms_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                                <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sig_alg_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig_alg_list</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding signature_algorithms extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>md</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name></expr>;</init> <condition><expr><operator>*</operator><name>md</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</condition> <incr><expr><name>md</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name>sig_alg_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name>sig_alg_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <name>sig_alg_len</name> <operator>+</operator> <literal type="number">6</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Prepare signature_algorithms extension (TLS 1.2)
     */</comment>
    <expr_stmt><expr><name>sig_alg_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>md</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>sig_hashes</name></name></expr>;</init> <condition><expr><operator>*</operator><name>md</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</condition> <incr><expr><name>md</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>sig_alg_list</name><index>[<expr><name>sig_alg_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>mbedtls_ssl_hash_from_md_alg</name><argument_list>( <argument><expr><operator>*</operator><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sig_alg_list</name><index>[<expr><name>sig_alg_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_SIG_ECDSA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_RSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>sig_alg_list</name><index>[<expr><name>sig_alg_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>mbedtls_ssl_hash_from_md_alg</name><argument_list>( <argument><expr><operator>*</operator><name>md</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sig_alg_list</name><index>[<expr><name>sig_alg_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_SIG_RSA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>

    <comment type="block">/*
     * enum {
     *     none(0), md5(1), sha1(2), sha224(3), sha256(4), sha384(5),
     *     sha512(6), (255)
     * } HashAlgorithm;
     *
     * enum { anonymous(0), rsa(1), dsa(2), ecdsa(3), (255) }
     *   SignatureAlgorithm;
     *
     * struct {
     *     HashAlgorithm hash;
     *     SignatureAlgorithm signature;
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms&lt;2..2^16-2&gt;;
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SIG_ALG</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SIG_ALG</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <name>sig_alg_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <name>sig_alg_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>sig_alg_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>sig_alg_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <name>sig_alg_len</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 &amp;&amp;
          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_supported_elliptic_curves_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                                     <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                                     <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>elliptic_curve_list</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>elliptic_curve_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_curve_info</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group_id</name> <modifier>*</modifier></type><name>grp_id</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding supported_elliptic_curves extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>grp_id</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>grp_id</name> <operator>!=</operator> <name>MBEDTLS_ECP_DP_NONE</name></expr>;</condition> <incr><expr><name>grp_id</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mbedtls_ecp_curve_info_from_grp_id</name><argument_list>( <argument><expr><operator>*</operator><name>grp_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <for>for<control>( <init><expr><name>info</name> <operator>=</operator> <call><name>mbedtls_ecp_curve_list</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name><name>info</name><operator>-&gt;</operator><name>grp_id</name></name> <operator>!=</operator> <name>MBEDTLS_ECP_DP_NONE</name></expr>;</condition> <incr><expr><name>info</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if<condition>( <expr><name>info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"invalid curve in ssl configuration"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>elliptic_curve_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <name>elliptic_curve_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>elliptic_curve_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <for>for<control>( <init><expr><name>grp_id</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>curve_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>grp_id</name> <operator>!=</operator> <name>MBEDTLS_ECP_DP_NONE</name></expr>;</condition> <incr><expr><name>grp_id</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>mbedtls_ecp_curve_info_from_grp_id</name><argument_list>( <argument><expr><operator>*</operator><name>grp_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <for>for<control>( <init><expr><name>info</name> <operator>=</operator> <call><name>mbedtls_ecp_curve_list</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name><name>info</name><operator>-&gt;</operator><name>grp_id</name></name> <operator>!=</operator> <name>MBEDTLS_ECP_DP_NONE</name></expr>;</condition> <incr><expr><name>info</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>elliptic_curve_list</name><index>[<expr><name>elliptic_curve_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>tls_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>elliptic_curve_list</name><index>[<expr><name>elliptic_curve_len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>tls_id</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>elliptic_curve_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <name>elliptic_curve_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <name>elliptic_curve_len</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <name>elliptic_curve_len</name>     <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <name>elliptic_curve_len</name>     <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <name>elliptic_curve_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_supported_point_formats_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                                   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                                   <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding supported_point_formats extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_ECP_PF_UNCOMPRESSED</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || 
          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_ecjpake_kkpp_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                        <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                        <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>kkpp_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Skip costly extension if we can't use EC J-PAKE anyway */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ecjpake_check</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding ecjpake_kkpp extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/*
     * We may need to send ClientHello multiple times for Hello verification.
     * We don't want to compute fresh values every time (both for performance
     * and consistency reasons), so cache the extension content.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"generating new ecjpake parameters"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_write_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                        <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kkpp_len</name></expr></argument>,
                                        <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="string">"mbedtls_ecjpake_write_round_one"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kkpp_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"allocation failed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>kkpp_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache_len</name></name> <operator>=</operator> <name>kkpp_len</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"re-using cached ecjpake parameters"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>kkpp_len</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache_len</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&lt;</operator> <name>kkpp_len</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name></expr></argument>, <argument><expr><name>kkpp_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>kkpp_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>kkpp_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>kkpp_len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_max_fragment_length_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                               <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>mfl_code</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MAX_FRAG_LEN_NONE</name></expr> )</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding max_fragment_length extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>mfl_code</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_truncated_hmac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_DISABLED</name></expr> )</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding truncated_hmac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_encrypt_then_mac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ETM_DISABLED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding encrypt_then_mac "</literal>
                        <literal type="string">"extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_extended_ms_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>==</operator> <name>MBEDTLS_SSL_EXTENDED_MS_DISABLED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> )</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding extended_master_secret "</literal>
                        <literal type="string">"extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_session_ticket_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>tlen</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket_len</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>session_tickets</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SESSION_TICKETS_DISABLED</name></expr> )</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding session ticket extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <name>tlen</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SESSION_TICKET</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_SESSION_TICKET</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>tlen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>tlen</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tlen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"sending session ticket of length %d"</literal><operator>,</operator> <name>tlen</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>, <argument><expr><name>tlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>+=</operator> <name>tlen</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_write_alpn_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>alpnlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, adding alpn extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>alpnlen</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>cur</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if<condition>( <expr><name>end</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator> <name>end</name> <operator>-</operator> <name>p</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <name>alpnlen</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ALPN</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>MBEDTLS_TLS_EXT_ALPN</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/*
     * opaque ProtocolName&lt;1..2^8-1&gt;;
     *
     * struct {
     *     ProtocolName protocol_name_list&lt;2..2^16-1&gt;
     * } ProtocolNameList;
     */</comment>

    <comment type="block">/* Skip writing extension and list length for now */</comment>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>cur</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>cur</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>cur</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

    <comment type="block">/* List length = olen - 2 (ext_type) - 2 (ext_len) - 2 (list_len) */</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">6</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Extension length = olen - 2 (ext_type) - 2 (ext_len) */</comment>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator> <operator>*</operator><name>olen</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALPN */</comment>

<comment type="block">/*
 * Generate random bytes for ClientHello
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_generate_random</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>mbedtls_time_t</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * When responding to a verify request, MUST reuse random (RFC 6347 4.2.1)
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>t</name>       <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, current time: %lu"</literal><operator>,</operator> <name>t</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_HAVE_TIME */</comment>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_client_hello</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>olen</name></decl>, <decl><type ref="prev"/><name>ext_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>offer_compress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ciphersuites</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write client hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no RNG provided"</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_NO_RNG</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"configured max major version is invalid, "</literal>
                            <literal type="string">"consider using mbedtls_ssl_config_defaults()"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     *     0  .   0   handshake type
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, max version: [%d:%d]"</literal><operator>,</operator>
                   <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>,</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_generate_random</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_generate_random"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, random bytes"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

    <comment type="block">/*
     *    38  .  38   session id length
     *    39  . 39+n  session id
     *   39+n . 39+n  DTLS only: cookie length (1 byte)
     *   40+n .  ..   DTSL only: cookie
     *   ..   . ..    ciphersuitelist length (2 bytes)
     *   ..   . ..    ciphersuitelist
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">16</literal> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * RFC 5077 section 3.4: "When presenting a ticket, the client MAY
     * generate and include a Session ID in the TLS ClientHello."
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, session id len.: %d"</literal><operator>,</operator> <name>n</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>,   <argument><expr><literal type="string">"client hello, session id"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">39</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * DTLS cookie
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no verify cookie to send"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"client hello, cookie"</literal></expr></argument>,
                              <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name></expr></argument>,
                              <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Ciphersuite list
     */</comment>
    <expr_stmt><expr><name>ciphersuites</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Skip writing ciphersuite length for now */</comment>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>ciphersuite_info</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ciphersuite_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>||</operator>
            <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
            <operator>(</operator> <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MBEDTLS_CIPHERSUITE_NODTLS</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>arc4_disabled</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ARC4_DISABLED</name> <operator>&amp;&amp;</operator>
            <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>cipher</name></name> <operator>==</operator> <name>MBEDTLS_CIPHER_ARC4_128</name></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name> <operator>&amp;&amp;</operator>
            <call><name>mbedtls_ecjpake_check</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, add ciphersuite: %04x"</literal><operator>,</operator>
                                    <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>ciphersuites</name><index>[<expr><name>i</name></expr>]</index></name>      <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Add TLS_EMPTY_RENEGOTIATION_INFO_SCSV
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Some versions of OpenSSL don't handle it correctly if not at end */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_FALLBACK_SCSV</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>fallback</name></name> <operator>==</operator> <name>MBEDTLS_SSL_IS_FALLBACK</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"adding FALLBACK_SCSV"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>MBEDTLS_SSL_FALLBACK_SCSV_VALUE</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>MBEDTLS_SSL_FALLBACK_SCSV_VALUE</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, got %d ciphersuites"</literal><operator>,</operator> <name>n</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>offer_compress</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>offer_compress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * We don't support compression with DTLS right now: is many records come
     * in the same datagram, uncompressing one could overwrite the next one.
     * We don't want to add complexity for handling that case unless there is
     * an actual need for it.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>offer_compress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>offer_compress</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, compress len.: %d"</literal><operator>,</operator> <literal type="number">2</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, compress alg.: %d %d"</literal><operator>,</operator>
                            <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name><operator>,</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, compress len.: %d"</literal><operator>,</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, compress alg.: %d"</literal><operator>,</operator>
                            <name>MBEDTLS_SSL_COMPRESS_NULL</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// First write extensions, then the total length</comment>
    <comment type="line">//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SERVER_NAME_INDICATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_hostname_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_renegotiation_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_signature_algorithms_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_supported_elliptic_curves_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ssl_write_supported_point_formats_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_ecjpake_kkpp_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_max_fragment_length_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_truncated_hmac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_encrypt_then_mac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_extended_ms_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_alpn_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_write_session_ticket_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>ext_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ext_len</name> <operator>+=</operator> <name>olen</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* olen unused if all extensions are disabled */</comment>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>olen</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client hello, total extension length: %d"</literal><operator>,</operator>
                   <name>ext_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ext_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>ext_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>ext_len</name>      <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ext_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_CLIENT_HELLO</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_send_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write client hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_renegotiation_info</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/* Check verify-data in constant-time. The length OTOH is no secret */</comment>
        <if_stmt><if>if<condition>( <expr><name>len</name>    <operator>!=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator>
            <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator>     <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>||</operator>
            <call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                          <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>own_verify_data</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>mbedtls_ssl_safer_memcmp</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument>,
                          <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>peer_verify_data</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>verify_data_len</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"non-matching renegotiation info"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"non-zero length renegotiation info"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_max_fragment_length_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                              <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>mfl_code</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MAX_FRAG_LEN_NONE</name> <operator>||</operator>
        <name>len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
        <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>mfl_code</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_truncated_hmac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_DISABLED</name> <operator>||</operator>
        <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>trunc_hmac</name></name> <operator>=</operator> <name>MBEDTLS_SSL_TRUNC_HMAC_ENABLED</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_encrypt_then_mac_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>==</operator> <name>MBEDTLS_SSL_ETM_DISABLED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>||</operator>
        <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>encrypt_then_mac</name></name> <operator>=</operator> <name>MBEDTLS_SSL_ETM_ENABLED</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_extended_ms_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>==</operator> <name>MBEDTLS_SSL_EXTENDED_MS_DISABLED</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name> <operator>||</operator>
        <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>extended_ms</name></name> <operator>=</operator> <name>MBEDTLS_SSL_EXTENDED_MS_ENABLED</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_session_ticket_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>session_tickets</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SESSION_TICKETS_DISABLED</name> <operator>||</operator>
        <name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_supported_point_formats_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                                  <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>list_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>list_size</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>list_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>list_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_ECP_PF_UNCOMPRESSED</name> <operator>||</operator>
            <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_ECP_PF_COMPRESSED</name></expr> )</condition>
        <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>point_format</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>            
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name><operator>.</operator><name>point_format</name></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"point format selected: %d"</literal><operator>,</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>list_size</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"no point format in common"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || 
          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_ecjpake_kkpp</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>!=</operator>
        <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"skip ecjpake kkpp extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If we got here, we no longer need our cached extension */</comment>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_cache_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_read_round_one</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                                <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_read_round_one"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_alpn_ext</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>list_len</name></decl>, <decl><type ref="prev"/><name>name_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

    <comment type="block">/* If we didn't send it, the server shouldn't send it */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * opaque ProtocolName&lt;1..2^8-1&gt;;
     *
     * struct {
     *     ProtocolName protocol_name_list&lt;2..2^16-1&gt;
     * } ProtocolNameList;
     *
     * the "ProtocolNameList" MUST contain exactly one "ProtocolName"
     */</comment>

    <comment type="block">/* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */</comment>
    <if_stmt><if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>list_len</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>list_len</name> <operator>!=</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>name_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>name_len</name> <operator>!=</operator> <name>list_len</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Check that the server chosen protocol was in our list and save it */</comment>
    <for>for<control>( <init><expr><name>p</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>alpn_list</name></name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>name_len</name> <operator>==</operator> <call><name>strlen</name><argument_list>( <argument><expr><operator>*</operator><name>p</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>alpn_chosen</name></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALPN */</comment>

<comment type="block">/*
 * Parse HelloVerifyRequest.  Only called after verifying the HS type.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_hello_verify_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>major_ver</name></decl>, <decl><type ref="prev"/><name>minor_ver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cookie_len</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse hello verify request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * struct {
     *   ProtocolVersion server_version;
     *   opaque cookie&lt;0..2^8-1&gt;;
     * } HelloVerifyRequest;
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"server version"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ssl_read_version</name><argument_list>( <argument><expr><operator>&amp;</operator><name>major_ver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor_ver</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <comment type="block">/*
     * Since the RFC is not clear on this point, accept DTLS 1.0 (TLS 1.1)
     * even is lower than our min version.
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>major_ver</name> <argument_list type="generic">&lt; <argument><expr><name>MBEDTLS_SSL_MAJOR_VERSION_3</name> <operator>||</operator>
        <name><name>minor_ver</name> <argument_list type="generic">&lt; <argument><expr><name>MBEDTLS_SSL_MINOR_VERSION_2</name> <operator>||</operator>
        <name>major_ver</name></expr></argument> &gt;</argument_list></name> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name>  <operator>||</operator>
        <name>minor_ver</name></expr></argument> &gt;</argument_list></name> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr>  )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server version"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                     <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cookie_len</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"cookie"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cookie_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msglen</name></name> <operator>)</operator> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>cookie_len</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>,
            <argument><expr><operator>(</operator> <literal type="string">"cookie length does not match incoming message size"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                    <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cookie_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name>  <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"alloc failed (%d bytes)"</literal><operator>,</operator> <name>cookie_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cookie_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name> <operator>=</operator> <name>cookie_len</name></expr>;</expr_stmt>

    <comment type="block">/* Start over at ClientHello */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CLIENT_HELLO</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ssl_reset_checksum</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_recv_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse hello verify request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_server_hello</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ext_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>comp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>accept_comp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>renegotiation_info_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>handshake_failure</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>suite_info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse server hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_records_seen</name></name><operator>++</operator></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
                <name><name>ssl</name><operator>-&gt;</operator><name>renego_records_seen</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>renego_max_records</name></name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"renegotiation requested, "</literal>
                                    <literal type="string">"but not honored by server"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"non-handshake message during renego"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"received hello verify request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse server hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <call><name>ssl_parse_hello_verify_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/* We made it through the verification process */</comment>
            <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>verify_cookie_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_DTLS */</comment>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&lt;</operator> <literal type="number">38</literal> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>||</operator>
        <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_SERVER_HELLO</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     *  0   .  1    server_version
     *  2   . 33    random (maybe including 4 bytes of Unix time)
     * 34   . 34    session_id length = n
     * 35   . 34+n  session_id
     * 35+n . 36+n  cipher_suite
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */</comment>
    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"server hello, version"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_ssl_read_version</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&gt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server version out of bounds - "</literal>
                            <literal type="string">" min: [%d:%d], server: [%d:%d], max: [%d:%d]"</literal><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>min_minor_ver</name></name><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name><operator>,</operator>
                            <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>mbedtls_ssl_send_alert_message</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_ALERT_LEVEL_FATAL</name></expr></argument>,
                                     <argument><expr><name>MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator>
      <operator>|</operator> <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator>
      <operator>|</operator> <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
      <operator>|</operator> <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>       <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, current time: %lu"</literal><operator>,</operator> <name>t</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>,   <argument><expr><literal type="string">"server hello, random bytes"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <literal type="number">32</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&gt;</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">39</literal> <operator>+</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ext_len</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">38</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
                  <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">39</literal> <operator>+</operator> <name>n</name></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ext_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ext_len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>)</operator> <operator>||</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>!=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">40</literal> <operator>+</operator> <name>n</name> <operator>+</operator> <name>ext_len</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>==</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">38</literal> <operator>+</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ext_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* ciphersuite (used later) */</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><literal type="number">35</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">36</literal> <operator>+</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Read and check compression
     */</comment>
    <expr_stmt><expr><name>comp</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">37</literal> <operator>+</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/* See comments in ssl_write_client_hello() */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>accept_comp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>accept_comp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>comp</name> <operator>!=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator> <name>comp</name> <operator>!=</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name> <operator>||</operator> <name>accept_comp</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_ZLIB_SUPPORT */</comment>
    <if_stmt><if>if<condition>( <expr><name>comp</name> <operator>!=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif><comment type="block">/* MBEDTLS_ZLIB_SUPPORT */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, bad compression: %d"</literal><operator>,</operator> <name>comp</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Initialize update checksum functions
     */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ciphersuite info for %04x not found"</literal><operator>,</operator> <name>i</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ssl_optimize_checksum</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, session id len.: %d"</literal><operator>,</operator> <name>n</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>,   <argument><expr><literal type="string">"server hello, session id"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Check if the session can be resumed
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_INITIAL_HANDSHAKE</name> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name> <operator>!=</operator> <name>i</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <name>comp</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>!=</operator> <name>n</name> <operator>||</operator>
        <call><name>memcmp</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>mbedtls_time</name><argument_list>( <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_derive_keys</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_derive_keys"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"%s session has been resumed"</literal><operator>,</operator>
                   <ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>resume</name></name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, chosen ciphersuite: %04x"</literal><operator>,</operator> <name>i</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, compress alg.: %d"</literal><operator>,</operator> <name><name>buf</name><index>[<expr><literal type="number">37</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>suite_info</name> <operator>=</operator> <call><name>mbedtls_ssl_ciphersuite_from_id</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>suite_info</name> <operator>==</operator> <name>NULL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ARC4_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <operator>||</operator> <operator>(</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>arc4_disabled</name></name> <operator>&amp;&amp;</operator>
                <name><name>suite_info</name><operator>-&gt;</operator><name>cipher</name></name> <operator>==</operator> <name>MBEDTLS_CIPHER_ARC4_128</name> <operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, chosen ciphersuite: %s"</literal><operator>,</operator> <name><name>suite_info</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>ciphersuite_list</name><index>[<expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name></expr>]</index><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>==</operator>
            <name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ciphersuite</name></name></expr> )</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>comp</name> <operator>!=</operator> <name>MBEDTLS_SSL_COMPRESS_NULL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ZLIB_SUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <operator>&amp;&amp;</operator> <name>comp</name> <operator>!=</operator> <name>MBEDTLS_SSL_COMPRESS_DEFLATE</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ext</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">40</literal> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server hello, total extension length: %d"</literal><operator>,</operator> <name>ext_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>ext_len</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ext_id</name>   <init>= <expr><operator>(</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
                                <operator>|</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ext_size</name> <init>= <expr><operator>(</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
                                <operator>|</operator> <operator>(</operator> <name><name>ext</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><name>ext_size</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>ext_len</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <switch>switch<condition>( <expr><name>ext_id</name></expr> )</condition>
        <block>{<block_content>
        <case>case <expr><name>MBEDTLS_TLS_EXT_RENEGOTIATION_INFO</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found renegotiation extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name>renegotiation_info_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_renegotiation_info</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>,
                                                      <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_MAX_FRAGMENT_LENGTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found max_fragment_length extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_max_fragment_length_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_TRUNCATED_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_TRUNCATED_HMAC</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found truncated_hmac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_truncated_hmac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_TRUNCATED_HMAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ENCRYPT_THEN_MAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found encrypt_then_mac extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_encrypt_then_mac_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ENCRYPT_THEN_MAC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_EXTENDED_MASTER_SECRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found extended_master_secret extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_extended_ms_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_SESSION_TICKET</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found session_ticket extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_session_ticket_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDH_C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found supported_point_formats extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_supported_point_formats_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||
          MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_ECJPAKE_KKPP</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found ecjpake_kkpp extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_ecjpake_kkpp</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                            <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <case>case <expr><name>MBEDTLS_TLS_EXT_ALPN</name></expr>:</case>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"found alpn extension"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_parse_alpn_ext</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>ext</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>ext_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_ALPN */</comment>

        <default>default:</default>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"unknown extension found: %d (ignoring)"</literal><operator>,</operator>
                           <name>ext_id</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>ext_len</name> <operator>-=</operator> <literal type="number">4</literal> <operator>+</operator> <name>ext_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ext</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>ext_size</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>ext_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ext_len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="block">/*
     * Renegotiation security checks
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"legacy renegotiation, breaking off handshake"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SECURE_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
             <name>renegotiation_info_seen</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"renegotiation_info extension missing (secure)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>allow_legacy_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"legacy renegotiation not allowed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>renego_status</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
             <name><name>ssl</name><operator>-&gt;</operator><name>secure_renegotiation</name></name> <operator>==</operator> <name>MBEDTLS_SSL_LEGACY_RENEGOTIATION</name> <operator>&amp;&amp;</operator>
             <name>renegotiation_info_seen</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"renegotiation_info extension present (legacy)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handshake_failure</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_RENEGOTIATION */</comment>

    <if_stmt><if>if<condition>( <expr><name>handshake_failure</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_send_fatal_handshake_failure</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse server hello"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_server_dh_params</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Ephemeral DH parameters:
     *
     * struct {
     *     opaque dh_p&lt;1..2^16-1&gt;;
     *     opaque dh_g&lt;1..2^16-1&gt;;
     *     opaque dh_Ys&lt;1..2^16-1&gt;;
     * } ServerDHParams;
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_read_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_dhm_read_params"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>len</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>dhm_min_bitlen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"DHM prime too short: %d &lt; %d"</literal><operator>,</operator>
                                    <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>len</name></name> <operator>*</operator> <literal type="number">8</literal><operator>,</operator>
                                    <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>dhm_min_bitlen</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: P "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>P</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: G "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>G</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: GY"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>GY</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                      \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_check_server_ecdh_params</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_curve_info</name> <modifier>*</modifier></type><name>curve_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>curve_info</name> <operator>=</operator> <call><name>mbedtls_ecp_curve_info_from_grp_id</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>grp</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>curve_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ECDH curve: %s"</literal><operator>,</operator> <name><name>curve_info</name><operator>-&gt;</operator><name>name</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECP_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_check_curve</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>grp</name><operator>.</operator><name>id</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>grp</name><operator>.</operator><name>nbits</name></name> <operator>&lt;</operator> <literal type="number">163</literal> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>grp</name><operator>.</operator><name>nbits</name></name> <operator>&gt;</operator> <literal type="number">521</literal></expr> )</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return<expr><operator>(</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_ECP</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: Qp"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>Qp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_server_ecdh_params</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                         <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Ephemeral ECDH parameters:
     *
     * struct {
     *     ECParameters curve_params;
     *     ECPoint      public;
     * } ServerECDHParams;
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_read_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                  <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ecdh_read_params"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>ssl_check_server_ecdh_params</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message (ECDHE curve)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_server_psk_hint</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                      <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>len</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/*
     * PSK parameters:
     *
     * opaque psk_identity_hint&lt;0..2^16-1&gt;;
     */</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message (psk_identity_hint length)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Note: we currently ignore the PKS identity hint, as we only allow one
     * PSK to be provisionned on the client. This could be changed later if
     * someone needs that feature.
     */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                           \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_encrypted_pms</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>,
                                    <parameter><decl><type><name>size_t</name></type> <name>pms_offset</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len_bytes</name> <init>= <expr><ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_0</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name> <operator>+</operator> <name>pms_offset</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>offset</name> <operator>+</operator> <name>len_bytes</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"buffer too small for encrypted pms"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Generate (part of) the pre-master as
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */</comment>
    <expr_stmt><expr><call><name>mbedtls_ssl_write_version</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_major_ver</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>max_minor_ver</name></name></expr></argument>,
                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"f_rng"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate required"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Now write it out, encrypted
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                <argument><expr><name>MBEDTLS_PK_RSA</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate key type mismatch"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_encrypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                            <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>len_bytes</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>,
                            <argument><expr><name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>-</operator> <name>offset</name> <operator>-</operator> <name>len_bytes</name></expr></argument>,
                            <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_rsa_pkcs1_encrypt"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>len_bytes</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>*</operator><name>olen</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <operator>*</operator><name>olen</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>olen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_signature_algorithm</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,
                                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,
                                          <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,
                                          <parameter><decl><type><name>mbedtls_md_type_t</name> <modifier>*</modifier></type><name>md_alg</name></decl></parameter>,
                                          <parameter><decl><type><name>mbedtls_pk_type_t</name> <modifier>*</modifier></type><name>pk_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ssl</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pk_alg</name> <operator>=</operator> <name>MBEDTLS_PK_NONE</name></expr>;</expr_stmt>

    <comment type="block">/* Only in TLS 1.2 */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Get hash algorithm
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><name>md_alg</name> <operator>=</operator> <call><name>mbedtls_ssl_md_alg_from_hash</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Server used unsupported "</literal>
                            <literal type="string">"HashAlgorithm %d"</literal><operator>,</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Get signature algorithm
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>*</operator><name>pk_alg</name> <operator>=</operator> <call><name>mbedtls_ssl_pk_alg_from_sig</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>MBEDTLS_PK_NONE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server used unsupported "</literal>
                            <literal type="string">"SignatureAlgorithm %d"</literal><operator>,</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Check if the hash is acceptable
     */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_check_sig_hash</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>*</operator><name>md_alg</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server used HashAlgorithm "</literal>
                                    <literal type="string">"that was not offered"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Server used SignatureAlgorithm %d"</literal><operator>,</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Server used HashAlgorithm %d"</literal><operator>,</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_get_ecdh_params_from_cert</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ecp_keypair</name> <modifier>*</modifier></type><name>peer_key</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate required"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                     <argument><expr><name>MBEDTLS_PK_ECKEY</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"server key not ECDH capable"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>peer_key</name> <operator>=</operator> <call><name>mbedtls_pk_ec</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_get_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>, <argument><expr><name>peer_key</name></expr></argument>,
                                 <argument><expr><name>MBEDTLS_ECDH_THEIRS</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"mbedtls_ecdh_get_params"</literal> <operator>)</operator></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>ssl_check_server_ecdh_params</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server certificate (ECDH curve)"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_server_key_exchange</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>end</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_get_ecdh_params_from_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"ssl_get_ecdh_params_from_cert"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>end</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
            <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name>   <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>,   <argument><expr><literal type="string">"server key exchange"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>ssl_parse_server_psk_hint</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt> <comment type="block">/* FALLTROUGH */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition><block type="pseudo"><block_content>
        <empty_stmt>;</empty_stmt></block_content></block></if> <comment type="block">/* nothing more to do */</comment>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>ssl_parse_server_dh_params</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>ssl_parse_server_ecdh_params</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_read_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                                              <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_read_round_two"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                       \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>sig_len</name></decl>, <decl><type ref="prev"/><name>hashlen</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name> <init>= <expr><name>MBEDTLS_MD_NONE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>mbedtls_pk_type_t</name></type> <name>pk_alg</name> <init>= <expr><name>MBEDTLS_PK_NONE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>params_len</name> <init>= <expr><name>p</name> <operator>-</operator> <name>params</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * Handle the digitally-signed structure
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>ssl_parse_signature_algorithm</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                                               <argument><expr><operator>&amp;</operator><name>md_alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pk_alg</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>!=</operator> <call><name>mbedtls_ssl_get_ciphersuite_sig_pk_alg</name><argument_list>( <argument><expr><name>ciphersuite_info</name></expr></argument> )</argument_list></call></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>&lt;</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>pk_alg</name> <operator>=</operator> <call><name>mbedtls_ssl_get_ciphersuite_sig_pk_alg</name><argument_list>( <argument><expr><name>ciphersuite_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Default hash for ECDSA is SHA-1 */</comment>
            <if_stmt><if>if<condition>( <expr><name>pk_alg</name> <operator>==</operator> <name>MBEDTLS_PK_ECDSA</name> <operator>&amp;&amp;</operator> <name>md_alg</name> <operator>==</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         * Read signature
         */</comment>
        <expr_stmt><expr><name>sig_len</name> <operator>=</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>end</name> <operator>!=</operator> <name>p</name> <operator>+</operator> <name>sig_len</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"signature"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Compute the hash that has been signed
         */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name>md_alg</name> <operator>==</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>mbedtls_md5_context</name></type> <name>mbedtls_md5</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>mbedtls_sha1_context</name></type> <name>mbedtls_sha1</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>mbedtls_md5_init</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>

            <comment type="block">/*
             * digitally-signed struct {
             *     opaque md5_hash[16];
             *     opaque sha_hash[20];
             * };
             *
             * md5_hash
             *     MD5(ClientHello.random + ServerHello.random
             *                            + ServerParams);
             * sha_hash
             *     SHA(ClientHello.random + ServerHello.random
             *                            + ServerParams);
             */</comment>
            <expr_stmt><expr><call><name>mbedtls_md5_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md5_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>params_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md5_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_sha1_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>params_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument>, <argument><expr><name>hash</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_md5_free</name><argument_list>(  <argument><expr><operator>&amp;</operator><name>mbedtls_md5</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_sha1_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>mbedtls_sha1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name>md_alg</name> <operator>!=</operator> <name>MBEDTLS_MD_NONE</name></expr> )</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Info from md_alg will be used instead */</comment>
            <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <comment type="block">/*
             * digitally-signed struct {
             *     opaque client_random[32];
             *     opaque server_random[32];
             *     ServerDHParams params;
             * };
             */</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>,
                                     <argument><expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_md_setup"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>mbedtls_md_starts</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>randbytes</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_update</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>params_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_finish</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_BUF</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"parameters hash"</literal></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><ternary><condition><expr><name>hashlen</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>hashlen</name></expr> </then><else>:
            <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>(</operator> <call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>)</operator></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"certificate required"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Verify signature
         */</comment>
        <if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>, <argument><expr><name>pk_alg</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server key exchange message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_verify</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>peer_cert</name><operator>-&gt;</operator><name>pk</name></name></expr></argument>,
                               <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_pk_verify"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

<label><name>exit</name>:</label>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse server key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call>       <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call>   <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_certificate_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_certificate_request</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cert_type_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dn_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip parse certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate request message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_auth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE_REQUEST</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_auth</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got %s certificate request"</literal><operator>,</operator>
                        <ternary><condition><expr><name><name>ssl</name><operator>-&gt;</operator><name>client_auth</name></name></expr> ?</condition><then> <expr><literal type="string">"a"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>client_auth</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/*
     *  struct {
     *      ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
     *      SignatureAndHashAlgorithm
     *        supported_signature_algorithms&lt;2^16-1&gt;; -- TLS 1.2 only
     *      DistinguishedName certificate_authorities&lt;0..2^16-1&gt;;
     *  } CertificateRequest;
     *
     *  Since we only support a single certificate on clients, let's just
     *  ignore all the information that's supposed to help us pick a
     *  certificate.
     *
     *  We could check that our certificate matches the request, and bail out
     *  if it doesn't, but it's simpler to just send the certificate anyway,
     *  and give the server the opportunity to decide if it should terminate
     *  the connection when it doesn't like our certificate.
     *
     *  Same goes for the hash in TLS 1.2's signature_algorithms: at this
     *  point we only have one hash available (see comments in
     *  write_certificate_verify), so let's just use what we have.
     *
     *  However, we still minimally parse the message to check it is at least
     *  superficially sane.
     */</comment>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name></expr>;</expr_stmt>

    <comment type="block">/* certificate_types */</comment>
    <expr_stmt><expr><name>cert_type_len</name> <operator>=</operator> <name><name>buf</name><index>[<expr><call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>cert_type_len</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&lt;</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate request message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* supported_signature_algorithms */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>sig_alg_len</name> <init>= <expr><operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
                             <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEBUG_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig_alg</name> <init>= <expr><name>buf</name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sig_alg_len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"Supported Signature Algorithm found: %d,%d"</literal><operator>,</operator> <name><name>sig_alg</name><index>[<expr><name>i</name></expr>]</index></name><operator>,</operator> <name><name>sig_alg</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>  <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>sig_alg_len</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&lt;</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate request message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>

    <comment type="block">/* certificate_authorities */</comment>
    <expr_stmt><expr><name>dn_len</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator>
             <operator>|</operator> <operator>(</operator> <name><name>buf</name><index>[<expr><call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index></name>       <operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>dn_len</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>!=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>n</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad certificate request message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse certificate request"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_server_hello_done</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse server hello done"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello done message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>record_read</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name>  <operator>!=</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_SERVER_HELLO_DONE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad server hello done message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_ssl_recv_flight_completed</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse server hello done"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_client_key_exchange</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_RSA</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * DHM key exchange -- send G^X mod P
         */</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name>      <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_make_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>,
                                <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mbedtls_mpi_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>P</name></name></expr></argument> )</argument_list></call></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_make_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: X "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>X</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: GX"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>GX</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_calc_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>,
                                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>,
                                      <argument><expr><name>MBEDTLS_PREMASTER_SIZE</name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_calc_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"DHM: K "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>K</name></name></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                     \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                   \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>||</operator>                      \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * ECDH key exchange -- send client public value
         */</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_make_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>,
                                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_make_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_ECP</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: Q"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>Q</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_calc_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>,
                                      <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_MPI_MAX_SIZE</name></expr></argument>,
                                       <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_calc_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MPI</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>z</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * opaque psk_identity&lt;0..2^16-1&gt;;
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no private key for PSK"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"psk identity too long or "</literal>
                                        <literal type="string">"SSL buffer too short"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name>      <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>psk_identity_len</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_write_encrypted_pms</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * ClientDiffieHellmanPublic public (DHM send G^X mod P)
             */</comment>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name> <operator>&gt;</operator> <name>MBEDTLS_SSL_MAX_CONTENT_LEN</name></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"psk identity or DHM size too long"</literal>
                                            <literal type="string">" or SSL buffer too short"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name>      <operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_dhm_make_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name></name></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mbedtls_mpi_size</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>dhm_ctx</name><operator>.</operator><name>P</name></name></expr></argument> )</argument_list></call></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_dhm_make_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
        if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name></expr> )</condition>
        <block>{<block_content>
            <comment type="block">/*
             * ClientECDiffieHellmanPublic public;
             */</comment>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdh_make_public</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>-</operator> <name>i</name></expr></argument>,
                    <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecdh_make_public"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_ECP</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ECDH: Q"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecdh_ctx</name><operator>.</operator><name>Q</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_psk_derive_premaster</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>,
                        <argument><expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_psk_derive_premaster"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>ssl_write_encrypted_pms</name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_write_round_two</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>MBEDTLS_SSL_MAX_CONTENT_LEN</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_write_round_two"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecjpake_derive_secret</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>ecjpake_ctx</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>premaster</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>pmslen</name></name></expr></argument>,
                <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ecjpake_derive_secret"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */</comment>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>void</name><operator>)</operator> <name>ciphersuite_info</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <name>i</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write client key exchange"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_RSA_ENABLED</name></expr></argument>)</argument_list></call>       <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED</name></expr></argument>)</argument_list></call>   <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_certificate_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_derive_keys</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_derive_keys"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_write_certificate_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_ssl_ciphersuite_t</name> <modifier>*</modifier></type><name>ciphersuite_info</name> <init>= <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash_start</name> <init>= <expr><name>hash</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name> <init>= <expr><name>MBEDTLS_MD_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hashlen</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; write certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_derive_keys</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_derive_keys"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_RSA_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECDHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_DHE_PSK</name> <operator>||</operator>
        <name><name>ciphersuite_info</name><operator>-&gt;</operator><name>key_exchange</name></name> <operator>==</operator> <name>MBEDTLS_KEY_EXCHANGE_ECJPAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>client_auth</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>mbedtls_ssl_own_cert</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= skip write certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"got no private key for certificate"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Make an RSA signature of the handshake digests
     */</comment>
    <expr_stmt><expr><call><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>calc_verify</name></name><argument_list>( <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>hash</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_SSL3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1</name></expr></argument>)</argument_list></call> <operator>||</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * digitally-signed struct {
         *     opaque md5_hash[16];
         *     opaque sha_hash[20];
         * };
         *
         * md5_hash
         *     MD5(handshake_messages);
         *
         * sha_hash
         *     SHA(handshake_messages);
         */</comment>
        <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_NONE</name></expr>;</expr_stmt>

        <comment type="block">/*
         * For ECDSA, default hash is SHA-1 only
         */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_pk_can_do</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>MBEDTLS_PK_ECDSA</name></expr></argument> )</argument_list></call></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>hash_start</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>hashlen</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_TLS1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
    if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>minor_ver</name></name> <operator>==</operator> <name>MBEDTLS_SSL_MINOR_VERSION_3</name></expr> )</condition>
    <block>{<block_content>
        <comment type="block">/*
         * digitally-signed struct {
         *     opaque handshake_messages[handshake_messages_length];
         * };
         *
         * Taking shortcut here. We assume that the server always allows the
         * PRF Hash function and has sent it in the allowed signature
         * algorithms list received in the Certificate Request message.
         *
         * Until we encounter a server that does not, we will take this
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>transform_negotiate</name><operator>-&gt;</operator><name>ciphersuite_info</name><operator>-&gt;</operator><name>mac</name></name> <operator>==</operator>
            <name>MBEDTLS_MD_SHA384</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA384</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_HASH_SHA384</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>md_alg</name> <operator>=</operator> <name>MBEDTLS_MD_SHA256</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>MBEDTLS_SSL_HASH_SHA256</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>mbedtls_ssl_sig_from_pk</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Info from md_alg will be used instead */</comment>
        <expr_stmt><expr><name>hashlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_PROTO_TLS1_2 */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"should never happen"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_INTERNAL_ERROR</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pk_sign</name><argument_list>( <argument><expr><call><name>mbedtls_ssl_own_key</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash_start</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>,
                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name></name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                         <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>f_rng</name></name></expr></argument>, <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>p_rng</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_pk_sign"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>n</name>      <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msglen</name></name>  <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <name>n</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msgtype</name></name> <operator>=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>out_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>  <operator>=</operator> <name>MBEDTLS_SSL_HS_CERTIFICATE_VERIFY</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_write_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= write certificate verify"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &amp;&amp;
          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_parse_new_session_ticket</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lifetime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>ticket_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ticket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"=&gt; parse new session ticket"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_read_record</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_RET</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mbedtls_ssl_read_record"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msgtype</name></name> <operator>!=</operator> <name>MBEDTLS_SSL_MSG_HANDSHAKE</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad new session ticket message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * struct {
     *     uint32 ticket_lifetime_hint;
     *     opaque ticket&lt;0..2^16-1&gt;;
     * } NewSessionTicket;
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>MBEDTLS_SSL_HS_NEW_SESSION_TICKET</name> <operator>||</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad new session ticket message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_msg</name></name> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lifetime</name> <operator>=</operator> <operator>(</operator> <name><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator>
               <operator>(</operator> <name><name>msg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>msg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>       <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>ticket_len</name> <operator>=</operator> <operator>(</operator> <name><name>msg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name><name>msg</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>ticket_len</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <call><name>mbedtls_ssl_hs_hdr_len</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>ssl</name><operator>-&gt;</operator><name>in_hslen</name></name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"bad new session ticket message"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket length: %d"</literal><operator>,</operator> <name>ticket_len</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We're not waiting for a NewSessionTicket message any more */</comment>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */</comment>
    <if_stmt><if>if<condition>( <expr><name>ticket_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument>,
                      <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_free</name><argument_list>( <argument><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ticket</name> <operator>=</operator> <call><name>mbedtls_calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ticket_len</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket alloc failed"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_ALLOC_FAILED</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ticket</name></expr></argument>, <argument><expr><name>msg</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>ticket_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket</name></name> <operator>=</operator> <name>ticket</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket_len</name></name> <operator>=</operator> <name>ticket_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>ticket_lifetime</name></name> <operator>=</operator> <name>lifetime</name></expr>;</expr_stmt>

    <comment type="block">/*
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"ticket in use, discarding session id"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>session_negotiate</name><operator>-&gt;</operator><name>id_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"&lt;= parse new session ticket"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_SESSION_TICKETS */</comment>

<comment type="block">/*
 * SSL handshake -- client side -- single step
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ssl_handshake_client_step</name><parameter_list>( <parameter><decl><type><name>mbedtls_ssl_context</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_HANDSHAKE_OVER</name> <operator>||</operator> <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"client state: %d"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_flush_output</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_PROTO_DTLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>conf</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>MBEDTLS_SSL_TRANSPORT_DATAGRAM</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>retransmit_state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_RETRANS_SENDING</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_resend</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name> <operator>&amp;&amp;</operator>
        <name><name>ssl</name><operator>-&gt;</operator><name>handshake</name><operator>-&gt;</operator><name>new_session_ticket</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch<condition>( <expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><name>MBEDTLS_SSL_HELLO_REQUEST</name></expr>:</case>
            <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_CLIENT_HELLO</name></expr>;</expr_stmt>
            <break>break;</break>

       <comment type="block">/*
        *  ==&gt;   ClientHello
        */</comment>
       <case>case <expr><name>MBEDTLS_SSL_CLIENT_HELLO</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_client_hello</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <comment type="block">/*
        *  &lt;==   ServerHello
        *        Certificate
        *      ( ServerKeyExchange  )
        *      ( CertificateRequest )
        *        ServerHelloDone
        */</comment>
       <case>case <expr><name>MBEDTLS_SSL_SERVER_HELLO</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_server_hello</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_SERVER_CERTIFICATE</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_parse_certificate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_SERVER_KEY_EXCHANGE</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_server_key_exchange</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_CERTIFICATE_REQUEST</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_certificate_request</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_SERVER_HELLO_DONE</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_server_hello_done</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <comment type="block">/*
        *  ==&gt; ( Certificate/Alert  )
        *        ClientKeyExchange
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */</comment>
       <case>case <expr><name>MBEDTLS_SSL_CLIENT_CERTIFICATE</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_certificate</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_CLIENT_KEY_EXCHANGE</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_client_key_exchange</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_CERTIFICATE_VERIFY</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_write_certificate_verify</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_change_cipher_spec</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_CLIENT_FINISHED</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_write_finished</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <comment type="block">/*
        *  &lt;==   ( NewSessionTicket )
        *        ChangeCipherSpec
        *        Finished
        */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SSL_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
       <case>case <expr><name>MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ssl_parse_new_session_ticket</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

       <case>case <expr><name>MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_parse_change_cipher_spec</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_SERVER_FINISHED</name></expr>:</case>
           <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ssl_parse_finished</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_FLUSH_BUFFERS</name></expr>:</case>
           <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"handshake: done"</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name></expr>;</expr_stmt>
           <break>break;</break>

       <case>case <expr><name>MBEDTLS_SSL_HANDSHAKE_WRAPUP</name></expr>:</case>
           <expr_stmt><expr><call><name>mbedtls_ssl_handshake_wrapup</name><argument_list>( <argument><expr><name>ssl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <break>break;</break>

       <default>default:</default>
           <expr_stmt><expr><call><name>MBEDTLS_SSL_DEBUG_MSG</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <literal type="string">"invalid state %d"</literal><operator>,</operator> <name><name>ssl</name><operator>-&gt;</operator><name>state</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_SSL_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return>
   </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></for></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SSL_CLI_C */</comment>
</unit>
