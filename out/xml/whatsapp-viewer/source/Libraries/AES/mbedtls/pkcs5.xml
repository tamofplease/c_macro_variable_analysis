<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/pkcs5.c"><comment type="block" format="doxygen">/**
 * \file pkcs5.c
 *
 * \brief PKCS#5 functions
 *
 * \author Mathias Olsson &lt;mathias@kompetensum.com&gt;
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 * PKCS#5 includes PBKDF2 and more
 *
 * http://tools.ietf.org/html/rfc2898 (Specification)
 * http://tools.ietf.org/html/rfc6070 (Test vectors)
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PKCS5_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkcs5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pkcs5_parse_pbkdf2_params</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
                                      <parameter><decl><type><name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>iterations</name></decl></parameter>,
                                      <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keylen</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name> <modifier>*</modifier></type><name>md_type</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_buf</name></type> <name>prf_alg_oid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>params</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name><name>params</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>params</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/*
     *  PBKDF2-params ::= SEQUENCE {
     *    salt              OCTET STRING,
     *    iterationCount    INTEGER,
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>salt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>MBEDTLS_ASN1_OCTET_STRING</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>salt</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>salt</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>==</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_alg_null</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prf_alg_oid</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>MBEDTLS_OID_CMP</name><argument_list>( <argument><expr><name>MBEDTLS_OID_HMAC_SHA1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prf_alg_oid</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>md_type</name> <operator>=</operator> <name>MBEDTLS_MD_SHA1</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pkcs5_pbes2</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_asn1_buf</name> <modifier>*</modifier></type><name>pbe_params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>pwdlen</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>,
                 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>iterations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>keylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_buf</name></type> <name>kdf_alg_oid</name></decl>, <decl><type ref="prev"/><name>enc_scheme_oid</name></decl>, <decl><type ref="prev"/><name>kdf_alg_params</name></decl>, <decl><type ref="prev"/><name>enc_scheme_params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_asn1_buf</name></type> <name>salt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_type_t</name></type> <name>md_type</name> <init>= <expr><name>MBEDTLS_MD_SHA1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iv</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>olen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_cipher_info_t</name> <modifier>*</modifier></type><name>cipher_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>md_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_type_t</name></type> <name>cipher_alg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_cipher_context_t</name></type> <name>cipher_ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pbe_params</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name><name>pbe_params</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pbe_params</name><operator>-&gt;</operator><name>tag</name></name> <operator>!=</operator> <operator>(</operator> <name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator>
                <name>MBEDTLS_ERR_ASN1_UNEXPECTED_TAG</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kdf_alg_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kdf_alg_params</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Only PBKDF2 supported at the moment</comment>
    <comment type="line">//</comment>
    <if_stmt><if>if<condition>( <expr><call><name>MBEDTLS_OID_CMP</name><argument_list>( <argument><expr><name>MBEDTLS_OID_PKCS5_PBKDF2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kdf_alg_oid</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>pkcs5_parse_pbkdf2_params</name><argument_list>( <argument><expr><operator>&amp;</operator><name>kdf_alg_params</name></expr></argument>,
                                           <argument><expr><operator>&amp;</operator><name>salt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iterations</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keylen</name></expr></argument>,
                                           <argument><expr><operator>&amp;</operator><name>md_type</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>md_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enc_scheme_oid</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>enc_scheme_params</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>+</operator> <name>ret</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_oid_get_cipher_alg</name><argument_list>( <argument><expr><operator>&amp;</operator><name>enc_scheme_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cipher_alg</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>cipher_info</name> <operator>=</operator> <call><name>mbedtls_cipher_info_from_type</name><argument_list>( <argument><expr><name>cipher_alg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>cipher_info</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */</comment>
    <expr_stmt><expr><name>keylen</name> <operator>=</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>key_bitlen</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>enc_scheme_params</name><operator>.</operator><name>tag</name></name> <operator>!=</operator> <name>MBEDTLS_ASN1_OCTET_STRING</name> <operator>||</operator>
        <name><name>enc_scheme_params</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>cipher_info</name><operator>-&gt;</operator><name>iv_size</name></name></expr> )</condition>
    <block>{<block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_INVALID_FORMAT</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_cipher_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cipher_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>enc_scheme_params</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>enc_scheme_params</name><operator>.</operator><name>len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_pkcs5_pbkdf2_hmac</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>salt</name><operator>.</operator><name>len</name></name></expr></argument>,
                                   <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cipher_ctx</name></expr></argument>, <argument><expr><name>cipher_info</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_setkey</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cipher_ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>keylen</name></expr></argument>, <argument><expr><operator>(</operator><name>mbedtls_operation_t</name><operator>)</operator> <name>mode</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_cipher_crypt</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cipher_ctx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>enc_scheme_params</name><operator>.</operator><name>len</name></name></expr></argument>,
                              <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>olen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>md_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_cipher_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cipher_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mbedtls_pkcs5_pbkdf2_hmac</name><parameter_list>( <parameter><decl><type><name>mbedtls_md_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iteration_count</name></decl></parameter>,
                       <parameter><decl><type><name>uint32_t</name></type> <name>key_length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md1</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>work</name><index>[<expr><name>MBEDTLS_MD_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>md_size</name> <init>= <expr><call><name>mbedtls_md_get_size</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>md_info</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out_p</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>counter</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>counter</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iteration_count</name> <operator>&gt;</operator> <literal type="number">0xFFFFFFFF</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><name>key_length</name></expr> )</condition>
    <block>{<block_content>
        <comment type="line">// U1 ends up in work</comment>
        <comment type="line">//</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>plen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>work</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>md1</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><name>md_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iteration_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <comment type="line">// U2 ends up in md1</comment>
            <comment type="line">//</comment>
            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_starts</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>plen</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_update</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md1</name></expr></argument>, <argument><expr><name>md_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_hmac_finish</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md1</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

            <comment type="line">// U1 xor U2</comment>
            <comment type="line">//</comment>
            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>md_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>work</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>md1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>

        <expr_stmt><expr><name>use_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>key_length</name> <operator>&lt;</operator> <name>md_size</name> <operator>)</operator></expr> ?</condition><then> <expr><name>key_length</name></expr> </then><else>: <expr><name>md_size</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out_p</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><name>use_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>key_length</name> <operator>-=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>use_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>out_p</name> <operator>+=</operator> <name>use_len</name></expr>;</expr_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>counter</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SHA1_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_pkcs5_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  PBKDF2 (SHA1): skipped\n\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TESTS</name></cpp:macro>   <cpp:value>6</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>plen</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>password</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"password"</literal></expr>,
    <expr><literal type="string">"password"</literal></expr>,
    <expr><literal type="string">"password"</literal></expr>,
    <expr><literal type="string">"passwordPASSWORDpassword"</literal></expr>,
    <expr><literal type="string">"pass\0word"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name><name>slen</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>salt</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"salt"</literal></expr>,
    <expr><literal type="string">"salt"</literal></expr>,
    <expr><literal type="string">"salt"</literal></expr>,
    <expr><literal type="string">"saltSALTsaltSALTsaltSALTsaltSALTsalt"</literal></expr>,
    <expr><literal type="string">"sa\0lt"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>it_cnt</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">4096</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>key_len</name><index>[<expr><name>MAX_TESTS</name></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>result_key</name><index>[<expr><name>MAX_TESTS</name></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x71</literal></expr>,
      <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
      <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xa6</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,
      <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
      <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x57</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,
      <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xd0</literal></expr>,
      <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xc1</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x9b</literal></expr>,
      <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x4a</literal></expr>,
      <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x70</literal></expr>,
      <expr><literal type="number">0x38</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x9d</literal></expr>,
      <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xc3</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mbedtls_pkcs5_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mbedtls_md_context_t</name></type> <name>sha1_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>info_sha1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_md_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>info_sha1</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>MBEDTLS_MD_SHA1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>info_sha1</name> <operator>==</operator> <name>NULL</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_md_setup</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1_ctx</name></expr></argument>, <argument><expr><name>info_sha1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  PBKDF2 (SHA1) #%d: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_pkcs5_pbkdf2_hmac</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1_ctx</name></expr></argument>, <argument><expr><name><name>password</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>salt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                  <argument><expr><name><name>slen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>it_cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <call><name>memcmp</name><argument_list>( <argument><expr><name><name>result_key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>key_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>exit</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_md_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sha1_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SHA1_C */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PKCS5_C */</comment>
</unit>
