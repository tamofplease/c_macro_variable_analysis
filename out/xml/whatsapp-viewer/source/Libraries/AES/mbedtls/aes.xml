<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/aes.c"><comment type="block">/*
 *  FIPS-197 compliant AES implementation
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>
<comment type="block">/*
 *  The AES block cipher was designed by Vincent Rijmen and Joan Daemen.
 *
 *  http://csrc.nist.gov/encryption/aes/rijndael/Rijndael.pdf
 *  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"padlock.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aesni.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PLATFORM_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mbedtls_printf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_PLATFORM_C */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Implementation that should never be optimized out by the compiler */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mbedtls_zeroize</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt> <while>while<condition>( <expr><name>n</name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * 32-bit integer manipulation macros (little endian)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GET_UINT32_LE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_UINT32_LE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>{                                                       \
    (n) = ( (uint32_t) (b)[(i)    ]       )             \
        | ( (uint32_t) (b)[(i) + 1] &lt;&lt;  8 )             \
        | ( (uint32_t) (b)[(i) + 2] &lt;&lt; 16 )             \
        | ( (uint32_t) (b)[(i) + 3] &lt;&lt; 24 );            \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PUT_UINT32_LE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_UINT32_LE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>                                    \
<cpp:value>{                                                               \
    (b)[(i)    ] = (unsigned char) ( ( (n)       ) &amp; 0xFF );    \
    (b)[(i) + 1] = (unsigned char) ( ( (n) &gt;&gt;  8 ) &amp; 0xFF );    \
    (b)[(i) + 2] = (unsigned char) ( ( (n) &gt;&gt; 16 ) &amp; 0xFF );    \
    (b)[(i) + 3] = (unsigned char) ( ( (n) &gt;&gt; 24 ) &amp; 0xFF );    \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                      \
    <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_ALIGN16</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>aes_padlock_ace</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ROM_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Forward S-box
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xC5</literal></expr>,
    <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
    <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xF0</literal></expr>,
    <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xC0</literal></expr>,
    <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xCC</literal></expr>,
    <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x15</literal></expr>,
    <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x9A</literal></expr>,
    <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x75</literal></expr>,
    <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xA0</literal></expr>,
    <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
    <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x5B</literal></expr>,
    <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xCF</literal></expr>,
    <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
    <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xA8</literal></expr>,
    <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,
    <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xD2</literal></expr>,
    <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
    <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
    <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
    <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xDB</literal></expr>,
    <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x5C</literal></expr>,
    <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
    <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xA9</literal></expr>,
    <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
    <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xC6</literal></expr>,
    <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8A</literal></expr>,
    <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
    <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x9E</literal></expr>,
    <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
    <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xDF</literal></expr>,
    <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x68</literal></expr>,
    <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x16</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Forward tables
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT</name></cpp:macro> \
\
    <cpp:value>V(A5,63,63,C6), V(84,7C,7C,F8), V(99,77,77,EE), V(8D,7B,7B,F6), \
    V(0D,F2,F2,FF), V(BD,6B,6B,D6), V(B1,6F,6F,DE), V(54,C5,C5,91), \
    V(50,30,30,60), V(03,01,01,02), V(A9,67,67,CE), V(7D,2B,2B,56), \
    V(19,FE,FE,E7), V(62,D7,D7,B5), V(E6,AB,AB,4D), V(9A,76,76,EC), \
    V(45,CA,CA,8F), V(9D,82,82,1F), V(40,C9,C9,89), V(87,7D,7D,FA), \
    V(15,FA,FA,EF), V(EB,59,59,B2), V(C9,47,47,8E), V(0B,F0,F0,FB), \
    V(EC,AD,AD,41), V(67,D4,D4,B3), V(FD,A2,A2,5F), V(EA,AF,AF,45), \
    V(BF,9C,9C,23), V(F7,A4,A4,53), V(96,72,72,E4), V(5B,C0,C0,9B), \
    V(C2,B7,B7,75), V(1C,FD,FD,E1), V(AE,93,93,3D), V(6A,26,26,4C), \
    V(5A,36,36,6C), V(41,3F,3F,7E), V(02,F7,F7,F5), V(4F,CC,CC,83), \
    V(5C,34,34,68), V(F4,A5,A5,51), V(34,E5,E5,D1), V(08,F1,F1,F9), \
    V(93,71,71,E2), V(73,D8,D8,AB), V(53,31,31,62), V(3F,15,15,2A), \
    V(0C,04,04,08), V(52,C7,C7,95), V(65,23,23,46), V(5E,C3,C3,9D), \
    V(28,18,18,30), V(A1,96,96,37), V(0F,05,05,0A), V(B5,9A,9A,2F), \
    V(09,07,07,0E), V(36,12,12,24), V(9B,80,80,1B), V(3D,E2,E2,DF), \
    V(26,EB,EB,CD), V(69,27,27,4E), V(CD,B2,B2,7F), V(9F,75,75,EA), \
    V(1B,09,09,12), V(9E,83,83,1D), V(74,2C,2C,58), V(2E,1A,1A,34), \
    V(2D,1B,1B,36), V(B2,6E,6E,DC), V(EE,5A,5A,B4), V(FB,A0,A0,5B), \
    V(F6,52,52,A4), V(4D,3B,3B,76), V(61,D6,D6,B7), V(CE,B3,B3,7D), \
    V(7B,29,29,52), V(3E,E3,E3,DD), V(71,2F,2F,5E), V(97,84,84,13), \
    V(F5,53,53,A6), V(68,D1,D1,B9), V(00,00,00,00), V(2C,ED,ED,C1), \
    V(60,20,20,40), V(1F,FC,FC,E3), V(C8,B1,B1,79), V(ED,5B,5B,B6), \
    V(BE,6A,6A,D4), V(46,CB,CB,8D), V(D9,BE,BE,67), V(4B,39,39,72), \
    V(DE,4A,4A,94), V(D4,4C,4C,98), V(E8,58,58,B0), V(4A,CF,CF,85), \
    V(6B,D0,D0,BB), V(2A,EF,EF,C5), V(E5,AA,AA,4F), V(16,FB,FB,ED), \
    V(C5,43,43,86), V(D7,4D,4D,9A), V(55,33,33,66), V(94,85,85,11), \
    V(CF,45,45,8A), V(10,F9,F9,E9), V(06,02,02,04), V(81,7F,7F,FE), \
    V(F0,50,50,A0), V(44,3C,3C,78), V(BA,9F,9F,25), V(E3,A8,A8,4B), \
    V(F3,51,51,A2), V(FE,A3,A3,5D), V(C0,40,40,80), V(8A,8F,8F,05), \
    V(AD,92,92,3F), V(BC,9D,9D,21), V(48,38,38,70), V(04,F5,F5,F1), \
    V(DF,BC,BC,63), V(C1,B6,B6,77), V(75,DA,DA,AF), V(63,21,21,42), \
    V(30,10,10,20), V(1A,FF,FF,E5), V(0E,F3,F3,FD), V(6D,D2,D2,BF), \
    V(4C,CD,CD,81), V(14,0C,0C,18), V(35,13,13,26), V(2F,EC,EC,C3), \
    V(E1,5F,5F,BE), V(A2,97,97,35), V(CC,44,44,88), V(39,17,17,2E), \
    V(57,C4,C4,93), V(F2,A7,A7,55), V(82,7E,7E,FC), V(47,3D,3D,7A), \
    V(AC,64,64,C8), V(E7,5D,5D,BA), V(2B,19,19,32), V(95,73,73,E6), \
    V(A0,60,60,C0), V(98,81,81,19), V(D1,4F,4F,9E), V(7F,DC,DC,A3), \
    V(66,22,22,44), V(7E,2A,2A,54), V(AB,90,90,3B), V(83,88,88,0B), \
    V(CA,46,46,8C), V(29,EE,EE,C7), V(D3,B8,B8,6B), V(3C,14,14,28), \
    V(79,DE,DE,A7), V(E2,5E,5E,BC), V(1D,0B,0B,16), V(76,DB,DB,AD), \
    V(3B,E0,E0,DB), V(56,32,32,64), V(4E,3A,3A,74), V(1E,0A,0A,14), \
    V(DB,49,49,92), V(0A,06,06,0C), V(6C,24,24,48), V(E4,5C,5C,B8), \
    V(5D,C2,C2,9F), V(6E,D3,D3,BD), V(EF,AC,AC,43), V(A6,62,62,C4), \
    V(A8,91,91,39), V(A4,95,95,31), V(37,E4,E4,D3), V(8B,79,79,F2), \
    V(32,E7,E7,D5), V(43,C8,C8,8B), V(59,37,37,6E), V(B7,6D,6D,DA), \
    V(8C,8D,8D,01), V(64,D5,D5,B1), V(D2,4E,4E,9C), V(E0,A9,A9,49), \
    V(B4,6C,6C,D8), V(FA,56,56,AC), V(07,F4,F4,F3), V(25,EA,EA,CF), \
    V(AF,65,65,CA), V(8E,7A,7A,F4), V(E9,AE,AE,47), V(18,08,08,10), \
    V(D5,BA,BA,6F), V(88,78,78,F0), V(6F,25,25,4A), V(72,2E,2E,5C), \
    V(24,1C,1C,38), V(F1,A6,A6,57), V(C7,B4,B4,73), V(51,C6,C6,97), \
    V(23,E8,E8,CB), V(7C,DD,DD,A1), V(9C,74,74,E8), V(21,1F,1F,3E), \
    V(DD,4B,4B,96), V(DC,BD,BD,61), V(86,8B,8B,0D), V(85,8A,8A,0F), \
    V(90,70,70,E0), V(42,3E,3E,7C), V(C4,B5,B5,71), V(AA,66,66,CC), \
    V(D8,48,48,90), V(05,03,03,06), V(01,F6,F6,F7), V(12,0E,0E,1C), \
    V(A3,61,61,C2), V(5F,35,35,6A), V(F9,57,57,AE), V(D0,B9,B9,69), \
    V(91,86,86,17), V(58,C1,C1,99), V(27,1D,1D,3A), V(B9,9E,9E,27), \
    V(38,E1,E1,D9), V(13,F8,F8,EB), V(B3,98,98,2B), V(33,11,11,22), \
    V(BB,69,69,D2), V(70,D9,D9,A9), V(89,8E,8E,07), V(A7,94,94,33), \
    V(B6,9B,9B,2D), V(22,1E,1E,3C), V(92,87,87,15), V(20,E9,E9,C9), \
    V(49,CE,CE,87), V(FF,55,55,AA), V(78,28,28,50), V(7A,DF,DF,A5), \
    V(8F,8C,8C,03), V(F8,A1,A1,59), V(80,89,89,09), V(17,0D,0D,1A), \
    V(DA,BF,BF,65), V(31,E6,E6,D7), V(C6,42,42,84), V(B8,68,68,D0), \
    V(C3,41,41,82), V(B0,99,99,29), V(77,2D,2D,5A), V(11,0F,0F,1E), \
    V(CB,B0,B0,7B), V(FC,54,54,A8), V(D6,BB,BB,6D), V(3A,16,16,2C)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##a##b##c##d</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>FT0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>FT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##b##c##d##a</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>FT1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>FT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##c##d##a##b</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>FT2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>FT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##d##a##b##c</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>FT3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>FT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FT</name></cpp:undef>

<comment type="block">/*
 * Reverse S-box
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
    <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xFB</literal></expr>,
    <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x87</literal></expr>,
    <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xCB</literal></expr>,
    <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,
    <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x4E</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xB2</literal></expr>,
    <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
    <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
    <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
    <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xDA</literal></expr>,
    <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
    <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,
    <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
    <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
    <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x6B</literal></expr>,
    <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xEA</literal></expr>,
    <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
    <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
    <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x6E</literal></expr>,
    <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x89</literal></expr>,
    <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x1B</literal></expr>,
    <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
    <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xF4</literal></expr>,
    <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
    <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x5F</literal></expr>,
    <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,
    <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xEF</literal></expr>,
    <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xB0</literal></expr>,
    <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
    <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
    <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x7D</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Reverse tables
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT</name></cpp:macro> \
\
    <cpp:value>V(50,A7,F4,51), V(53,65,41,7E), V(C3,A4,17,1A), V(96,5E,27,3A), \
    V(CB,6B,AB,3B), V(F1,45,9D,1F), V(AB,58,FA,AC), V(93,03,E3,4B), \
    V(55,FA,30,20), V(F6,6D,76,AD), V(91,76,CC,88), V(25,4C,02,F5), \
    V(FC,D7,E5,4F), V(D7,CB,2A,C5), V(80,44,35,26), V(8F,A3,62,B5), \
    V(49,5A,B1,DE), V(67,1B,BA,25), V(98,0E,EA,45), V(E1,C0,FE,5D), \
    V(02,75,2F,C3), V(12,F0,4C,81), V(A3,97,46,8D), V(C6,F9,D3,6B), \
    V(E7,5F,8F,03), V(95,9C,92,15), V(EB,7A,6D,BF), V(DA,59,52,95), \
    V(2D,83,BE,D4), V(D3,21,74,58), V(29,69,E0,49), V(44,C8,C9,8E), \
    V(6A,89,C2,75), V(78,79,8E,F4), V(6B,3E,58,99), V(DD,71,B9,27), \
    V(B6,4F,E1,BE), V(17,AD,88,F0), V(66,AC,20,C9), V(B4,3A,CE,7D), \
    V(18,4A,DF,63), V(82,31,1A,E5), V(60,33,51,97), V(45,7F,53,62), \
    V(E0,77,64,B1), V(84,AE,6B,BB), V(1C,A0,81,FE), V(94,2B,08,F9), \
    V(58,68,48,70), V(19,FD,45,8F), V(87,6C,DE,94), V(B7,F8,7B,52), \
    V(23,D3,73,AB), V(E2,02,4B,72), V(57,8F,1F,E3), V(2A,AB,55,66), \
    V(07,28,EB,B2), V(03,C2,B5,2F), V(9A,7B,C5,86), V(A5,08,37,D3), \
    V(F2,87,28,30), V(B2,A5,BF,23), V(BA,6A,03,02), V(5C,82,16,ED), \
    V(2B,1C,CF,8A), V(92,B4,79,A7), V(F0,F2,07,F3), V(A1,E2,69,4E), \
    V(CD,F4,DA,65), V(D5,BE,05,06), V(1F,62,34,D1), V(8A,FE,A6,C4), \
    V(9D,53,2E,34), V(A0,55,F3,A2), V(32,E1,8A,05), V(75,EB,F6,A4), \
    V(39,EC,83,0B), V(AA,EF,60,40), V(06,9F,71,5E), V(51,10,6E,BD), \
    V(F9,8A,21,3E), V(3D,06,DD,96), V(AE,05,3E,DD), V(46,BD,E6,4D), \
    V(B5,8D,54,91), V(05,5D,C4,71), V(6F,D4,06,04), V(FF,15,50,60), \
    V(24,FB,98,19), V(97,E9,BD,D6), V(CC,43,40,89), V(77,9E,D9,67), \
    V(BD,42,E8,B0), V(88,8B,89,07), V(38,5B,19,E7), V(DB,EE,C8,79), \
    V(47,0A,7C,A1), V(E9,0F,42,7C), V(C9,1E,84,F8), V(00,00,00,00), \
    V(83,86,80,09), V(48,ED,2B,32), V(AC,70,11,1E), V(4E,72,5A,6C), \
    V(FB,FF,0E,FD), V(56,38,85,0F), V(1E,D5,AE,3D), V(27,39,2D,36), \
    V(64,D9,0F,0A), V(21,A6,5C,68), V(D1,54,5B,9B), V(3A,2E,36,24), \
    V(B1,67,0A,0C), V(0F,E7,57,93), V(D2,96,EE,B4), V(9E,91,9B,1B), \
    V(4F,C5,C0,80), V(A2,20,DC,61), V(69,4B,77,5A), V(16,1A,12,1C), \
    V(0A,BA,93,E2), V(E5,2A,A0,C0), V(43,E0,22,3C), V(1D,17,1B,12), \
    V(0B,0D,09,0E), V(AD,C7,8B,F2), V(B9,A8,B6,2D), V(C8,A9,1E,14), \
    V(85,19,F1,57), V(4C,07,75,AF), V(BB,DD,99,EE), V(FD,60,7F,A3), \
    V(9F,26,01,F7), V(BC,F5,72,5C), V(C5,3B,66,44), V(34,7E,FB,5B), \
    V(76,29,43,8B), V(DC,C6,23,CB), V(68,FC,ED,B6), V(63,F1,E4,B8), \
    V(CA,DC,31,D7), V(10,85,63,42), V(40,22,97,13), V(20,11,C6,84), \
    V(7D,24,4A,85), V(F8,3D,BB,D2), V(11,32,F9,AE), V(6D,A1,29,C7), \
    V(4B,2F,9E,1D), V(F3,30,B2,DC), V(EC,52,86,0D), V(D0,E3,C1,77), \
    V(6C,16,B3,2B), V(99,B9,70,A9), V(FA,48,94,11), V(22,64,E9,47), \
    V(C4,8C,FC,A8), V(1A,3F,F0,A0), V(D8,2C,7D,56), V(EF,90,33,22), \
    V(C7,4E,49,87), V(C1,D1,38,D9), V(FE,A2,CA,8C), V(36,0B,D4,98), \
    V(CF,81,F5,A6), V(28,DE,7A,A5), V(26,8E,B7,DA), V(A4,BF,AD,3F), \
    V(E4,9D,3A,2C), V(0D,92,78,50), V(9B,CC,5F,6A), V(62,46,7E,54), \
    V(C2,13,8D,F6), V(E8,B8,D8,90), V(5E,F7,39,2E), V(F5,AF,C3,82), \
    V(BE,80,5D,9F), V(7C,93,D0,69), V(A9,2D,D5,6F), V(B3,12,25,CF), \
    V(3B,99,AC,C8), V(A7,7D,18,10), V(6E,63,9C,E8), V(7B,BB,3B,DB), \
    V(09,78,26,CD), V(F4,18,59,6E), V(01,B7,9A,EC), V(A8,9A,4F,83), \
    V(65,6E,95,E6), V(7E,E6,FF,AA), V(08,CF,BC,21), V(E6,E8,15,EF), \
    V(D9,9B,E7,BA), V(CE,36,6F,4A), V(D4,09,9F,EA), V(D6,7C,B0,29), \
    V(AF,B2,A4,31), V(31,23,3F,2A), V(30,94,A5,C6), V(C0,66,A2,35), \
    V(37,BC,4E,74), V(A6,CA,82,FC), V(B0,D0,90,E0), V(15,D8,A7,33), \
    V(4A,98,04,F1), V(F7,DA,EC,41), V(0E,50,CD,7F), V(2F,F6,91,17), \
    V(8D,D6,4D,76), V(4D,B0,EF,43), V(54,4D,AA,CC), V(DF,04,96,E4), \
    V(E3,B5,D1,9E), V(1B,88,6A,4C), V(B8,1F,2C,C1), V(7F,51,65,46), \
    V(04,EA,5E,9D), V(5D,35,8C,01), V(73,74,87,FA), V(2E,41,0B,FB), \
    V(5A,1D,67,B3), V(52,D2,DB,92), V(33,56,10,E9), V(13,47,D6,6D), \
    V(8C,61,D7,9A), V(7A,0C,A1,37), V(8E,14,F8,59), V(89,3C,13,EB), \
    V(EE,27,A9,CE), V(35,C9,61,B7), V(ED,E5,1C,E1), V(3C,B1,47,7A), \
    V(59,DF,D2,9C), V(3F,73,F2,55), V(79,CE,14,18), V(BF,37,C7,73), \
    V(EA,CD,F7,53), V(5B,AA,FD,5F), V(14,6F,3D,DF), V(86,DB,44,78), \
    V(81,F3,AF,CA), V(3E,C4,68,B9), V(2C,34,24,38), V(5F,40,A3,C2), \
    V(72,C3,1D,16), V(0C,25,E2,BC), V(8B,49,3C,28), V(41,95,0D,FF), \
    V(71,01,A8,39), V(DE,B3,0C,08), V(9C,E4,B4,D8), V(90,C1,56,64), \
    V(61,84,CB,7B), V(70,B6,32,D5), V(74,5C,6C,48), V(42,57,B8,D0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##a##b##c##d</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>RT0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>RT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##b##c##d##a</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>RT1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>RT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##c##d##a##b</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>RT2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>RT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0x##d##a##b##c</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>RT3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>RT</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>V</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RT</name></cpp:undef>

<comment type="block">/*
 * Round constants
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>RCON</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00000008</literal></expr>,
    <expr><literal type="number">0x00000010</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>,
    <expr><literal type="number">0x0000001B</literal></expr>, <expr><literal type="number">0x00000036</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* MBEDTLS_AES_ROM_TABLES */</comment>

<comment type="block">/*
 * Forward S-box &amp; tables
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>FSb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>FT0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>FT1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>FT2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>FT3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * Reverse S-box &amp; tables
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>RSb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>RT0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>RT1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>RT2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>RT3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * Round constants
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>RCON</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/*
 * Tables generation code
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( x &lt;&lt; 8 ) &amp; 0xFFFFFFFF ) | ( x &gt;&gt; 24 )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XTIME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( x &lt;&lt; 1 ) ^ ( ( x &amp; 0x80 ) ? 0x1B : 0x00 ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ( x &amp;&amp; y ) ? pow[(log[x]+log[y]) % 255] : 0 )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>aes_init_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aes_gen_tables</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>pow</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>log</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/*
     * compute pow and log tables over GF(2^8)
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>pow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>log</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>^</operator> <call><name>XTIME</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * calculate the round constants
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>RCON</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>XTIME</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * generate the forward and reverse S-boxes
     */</comment>
    <expr_stmt><expr><name><name>FSb</name><index>[<expr><literal type="number">0x00</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x63</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>RSb</name><index>[<expr><literal type="number">0x63</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>pow</name><index>[<expr><literal type="number">255</literal> <operator>-</operator> <name><name>log</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>y</name>  <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>^=</operator> <name>y</name> <operator>^</operator> <literal type="number">0x63</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>FSb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>RSb</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * generate the forward and reverse tables
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>FSb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>XTIME</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator>  <operator>(</operator> <name>y</name> <operator>^</operator> <name>x</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>FT0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>y</name>       <operator>)</operator> <operator>^</operator>
                 <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>x</name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
                 <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
                 <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>FT1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROTL8</name><argument_list>( <argument><expr><name><name>FT0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>FT2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROTL8</name><argument_list>( <argument><expr><name><name>FT1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>FT3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROTL8</name><argument_list>( <argument><expr><name><name>FT2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>RSb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>RT0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>MUL</name><argument_list>( <argument><expr><literal type="number">0x0E</literal></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call>       <operator>)</operator> <operator>^</operator>
                 <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>MUL</name><argument_list>( <argument><expr><literal type="number">0x09</literal></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
                 <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>MUL</name><argument_list>( <argument><expr><literal type="number">0x0D</literal></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
                 <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>MUL</name><argument_list>( <argument><expr><literal type="number">0x0B</literal></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>RT1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROTL8</name><argument_list>( <argument><expr><name><name>RT0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>RT2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROTL8</name><argument_list>( <argument><expr><name><name>RT1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>RT3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROTL8</name><argument_list>( <argument><expr><name><name>RT2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_ROM_TABLES */</comment>

<function><type><name>void</name></type> <name>mbedtls_aes_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_aes_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mbedtls_aes_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_zeroize</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>mbedtls_aes_context</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * AES key schedule (encryption)
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_SETKEY_ENC_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_aes_setkey_enc</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ROM_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>aes_init_done</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>aes_gen_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aes_init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch<condition>( <expr><name>keybits</name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">128</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">192</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">256</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt> <break>break;</break>
        <default>default :</default> <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_AES_INVALID_KEY_LENGTH</name> <operator>)</operator></expr>;</return>
    </block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_ALIGN16</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>aes_padlock_ace</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>aes_padlock_ace</name> <operator>=</operator> <call><name>mbedtls_padlock_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_PADLOCK_ACE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>aes_padlock_ace</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>RK</name> <operator>=</operator> <call><name>MBEDTLS_PADLOCK_ALIGN16</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_aesni_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_AESNI_AES</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_aesni_setkey_enc</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator> <name>keybits</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name><name>RK</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <switch>switch<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name></expr> )</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">10</literal></expr>:</case>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>RK</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>RCON</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>

        <case>case <expr><literal type="number">12</literal></expr>:</case>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>RK</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr> )</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>RCON</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>

        <case>case <expr><literal type="number">14</literal></expr>:</case>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>RK</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr> )</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>RCON</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>  <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">11</literal></expr>]</index></name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
                <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name><name>RK</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>RK</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>RK</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name><name>RK</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_AES_SETKEY_ENC_ALT */</comment>

<comment type="block">/*
 * AES key schedule (decryption)
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_SETKEY_DEC_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_aes_setkey_dec</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keybits</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_aes_context</name></type> <name>cty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>SK</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_ALIGN16</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>aes_padlock_ace</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>aes_padlock_ace</name> <operator>=</operator> <call><name>mbedtls_padlock_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_PADLOCK_ACE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>aes_padlock_ace</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>RK</name> <operator>=</operator> <call><name>MBEDTLS_PADLOCK_ALIGN16</name><argument_list>( <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* Also checks keybits */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cty</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keybits</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>cty</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_aesni_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_AESNI_AES</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_aesni_inverse_key</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>,
                           <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>cty</name><operator>.</operator><name>rk</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>SK</name> <operator>=</operator> <name><name>cty</name><operator>.</operator><name>rk</name></name> <operator>+</operator> <name><name>cty</name><operator>.</operator><name>nr</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>SK</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>SK</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control>
    <block>{<block_content>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>SK</name><operator>++</operator></expr></incr> )</control>
        <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <name><name>RT0</name><index>[ <expr><name><name>FSb</name><index>[ <expr><operator>(</operator> <operator>*</operator><name>SK</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name></expr> ]</index></name> <operator>^</operator>
                    <name><name>RT1</name><index>[ <expr><name><name>FSb</name><index>[ <expr><operator>(</operator> <operator>*</operator><name>SK</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name></expr> ]</index></name> <operator>^</operator>
                    <name><name>RT2</name><index>[ <expr><name><name>FSb</name><index>[ <expr><operator>(</operator> <operator>*</operator><name>SK</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name></expr> ]</index></name> <operator>^</operator>
                    <name><name>RT3</name><index>[ <expr><name><name>FSb</name><index>[ <expr><operator>(</operator> <operator>*</operator><name>SK</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name></expr> ]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>RK</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>SK</name><operator>++</operator></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cty</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_AES_SETKEY_DEC_ALT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES_FROUND</name><parameter_list>(<parameter><type><name>X0</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>Y0</name></type></parameter>,<parameter><type><name>Y1</name></type></parameter>,<parameter><type><name>Y2</name></type></parameter>,<parameter><type><name>Y3</name></type></parameter>)</parameter_list></cpp:macro>     \
<cpp:value>{                                               \
    X0 = *RK++ ^ FT0[ ( Y0       ) &amp; 0xFF ] ^   \
                 FT1[ ( Y1 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 FT2[ ( Y2 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 FT3[ ( Y3 &gt;&gt; 24 ) &amp; 0xFF ];    \
                                                \
    X1 = *RK++ ^ FT0[ ( Y1       ) &amp; 0xFF ] ^   \
                 FT1[ ( Y2 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 FT2[ ( Y3 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 FT3[ ( Y0 &gt;&gt; 24 ) &amp; 0xFF ];    \
                                                \
    X2 = *RK++ ^ FT0[ ( Y2       ) &amp; 0xFF ] ^   \
                 FT1[ ( Y3 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 FT2[ ( Y0 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 FT3[ ( Y1 &gt;&gt; 24 ) &amp; 0xFF ];    \
                                                \
    X3 = *RK++ ^ FT0[ ( Y3       ) &amp; 0xFF ] ^   \
                 FT1[ ( Y0 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 FT2[ ( Y1 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 FT3[ ( Y2 &gt;&gt; 24 ) &amp; 0xFF ];    \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AES_RROUND</name><parameter_list>(<parameter><type><name>X0</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>Y0</name></type></parameter>,<parameter><type><name>Y1</name></type></parameter>,<parameter><type><name>Y2</name></type></parameter>,<parameter><type><name>Y3</name></type></parameter>)</parameter_list></cpp:macro>     \
<cpp:value>{                                               \
    X0 = *RK++ ^ RT0[ ( Y0       ) &amp; 0xFF ] ^   \
                 RT1[ ( Y3 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 RT2[ ( Y2 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 RT3[ ( Y1 &gt;&gt; 24 ) &amp; 0xFF ];    \
                                                \
    X1 = *RK++ ^ RT0[ ( Y1       ) &amp; 0xFF ] ^   \
                 RT1[ ( Y0 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 RT2[ ( Y3 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 RT3[ ( Y2 &gt;&gt; 24 ) &amp; 0xFF ];    \
                                                \
    X2 = *RK++ ^ RT0[ ( Y2       ) &amp; 0xFF ] ^   \
                 RT1[ ( Y1 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 RT2[ ( Y0 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 RT3[ ( Y3 &gt;&gt; 24 ) &amp; 0xFF ];    \
                                                \
    X3 = *RK++ ^ RT0[ ( Y3       ) &amp; 0xFF ] ^   \
                 RT1[ ( Y2 &gt;&gt;  8 ) &amp; 0xFF ] ^   \
                 RT2[ ( Y1 &gt;&gt; 16 ) &amp; 0xFF ] ^   \
                 RT3[ ( Y0 &gt;&gt; 24 ) &amp; 0xFF ];    \
}</cpp:value></cpp:define>

<comment type="block">/*
 * AES-ECB block encryption
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_ENCRYPT_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_aes_encrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                          <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>, <decl><type ref="prev"/><name>X0</name></decl>, <decl><type ref="prev"/><name>X1</name></decl>, <decl><type ref="prev"/><name>X2</name></decl>, <decl><type ref="prev"/><name>X3</name></decl>, <decl><type ref="prev"/><name>Y0</name></decl>, <decl><type ref="prev"/><name>Y1</name></decl>, <decl><type ref="prev"/><name>Y2</name></decl>, <decl><type ref="prev"/><name>Y3</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X0</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X1</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X2</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X3</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X3</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>AES_FROUND</name><argument_list>( <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>Y3</name></expr></argument>, <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>X3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AES_FROUND</name><argument_list>( <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>X3</name></expr></argument>, <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>Y3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>AES_FROUND</name><argument_list>( <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>Y3</name></expr></argument>, <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>X3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>X0</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y0</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y1</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y3</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X1</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y1</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y2</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y3</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y0</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X2</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y2</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y3</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X3</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y3</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y0</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>FSb</name><index>[ <expr><operator>(</operator> <name>Y2</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X3</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_AES_ENCRYPT_ALT */</comment>

<comment type="block">/*
 * AES-ECB block decryption
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AES_DECRYPT_ALT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>mbedtls_aes_decrypt</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                          <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>RK</name></decl>, <decl><type ref="prev"/><name>X0</name></decl>, <decl><type ref="prev"/><name>X1</name></decl>, <decl><type ref="prev"/><name>X2</name></decl>, <decl><type ref="prev"/><name>X3</name></decl>, <decl><type ref="prev"/><name>Y0</name></decl>, <decl><type ref="prev"/><name>Y1</name></decl>, <decl><type ref="prev"/><name>Y2</name></decl>, <decl><type ref="prev"/><name>Y3</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>RK</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rk</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X0</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X1</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>input</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X2</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GET_UINT32_LE</name><argument_list>( <argument><expr><name>X3</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>X3</name> <operator>^=</operator> <operator>*</operator><name>RK</name><operator>++</operator></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <operator>(</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>AES_RROUND</name><argument_list>( <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>Y3</name></expr></argument>, <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>X3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AES_RROUND</name><argument_list>( <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>X3</name></expr></argument>, <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>Y3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>AES_RROUND</name><argument_list>( <argument><expr><name>Y0</name></expr></argument>, <argument><expr><name>Y1</name></expr></argument>, <argument><expr><name>Y2</name></expr></argument>, <argument><expr><name>Y3</name></expr></argument>, <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>X3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>X0</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y0</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y3</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y1</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X1</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y1</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y0</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y3</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y2</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X2</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y2</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y1</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y3</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>X3</name> <operator>=</operator> <operator>*</operator><name>RK</name><operator>++</operator> <operator>^</operator> \
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y3</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name>       <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y2</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>^</operator>
            <operator>(</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>RSb</name><index>[ <expr><operator>(</operator> <name>Y0</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X0</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X1</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X2</name></expr></argument>, <argument><expr><name>output</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PUT_UINT32_LE</name><argument_list>( <argument><expr><name>X3</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_AES_DECRYPT_ALT */</comment>

<comment type="block">/*
 * AES-ECB block encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_crypt_ecb</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter> )</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_AESNI_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_aesni_has_support</name><argument_list>( <argument><expr><name>MBEDTLS_AESNI_AES</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <call><name>mbedtls_aesni_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>aes_padlock_ace</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_padlock_xcryptecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// If padlock data misaligned, we just fall back to</comment>
        <comment type="line">// unaccelerated mode</comment>
        <comment type="line">//</comment>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_AES_ENCRYPT</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_aes_encrypt</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_aes_decrypt</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES-CBC buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_crypt_cbc</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                    <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>length</name> <operator>%</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_PADLOCK_C</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_HAVE_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name>aes_padlock_ace</name></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>mbedtls_padlock_xcryptcbc</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// If padlock data misaligned, we just fall back to</comment>
        <comment type="line">// unaccelerated mode</comment>
        <comment type="line">//</comment>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
        <block>{<block_content>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>input</name>  <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES-CFB128 buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_crypt_cfb128</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>iv_off</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>iv_off</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition>
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>input</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>c</name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>iv</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^</operator> <operator>*</operator><name>input</name><operator>++</operator> <operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>iv_off</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * AES-CFB8 buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_crypt_cfb8</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ov</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ov</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ov</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>input</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>*</operator><name>input</name><operator>++</operator> <operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>mode</name> <operator>==</operator> <name>MBEDTLS_AES_ENCRYPT</name></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ov</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ov</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES-CTR buffer encryption/decryption
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_crypt_ctr</name><parameter_list>( <parameter><decl><type><name>mbedtls_aes_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                       <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>nc_off</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce_counter</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stream_block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>nc_off</name></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>length</name><operator>--</operator></expr> )</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MBEDTLS_AES_ENCRYPT</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <if_stmt><if>if<condition>( <expr><operator>++</operator><name><name>nonce_counter</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>input</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>output</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator> <name>c</name> <operator>^</operator> <name><name>stream_block</name><index>[<expr><name>n</name></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>nc_off</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MBEDTLS_AES_ALT */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_SELF_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES test vectors from:
 *
 * http://csrc.nist.gov/archive/aes/rijndael/rijndael-vals.zip
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_ecb_dec</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
      <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xE0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xF2</literal></expr>,
      <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,
      <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0xDE</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_ecb_enc</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
      <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x7F</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
      <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x14</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,
      <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_cbc_dec</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
      <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x75</literal></expr>,
      <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x7B</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x75</literal></expr>,
      <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x13</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_cbc_enc</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
      <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x3D</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xBB</literal></expr>,
      <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xB5</literal></expr>,
      <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xF0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES-CFB128 test vectors from:
 *
 * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_cfb128_key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xA6</literal></expr>,
      <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x3C</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x52</literal></expr>,
      <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
      <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x7B</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xBE</literal></expr>,
      <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x81</literal></expr>,
      <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
      <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xF4</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_cfb128_iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
    <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_cfb128_pt</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
    <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x2A</literal></expr>,
    <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x9C</literal></expr>,
    <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x51</literal></expr>,
    <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
    <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xEF</literal></expr>,
    <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
    <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_cfb128_ct</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x20</literal></expr>,
      <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x4A</literal></expr>,
      <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
      <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x8B</literal></expr>,
      <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
      <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xDF</literal></expr>,
      <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x0E</literal></expr>,
      <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xAB</literal></expr>,
      <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
      <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x21</literal></expr>,
      <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x7A</literal></expr>,
      <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xB1</literal></expr>,
      <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC9</literal></expr>,
      <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xA0</literal></expr>,
      <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x4B</literal></expr>,
      <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
      <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xC8</literal></expr>,
      <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x7B</literal></expr>,
      <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x92</literal></expr>,
      <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xF9</literal></expr>,
      <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xF8</literal></expr>,
      <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x71</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * AES-CTR test vectors from:
 *
 * http://www.faqs.org/rfcs/rfc3686.html
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_ctr_key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xCC</literal></expr>,
      <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
      <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x63</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xA8</literal></expr>,
      <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_ctr_nonce_counter</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
      <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x59</literal></expr>,
      <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,
      <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_ctr_pt</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">48</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
      <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x67</literal></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
      <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
      <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
      <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
      <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
      <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,
      <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aes_test_ctr_ct</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">48</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
      <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xB8</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xD9</literal></expr>,
      <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x88</literal></expr>,
      <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xC8</literal></expr>,
      <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x28</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xD9</literal></expr>,
      <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xD7</literal></expr>,
      <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
      <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x53</literal></expr>,
      <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2F</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>aes_test_ctr_len</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
    <expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

<comment type="block">/*
 * Checkup routine
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_aes_self_test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>prv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nonce_counter</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stream_block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>mbedtls_aes_context</name></type> <name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_aes_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * ECB mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-ECB-%3d (%s): "</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_aes_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_ecb_dec</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_aes_crypt_ecb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_ecb_enc</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * CBC mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-CBC-%3d (%s): "</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>iv</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>prv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_aes_setkey_dec</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>mbedtls_aes_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_cbc_dec</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>mbedtls_aes_crypt_cbc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>prv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>prv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>prv</name></expr></argument>, <argument><expr><name><name>aes_test_cbc_enc</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CBC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CFB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * CFB128 mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-CFB128-%3d (%s): "</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>iv</name></expr></argument>,  <argument><expr><name>aes_test_cfb128_iv</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>aes_test_cfb128_key</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>+</operator> <name>u</name> <operator>*</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_cfb128_ct</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_aes_crypt_cfb128</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>aes_test_cfb128_pt</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>aes_test_cfb128_pt</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mbedtls_aes_crypt_cfb128</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_cfb128_ct</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CFB */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CIPHER_MODE_CTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * CTR mode
     */</comment>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name>  <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"  AES-CTR-128 (%s): "</literal></expr></argument>,
                             <argument><expr><ternary><condition><expr><operator>(</operator> <name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"dec"</literal></expr> </then><else>: <expr><literal type="string">"enc"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name><name>aes_test_ctr_nonce_counter</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>aes_test_ctr_key</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mbedtls_aes_setkey_enc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>v</name> <operator>==</operator> <name>MBEDTLS_AES_DECRYPT</name></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>aes_test_ctr_len</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_ctr_ct</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_aes_crypt_ctr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument>,
                           <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_ctr_pt</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>aes_test_ctr_len</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_ctr_pt</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>mbedtls_aes_crypt_ctr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>nonce_counter</name></expr></argument>, <argument><expr><name>stream_block</name></expr></argument>,
                           <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>aes_test_ctr_ct</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
            <block>{<block_content>
                <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <goto>goto <name>exit</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"passed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>verbose</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>mbedtls_printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_CIPHER_MODE_CTR */</comment>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>exit</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_aes_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_SELF_TEST */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_AES_C */</comment>
</unit>
