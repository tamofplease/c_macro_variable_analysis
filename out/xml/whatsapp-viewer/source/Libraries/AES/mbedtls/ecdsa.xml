<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/whatsapp-viewer/source/Libraries/AES/mbedtls/ecdsa.c"><comment type="block">/*
 *  Elliptic curve DSA
 *
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */</comment>

<comment type="block">/*
 * References:
 *
 * SEC1 http://www.secg.org/index.php?action=secg,docs_secg
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> MBEDTLS_CONFIG_FILE</cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_C</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecdsa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asn1write.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_DETERMINISTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hmac_drbg.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>derive_mpi</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n_size</name> <init>= <expr><operator>(</operator> <name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_size</name> <init>= <expr><ternary><condition><expr><name>blen</name> <operator>&gt;</operator> <name>n_size</name></expr> ?</condition><then> <expr><name>n_size</name></expr> </then><else>: <expr><name>blen</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_read_binary</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>use_size</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>use_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name>use_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* While at it, reduce modulo N */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_sub_mpi</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_sign</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>,
                <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>key_tries</name></decl>, <decl><type ref="prev"/><name>sign_tries</name></decl>, <decl><type ref="prev"/><name>blind_tries</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>R</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <comment type="block">/* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>grp</name><operator>-&gt;</operator><name>N</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sign_tries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <do>do
    <block>{<block_content>
        <comment type="block">/*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */</comment>
        <expr_stmt><expr><name>key_tries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_gen_keypair</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if<condition>( <expr><name>key_tries</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_RANDOM_FAILED</name></expr>;</expr_stmt>
                <goto>goto <name>cleanup</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>;</do>

        <comment type="block">/*
         * Step 5: derive MPI from hashed message
         */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>derive_mpi</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */</comment>
        <expr_stmt><expr><name>blind_tries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <do>do
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>n_size</name> <init>= <expr><operator>(</operator> <name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_fill_random</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>n_size</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_shift_r</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>n_size</name> <operator>-</operator> <name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* See mbedtls_ecp_gen_keypair() */</comment>
            <if_stmt><if>if<condition>( <expr><operator>++</operator><name>blind_tries</name> <operator>&gt;</operator> <literal type="number">30</literal></expr> )</condition><block type="pseudo"><block_content>
                <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_RANDOM_FAILED</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
               <call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>;</do>

        <comment type="block">/*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */</comment>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_add_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_inv_mod</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>sign_tries</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr> )</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_RANDOM_FAILED</name></expr>;</expr_stmt>
            <goto>goto <name>cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>;</do>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_DETERMINISTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * Deterministic signature wrapper
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_sign_det</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>mbedtls_mpi</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>,
                    <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_hmac_drbg_context</name></type> <name>rng_ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MBEDTLS_ECP_MAX_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>grp_len</name> <init>= <expr><operator>(</operator> <name><name>grp</name><operator>-&gt;</operator><name>nbits</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>mbedtls_md_info_t</name> <modifier>*</modifier></type><name>md_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>h</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>md_info</name> <operator>=</operator> <call><name>mbedtls_md_info_from_type</name><argument_list>( <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rng_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Use private key and message hash (reduced) to initialize HMAC_DRBG */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_write_binary</name><argument_list>( <argument><expr><name>d</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>grp_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>derive_mpi</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_write_binary</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>grp_len</name></expr></argument>, <argument><expr><name>grp_len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_seed_buf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rng_ctx</name></expr></argument>, <argument><expr><name>md_info</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>grp_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdsa_sign</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>,
                      <argument><expr><name>mbedtls_hmac_drbg_random</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rng_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_hmac_drbg_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>rng_ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_DETERMINISTIC */</comment>

<comment type="block">/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_verify</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecp_group</name> <modifier>*</modifier></type><name>grp</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_point</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>s_inv</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_ecp_point</name></type> <name>R</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_ecp_point_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s_inv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>grp</name><operator>-&gt;</operator><name>N</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>
        <return>return<expr><operator>(</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Step 1: make sure r and s are in range 1..n-1
     */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>
        <call><name>mbedtls_mpi_cmp_int</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_VERIFY_FAILED</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Additional precaution: make sure Q is valid
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_check_pubkey</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><name>Q</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Step 3: derive MPI from hashed message
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>derive_mpi</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_inv_mod</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s_inv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_inv</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mul_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_inv</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Step 5: R = u1 G + u2 Q
     *
     * Since we're not using any secret data, no need to pass a RNG to
     * mbedtls_ecp_mul() for countermesures.
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecp_muladd</name><argument_list>( <argument><expr><name>grp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>G</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><name>Q</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_ecp_is_zero</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_VERIFY_FAILED</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */</comment>
    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_mpi_mod_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>grp</name><operator>-&gt;</operator><name>N</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Step 8: check if v (that is, R.X) is equal to r
     */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>mbedtls_mpi_cmp_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>R</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_VERIFY_FAILED</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_ecp_point_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>e</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s_inv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a signature (given by context) to ASN.1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ecdsa_signature_to_asn1</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_mpi</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>slen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MBEDTLS_ECDSA_MAX_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_len</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MBEDTLS_ASN1_CHK_ADD</name><argument_list>( <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>mbedtls_asn1_write_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
                                       <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>slen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute and write signature
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_write_signature</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hlen</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>,
                           <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                           <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_DETERMINISTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>f_rng</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_rng</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecdsa_sign_det</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr></argument>,
                             <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>md_alg</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>mbedtls_ecdsa_sign</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr></argument>,
                         <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>MBEDTLS_MPI_CHK</name><argument_list>( <argument><expr><call><name>ecdsa_signature_to_asn1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>slen</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_DEPRECATED_REMOVED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <call><name>defined</name><argument_list>(<argument><expr><name>MBEDTLS_ECDSA_DETERMINISTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_write_signature_det</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hlen</name></decl></parameter>,
                               <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>slen</name></decl></parameter>,
                               <parameter><decl><type><name>mbedtls_md_type_t</name></type> <name>md_alg</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_ecdsa_write_signature</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md_alg</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Read and check signature
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_read_signature</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hlen</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>slen</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>sig</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>sig</name> <operator>+</operator> <name>slen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mbedtls_mpi</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_tag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
                    <argument><expr><name>MBEDTLS_ASN1_CONSTRUCTED</name> <operator>|</operator> <name>MBEDTLS_ASN1_SEQUENCE</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>+</operator> <name>len</name> <operator>!=</operator> <name>end</name></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name> <operator>+</operator>
              <name>MBEDTLS_ERR_ASN1_LENGTH_MISMATCH</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_asn1_get_mpi</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>MBEDTLS_ERR_ECP_BAD_INPUT_DATA</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecdsa_verify</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
        <goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>p</name> <operator>!=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mbedtls_mpi_free</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generate key pair
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_genkey</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>mbedtls_ecp_group_id</name></type> <name>gid</name></decl></parameter>,
                  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_rng</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_rng</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <return>return<expr><operator>(</operator> <call><name>mbedtls_ecp_group_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument> )</argument_list></call> <operator>||</operator>
            <call><name>mbedtls_ecp_gen_keypair</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Q</name></name></expr></argument>, <argument><expr><name>f_rng</name></expr></argument>, <argument><expr><name>p_rng</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set context from an mbedtls_ecp_keypair
 */</comment>
<function><type><name>int</name></type> <name>mbedtls_ecdsa_from_keypair</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mbedtls_ecp_keypair</name> <modifier>*</modifier></type><name>key</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecp_group_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>grp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>grp</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_mpi_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
        <operator>(</operator> <name>ret</name> <operator>=</operator> <call><name>mbedtls_ecp_copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>Q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>Q</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mbedtls_ecdsa_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return<expr><operator>(</operator> <name>ret</name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ecdsa_init</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ecp_keypair_init</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free context
 */</comment>
<function><type><name>void</name></type> <name>mbedtls_ecdsa_free</name><parameter_list>( <parameter><decl><type><name>mbedtls_ecdsa_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>mbedtls_ecp_keypair_free</name><argument_list>( <argument><expr><name>ctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MBEDTLS_ECDSA_C */</comment>
</unit>
