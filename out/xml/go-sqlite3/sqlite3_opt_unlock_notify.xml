<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/go-sqlite3/sqlite3_opt_unlock_notify.c"><comment type="line">// Copyright (C) 2018 Yasuhiro Matsumoto &lt;mattn.jp@gmail.com&gt;.</comment>
<comment type="line">//</comment>
<comment type="line">// Use of this source code is governed by an MIT-style</comment>
<comment type="line">// license that can be found in the LICENSE file.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_UNLOCK_NOTIFY</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3-binding.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>unlock_notify_wait</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>_sqlite3_step_blocking</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sqlite3_db_handle</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_LOCKED</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_LOCKED_SHAREDCACHE</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>unlock_notify_wait</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_sqlite3_step_row_blocking</name><parameter_list>(<parameter><decl><type><name>sqlite3_stmt</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>rowid</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>changes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sqlite3_db_handle</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name><operator>!=</operator><name>SQLITE_LOCKED</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_LOCKED_SHAREDCACHE</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>unlock_notify_wait</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>rowid</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>changes</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>sqlite3_changes</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>_sqlite3_prepare_v2_blocking</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBytes</name></decl></parameter>, <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzTail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>, <argument><expr><name>ppStmt</name></expr></argument>, <argument><expr><name>pzTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name><operator>!=</operator><name>SQLITE_LOCKED</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_LOCKED_SHAREDCACHE</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>unlock_notify_wait</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
