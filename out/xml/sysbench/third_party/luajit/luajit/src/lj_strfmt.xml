<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_strfmt.c"><comment type="block">/*
** String formatting.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_strfmt_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_char.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>

<comment type="block">/* -- Format parser ------------------------------------------------------- */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>strfmt_map</name><index>[<expr><operator>(</operator><literal type="char">'x'</literal><operator>-</operator><literal type="char">'A'</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><name>STRFMT_A</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_E</name></expr>,<expr><name>STRFMT_F</name></expr>,<expr><name>STRFMT_G</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_X</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
  <expr><name>STRFMT_A</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_C</name></expr>,<expr><name>STRFMT_D</name></expr>,<expr><name>STRFMT_E</name></expr>,<expr><name>STRFMT_F</name></expr>,<expr><name>STRFMT_G</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_I</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_O</name></expr>,<expr><name>STRFMT_P</name></expr>,<expr><name>STRFMT_Q</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_S</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_U</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>STRFMT_X</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>SFormat</name> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_parse</name><parameter_list>(<parameter><decl><type><name>FormatState</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>fs</name><operator>-&gt;</operator><name>e</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Escape char? */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* '%%'? */</comment>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>++</operator><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<goto>goto <name>retlit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<decl_stmt><decl><type><name>SFormat</name></type> <name>sf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>p</name><operator>++</operator></expr>;</init> <condition><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">' '</literal> <operator>&lt;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>-</operator> <literal type="char">' '</literal><operator>)</operator></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	  <comment type="block">/* Parse flags. */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sf</name> <operator>|=</operator> <name>STRFMT_F_LEFT</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sf</name> <operator>|=</operator> <name>STRFMT_F_PLUS</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sf</name> <operator>|=</operator> <name>STRFMT_F_ZERO</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sf</name> <operator>|=</operator> <name>STRFMT_F_SPACE</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sf</name> <operator>|=</operator> <name>STRFMT_F_ALT</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Parse width. */</comment>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>width</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>sf</name> <operator>|=</operator> <operator>(</operator><name>width</name> <operator>&lt;&lt;</operator> <name>STRFMT_SH_WIDTH</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Parse precision. */</comment>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>prec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>prec</name><operator>*</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>sf</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>prec</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>STRFMT_SH_PREC</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Parse conversion. */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><name>c</name> <operator>&lt;=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="char">'x'</literal> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sx</name> <init>= <expr><name><name>strfmt_map</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>sx</name></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    <return>return <expr><operator>(</operator><name>sf</name> <operator>|</operator> <name>sx</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>STRFMT_F_UPPER</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</return>
	  </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Return error location. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>str</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>fs</name><operator>-&gt;</operator><name>e</name></name></expr>;</expr_stmt>
	<return>return <expr><name>STRFMT_ERR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<label><name>retlit</name>:</label>
  <expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>fs</name><operator>-&gt;</operator><name>str</name></name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name><name>fs</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name>STRFMT_LIT</name></expr> </then><else>: <expr><name>STRFMT_EOF</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Raw conversions ----------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>sh</name></type></parameter>, <parameter><type><name>sc</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>{ uint32_t d = (x*(((1&lt;&lt;sh)+sc-1)/sc))&gt;&gt;sh; x -= d*sc; *p++ = (char)('0'+d); }</cpp:value></cpp:define>

<comment type="block">/* Write integer to buffer. */</comment>
<function><type><name>char</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_wint</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>k</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>k</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dig1</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dig2</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dig3</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><name>u</name> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>v</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dig5</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dig6</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dig7</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>w</name> <init>= <expr><name>v</name> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>v</name> <operator>-=</operator> <name>w</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>WINT_R</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call>
      <operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>w</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <macro><name>WINT_R</name><argument_list>(<argument>v</argument>, <argument><literal type="number">23</literal></argument>, <argument><literal type="number">1000</literal></argument>)</argument_list></macro>
    <label><name>dig7</name>:</label> <macro><name>WINT_R</name><argument_list>(<argument>v</argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
    <label><name>dig6</name>:</label> <macro><name>WINT_R</name><argument_list>(<argument>v</argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
    <label><name>dig5</name>:</label> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>v</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <macro><name>WINT_R</name><argument_list>(<argument>u</argument>, <argument><literal type="number">23</literal></argument>, <argument><literal type="number">1000</literal></argument>)</argument_list></macro>
  <label><name>dig3</name>:</label> <macro><name>WINT_R</name><argument_list>(<argument>u</argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
  <label><name>dig2</name>:</label> <macro><name>WINT_R</name><argument_list>(<argument>u</argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>
  <label><name>dig1</name>:</label> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>u</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINT_R</name></cpp:undef>

<comment type="block">/* Write pointer to buffer. */</comment>
<function><type><name>char</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_wptr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>v</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name>STRFMT_MAXBUF_PTR</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'U'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name></expr></cpp:if>
  <comment type="block">/* Shorten output for 64 bit pointers. */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><call><name>lj_fls</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>]</index></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>p</name><operator>+</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write ULEB128 to buffer. */</comment>
<function><type><name>char</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_wuleb128</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>;</condition> <incr><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return string or write number to tmp buffer and return pointer to start. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_strfmt_wstrnum</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>MSize</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
    <return>return <expr><call><name>strVdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>lj_strfmt_putint</name><argument_list>(<argument><expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <call><name>sbuflen</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Unformatted conversions to buffer ----------------------------------- */</comment>

<comment type="block">/* Add integer to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_putint</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_MAXBUF_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<comment type="block">/* Add number to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_putnum</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_putptr</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>lj_strfmt_wptr</name><argument_list>(<argument><expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_MAXBUF_PTR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add quoted string to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_putquoted</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>s</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>lj_char_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* This can only be 0-31 or 127. */</comment>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>d</name></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">100</literal> <operator>||</operator> <call><name>lj_char_isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="number">100</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<goto>goto <name>tens</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <label><name>tens</name>:</label>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <literal type="number">205</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>-=</operator> <name>d</name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>d</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Formatted conversions to buffer ------------------------------------- */</comment>

<comment type="block">/* Add formatted char to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_strfmt_putfchar</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>width</name> <init>= <expr><call><name>STRFMT_WIDTH</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add formatted string to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_strfmt_putfstr</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>width</name> <init>= <expr><call><name>STRFMT_WIDTH</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add formatted signed/unsigned integer to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_strfmt_putfxint</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>STRFMT_MAXBUF_XINT</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUA_USE_ASSERT</name></cpp:ifdef>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>MSize</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>prec</name></decl>, <decl><type ref="prev"/><name>pprec</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>need</name></decl>;</decl_stmt>

  <comment type="block">/* Figure out signed prefixes. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>STRFMT_TYPE</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STRFMT_INT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_PLUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_SPACE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">256</literal> <operator>+</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Convert number and store to fixed-size buffer in reverse order. */</comment>
  <expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sf</name> <operator>&amp;=</operator> <operator>~</operator><name>STRFMT_F_ZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Special-case zero argument. */</comment>
    <if_stmt><if>if <condition>(<expr><name>prec</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
	<operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_T_OCT</name><operator>|</operator><name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>STRFMT_T_OCT</name><operator>|</operator><name>STRFMT_F_ALT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><operator>--</operator><name>q</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_T_HEX</name><operator>|</operator><name>STRFMT_T_OCT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* Decimal. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>k2</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>q</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>k</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt> </block_content>}</block></while>
    <expr_stmt><expr><name>k2</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
    <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>q</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>k2</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>k2</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>k2</name></expr>)</condition>;</do>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_HEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* Hex. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hexdig</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"0123456789ABCDEF"</literal></expr> </then><else>:
						 <expr><literal type="string">"0123456789abcdef"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>q</name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>k</name></expr>)</condition>;</do>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">512</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'X'</literal></expr> </then><else>: <expr><literal type="char">'x'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Octal. */</comment>
    <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>q</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>k</name></expr>)</condition>;</do>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>q</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Calculate sizes. */</comment>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>STRFMT_WIDTH</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pprec</name> <operator>=</operator> <name>prec</name> <operator>+</operator> <operator>(</operator><name>prefix</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>need</name> <operator>=</operator> <ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>pprec</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>pprec</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUA_USE_ASSERT</name></cpp:ifdef>
  <expr_stmt><expr><name>ps</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Format number with leading/trailing whitespace and zeros. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name><operator>|</operator><name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>pprec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name><operator>)</operator><name>prefix</name> <operator>&gt;=</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>prefix</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name><operator>|</operator><name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>STRFMT_F_ZERO</name></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>pprec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>prec</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
  <while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>  <comment type="block">/* Add number itself. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>pprec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>need</name> <operator>==</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>ps</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add number formatted as signed integer to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_strfmt_putfnum_int</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>checki32</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>sf</name> <operator>==</operator> <name>STRFMT_INT</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>lj_strfmt_putint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>  <comment type="block">/* Shortcut for plain %d. */</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Add number formatted as unsigned integer to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_strfmt_putfnum_uint</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">9223372036854775808.0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">18446744073709551616.0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <return>return <expr><call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Conversions to strings ---------------------------------------------- */</comment>

<comment type="block">/* Convert integer to string. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_int</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>STRFMT_MAXBUF_INT</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Convert integer or number to string. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_number</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><ternary><condition><expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>lj_strfmt_int</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>lj_strfmt_num</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<comment type="block">/* Convert char value to string. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_char</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Raw conversion of object to string. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_obj</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnumber</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>lj_strfmt_number</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>lj_str_newlit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisfalse</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>lj_str_newlit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvistrue</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>lj_str_newlit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>lj_typename</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><call><name>lj_typename</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isffunc</name><argument_list>(<argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"builtin#"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>c</name><operator>.</operator><name>ffid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>lj_obj_ptr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Internal string formatting ------------------------------------------ */</comment>

<comment type="block">/*
** These functions are only used for lua_pushfstring(), lua_pushvfstring()
** and for internal string formatting (e.g. error messages). Caveat: unlike
** string.format(), only a limited subset of formats and flags are supported!
**
** LuaJIT has support for a couple more formats than Lua 5.1/5.2:
** - %d %u %o %x with full formatting, 32 bit integers only.
** - %f and other FP formats are really %.14g.
** - %s %c %p without formatting.
*/</comment>

<comment type="block">/* Push formatted message as a string object to Lua stack. va_list variant. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_strfmt_pushvf</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>argp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FormatState</name></type> <name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFormat</name></type> <name>sf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>sf</name> <operator>=</operator> <call><name>lj_strfmt_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>STRFMT_EOF</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><call><name>STRFMT_TYPE</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STRFMT_LIT</name></expr>:</case>
      <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>fs</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>STRFMT_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>STRFMT_UINT</name></expr>:</case>
      <expr_stmt><expr><call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>STRFMT_NUM</name></expr>:</case>
      <expr_stmt><expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>lua_Number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>STRFMT_STR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
      </block_content>}</block>
    <case>case <expr><name>STRFMT_CHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>STRFMT_PTR</name></expr>:</case>
      <expr_stmt><expr><call><name>lj_strfmt_putptr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>STRFMT_ERR</name></expr>:</case>
    <default>default:</default>
      <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Push formatted message as a string object to Lua stack. Vararg variant. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_strfmt_pushf</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>lj_strfmt_pushvf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>

</unit>
