<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lib_string.c"><comment type="block">/*
** String library.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
**
** Major portions taken verbatim or adapted from the Lua interpreter.
** Copyright (C) 1994-2008 Lua.org, PUC-Rio. See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_string_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_meta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bcdump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_char.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lib.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_string</name></cpp:macro></cpp:define>

<macro><name>LJLIB_LUA</name><argument_list>(<argument>string_len</argument>)</argument_list></macro> <comment type="block">/*
  function(s)
    CHECK_str(s)
    return #s
  end
*/</comment>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>string_byte</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>string_range <literal type="number">0</literal></argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><call><name>lj_lib_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>stop</name> <init>= <expr><call><name>lj_lib_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>stop</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>stop</name> <operator>+=</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>+=</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>stop</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>stop</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>stop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>FFH_RES</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Empty interval: return no results. */</comment>
  <expr_stmt><expr><name>start</name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>stop</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name> <operator>&gt;</operator> <name>LUAI_MAXCSTACK</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STRSLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_state_checkstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name>i</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><call><name>FFH_RES</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>string_char</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nargs</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>lj_buf_tmp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name>nargs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checku8</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_err_arg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>LJ_ERR_BADVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>k</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nargs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>FFH_RES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>string_sub</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>string_range <literal type="number">1</literal></argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>lj_lib_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_rep</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rep</name> <init>= <expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>lj_lib_optstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>&amp;&amp;</operator> <name>rep</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>lj_buf_cat2str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lj_buf_reset</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_buf_putstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rep</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>lj_buf_putstr_rep</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>string_reverse</argument>)</argument_list></macro>  <macro><name>LJLIB_REC</name><argument_list>(<argument>string_op IRCALL_lj_buf_putstr_reverse</argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>string_lower</argument>)</argument_list></macro>  <macro><name>LJLIB_REC</name><argument_list>(<argument>string_op IRCALL_lj_buf_putstr_lower</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>string_upper</argument>)</argument_list></macro>  <macro><name>LJLIB_REC</name><argument_list>(<argument>string_op IRCALL_lj_buf_putstr_upper</argument>)</argument_list></macro>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writer_buf</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><operator>(</operator><name>SBuf</name> <operator>*</operator><operator>)</operator><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_dump</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>lj_lib_checkfunc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>strip</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <call><name>tvistruecond</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Assumes lj_bcwrite() doesn't use tmpbuf. */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>lj_bcwrite</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>writer_buf</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>strip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STRDUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* macro to `unsign' a character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uchar</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>((unsigned char)(c))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_UNFINISHED</name></cpp:macro>	<cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_POSITION</name></cpp:macro>	<cpp:value>(-2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MatchState</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_init</name></decl>;</decl_stmt>  <comment type="block">/* init of source string */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_end</name></decl>;</decl_stmt>  <comment type="block">/* end (`\0') of source string */</comment>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>  <comment type="block">/* total number of captures (finished or unfinished) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
  <struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>len</name></decl>;</decl_stmt>
  }</block> <decl><name><name>capture</name><index>[<expr><name>LUA_MAXCAPTURES</name></expr>]</index></name></decl>;</struct>
}</block></struct></type> <name>MatchState</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L_ESC</name></cpp:macro>		<cpp:value>'%'</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_capture</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>l</name> <operator>-=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>||</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRCAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>capture_to_close</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>level</name><operator>--</operator></expr>;</init> <condition><expr><name>level</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>level</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRPATC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* unreachable */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>classend</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>L_ESC</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRPATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
  <case>case <expr><literal type="char">'['</literal></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <do>do <block>{<block_content>  <comment type="block">/* look for a `]' */</comment>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRPATM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>L_ESC</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* skip escapes (e.g. `%]') */</comment>
    </block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>;</do>
    <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
  <default>default:</default>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>match_class_map</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,<expr><name>LJ_CHAR_ALPHA</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>LJ_CHAR_CNTRL</name></expr>,<expr><name>LJ_CHAR_DIGIT</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>LJ_CHAR_GRAPH</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
  <expr><name>LJ_CHAR_LOWER</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>LJ_CHAR_PUNCT</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>LJ_CHAR_SPACE</name></expr>,<expr><literal type="number">0</literal></expr>,
  <expr><name>LJ_CHAR_UPPER</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>LJ_CHAR_ALNUM</name></expr>,<expr><name>LJ_CHAR_XDIGIT</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_class</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cl</name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>match_class_map</name><index>[<expr><operator>(</operator><name>cl</name><operator>&amp;</operator><literal type="number">0x1f</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>lj_char_isa</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>cl</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><operator>!</operator><name>t</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cl</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cl</name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>cl</name> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>matchbracketclass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sig</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip the `^' */</comment>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>++</operator><name>p</name> <operator>&lt;</operator> <name>ec</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>L_ESC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>match_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>ec</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sig</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>!</operator><name>sig</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>singlematch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="char">'.'</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* matches any char */</comment>
  <case>case <expr><name>L_ESC</name></expr>:</case> <return>return <expr><call><name>match_class</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <case>case <expr><literal type="char">'['</literal></expr>:</case> <return>return <expr><call><name>matchbracketclass</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  <default>default:</default>  <return>return <expr><operator>(</operator><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>matchbalance</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRPATU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>++</operator><name>s</name> <operator>&lt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>--</operator><name>cont</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>cont</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* string ends out of balance */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>max_expand</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
			      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* counts maximum expand for item */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator><operator>&lt;</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <call><name>singlematch</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <comment type="block">/* keeps trying to match with the maximum repetitions */</comment>
  <while>while <condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>(</operator><name>s</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* else didn't match; reduce 1 repetition to try again */</comment>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>min_expand</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
			      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>res</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>s</name><operator>&lt;</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <call><name>singlematch</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* try with one more repetition */</comment>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start_capture</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>LUA_MAXCAPTURES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRCAPN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* match failed? */</comment>
    <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo capture */</comment>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end_capture</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
			       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>capture_to_close</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>init</name></expr>;</expr_stmt>  <comment type="block">/* close capture */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* match failed? */</comment>
    <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>CAP_UNFINISHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* undo capture */</comment>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match_capture</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>check_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name><operator>-</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <name>len</name> <operator>&amp;&amp;</operator>
      <call><name>memcmp</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>s</name><operator>+</operator><name>len</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>match</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>ms</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name>LJ_MAX_XLEVEL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRPATX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <label><name>init</name>:</label> <comment type="block">/* using goto's to optimize tail recursion */</comment>
  <switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="char">'('</literal></expr>:</case>  <comment type="block">/* start capture */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* position capture? */</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>start_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>CAP_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>start_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>CAP_UNFINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
  <case>case <expr><literal type="char">')'</literal></expr>:</case>  <comment type="block">/* end capture */</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>end_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>L_ESC</name></expr>:</case>
    <switch>switch <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case>  <comment type="block">/* balanced string? */</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>matchbalance</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
      <goto>goto <name>init</name>;</goto>  <comment type="block">/* else s = match(ms, s, p+4); */</comment>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* frontier? */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>previous</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRPATB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>classend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* points to what is next */</comment>
      <expr_stmt><expr><name>previous</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'\0'</literal></expr> </then><else>: <expr><operator>*</operator><operator>(</operator><name>s</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>matchbracketclass</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>
	 <operator>!</operator><call><name>matchbracketclass</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>p</name><operator>=</operator><name>ep</name></expr>;</expr_stmt>
      <goto>goto <name>init</name>;</goto>  <comment type="block">/* else s = match(ms, s, ep); */</comment>
      </block_content>}</block>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><call><name>lj_char_isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* capture results (%0-%9)? */</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>match_capture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<goto>goto <name>init</name>;</goto>  <comment type="block">/* else s = match(ms, s, p+2) */</comment>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>dflt</name>;</goto>  <comment type="block">/* case default */</comment>
    </block_content>}</block></switch>
    <break>break;</break>
  <case>case <expr><literal type="char">'\0'</literal></expr>:</case>  <comment type="block">/* end of pattern */</comment>
    <break>break;</break>  <comment type="block">/* match succeeded */</comment>
  <case>case <expr><literal type="char">'$'</literal></expr>:</case>
    <comment type="block">/* is the `$' the last char in pattern? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>dflt</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* check end of string */</comment>
    <break>break;</break>
  <default>default:</default> <label><name>dflt</name>:</label> <block>{<block_content>  <comment type="block">/* it is a pattern item */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><call><name>classend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* points to what is next */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>s</name><operator>&lt;</operator><name><name>ms</name><operator>-&gt;</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <call><name>singlematch</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><operator>*</operator><name>ep</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'?'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* optional */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>res</name><operator>=</operator><call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>p</name><operator>=</operator><name>ep</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>init</name>;</goto>  <comment type="block">/* else s = match(ms, s, ep+1); */</comment>
      </block_content>}</block>
    <case>case <expr><literal type="char">'*'</literal></expr>:</case>  <comment type="block">/* 0 or more repetitions */</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>max_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'+'</literal></expr>:</case>  <comment type="block">/* 1 or more repetitions */</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>m</name></expr> ?</condition><then> <expr><call><name>max_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'-'</literal></expr>:</case>  <comment type="block">/* 0 or more repetitions (minimum) */</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>min_expand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>=</operator><name>ep</name></expr>;</expr_stmt> <goto>goto <name>init</name>;</goto> </block_content>}</block></if></if_stmt>  <comment type="block">/* else s = match(ms, s+1, ep); */</comment>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
    <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>
  <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_onecapture</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* ms-&gt;level == 0, too */</comment>
      <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* add whole match */</comment>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRCAPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>l</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>CAP_UNFINISHED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_STRCAPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>CAP_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>src_init</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>capture</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_captures</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlevels</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>ms</name><operator>-&gt;</operator><name>level</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_checkstack</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>nlevels</name></expr></argument>, <argument><expr><literal type="string">"too many captures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlevels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>nlevels</name></expr>;</return>  <comment type="block">/* number of strings pushed */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>str_find_aux</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>find</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><call><name>lj_lib_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>st</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>start</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>st</name> <operator>=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><name>start</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>st</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_52</name></expr></cpp:if>
    <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>find</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">3</literal> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <call><name>tvistruecond</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	       <operator>!</operator><call><name>lj_str_haspattern</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* Search for fixed string. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>lj_str_find</name><argument_list>(<argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><name>st</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name>st</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>q</name><operator>-</operator><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>q</name><operator>-</operator><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Search for pattern. */</comment>
    <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstr</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sstr</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>st</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>anchor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>pstr</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>anchor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_init</name></name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <do>do <block>{<block_content>  <comment type="block">/* Loop through string and try to match the pattern. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>ms</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>sstr</name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>find</name></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>sstr</name><operator>-</operator><operator>(</operator><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>q</name><operator>-</operator><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>sstr</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>sstr</name><operator>++</operator> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>anchor</name></expr>)</condition>;</do>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Not found. */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_find</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <return>return <expr><call><name>str_find_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_match</argument>)</argument_list></macro>
<block>{<block_content>
  <return>return <expr><call><name>str_find_aux</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<function><type><name>LJLIB_NOREG</name></type> <name>LJLIB_CF</name><parameter_list>(<parameter><decl><type><name>string_gmatch_aux</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strVdata</name><argument_list>(<argument><expr><call><name>lj_lib_upvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strV</name><argument_list>(<argument><expr><call><name>lj_lib_upvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>tvpos</name> <init>= <expr><call><name>lj_lib_upvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>s</name> <operator>+</operator> <name><name>tvpos</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_init</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>src</name> <operator>&lt;=</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>ms</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Ensure progress for empty match. */</comment>
      <expr_stmt><expr><name><name>tvpos</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>pos</name></expr>;</expr_stmt>
      <return>return <expr><call><name>push_captures</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* not found */</comment>
</block_content>}</block></function>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_gmatch</argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>u64</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_lib_pushcc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lj_cf_string_gmatch_aux</name></expr></argument>, <argument><expr><name>FF_string_gmatch_aux</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_s</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>news</name> <init>= <expr><call><name>lua_tolstring</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>L_ESC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* skip ESC */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lj_char_isdigit</name><argument_list>(<argument><expr><call><name>uchar</name><argument_list>(<argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>news</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'1'</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add capture to accumulated result */</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_value</name><parameter_list>(<parameter><decl><type><name>MatchState</name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>luaL_Buffer</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
		      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LUA_TNUMBER</name></expr>:</case>
    <case>case <expr><name>LUA_TSTRING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>add_s</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block>
    <case>case <expr><name>LUA_TFUNCTION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>push_captures</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>LUA_TTABLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>push_onecapture</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_toboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* nil or false? */</comment>
    <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* keep original text */</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lua_isstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_err_callerv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STRGSRV</name></expr></argument>, <argument><expr><call><name>luaL_typename</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_addvalue</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* add result to accumulator */</comment>
</block_content>}</block></function>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_gsub</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>srcl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>luaL_checklstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>tr</name> <init>= <expr><call><name>lua_type</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_s</name> <init>= <expr><call><name>luaL_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>srcl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>anchor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>p</name><operator>++</operator>, <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MatchState</name></type> <name>ms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>luaL_Buffer</name></type> <name>b</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tr</name> <operator>==</operator> <name>LUA_TNUMBER</name> <operator>||</operator> <name>tr</name> <operator>==</operator> <name>LUA_TSTRING</name> <operator>||</operator>
	<name>tr</name> <operator>==</operator> <name>LUA_TFUNCTION</name> <operator>||</operator> <name>tr</name> <operator>==</operator> <name>LUA_TTABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_arg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LJ_ERR_NOSFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>luaL_buffinit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_init</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>src_end</name></name> <operator>=</operator> <name>src</name><operator>+</operator><name>srcl</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>max_s</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ms</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>ms</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <name>e</name><operator>&gt;</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* non empty match? */</comment>
      <expr_stmt><expr><name>src</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* skip it */</comment>
    <if type="elseif">else if <condition>(<expr><name>src</name> <operator>&lt;</operator> <name><name>ms</name><operator>.</operator><name>src_end</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>luaL_addchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <break>break;</break></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>anchor</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>luaL_addlstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>ms</name><operator>.</operator><name>src_end</name></name><operator>-</operator><name>src</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaL_pushresult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* number of substitutions */</comment>
  <return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* Emulate tostring() inline. */</comment>
<function><type><specifier>static</specifier> <name>GCstr</name> <modifier>*</modifier></type><name>string_fmt_tostring</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>retry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>o</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Caller already checks for existence. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>retry</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>MM_tostring</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>--</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* Buffer may be overwritten, retry. */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>lj_strfmt_obj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>LJLIB_CF</name><argument_list>(<argument>string_format</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>, <decl><type ref="prev"/><name>top</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FormatState</name></type> <name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFormat</name></type> <name>sf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>retry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<label><name>again</name>:</label>
  <expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>sf</name> <operator>=</operator> <call><name>lj_strfmt_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>STRFMT_EOF</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sf</name> <operator>==</operator> <name>STRFMT_LIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>fs</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sf</name> <operator>==</operator> <name>STRFMT_ERR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lj_err_callerv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STRFMT</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>fs</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>arg</name> <operator>&gt;</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>luaL_argerror</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>lj_obj_typename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <switch>switch <condition>(<expr><call><name>STRFMT_TYPE</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>STRFMT_INT</name></expr>:</case>
	<if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><call><name>intV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>sf</name> <operator>==</operator> <name>STRFMT_INT</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lj_strfmt_putint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* Shortcut for plain %d. */</comment>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putfnum_int</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<break>break;</break>
      <case>case <expr><name>STRFMT_UINT</name></expr>:</case>
	<if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putfnum_uint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
      <case>case <expr><name>STRFMT_NUM</name></expr>:</case>
	<expr_stmt><expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      <case>case <expr><name>STRFMT_STR</name></expr>:</case> <block>{<block_content>
	<decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>string_fmt_tostring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>retry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>retry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_QUOTED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putquoted</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* No formatting. */</comment>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putfstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<break>break;</break>
	</block_content>}</block>
      <case>case <expr><name>STRFMT_CHAR</name></expr>:</case>
	<expr_stmt><expr><call><name>lj_strfmt_putfchar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      <case>case <expr><name>STRFMT_PTR</name></expr>:</case>  <comment type="block">/* No formatting. */</comment>
	<expr_stmt><expr><call><name>lj_strfmt_putptr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>lj_obj_ptr</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>arg</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      <default>default:</default>
	<expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>retry</name><operator>++</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>again</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_string</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_STRLIBNAME</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>lj_tab_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: basemt is a GC root. */</comment>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><call><name>basemt_it</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>LJ_TSTR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>settabV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lj_tab_setstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>mt</name></expr></argument>, <argument><expr><call><name>mmname_str</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>MM_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>nomm</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>~</operator><operator>(</operator><literal type="number">1u</literal><operator>&lt;&lt;</operator><name>MM_index</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
