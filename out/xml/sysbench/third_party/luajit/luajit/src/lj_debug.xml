<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_debug.c"><comment type="block">/*
** Debugging and introspection.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_debug_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- Frames -------------------------------------------------------------- */</comment>

<comment type="block">/* Get frame corresponding to a level. */</comment>
<function><type><name>cTValue</name> <modifier>*</modifier></type><name>lj_debug_frame</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nextframe</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bot</name> <init>= <expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call><operator>+</operator><name>LJ_FR2</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Traverse frames backwards. */</comment>
  <for>for <control>(<init><expr><name>nextframe</name> <operator>=</operator> <name>frame</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>frame</name> <operator>&gt;</operator> <name>bot</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>frame_gc</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Skip dummy frames. See lj_err_optype_call(). */</comment>
    <if_stmt><if>if <condition>(<expr><name>level</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nextframe</name> <operator>-</operator> <name>frame</name><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><name>frame</name></expr>;</return>  <comment type="block">/* Level found. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nextframe</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>frame_islua</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>frame_prevl</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>frame_isvarg</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Skip vararg pseudo-frame. */</comment>
      <expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>frame_prevd</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* Level not found. */</comment>
</block_content>}</block></function>

<comment type="block">/* Invalid bytecode position. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_BCPOS</name></cpp:macro>	<cpp:value>(~(BCPos)0)</cpp:value></cpp:define>

<comment type="block">/* Return bytecode position for function/frame or NO_BCPOS. */</comment>
<function><type><specifier>static</specifier> <name>BCPos</name></type> <name>debug_framepc</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>nextframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>ins</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCPos</name></type> <name>pos</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TFUNC</name> <operator>||</operator> <name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TTHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Cannot derive a PC for non-Lua functions. */</comment>
    <return>return <expr><name>NO_BCPOS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nextframe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Lua function on top. */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><call><name>cframe_raw</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>cframe</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cframe_pc</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>cframe_L</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NO_BCPOS</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>cframe_pc</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Only happens during error/hook handling. */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>frame_islua</name><argument_list>(<argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>frame_pc</name><argument_list>(<argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>frame_iscont</name><argument_list>(<argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>frame_contpc</name><argument_list>(<argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* Lua function below errfunc/gc/hook: find cframe to get the PC. */</comment>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><call><name>cframe_raw</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>cframe</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>NO_BCPOS</name></expr>;</return></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><call><name>cframe_nres</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;=</operator> <call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><call><name>cframe_nres</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>cframe_raw</name><argument_list>(<argument><expr><call><name>cframe_prev</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>cf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><name>NO_BCPOS</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <name>nextframe</name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>frame_islua</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>frame_prevl</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>frame_isc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>frame_iscont</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>frame_iscont_fficb</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>cframe_raw</name><argument_list>(<argument><expr><call><name>cframe_prev</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>frame_prevd</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>cframe_pc</name><argument_list>(<argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>proto_bcpos</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Undo the effects of lj_trace_exit for JLOOP. */</comment>
    <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><operator>(</operator><name>GCtrace</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ins</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>GCtrace</name></expr></argument>, <argument><expr><name>startins</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>bc_isret</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><name><name>ins</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>proto_bcpos</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><call><name>mref</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startpc</name></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>BCIns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Line numbers -------------------------------------------------------- */</comment>

<comment type="block">/* Get line number for a bytecode position. */</comment>
<function><type><name>BCLine</name> <name>LJ_FASTCALL</name></type> <name>lj_debug_line</name><parameter_list>(<parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>BCPos</name></type> <name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lineinfo</name> <init>= <expr><call><name>proto_lineinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name> <operator>&amp;&amp;</operator> <name>lineinfo</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCLine</name></type> <name>first</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>==</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>first</name> <operator>+</operator> <name><name>pt</name><operator>-&gt;</operator><name>numline</name></name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pc</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>first</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>numline</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>first</name> <operator>+</operator> <operator>(</operator><name>BCLine</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>lineinfo</name><operator>)</operator><index>[<expr><name>pc</name></expr>]</index></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>numline</name></name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>first</name> <operator>+</operator> <operator>(</operator><name>BCLine</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>lineinfo</name><operator>)</operator><index>[<expr><name>pc</name></expr>]</index></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>first</name> <operator>+</operator> <operator>(</operator><name>BCLine</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>lineinfo</name><operator>)</operator><index>[<expr><name>pc</name></expr>]</index></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get line number for function/frame. */</comment>
<function><type><specifier>static</specifier> <name>BCLine</name></type> <name>debug_frameline</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>nextframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>BCPos</name></type> <name>pc</name> <init>= <expr><call><name>debug_framepc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <name>NO_BCPOS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>pc</name> <operator>&lt;=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>lj_debug_line</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Variable names ------------------------------------------------------ */</comment>

<comment type="block">/* Get name of a local variable from slot number and PC. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>debug_varname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>BCPos</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name>BCReg</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>proto_varinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCPos</name></type> <name>lastpc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>vn</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BCPos</name></type> <name>startpc</name></decl>, <decl><type ref="prev"/><name>endpc</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>vn</name> <operator>&lt;</operator> <name>VARNAME__MAX</name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>vn</name> <operator>==</operator> <name>VARNAME_END</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>  <comment type="block">/* End of varinfo. */</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<do>do <block>{<block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>)</condition>;</do>  <comment type="block">/* Skip over variable name. */</comment>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastpc</name> <operator>=</operator> <name>startpc</name> <operator>=</operator> <name>lastpc</name> <operator>+</operator> <call><name>lj_buf_ruleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>startpc</name> <operator>&gt;</operator> <name>pc</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>endpc</name> <operator>=</operator> <name>startpc</name> <operator>+</operator> <call><name>lj_buf_ruleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <name>endpc</name> <operator>&amp;&amp;</operator> <name>slot</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>vn</name> <operator>&lt;</operator> <name>VARNAME__MAX</name></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARNAMESTR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>str "\0"</cpp:value></cpp:define>
	  <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>VARNAMEDEF</name><argument_list>(<argument><expr><name>VARNAMESTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>VARNAMESTR</name></cpp:undef>
	  <if_stmt><if>if <condition>(<expr><operator>--</operator><name>vn</name></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><operator>*</operator><name>name</name><operator>++</operator> <operator>||</operator> <operator>--</operator><name>vn</name></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>name</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get name of local variable from 1-based slot number and function/frame. */</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>debug_localname</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>,
			       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>BCReg</name></type> <name>slot1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>nextframe</name> <init>= <expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>frame</name> <operator>+</operator> <name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>frame_func</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCPos</name></type> <name>pc</name> <init>= <expr><call><name>debug_framepc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nextframe</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nextframe</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><name>LJ_FR2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>slot1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Negative slot number is for varargs. */</comment>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <name>NO_BCPOS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_VARARG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>slot1</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>numparams</name></name> <operator>+</operator> <operator>(</operator><name>BCReg</name><operator>)</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>slot1</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>frame_isvarg</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Vararg frame has been set up? (pc!=0) */</comment>
	  <expr_stmt><expr><name>nextframe</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>frame_prevd</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>+</operator> <name>slot1</name><operator>+</operator><name>LJ_FR2</name> <operator>&lt;</operator> <name>nextframe</name></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"(*vararg)"</literal></expr>;</expr_stmt>
	  <return>return <expr><name>frame</name><operator>+</operator><name>slot1</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <name>NO_BCPOS</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>*</operator><name>name</name> <operator>=</operator> <call><name>debug_varname</name><argument_list>(<argument><expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>slot1</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <empty_stmt>;</empty_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>slot1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frame</name> <operator>+</operator> <name>slot1</name><operator>+</operator><name>LJ_FR2</name> <operator>&lt;</operator> <name>nextframe</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="string">"(*temporary)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>frame</name><operator>+</operator><name>slot1</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get name of upvalue. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_debug_uvname</name><parameter_list>(<parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>proto_uvinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>||</operator> <operator>--</operator><name>idx</name></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get name and value of upvalue. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_debug_uvnamev</name><parameter_list>(<parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier><modifier>*</modifier></type><name>tvp</name></decl></parameter>, <parameter><decl><type><name>GCobj</name> <modifier>*</modifier><modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>funcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>uvo</name> <init>= <expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>uvptr</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>tvp</name> <operator>=</operator> <call><name>uvval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uvo</name><operator>-&gt;</operator><name>uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <name>uvo</name></expr>;</expr_stmt>
	<return>return <expr><call><name>lj_debug_uvname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>tvp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>upvalue</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="string">""</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Deduce name of an object from slot number and PC. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_debug_slotname</name><parameter_list>(<parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>BCReg</name></type> <name>slot</name></decl></parameter>,
			      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lname</name></decl>;</decl_stmt>
<label><name>restart</name>:</label>
  <expr_stmt><expr><name>lname</name> <operator>=</operator> <call><name>debug_varname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><call><name>proto_bcpos</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>lname</name></expr>;</expr_stmt> <return>return <expr><literal type="string">"local"</literal></expr>;</return> </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><operator>--</operator><name>ip</name> <operator>&gt;</operator> <call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCIns</name></type> <name>ins</name> <init>= <expr><operator>*</operator><name>ip</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BCOp</name></type> <name>op</name> <init>= <expr><call><name>bc_op</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BCReg</name></type> <name>ra</name> <init>= <expr><call><name>bc_a</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>bcmode_a</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BCMbase</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&gt;=</operator> <name>ra</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>!=</operator> <name>BC_KNIL</name> <operator>||</operator> <name>slot</name> <operator>&lt;=</operator> <call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>bcmode_a</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BCMdst</name> <operator>&amp;&amp;</operator> <name>ra</name> <operator>==</operator> <name>slot</name></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>BC_MOV</name></expr>:</case>
	<if_stmt><if>if <condition>(<expr><name>ra</name> <operator>==</operator> <name>slot</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto>goto <name>restart</name>;</goto> </block_content>}</block></if></if_stmt>
	<break>break;</break>
      <case>case <expr><name>BC_GGET</name></expr>:</case>
	<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><call><name>gco2str</name><argument_list>(<argument><expr><call><name>proto_kgc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="string">"global"</literal></expr>;</return>
      <case>case <expr><name>BC_TGETS</name></expr>:</case>
	<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><call><name>gco2str</name><argument_list>(<argument><expr><call><name>proto_kgc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>bc_c</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&gt;</operator> <call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>BCIns</name></type> <name>insp</name> <init>= <expr><name><name>ip</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><name>insp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_MOV</name> <operator>&amp;&amp;</operator> <call><name>bc_a</name><argument_list>(<argument><expr><name>insp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ra</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>LJ_FR2</name> <operator>&amp;&amp;</operator>
	      <call><name>bc_d</name><argument_list>(<argument><expr><name>insp</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>bc_b</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="string">"method"</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="string">"field"</literal></expr>;</return>
      <case>case <expr><name>BC_UGET</name></expr>:</case>
	<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>lj_debug_uvname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="string">"upvalue"</literal></expr>;</return>
      <default>default:</default>
	<return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Deduce function name from caller of a frame. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_debug_funcname</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>pframe</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCPos</name></type> <name>pc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>frame</name> <operator>&lt;=</operator> <call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call><operator>+</operator><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>frame_isvarg</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>frame_prevd</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pframe</name> <operator>=</operator> <call><name>frame_prev</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>frame_func</name><argument_list>(<argument><expr><name>pframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pc</name> <operator>=</operator> <call><name>debug_framepc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>!=</operator> <name>NO_BCPOS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>&amp;</operator><call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call><index>[<expr><call><name>check_exp</name><argument_list>(<argument><expr><name>pc</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>]</index></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MMS</name></type> <name>mm</name> <init>= <expr><call><name>bcmode_mm</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mm</name> <operator>==</operator> <name>MM_call</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BCReg</name></type> <name>slot</name> <init>= <expr><call><name>bc_a</name><argument_list>(<argument><expr><operator>*</operator><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_ITERC</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>slot</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><call><name>lj_debug_slotname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mm</name> <operator>!=</operator> <name>MM__MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><call><name>mmname_str</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="string">"metamethod"</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Source code locations ----------------------------------------------- */</comment>

<comment type="block">/* Generate shortened source name. */</comment>
<function><type><name>void</name></type> <name>lj_debug_shortname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>BCLine</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_IDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Remove first char. */</comment>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>LUA_IDSIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>  <comment type="block">/* Ensures null termination. */</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Output "source", or "...source". */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* Skip the `@' */</comment>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>LUA_IDSIZE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>src</name> <operator>+=</operator> <name>len</name><operator>-</operator><operator>(</operator><name>LUA_IDSIZE</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* Get last part of file name. */</comment>
      <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Output [string "string"] or [builtin:name]. */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>  <comment type="block">/* Length, up to first control char. */</comment>
    <for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>LUA_IDSIZE</name><operator>-</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><index>[<expr><name>len</name></expr>]</index> <operator>&lt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>line</name> <operator>==</operator> <operator>~</operator><operator>(</operator><name>BCLine</name><operator>)</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"[builtin:"</literal></expr> </then><else>: <expr><literal type="string">"[string \""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Must truncate? */</comment>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>LUA_IDSIZE</name><operator>-</operator><literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>LUA_IDSIZE</name><operator>-</operator><literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><ternary><condition><expr><name>line</name> <operator>==</operator> <operator>~</operator><operator>(</operator><name>BCLine</name><operator>)</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">"\"]"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Add current location of a frame to error message. */</comment>
<function><type><name>void</name></type> <name>lj_debug_addloc</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
		     <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>nextframe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>frame_func</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BCLine</name></type> <name>line</name> <init>= <expr><call><name>debug_frameline</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>line</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LUA_IDSIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>lj_debug_shortname</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>proto_chunkname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s:%d: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Push location string for a bytecode position to Lua stack. */</comment>
<function><type><name>void</name></type> <name>lj_debug_pushloc</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>BCPos</name></type> <name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>proto_chunkname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCLine</name></type> <name>line</name> <init>= <expr><call><name>lj_debug_line</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name> <operator>==</operator> <operator>~</operator><operator>(</operator><name>BCLine</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"builtin:%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%p:%d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lj_strfmt_pushf</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\"%s\":%d"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Public debug API ---------------------------------------------------- */</comment>

<comment type="block">/* lua_getupvalue() and lua_setupvalue() are in lj_api.c. */</comment>

<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_getlocal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ar</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>debug_localname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>BCReg</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isluafunc</name><argument_list>(<argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>debug_varname</name><argument_list>(<argument><expr><call><name>funcproto</name><argument_list>(<argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>BCReg</name><operator>)</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lua_setlocal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>debug_localname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>BCReg</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
  <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lj_debug_getinfo</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>lj_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>opt_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>opt_L</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>nextframe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tvisfunc</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>funcV</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>what</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nextframe</name> <operator>=</operator> <name>frame</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>frame</name> <operator>&lt;=</operator> <call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>maxstack</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	       <operator>(</operator><operator>!</operator><name>nextframe</name> <operator>||</operator> <name>nextframe</name> <operator>&lt;=</operator> <call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>maxstack</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>frame_func</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TFUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>what</name></expr>;</condition> <incr><expr><name>what</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BCLine</name></type> <name>firstline</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>proto_chunkname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>lj_debug_shortname</name><argument_list>(<argument><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>firstline</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>firstline</name> <operator>+</operator> <name><name>pt</name><operator>-&gt;</operator><name>numline</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>firstline</name> <operator>||</operator> <operator>!</operator><name><name>pt</name><operator>-&gt;</operator><name>numline</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Lua"</literal></expr> </then><else>: <expr><literal type="string">"main"</literal></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <literal type="string">"=[C]"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'C'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>short_src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>linedefined</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>lastlinedefined</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>what</name></name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>currentline</name></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><call><name>debug_frameline</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nups</name></name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ext</name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>numparams</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>isvararg</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_VARARG</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>isvararg</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><call><name>lj_debug_funcname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>namewhat</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>opt_f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>what</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>opt_L</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Bad option. */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>opt_f</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setfuncV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt_L</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>lj_tab_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lineinfo</name> <init>= <expr><call><name>proto_lineinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>lineinfo</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>BCLine</name></type> <name>first</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><ternary><condition><expr><name><name>pt</name><operator>-&gt;</operator><name>numline</name></name> <operator>&lt;</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>pt</name><operator>-&gt;</operator><name>numline</name></name> <operator>&lt;</operator> <literal type="number">65536</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>szl</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>szl</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	  <decl_stmt><decl><type><name>BCLine</name></type> <name>line</name> <init>= <expr><name>first</name> <operator>+</operator>
	    <operator>(</operator><ternary><condition><expr><name>sz</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator><name>BCLine</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>lineinfo</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr> </then><else>:
	     <expr><ternary><condition><expr><name>sz</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator><name>BCLine</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator><name>lineinfo</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr> </then><else>:
	     <expr><operator>(</operator><name>BCLine</name><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>lineinfo</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><call><name>lj_tab_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>settabV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>incr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Ok. */</comment>
</block_content>}</block></function>

<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getinfo</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>lj_debug_getinfo</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><operator>(</operator><name>lj_Debug</name> <operator>*</operator><operator>)</operator><name>ar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LUA_API</name> <name>int</name></type> <name>lua_getstack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>lua_Debug</name> <modifier>*</modifier></type><name>ar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>lj_debug_frame</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>frame</name> <operator>-</operator> <call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>ar</name><operator>-&gt;</operator><name>i_ci</name></name> <operator>=</operator> <name>level</name> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASPROFILE</name></expr></cpp:if>
<comment type="block">/* Put the chunkname into a buffer. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>debug_putchunkname</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pathstrip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>proto_chunkname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name> <operator>==</operator> <operator>~</operator><operator>(</operator><name>BCLine</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"[builtin:"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_buf_putstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pathstrip</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"[string]"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Put a compact stack dump into a buffer. */</comment>
<function><type><name>void</name></type> <name>lj_debug_dumpstack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>pathstrip</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>lastlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <operator>~</operator><name>depth</name></expr>;</expr_stmt> <expr_stmt><expr><name>depth</name> <operator>=</operator> <name>dir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>  <comment type="block">/* Reverse frames. */</comment>
  <while>while <condition>(<expr><name>level</name> <operator>!=</operator> <name>depth</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Loop through all frame. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>lj_debug_frame</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>nextframe</name> <init>= <expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>frame</name><operator>+</operator><name>size</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>frame_func</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>fmt</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
	<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="char">'p'</literal></expr>:</case>  <comment type="block">/* Preserve full path. */</comment>
	  <expr_stmt><expr><name>pathstrip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <break>break;</break>
	<case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* Dump function name. */</comment>
	  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name> <init>= <expr><call><name>lj_debug_funcname</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>what</name></expr>)</condition> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'F'</literal> <operator>&amp;&amp;</operator> <call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Dump module:name for 'F'. */</comment>
	      <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name> <operator>!=</operator> <operator>~</operator><operator>(</operator><name>BCLine</name><operator>)</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Not a bytecode builtin. */</comment>
		<expr_stmt><expr><call><name>debug_putchunkname</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pathstrip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	  </block_content>}</block></if></if_stmt>  <comment type="block">/* else: can't derive a name, dump module:line. */</comment>
	  </block_content>}</block>
	  <comment type="block">/* fallthrough */</comment>
	<case>case <expr><literal type="char">'l'</literal></expr>:</case>  <comment type="block">/* Dump module:line. */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	    <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>funcproto</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <if_stmt><if>if <condition>(<expr><call><name>debug_putchunkname</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pathstrip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	      <comment type="block">/* Regular Lua function. */</comment>
	      <decl_stmt><decl><type><name>BCLine</name></type> <name>line</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'l'</literal></expr> ?</condition><then> <expr><call><name>debug_frameline</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>nextframe</name></expr></argument>)</argument_list></call></expr> </then><else>:
				       <expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	      <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>lj_strfmt_putint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>line</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>line</name></expr> </then><else>: <expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isffunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Dump numbered builtins. */</comment>
	    <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"[builtin#"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>lj_strfmt_putint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>ffid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Dump C function address. */</comment>
	    <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>lj_strfmt_putptr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></else></if_stmt>
	  <break>break;</break>
	<case>case <expr><literal type="char">'Z'</literal></expr>:</case>  <comment type="block">/* Zap trailing separator. */</comment>
	  <expr_stmt><expr><name>lastlen</name> <operator>=</operator> <call><name>sbuflen</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
	<default>default:</default>
	  <expr_stmt><expr><call><name>lj_buf_putb</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></switch>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>level</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>  <comment type="block">/* Reverse frame order: quickly skip missing level. */</comment>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>level</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>lastlen</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>lastlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Zap trailing separator. */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Number of frames for the leading and trailing part of a traceback. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACEBACK_LEVELS1</name></cpp:macro>	<cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACEBACK_LEVELS2</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>

<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_traceback</name> <parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><name>TRACEBACK_LEVELS1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_Debug</name></type> <name>ar</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"stack traceback:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>level</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <name>TRACEBACK_LEVELS2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\n\t..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>lua_getstack</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>ar</name><operator>.</operator><name>i_ci</name></name> <operator>-</operator> <name>TRACEBACK_LEVELS2</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>lim</name> <operator>=</operator> <literal type="number">2147483647</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_getinfo</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><literal type="string">"Snlf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>funcV</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isffunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name><name>ar</name><operator>.</operator><name>namewhat</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\n\t[builtin#%d]:"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>ffid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"\n\t%s:"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ar</name><operator>.</operator><name>currentline</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"%d:"</literal></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>currentline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ar</name><operator>.</operator><name>namewhat</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">" in function "</literal> <name>LUA_QS</name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>ar</name><operator>.</operator><name>what</name></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">" in main chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>ar</name><operator>.</operator><name>what</name></name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">" at %p"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>lua_pushfstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">" in function &lt;%s:%d&gt;"</literal></expr></argument>,
			<argument><expr><name><name>ar</name><operator>.</operator><name>short_src</name></name></expr></argument>, <argument><expr><name><name>ar</name><operator>.</operator><name>linedefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>-</operator> <name>top</name> <operator>&gt;=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_concat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>-</operator> <name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>lua_concat</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>-</operator> <name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
