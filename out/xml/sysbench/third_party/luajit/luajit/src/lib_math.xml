<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lib_math.c"><comment type="block">/*
** Math library.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_math_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_math</name></cpp:macro></cpp:define>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>math_abs</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_floor</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_round IRFPM_FLOOR</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_ceil</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_round IRFPM_CEIL</argument>)</argument_list></macro>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>math_sqrt</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_unary IRFPM_SQRT</argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_log10</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_log10</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_exp</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_exp</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_sin</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_sin</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_cos</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_cos</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_tan</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_tan</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_asin</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_asin</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_acos</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_acos</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_atan</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_atan</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_sinh</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_sinh</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_cosh</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_cosh</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_tanh</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_call IRCALL_tanh</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_frexp</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_modf</argument>)</argument_list></macro>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>math_log</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_log</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_NO_LOG2</name></cpp:ifdef>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>lj_vm_log2</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>lj_vm_log2</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Do NOT join the expression to x / y. */</comment>
    <return>return <expr><call><name>FFH_RES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_LUA</name><argument_list>(<argument>math_deg</argument>)</argument_list></macro> <comment type="block">/* function(x) return x * 57.29577951308232 end */</comment>
<macro><name>LJLIB_LUA</name><argument_list>(<argument>math_rad</argument>)</argument_list></macro> <comment type="block">/* function(x) return x * 0.017453292519943295 end */</comment>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>math_atan2</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_pow</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_fmod</argument>)</argument_list></macro>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>math_ldexp</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_DUALNUM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
  <expr_stmt><expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>math_min</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_minmax IR_MIN</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content> <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>i</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition>;</do>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>math_max</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>math_minmax IR_MAX</argument>)</argument_list></macro>

<macro><name>LJLIB_PUSH</name><argument_list>(<argument><literal type="number">3.14159265358979323846</literal></argument>)</argument_list></macro> <macro><name>LJLIB_SET</name><argument_list>(<argument>pi</argument>)</argument_list></macro>
<macro><name>LJLIB_PUSH</name><argument_list>(<argument><literal type="number">1e310</literal></argument>)</argument_list></macro> <macro><name>LJLIB_SET</name><argument_list>(<argument>huge</argument>)</argument_list></macro>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* This implements a Tausworthe PRNG with period 2^223. Based on:
**   Tables of maximally-equidistributed combined LFSR generators,
**   Pierre L'Ecuyer, 1991, table 3, 1st entry.
** Full-period ME-CF generator with L=64, J=4, k=223, N1=49.
*/</comment>

<comment type="block">/* PRNG state. */</comment>
<struct>struct <name>RandomState</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>gen</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* State of the 4 LFSR generators. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>valid</name></decl>;</decl_stmt>		<comment type="block">/* State is valid. */</comment>
}</block>;</struct>

<comment type="block">/* Union needed for bit-pattern conversion between uint64_t and double. */</comment>
<typedef>typedef <type><union>union <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>u64</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> }</block></union></type> <name>U64double</name>;</typedef>

<comment type="block">/* Update generator i and compute a running xor of all states. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TW223_GEN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>q</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>z = rs-&gt;gen[i]; \
  z = (((z&lt;&lt;q)^z) &gt;&gt; (k-s)) ^ ((z&amp;((uint64_t)(int64_t)-1 &lt;&lt; (64-k)))&lt;&lt;s); \
  r ^= z; rs-&gt;gen[i] = z;</cpp:value></cpp:define>

<comment type="block">/* PRNG step function. Returns a double in the range 1.0 &lt;= d &lt; 2.0. */</comment>
<function><type><name>LJ_NOINLINE</name> <name>uint64_t</name> <name>LJ_FASTCALL</name></type> <name>lj_math_random_step</name><parameter_list>(<parameter><decl><type><name>RandomState</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>TW223_GEN</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">63</literal></argument>, <argument><literal type="number">31</literal></argument>, <argument><literal type="number">18</literal></argument>)</argument_list></macro>
  <macro><name>TW223_GEN</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument><literal type="number">58</literal></argument>, <argument><literal type="number">19</literal></argument>, <argument><literal type="number">28</literal></argument>)</argument_list></macro>
  <macro><name>TW223_GEN</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">55</literal></argument>, <argument><literal type="number">24</literal></argument>,  <argument><literal type="number">7</literal></argument>)</argument_list></macro>
  <macro><name>TW223_GEN</name><argument_list>(<argument><literal type="number">3</literal></argument>, <argument><literal type="number">47</literal></argument>, <argument><literal type="number">21</literal></argument>,  <argument><literal type="number">8</literal></argument>)</argument_list></macro>
  <return>return <expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">000fffff</literal></expr></argument>,<argument><expr><name>ffffffff</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">3ff00000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* PRNG initialization function. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>random_init</name><parameter_list>(<parameter><decl><type><name>RandomState</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0x11090601</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* 64-k[i] as four 8 bit constants. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>U64double</name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>d</name> <operator>*</operator> <literal type="number">3.14159265358979323846</literal> <operator>+</operator> <literal type="number">2.7182818284590452354</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>u64</name></name> <operator>&lt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>u</name><operator>.</operator><name>u64</name></name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Ensure k[i] MSB of gen[i] are non-zero. */</comment>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>gen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>u64</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_math_random_step</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* PRNG extract function. */</comment>
<macro><name>LJLIB_PUSH</name><argument_list>(<argument>top-<literal type="number">2</literal></argument>)</argument_list></macro>  <comment type="block">/* Upvalue holds userdata with RandomState. */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>math_random</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RandomState</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>(</operator><name>RandomState</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>uddata</name><argument_list>(<argument><expr><call><name>udataV</name><argument_list>(<argument><expr><call><name>lj_lib_upvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>U64double</name></type> <name>u</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>rs</name><operator>-&gt;</operator><name>valid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>random_init</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>u</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <call><name>lj_math_random_step</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>d</name></name> <operator>-</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_DUALNUM</name></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>isint</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>r1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>r1</name> <operator>=</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>isint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>numV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lj_vm_floor</name><argument_list>(<argument><expr><name>d</name><operator>*</operator><name>r1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>  <comment type="block">/* d is an int in range [1, r1] */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_DUALNUM</name></expr></cpp:if>
      <decl_stmt><decl><type><name>double</name></type> <name>r2</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>r2</name> <operator>=</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name>isint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>numV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>lj_vm_floor</name><argument_list>(<argument><expr><name>d</name><operator>*</operator><operator>(</operator><name>r2</name><operator>-</operator><name>r1</name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>r1</name></expr>;</expr_stmt>  <comment type="block">/* d is an int in range [r1, r2] */</comment>
    </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_DUALNUM</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>isint</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_num2int</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>  <comment type="block">/* else: d is a double in range [0, 1] */</comment>
  <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* PRNG seed function. */</comment>
<macro><name>LJLIB_PUSH</name><argument_list>(<argument>top-<literal type="number">2</literal></argument>)</argument_list></macro>  <comment type="block">/* Upvalue holds userdata with RandomState. */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>math_randomseed</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>RandomState</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>(</operator><name>RandomState</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>uddata</name><argument_list>(<argument><expr><call><name>udataV</name><argument_list>(<argument><expr><call><name>lj_lib_upvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>random_init</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_math</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>RandomState</name> <modifier>*</modifier></type><name>rs</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rs</name> <operator>=</operator> <operator>(</operator><name>RandomState</name> <operator>*</operator><operator>)</operator><call><name>lua_newuserdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RandomState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Use lazy initialization to save some time on startup. */</comment>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_MATHLIBNAME</name></expr></argument>, <argument><expr><name>math</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
