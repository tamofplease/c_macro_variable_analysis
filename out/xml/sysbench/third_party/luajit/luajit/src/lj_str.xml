<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_str.c"><comment type="block">/*
** String handling.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_str_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_char.h"</cpp:file></cpp:include>

<comment type="block">/* -- String helpers ------------------------------------------------------ */</comment>

<comment type="block">/* Ordered compare of strings. Assumes string data is 4-byte aligned. */</comment>
<function><type><name>int32_t</name> <name>LJ_FASTCALL</name></type> <name>lj_str_cmp</name><parameter_list>(<parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
    <comment type="block">/* Note: innocuous access up to end of string + 3. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>va</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>strdata</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>vb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>strdata</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>va</name> <operator>!=</operator> <name>vb</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_LE</name></expr></cpp:if>
      <expr_stmt><expr><name>va</name> <operator>=</operator> <call><name>lj_bswap</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>vb</name> <operator>=</operator> <call><name>lj_bswap</name><argument_list>(<argument><expr><name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>i</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>va</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal><operator>+</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>vb</name> <operator>&gt;&gt;=</operator> <literal type="number">32</literal><operator>+</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>va</name> <operator>==</operator> <name>vb</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><ternary><condition><expr><name>va</name> <operator>&lt;</operator> <name>vb</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fast string data comparison. Caveat: unaligned access to 1st string! */</comment>
<function><type><specifier>static</specifier> <name>LJ_AINLINE</name> <name>int</name></type> <name>str_fastcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>a</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>LJ_PAGESIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>LJ_PAGESIZE</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>  <comment type="block">/* Note: innocuous access up to end of string + 3. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>lj_getu32</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>b</name><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_LE</name></expr></cpp:if>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal><operator>+</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">3</literal></expr> ?</condition><then> <expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal><operator>+</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition>;</do>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Find fixed string p inside string s. */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_str_find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>slen</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;=</operator> <name>slen</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>plen</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>slen</name> <operator>-=</operator> <name>plen</name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>slen</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>memchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>q</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>q</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>slen</name> <operator>-=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>q</name><operator>-</operator><name>s</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check whether a string has a pattern matching character. */</comment>
<function><type><name>int</name></type> <name>lj_str_haspattern</name><parameter_list>(<parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><name>p</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>lj_char_ispunct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"^$*+?.([%-"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Found a pattern matching char. */</comment>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* No pattern matching chars found. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- String interning ---------------------------------------------------- */</comment>

<comment type="block">/* Resize the string hash table (grow and shrink). */</comment>
<function><type><name>void</name></type> <name>lj_str_resize</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>newmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCRef</name> <modifier>*</modifier></type><name>newhash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>GCSsweepstring</name> <operator>||</operator> <name>newmask</name> <operator>&gt;=</operator> <name>LJ_MAX_STRTAB</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* No resizing during GC traversal or if already too big. */</comment>
  <expr_stmt><expr><name>newhash</name> <operator>=</operator> <call><name>lj_mem_newvec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>newmask</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newhash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>newmask</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GCRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>strmask</name></name></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>~</operator><operator>(</operator><name>MSize</name><operator>)</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* Rehash old table. */</comment>
    <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strhash</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Follow each hash chain and reinsert all strings. */</comment>
      <decl_stmt><decl><type><name>MSize</name></type> <name>h</name> <init>= <expr><call><name>gco2str</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hash</name> <operator>&amp;</operator> <name>newmask</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><call><name>gcnext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="block">/* NOBARRIER: The string table is a GC root. */</comment>
      <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>nextgc</name></name></expr></argument>, <argument><expr><name><name>newhash</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>newhash</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>strhash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>strmask</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strmask</name></name> <operator>=</operator> <name>newmask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strhash</name></name> <operator>=</operator> <name>newhash</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Intern a string and return string object. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier></type><name>lj_str_new</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lenx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>MSize</name><operator>)</operator><name>lenx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lenx</name> <operator>&gt;=</operator> <name>LJ_MAX_STR</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STROV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Compute string hash. Constants taken from lookup3 hash by Bob Jenkins. */</comment>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Caveat: unaligned access! */</comment>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>lj_getu32</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <call><name>lj_getu32</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lj_getu32</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>-=</operator> <call><name>lj_rol</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>+=</operator> <call><name>lj_getu32</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>-=</operator> <call><name>lj_rol</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>strempty</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>a</name> <operator>^=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>-=</operator> <call><name>lj_rol</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>^=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>-=</operator> <call><name>lj_rol</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>-=</operator> <call><name>lj_rol</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check if the string has already been interned. */</comment>
  <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>gcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strhash</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>strmask</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>str</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>LJ_PAGESIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>LJ_PAGESIZE</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>sx</name> <init>= <expr><call><name>gco2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>str_fastcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Resurrect if dead. Can only happen with fixstring() (keywords). */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>flipwhite</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>sx</name></expr>;</return>  <comment type="block">/* Return existing string. */</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>gcnext</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Slow path: end of string is too close to a page boundary. */</comment>
    <while>while <condition>(<expr><name>o</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>sx</name> <init>= <expr><call><name>gco2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>sx</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Resurrect if dead. Can only happen with fixstring() (keywords). */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>flipwhite</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>sx</name></expr>;</return>  <comment type="block">/* Return existing string. */</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>gcnext</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <comment type="block">/* Nope, create a new string. */</comment>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>lj_mem_newt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GCstr</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GCstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>newwhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TSTR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>strdatawr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strdatawr</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><name>len</name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>  <comment type="block">/* Zero-terminate string. */</comment>
  <comment type="block">/* Add it to string hash table. */</comment>
  <expr_stmt><expr><name>h</name> <operator>&amp;=</operator> <name><name>g</name><operator>-&gt;</operator><name>strmask</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nextgc</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>strhash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: The string table is a GC root. */</comment>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strhash</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>strnum</name></name><operator>++</operator> <operator>&gt;</operator> <name><name>g</name><operator>-&gt;</operator><name>strmask</name></name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Allow a 100% load factor. */</comment>
    <expr_stmt><expr><call><name>lj_str_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>strmask</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Grow string table. */</comment>
  <return>return <expr><name>s</name></expr>;</return>  <comment type="block">/* Return newly interned string. */</comment>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_str_free</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strnum</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>sizestring</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
