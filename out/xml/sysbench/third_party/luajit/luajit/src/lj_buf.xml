<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_buf.c"><comment type="block">/*
** Buffer handling.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_buf_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>

<comment type="block">/* -- Buffer management --------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buf_grow</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>osz</name> <init>= <expr><call><name>sbufsz</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>sbuflen</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>nsz</name> <init>= <expr><name>osz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nsz</name> <operator>&lt;</operator> <name>LJ_MIN_SBUF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nsz</name> <operator>=</operator> <name>LJ_MIN_SBUF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>nsz</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nsz</name> <operator>+=</operator> <name>nsz</name></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_realloc</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>osz</name></expr></argument>, <argument><expr><name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>nsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>LJ_NOINLINE</name> <name>char</name> <modifier>*</modifier><name>LJ_FASTCALL</name></type> <name>lj_buf_need2</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&gt;</operator> <call><name>sbufsz</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>sz</name> <operator>&gt;</operator> <name>LJ_MAX_BUF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_mem</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>buf_grow</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LJ_NOINLINE</name> <name>char</name> <modifier>*</modifier><name>LJ_FASTCALL</name></type> <name>lj_buf_more2</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><call><name>sbuflen</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>sz</name> <operator>&gt;</operator> <call><name>sbufleft</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>sz</name> <operator>&gt;</operator> <name>LJ_MAX_BUF</name> <operator>||</operator> <name>len</name> <operator>+</operator> <name>sz</name> <operator>&gt;</operator> <name>LJ_MAX_BUF</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_mem</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>buf_grow</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_buf_shrink</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>osz</name> <init>= <expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><call><name>sbufE</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>osz</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>LJ_MIN_SBUF</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>MSize</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><call><name>sbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lj_mem_realloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>osz</name></expr></argument>, <argument><expr><operator>(</operator><name>osz</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <operator>(</operator><name>osz</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_tmp</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tmpbuf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setsbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lj_buf_need</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Low-level buffer put operations ------------------------------------- */</comment>

<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_buf_putmem</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_putchar</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_putstr</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- High-level buffer put operations ------------------------------------ */</comment>

<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_putstr_reverse</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name>p</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_putstr_lower</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name>p</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>q</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:if>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBuf</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_putstr_upper</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name> <init>= <expr><name>p</name><operator>+</operator><name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>q</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:if>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_buf_putstr_rep</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rep</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tlen</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>rep</name> <operator>*</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>tlen</name> <operator>&gt;</operator> <name>LJ_MAX_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_err_mem</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Optimize a common case. */</comment>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
      <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>--</operator><name>rep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
      <do>do <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>q</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>e</name></expr>)</condition>;</do>
      </block_content>}</block> while <condition>(<expr><operator>--</operator><name>rep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_buf_puttab</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>seplen</name> <init>= <expr><ternary><condition><expr><name>sep</name></expr> ?</condition><then> <expr><name><name>sep</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>lj_tab_getint</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition> <block>{<block_content>
      <label><name>badtype</name>:</label>  <comment type="block">/* Error: bad element type. */</comment>
	<expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Store failing index. */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>seplen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strVdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_MAXBUF_INT</name><operator>+</operator><name>seplen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><call><name>numV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<goto>goto <name>badtype</name>;</goto>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>seplen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>seplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Miscellaneous buffer operations ------------------------------------- */</comment>

<function><type><name>GCstr</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_buf_tostr</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sbuflen</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Concatenate two strings. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier></type><name>lj_buf_cat2str</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len1</name> <init>= <expr><name><name>s1</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>, <decl><type ref="prev"/><name>len2</name> <init>= <expr><name><name>s2</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>lj_buf_tmp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>len1</name> <operator>+</operator> <name>len2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><name>len1</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len1</name> <operator>+</operator> <name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read ULEB128 from buffer. */</comment>
<function><type><name>uint32_t</name> <name>LJ_FASTCALL</name></type> <name>lj_buf_ruleb128</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>p</name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>v</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
    <do>do <block>{<block_content> <expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>sh</name> <operator>+=</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

</unit>
